{
    "name": "auth0",
    "description": "A Pulumi package for creating and managing auth0 cloud resources.",
    "keywords": [
        "pulumi",
        "auth0"
    ],
    "homepage": "https://pulumi.io",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`auth0` Terraform Provider](https://github.com/auth0/terraform-provider-auth0).",
    "repository": "https://github.com/pulumi/pulumi-auth0",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "compatibility": "tfbridge20",
            "namespaces": null,
            "packageReferences": {
                "Pulumi": "3.*"
            }
        },
        "go": {
            "generateExtraInputTypes": true,
            "generateResourceContainerTypes": true,
            "importBasePath": "github.com/pulumi/pulumi-auth0/sdk/v2/go/auth0"
        },
        "nodejs": {
            "compatibility": "tfbridge20",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "disableUnionOutputTypes": true,
            "packageDescription": "A Pulumi package for creating and managing auth0 cloud resources.",
            "packageName": "",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/auth0/terraform-provider-auth0)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-auth0` repo](https://github.com/pulumi/pulumi-auth0/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-auth0` repo](https://github.com/auth0/terraform-provider-auth0/issues).",
            "typescriptVersion": ""
        },
        "python": {
            "compatibility": "tfbridge20",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/auth0/terraform-provider-auth0)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-auth0` repo](https://github.com/pulumi/pulumi-auth0/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-auth0` repo](https://github.com/auth0/terraform-provider-auth0/issues).",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            }
        }
    },
    "config": {
        "variables": {
            "apiToken": {
                "type": "string",
                "description": "Your Auth0 [management api access\ntoken](https://auth0.com/docs/security/tokens/access-tokens/management-api-access-tokens). It can also be sourced from\nthe `AUTH0_API_TOKEN` environment variable. It can be used instead of `client_id` + `client_secret`. If both are\nspecified, `api_token` will be used over `client_id` + `client_secret` fields.\n"
            },
            "audience": {
                "type": "string",
                "description": "Your Auth0 audience when using a custom domain. It can also be sourced from the `AUTH0_AUDIENCE` environment variable.\n"
            },
            "clientId": {
                "type": "string",
                "description": "Your Auth0 client ID. It can also be sourced from the `AUTH0_CLIENT_ID` environment variable.\n"
            },
            "clientSecret": {
                "type": "string",
                "description": "Your Auth0 client secret. It can also be sourced from the `AUTH0_CLIENT_SECRET` environment variable.\n"
            },
            "debug": {
                "type": "boolean",
                "description": "Indicates whether to turn on debug mode.\n",
                "defaultInfo": {
                    "environment": [
                        "AUTH0_DEBUG"
                    ]
                }
            },
            "domain": {
                "type": "string",
                "description": "Your Auth0 domain name. It can also be sourced from the `AUTH0_DOMAIN` environment variable.\n"
            }
        },
        "defaults": [
            "domain"
        ]
    },
    "types": {
        "auth0:index/ActionDependency:ActionDependency": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Dependency name, e.g. `lodash`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "version": {
                    "type": "string",
                    "description": "Dependency version, e.g. `latest` or `4.17.21`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "version"
            ]
        },
        "auth0:index/ActionSecret:ActionSecret": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Secret name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "Secret value.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ]
        },
        "auth0:index/ActionSupportedTriggers:ActionSupportedTriggers": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The trigger ID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "version": {
                    "type": "string",
                    "description": "The trigger version. This regulates which `runtime` versions are supported.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "version"
            ]
        },
        "auth0:index/AttackProtectionBreachedPasswordDetection:AttackProtectionBreachedPasswordDetection": {
            "properties": {
                "adminNotificationFrequencies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "When \"admin_notification\" is enabled, determines how often email notifications are sent. Possible values: `immediately`, `daily`, `weekly`, `monthly`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether breached password detection is active.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "method": {
                    "type": "string",
                    "description": "The subscription level for breached password detection methods. Use \"enhanced\" to enable Credential Guard. Possible values: `standard`, `enhanced`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "preUserRegistration": {
                    "$ref": "#/types/auth0:index/AttackProtectionBreachedPasswordDetectionPreUserRegistration:AttackProtectionBreachedPasswordDetectionPreUserRegistration",
                    "description": "Configuration options that apply before every user registration attempt. Only available on public tenants.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "shields": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Action to take when a breached password is detected.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "adminNotificationFrequencies",
                        "method",
                        "preUserRegistration",
                        "shields"
                    ]
                }
            }
        },
        "auth0:index/AttackProtectionBreachedPasswordDetectionPreUserRegistration:AttackProtectionBreachedPasswordDetectionPreUserRegistration": {
            "properties": {
                "shields": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "shields"
                    ]
                }
            }
        },
        "auth0:index/AttackProtectionBruteForceProtection:AttackProtectionBruteForceProtection": {
            "properties": {
                "allowlists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of trusted IP addresses that will not have attack protection enforced against them.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether brute force attack protections are active.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxAttempts": {
                    "type": "integer",
                    "description": "Maximum number of unsuccessful attempts. Only available on public tenants.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mode": {
                    "type": "string",
                    "description": "Determines whether the IP address is used when counting failed attempts. Possible values: `count_per_identifier_and_ip` or `count_per_identifier`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "shields": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Action to take when a brute force protection threshold is violated. Possible values: `block`, `user_notification`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "allowlists",
                        "maxAttempts",
                        "mode",
                        "shields"
                    ]
                }
            }
        },
        "auth0:index/AttackProtectionSuspiciousIpThrottling:AttackProtectionSuspiciousIpThrottling": {
            "properties": {
                "allowlists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of trusted IP addresses that will not have attack protection enforced against them.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether suspicious IP throttling attack protections are active.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "preLogin": {
                    "$ref": "#/types/auth0:index/AttackProtectionSuspiciousIpThrottlingPreLogin:AttackProtectionSuspiciousIpThrottlingPreLogin",
                    "description": "Configuration options that apply before every login attempt. Only available on public tenants.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "preUserRegistration": {
                    "$ref": "#/types/auth0:index/AttackProtectionSuspiciousIpThrottlingPreUserRegistration:AttackProtectionSuspiciousIpThrottlingPreUserRegistration",
                    "description": "Configuration options that apply before every user registration attempt. Only available on public tenants.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "shields": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Action to take when a suspicious IP throttling threshold is violated. Possible values: `block`, `admin_notification`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "allowlists",
                        "preLogin",
                        "preUserRegistration",
                        "shields"
                    ]
                }
            }
        },
        "auth0:index/AttackProtectionSuspiciousIpThrottlingPreLogin:AttackProtectionSuspiciousIpThrottlingPreLogin": {
            "properties": {
                "maxAttempts": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rate": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "maxAttempts",
                        "rate"
                    ]
                }
            }
        },
        "auth0:index/AttackProtectionSuspiciousIpThrottlingPreUserRegistration:AttackProtectionSuspiciousIpThrottlingPreUserRegistration": {
            "properties": {
                "maxAttempts": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rate": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "maxAttempts",
                        "rate"
                    ]
                }
            }
        },
        "auth0:index/BrandingColors:BrandingColors": {
            "properties": {
                "pageBackground": {
                    "type": "string",
                    "description": "Background color of login pages in hexadecimal.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "primary": {
                    "type": "string",
                    "description": "Primary button background color in hexadecimal.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "pageBackground",
                        "primary"
                    ]
                }
            }
        },
        "auth0:index/BrandingFont:BrandingFont": {
            "properties": {
                "url": {
                    "type": "string",
                    "description": "URL for the custom font.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "url"
                    ]
                }
            }
        },
        "auth0:index/BrandingThemeBorders:BrandingThemeBorders": {
            "properties": {
                "buttonBorderRadius": {
                    "type": "number",
                    "description": "Button border radius. Value needs to be between `1` and `10`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "buttonBorderWeight": {
                    "type": "number",
                    "description": "Button border weight. Value needs to be between `0` and `10`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "buttonsStyle": {
                    "type": "string",
                    "description": "Buttons style. Available options: `pill`, `rounded`, `sharp`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "inputBorderRadius": {
                    "type": "number",
                    "description": "Input border radius. Value needs to be between `0` and `10`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "inputBorderWeight": {
                    "type": "number",
                    "description": "Input border weight. Value needs to be between `0` and `3`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "inputsStyle": {
                    "type": "string",
                    "description": "Inputs style. Available options: `pill`, `rounded`, `sharp`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "showWidgetShadow": {
                    "type": "boolean",
                    "description": "Show widget shadow.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "widgetBorderWeight": {
                    "type": "number",
                    "description": "Widget border weight. Value needs to be between `0` and `10`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "widgetCornerRadius": {
                    "type": "number",
                    "description": "Widget corner radius. Value needs to be between `0` and `50`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "buttonBorderRadius",
                "buttonBorderWeight",
                "buttonsStyle",
                "inputBorderRadius",
                "inputBorderWeight",
                "inputsStyle",
                "showWidgetShadow",
                "widgetBorderWeight",
                "widgetCornerRadius"
            ]
        },
        "auth0:index/BrandingThemeColors:BrandingThemeColors": {
            "properties": {
                "baseFocusColor": {
                    "type": "string",
                    "description": "Base focus color.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "baseHoverColor": {
                    "type": "string",
                    "description": "Base hover color.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "bodyText": {
                    "type": "string",
                    "description": "Body text.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "error": {
                    "type": "string",
                    "description": "Error.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "header": {
                    "type": "string",
                    "description": "Header.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "icons": {
                    "type": "string",
                    "description": "Icons.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "inputBackground": {
                    "type": "string",
                    "description": "Input background.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "inputBorder": {
                    "type": "string",
                    "description": "Input border.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "inputFilledText": {
                    "type": "string",
                    "description": "Input filled text.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "inputLabelsPlaceholders": {
                    "type": "string",
                    "description": "Input labels \u0026 placeholders.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "linksFocusedComponents": {
                    "type": "string",
                    "description": "Links \u0026 focused components.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "primaryButton": {
                    "type": "string",
                    "description": "Primary button.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "primaryButtonLabel": {
                    "type": "string",
                    "description": "Primary button label.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secondaryButtonBorder": {
                    "type": "string",
                    "description": "Secondary button border.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secondaryButtonLabel": {
                    "type": "string",
                    "description": "Secondary button label.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "success": {
                    "type": "string",
                    "description": "Success.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "widgetBackground": {
                    "type": "string",
                    "description": "Widget background.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "widgetBorder": {
                    "type": "string",
                    "description": "Widget border.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "bodyText",
                "error",
                "header",
                "icons",
                "inputBackground",
                "inputBorder",
                "inputFilledText",
                "inputLabelsPlaceholders",
                "linksFocusedComponents",
                "primaryButton",
                "primaryButtonLabel",
                "secondaryButtonBorder",
                "secondaryButtonLabel",
                "success",
                "widgetBackground",
                "widgetBorder"
            ]
        },
        "auth0:index/BrandingThemeFonts:BrandingThemeFonts": {
            "properties": {
                "bodyText": {
                    "$ref": "#/types/auth0:index/BrandingThemeFontsBodyText:BrandingThemeFontsBodyText",
                    "description": "Body text.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "buttonsText": {
                    "$ref": "#/types/auth0:index/BrandingThemeFontsButtonsText:BrandingThemeFontsButtonsText",
                    "description": "Buttons text.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fontUrl": {
                    "type": "string",
                    "description": "Font URL.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "inputLabels": {
                    "$ref": "#/types/auth0:index/BrandingThemeFontsInputLabels:BrandingThemeFontsInputLabels",
                    "description": "Input labels.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "links": {
                    "$ref": "#/types/auth0:index/BrandingThemeFontsLinks:BrandingThemeFontsLinks",
                    "description": "Links.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "linksStyle": {
                    "type": "string",
                    "description": "Links style.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "referenceTextSize": {
                    "type": "number",
                    "description": "Reference text size. Value needs to be between `12` and `24`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subtitle": {
                    "$ref": "#/types/auth0:index/BrandingThemeFontsSubtitle:BrandingThemeFontsSubtitle",
                    "description": "Subtitle.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "title": {
                    "$ref": "#/types/auth0:index/BrandingThemeFontsTitle:BrandingThemeFontsTitle",
                    "description": "Title.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "bodyText",
                "buttonsText",
                "fontUrl",
                "inputLabels",
                "links",
                "linksStyle",
                "referenceTextSize",
                "subtitle",
                "title"
            ]
        },
        "auth0:index/BrandingThemeFontsBodyText:BrandingThemeFontsBodyText": {
            "properties": {
                "bold": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "size": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "bold",
                "size"
            ]
        },
        "auth0:index/BrandingThemeFontsButtonsText:BrandingThemeFontsButtonsText": {
            "properties": {
                "bold": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "size": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "bold",
                "size"
            ]
        },
        "auth0:index/BrandingThemeFontsInputLabels:BrandingThemeFontsInputLabels": {
            "properties": {
                "bold": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "size": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "bold",
                "size"
            ]
        },
        "auth0:index/BrandingThemeFontsLinks:BrandingThemeFontsLinks": {
            "properties": {
                "bold": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "size": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "bold",
                "size"
            ]
        },
        "auth0:index/BrandingThemeFontsSubtitle:BrandingThemeFontsSubtitle": {
            "properties": {
                "bold": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "size": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "bold",
                "size"
            ]
        },
        "auth0:index/BrandingThemeFontsTitle:BrandingThemeFontsTitle": {
            "properties": {
                "bold": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "size": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "bold",
                "size"
            ]
        },
        "auth0:index/BrandingThemePageBackground:BrandingThemePageBackground": {
            "properties": {
                "backgroundColor": {
                    "type": "string",
                    "description": "Background color.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "backgroundImageUrl": {
                    "type": "string",
                    "description": "Background image url.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pageLayout": {
                    "type": "string",
                    "description": "Page layout. Available options: `center`, `left`, `right`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "backgroundColor",
                "backgroundImageUrl",
                "pageLayout"
            ]
        },
        "auth0:index/BrandingThemeWidget:BrandingThemeWidget": {
            "properties": {
                "headerTextAlignment": {
                    "type": "string",
                    "description": "Header text alignment. Available options: `center`, `left`, `right`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logoHeight": {
                    "type": "number",
                    "description": "Logo height. Value needs to be between `1` and `100`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logoPosition": {
                    "type": "string",
                    "description": "Logo position. Available options: `center`, `left`, `right`, `none`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logoUrl": {
                    "type": "string",
                    "description": "Logo url.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "socialButtonsLayout": {
                    "type": "string",
                    "description": "Social buttons layout.  Available options: `bottom`, `top`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "headerTextAlignment",
                "logoHeight",
                "logoPosition",
                "logoUrl",
                "socialButtonsLayout"
            ]
        },
        "auth0:index/BrandingUniversalLogin:BrandingUniversalLogin": {
            "properties": {
                "body": {
                    "type": "string",
                    "description": "The body of login pages.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "body"
                    ]
                }
            }
        },
        "auth0:index/ClientAddons:ClientAddons": {
            "properties": {
                "aws": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "azureBlob": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "azureSb": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "box": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cloudbees": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "concur": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dropbox": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "echosign": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "egnyte": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "firebase": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "layer": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mscrm": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "newrelic": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "office365": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rms": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "salesforce": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "salesforceApi": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "salesforceSandboxApi": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "samlp": {
                    "$ref": "#/types/auth0:index/ClientAddonsSamlp:ClientAddonsSamlp",
                    "description": "Configuration settings for a SAML add-on.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sapApi": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sentry": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sharepoint": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "slack": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "springcm": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "wams": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "wsfed": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "WS-Fed (WIF) addon indicator. Actual configuration is stored in callback and `client_aliases` properties on the client.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zendesk": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zoom": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "auth0:index/ClientAddonsSamlp:ClientAddonsSamlp": {
            "properties": {
                "audience": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "authnContextClassRef": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "binding": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createUpnClaim": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "destination": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "digestAlgorithm": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "includeAttributeNameFormat": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "issuer": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lifetimeInSeconds": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logout": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mapIdentities": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mapUnknownClaimsAsIs": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mappings": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nameIdentifierFormat": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nameIdentifierProbes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "passthroughClaimsWithNoMapping": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "recipient": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "signResponse": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "signatureAlgorithm": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "signingCert": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "typedAttributes": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "auth0:index/ClientJwtConfiguration:ClientJwtConfiguration": {
            "properties": {
                "alg": {
                    "type": "string",
                    "description": "Algorithm used to sign JWTs.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lifetimeInSeconds": {
                    "type": "integer",
                    "description": "Number of seconds during which the JWT will be valid.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scopes": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Permissions (scopes) included in JWTs.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secretEncoded": {
                    "type": "boolean",
                    "description": "Indicates whether the client secret is Base64-encoded.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "lifetimeInSeconds",
                        "secretEncoded"
                    ]
                }
            }
        },
        "auth0:index/ClientMobile:ClientMobile": {
            "properties": {
                "android": {
                    "$ref": "#/types/auth0:index/ClientMobileAndroid:ClientMobileAndroid",
                    "description": "Configuration settings for Android native apps.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ios": {
                    "$ref": "#/types/auth0:index/ClientMobileIos:ClientMobileIos",
                    "description": "Configuration settings for i0S native apps.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "android",
                        "ios"
                    ]
                }
            }
        },
        "auth0:index/ClientMobileAndroid:ClientMobileAndroid": {
            "properties": {
                "appPackageName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sha256CertFingerprints": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "auth0:index/ClientMobileIos:ClientMobileIos": {
            "properties": {
                "appBundleIdentifier": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "teamId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "auth0:index/ClientNativeSocialLogin:ClientNativeSocialLogin": {
            "properties": {
                "apple": {
                    "$ref": "#/types/auth0:index/ClientNativeSocialLoginApple:ClientNativeSocialLoginApple",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "facebook": {
                    "$ref": "#/types/auth0:index/ClientNativeSocialLoginFacebook:ClientNativeSocialLoginFacebook",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "apple",
                        "facebook"
                    ]
                }
            }
        },
        "auth0:index/ClientNativeSocialLoginApple:ClientNativeSocialLoginApple": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "auth0:index/ClientNativeSocialLoginFacebook:ClientNativeSocialLoginFacebook": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "auth0:index/ClientRefreshToken:ClientRefreshToken": {
            "properties": {
                "expirationType": {
                    "type": "string",
                    "description": "Options include `expiring`, `non-expiring`. Whether a refresh token will expire based on an absolute lifetime, after which the token can no longer be used. If rotation is `rotating`, this must be set to `expiring`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "idleTokenLifetime": {
                    "type": "integer",
                    "description": "The time in seconds after which inactive refresh tokens will expire.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "infiniteIdleTokenLifetime": {
                    "type": "boolean",
                    "description": "Whether inactive refresh tokens should remain valid indefinitely.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "infiniteTokenLifetime": {
                    "type": "boolean",
                    "description": "Whether refresh tokens should remain valid indefinitely. If false, `token_lifetime` should also be set.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "leeway": {
                    "type": "integer",
                    "description": "The amount of time in seconds in which a refresh token may be reused without triggering reuse detection.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rotationType": {
                    "type": "string",
                    "description": "Options include `rotating`, `non-rotating`. When `rotating`, exchanging a refresh token will cause a new refresh token to be issued and the existing token will be invalidated. This allows for automatic detection of token reuse if the token is leaked.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tokenLifetime": {
                    "type": "integer",
                    "description": "The absolute lifetime of a refresh token in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "expirationType",
                "rotationType"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "expirationType",
                        "idleTokenLifetime",
                        "infiniteIdleTokenLifetime",
                        "infiniteTokenLifetime",
                        "leeway",
                        "rotationType",
                        "tokenLifetime"
                    ]
                }
            }
        },
        "auth0:index/ConnectionOptions:ConnectionOptions": {
            "properties": {
                "adfsServer": {
                    "type": "string",
                    "description": "ADFS URL where to fetch the metadata source.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "allowedAudiences": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of allowed audiences.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "apiEnableUsers": {
                    "type": "boolean",
                    "description": "Enable API Access to users.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "appId": {
                    "type": "string",
                    "description": "App ID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "authParams": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Query string parameters to be included as part of the generated passwordless email link.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "authorizationEndpoint": {
                    "type": "string",
                    "description": "Authorization endpoint.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "bruteForceProtection": {
                    "type": "boolean",
                    "description": "Indicates whether to enable brute force protection, which will limit the number of signups and failed logins from a suspicious IP address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientId": {
                    "type": "string",
                    "description": "The strategy's client ID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientSecret": {
                    "type": "string",
                    "description": "The strategy's client secret.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "communityBaseUrl": {
                    "type": "string",
                    "description": "Salesforce community base URL.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "configuration": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "A case-sensitive map of key value pairs used as configuration variables for the `custom_script`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "customScripts": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of scripts used to integrate with a custom database.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "debug": {
                    "type": "boolean",
                    "description": "When enabled, additional debug information will be generated.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "digestAlgorithm": {
                    "type": "string",
                    "description": "Sign Request Algorithm Digest.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "disableCache": {
                    "type": "boolean",
                    "description": "Indicates whether to disable the cache or not.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "disableSignOut": {
                    "type": "boolean",
                    "description": "When enabled, will disable sign out.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "disableSignup": {
                    "type": "boolean",
                    "description": "Indicates whether to allow user sign-ups to your application.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "discoveryUrl": {
                    "type": "string",
                    "description": "OpenID discovery URL, e.g. `https://auth.example.com/.well-known/openid-configuration`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "domain": {
                    "type": "string",
                    "description": "Domain name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "domainAliases": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of the domains that can be authenticated using the identity provider. Only needed for Identifier First authentication flows.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableScriptContext": {
                    "type": "boolean",
                    "description": "Set to `true` to inject context into custom DB scripts (warning: cannot be disabled once enabled).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabledDatabaseCustomization": {
                    "type": "boolean",
                    "description": "Set to `true` to use a legacy user store.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "entityId": {
                    "type": "string",
                    "description": "Custom Entity ID for the connection.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fedMetadataXml": {
                    "type": "string",
                    "description": "Federation Metadata for the ADFS connection.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fieldsMap": {
                    "type": "string",
                    "description": "If you're configuring a SAML enterprise connection for a non-standard PingFederate Server, you must update the attribute mappings.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "forwardRequestInfo": {
                    "type": "boolean",
                    "description": "Specifies whether or not request info should be forwarded to sms gateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "from": {
                    "type": "string",
                    "description": "Address to use as the sender.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "gatewayAuthentication": {
                    "$ref": "#/types/auth0:index/ConnectionOptionsGatewayAuthentication:ConnectionOptionsGatewayAuthentication",
                    "description": "Defines the parameters used to generate the auth token for the custom gateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "gatewayUrl": {
                    "type": "string",
                    "description": "Defines a custom sms gateway to use instead of Twilio.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "iconUrl": {
                    "type": "string",
                    "description": "Icon URL.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "identityApi": {
                    "type": "string",
                    "description": "Azure AD Identity API. Available options are: `microsoft-identity-platform-v2.0` or `azure-active-directory-v1.0`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "idpInitiated": {
                    "$ref": "#/types/auth0:index/ConnectionOptionsIdpInitiated:ConnectionOptionsIdpInitiated",
                    "description": "Configuration options for IDP Initiated Authentication. This is an object with the properties: `client_id`, `client_protocol`, and `client_authorize_query`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "importMode": {
                    "type": "boolean",
                    "description": "Indicates whether you have a legacy user store and want to gradually migrate those users to the Auth0 user store.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ips": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of IPs.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "issuer": {
                    "type": "string",
                    "description": "Issuer URL, e.g. `https://auth.example.com`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "jwksUri": {
                    "type": "string",
                    "description": "JWKS URI.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "keyId": {
                    "type": "string",
                    "description": "Apple Key ID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxGroupsToRetrieve": {
                    "type": "string",
                    "description": "Maximum number of groups to retrieve.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "messagingServiceSid": {
                    "type": "string",
                    "description": "SID for Copilot. Used when SMS Source is Copilot.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metadataUrl": {
                    "type": "string",
                    "description": "The URL of the SAML metadata document.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metadataXml": {
                    "type": "string",
                    "description": "The XML content for the SAML metadata document.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mfa": {
                    "$ref": "#/types/auth0:index/ConnectionOptionsMfa:ConnectionOptionsMfa",
                    "description": "Configuration options for multifactor authentication.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The public name of the email or SMS Connection. In most cases this is the same name as the connection name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nonPersistentAttrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "If there are user fields that should not be stored in Auth0 databases due to privacy reasons, you can add them to the DenyList here.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "passwordComplexityOptions": {
                    "$ref": "#/types/auth0:index/ConnectionOptionsPasswordComplexityOptions:ConnectionOptionsPasswordComplexityOptions",
                    "description": "Configuration settings for password complexity.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "passwordDictionary": {
                    "$ref": "#/types/auth0:index/ConnectionOptionsPasswordDictionary:ConnectionOptionsPasswordDictionary",
                    "description": "Configuration settings for the password dictionary check, which does not allow passwords that are part of the password dictionary.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "passwordHistories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/auth0:index/ConnectionOptionsPasswordHistory:ConnectionOptionsPasswordHistory"
                    },
                    "description": "Configuration settings for the password history that is maintained for each user to prevent the reuse of passwords.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "passwordNoPersonalInfo": {
                    "$ref": "#/types/auth0:index/ConnectionOptionsPasswordNoPersonalInfo:ConnectionOptionsPasswordNoPersonalInfo",
                    "description": "Configuration settings for the password personal info check, which does not allow passwords that contain any part of the user's personal data, including user's `name`, `username`, `nickname`, `user_metadata.name`, `user_metadata.first`, `user_metadata.last`, user's `email`, or first part of the user's `email`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "passwordPolicy": {
                    "type": "string",
                    "description": "Indicates level of password strength to enforce during authentication. A strong password policy will make it difficult, if not improbable, for someone to guess a password through either manual or automated means. Options include `none`, `low`, `fair`, `good`, `excellent`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pkceEnabled": {
                    "type": "boolean",
                    "description": "Enables Proof Key for Code Exchange (PKCE) functionality for OAuth2 connections.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocolBinding": {
                    "type": "string",
                    "description": "The SAML Response Binding: how the SAML token is received by Auth0 from the IdP.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "provider": {
                    "type": "string",
                    "description": "Defines the custom `sms_gateway` provider.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "requestTemplate": {
                    "type": "string",
                    "description": "Template that formats the SAML request.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "requiresUsername": {
                    "type": "boolean",
                    "description": "Indicates whether the user is required to provide a username in addition to an email address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Permissions to grant to the connection. Within the Auth0 dashboard these appear under the \"Attributes\" and \"Extended Attributes\" sections. Some examples: `basic_profile`, `ext_profile`, `ext_nested_groups`, etc.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scripts": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of scripts used for an OAuth connection. Only accepts a `fetchUserProfile` script.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "setUserRootAttributes": {
                    "type": "string",
                    "description": "Determines whether the 'name', 'given*name', 'family*name', 'nickname', and 'picture' attributes can be independently updated when using an external IdP. Possible values are 'on*each*login' (default value, it configures the connection to automatically update the root attributes from the external IdP with each user login. When this setting is used, root attributes cannot be independently updated), 'on*first*login' (configures the connection to only set the root attributes on first login, allowing them to be independently updated thereafter).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "shouldTrustEmailVerifiedConnection": {
                    "type": "string",
                    "description": "Choose how Auth0 sets the email_verified field in the user profile.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "signInEndpoint": {
                    "type": "string",
                    "description": "SAML single login URL for the connection.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "signOutEndpoint": {
                    "type": "string",
                    "description": "SAML single logout URL for the connection.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "signSamlRequest": {
                    "type": "boolean",
                    "description": "When enabled, the SAML authentication request will be signed.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "signatureAlgorithm": {
                    "type": "string",
                    "description": "Sign Request Algorithm.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "signingCert": {
                    "type": "string",
                    "description": "X.509 signing certificate (encoded in PEM or CER) you retrieved from the IdP, Base64-encoded.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "signingKey": {
                    "$ref": "#/types/auth0:index/ConnectionOptionsSigningKey:ConnectionOptionsSigningKey",
                    "description": "The key used to sign requests in the connection. Uses the `key` and `cert` properties to provide the private key and certificate respectively.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "strategyVersion": {
                    "type": "integer",
                    "description": "Version 1 is deprecated, use version 2.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subject": {
                    "type": "string",
                    "description": "Subject line of the email.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "syntax": {
                    "type": "string",
                    "description": "Syntax of the template body.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "teamId": {
                    "type": "string",
                    "description": "Apple Team ID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "template": {
                    "type": "string",
                    "description": "Body of the template.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tenantDomain": {
                    "type": "string",
                    "description": "Tenant domain name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tokenEndpoint": {
                    "type": "string",
                    "description": "Token endpoint.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "totp": {
                    "$ref": "#/types/auth0:index/ConnectionOptionsTotp:ConnectionOptionsTotp",
                    "description": "Configuration options for one-time passwords.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "twilioSid": {
                    "type": "string",
                    "description": "SID for your Twilio account.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "twilioToken": {
                    "type": "string",
                    "description": "AuthToken for your Twilio account.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "type": {
                    "type": "string",
                    "description": "Value can be `back_channel` or `front_channel`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "upstreamParams": {
                    "type": "string",
                    "description": "You can pass provider-specific parameters to an identity provider during authentication. The values can either be static per connection or dynamic per user.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "useCertAuth": {
                    "type": "boolean",
                    "description": "Indicates whether to use cert auth or not.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "useKerberos": {
                    "type": "boolean",
                    "description": "Indicates whether to use Kerberos or not.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "useWsfed": {
                    "type": "boolean",
                    "description": "Whether to use WS-Fed.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userIdAttribute": {
                    "type": "string",
                    "description": "Attribute in the SAML token that will be mapped to the user_id property in Auth0.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userinfoEndpoint": {
                    "type": "string",
                    "description": "User info endpoint.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "validation": {
                    "$ref": "#/types/auth0:index/ConnectionOptionsValidation:ConnectionOptionsValidation",
                    "description": "Validation of the minimum and maximum values allowed for a user to have as username.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "waadCommonEndpoint": {
                    "type": "boolean",
                    "description": "Indicates whether to use the common endpoint rather than the default endpoint. Typically enabled if you're using this for a multi-tenant application in Azure AD.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "waadProtocol": {
                    "type": "string",
                    "description": "Protocol to use.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "allowedAudiences",
                        "authorizationEndpoint",
                        "domainAliases",
                        "ips",
                        "issuer",
                        "jwksUri",
                        "mfa",
                        "nonPersistentAttrs",
                        "passwordComplexityOptions",
                        "passwordDictionary",
                        "passwordHistories",
                        "passwordNoPersonalInfo",
                        "passwordPolicy",
                        "scopes",
                        "setUserRootAttributes",
                        "strategyVersion",
                        "tokenEndpoint",
                        "userinfoEndpoint"
                    ]
                }
            }
        },
        "auth0:index/ConnectionOptionsGatewayAuthentication:ConnectionOptionsGatewayAuthentication": {
            "properties": {
                "audience": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "method": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secret": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "secretBase64Encoded": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subject": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "auth0:index/ConnectionOptionsIdpInitiated:ConnectionOptionsIdpInitiated": {
            "properties": {
                "clientAuthorizeQuery": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientProtocol": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "auth0:index/ConnectionOptionsMfa:ConnectionOptionsMfa": {
            "properties": {
                "active": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "returnEnrollSettings": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "auth0:index/ConnectionOptionsPasswordComplexityOptions:ConnectionOptionsPasswordComplexityOptions": {
            "properties": {
                "minLength": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "auth0:index/ConnectionOptionsPasswordDictionary:ConnectionOptionsPasswordDictionary": {
            "properties": {
                "dictionaries": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enable": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "auth0:index/ConnectionOptionsPasswordHistory:ConnectionOptionsPasswordHistory": {
            "properties": {
                "enable": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "size": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "auth0:index/ConnectionOptionsPasswordNoPersonalInfo:ConnectionOptionsPasswordNoPersonalInfo": {
            "properties": {
                "enable": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "auth0:index/ConnectionOptionsSigningKey:ConnectionOptionsSigningKey": {
            "properties": {
                "cert": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "cert",
                "key"
            ]
        },
        "auth0:index/ConnectionOptionsTotp:ConnectionOptionsTotp": {
            "properties": {
                "length": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeStep": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "auth0:index/ConnectionOptionsValidation:ConnectionOptionsValidation": {
            "properties": {
                "username": {
                    "$ref": "#/types/auth0:index/ConnectionOptionsValidationUsername:ConnectionOptionsValidationUsername",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "auth0:index/ConnectionOptionsValidationUsername:ConnectionOptionsValidationUsername": {
            "properties": {
                "max": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "min": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "auth0:index/CustomDomainVerification:CustomDomainVerification": {
            "properties": {
                "methods": {
                    "type": "array",
                    "items": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "methods"
                    ]
                }
            }
        },
        "auth0:index/EmailCredentials:EmailCredentials": {
            "properties": {
                "accessKeyId": {
                    "type": "string",
                    "description": "AWS Access Key ID. Used only for AWS.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "apiKey": {
                    "type": "string",
                    "description": "API Key for your email service. Will always be encrypted in our database.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "apiUser": {
                    "type": "string",
                    "description": "API User for your email service.\n",
                    "deprecationMessage": "This field is not accepted by the API any more so it will be removed soon.",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "domain": {
                    "type": "string",
                    "description": "Domain name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "region": {
                    "type": "string",
                    "description": "Default region. Used only for AWS, Mailgun, and SparkPost.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secretAccessKey": {
                    "type": "string",
                    "description": "AWS Secret Key. Will always be encrypted in our database. Used only for AWS.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "smtpHost": {
                    "type": "string",
                    "description": "Hostname or IP address of your SMTP server. Used only for SMTP.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "smtpPass": {
                    "type": "string",
                    "description": "SMTP password. Used only for SMTP.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "smtpPort": {
                    "type": "integer",
                    "description": "Port used by your SMTP server. Please avoid using port 25 if possible because many providers have limitations on this port. Used only for SMTP.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "smtpUser": {
                    "type": "string",
                    "description": "SMTP username. Used only for SMTP.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "auth0:index/EmailSettings:EmailSettings": {
            "properties": {
                "headers": {
                    "$ref": "#/types/auth0:index/EmailSettingsHeaders:EmailSettingsHeaders",
                    "description": "Headers settings for the `smtp` email provider.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "message": {
                    "$ref": "#/types/auth0:index/EmailSettingsMessage:EmailSettingsMessage",
                    "description": "Message settings for the `mandrill` or `ses` email provider.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "auth0:index/EmailSettingsHeaders:EmailSettingsHeaders": {
            "properties": {
                "xMcViewContentLink": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "xSesConfigurationSet": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "auth0:index/EmailSettingsMessage:EmailSettingsMessage": {
            "properties": {
                "configurationSetName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "viewContentLink": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "auth0:index/GlobalClientAddons:GlobalClientAddons": {
            "properties": {
                "aws": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "azureBlob": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "azureSb": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "box": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cloudbees": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "concur": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dropbox": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "echosign": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "egnyte": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "firebase": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "layer": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mscrm": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "newrelic": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "office365": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rms": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "salesforce": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "salesforceApi": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "salesforceSandboxApi": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "samlp": {
                    "$ref": "#/types/auth0:index/GlobalClientAddonsSamlp:GlobalClientAddonsSamlp",
                    "description": "Configuration settings for a SAML add-on.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sapApi": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sentry": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sharepoint": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "slack": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "springcm": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "wams": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "wsfed": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "WS-Fed (WIF) addon indicator. Actual configuration is stored in callback and `client_aliases` properties on the client.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zendesk": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zoom": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "auth0:index/GlobalClientAddonsSamlp:GlobalClientAddonsSamlp": {
            "properties": {
                "audience": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "authnContextClassRef": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "binding": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createUpnClaim": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "destination": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "digestAlgorithm": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "includeAttributeNameFormat": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "issuer": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lifetimeInSeconds": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logout": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mapIdentities": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mapUnknownClaimsAsIs": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mappings": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nameIdentifierFormat": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nameIdentifierProbes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "passthroughClaimsWithNoMapping": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "recipient": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "signResponse": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "signatureAlgorithm": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "signingCert": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "typedAttributes": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "auth0:index/GlobalClientJwtConfiguration:GlobalClientJwtConfiguration": {
            "properties": {
                "alg": {
                    "type": "string",
                    "description": "Algorithm used to sign JWTs.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lifetimeInSeconds": {
                    "type": "integer",
                    "description": "Number of seconds during which the JWT will be valid.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scopes": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Permissions (scopes) included in JWTs.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secretEncoded": {
                    "type": "boolean",
                    "description": "Indicates whether the client secret is Base64-encoded.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "lifetimeInSeconds",
                        "secretEncoded"
                    ]
                }
            }
        },
        "auth0:index/GlobalClientMobile:GlobalClientMobile": {
            "properties": {
                "android": {
                    "$ref": "#/types/auth0:index/GlobalClientMobileAndroid:GlobalClientMobileAndroid",
                    "description": "Configuration settings for Android native apps.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ios": {
                    "$ref": "#/types/auth0:index/GlobalClientMobileIos:GlobalClientMobileIos",
                    "description": "Configuration settings for i0S native apps.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "android",
                        "ios"
                    ]
                }
            }
        },
        "auth0:index/GlobalClientMobileAndroid:GlobalClientMobileAndroid": {
            "properties": {
                "appPackageName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sha256CertFingerprints": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "auth0:index/GlobalClientMobileIos:GlobalClientMobileIos": {
            "properties": {
                "appBundleIdentifier": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "teamId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "auth0:index/GlobalClientNativeSocialLogin:GlobalClientNativeSocialLogin": {
            "properties": {
                "apple": {
                    "$ref": "#/types/auth0:index/GlobalClientNativeSocialLoginApple:GlobalClientNativeSocialLoginApple",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "facebook": {
                    "$ref": "#/types/auth0:index/GlobalClientNativeSocialLoginFacebook:GlobalClientNativeSocialLoginFacebook",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "apple",
                        "facebook"
                    ]
                }
            }
        },
        "auth0:index/GlobalClientNativeSocialLoginApple:GlobalClientNativeSocialLoginApple": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "auth0:index/GlobalClientNativeSocialLoginFacebook:GlobalClientNativeSocialLoginFacebook": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "auth0:index/GlobalClientRefreshToken:GlobalClientRefreshToken": {
            "properties": {
                "expirationType": {
                    "type": "string",
                    "description": "Options include `expiring`, `non-expiring`. Whether a refresh token will expire based on an absolute lifetime, after which the token can no longer be used. If rotation is `rotating`, this must be set to `expiring`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "idleTokenLifetime": {
                    "type": "integer",
                    "description": "The time in seconds after which inactive refresh tokens will expire.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "infiniteIdleTokenLifetime": {
                    "type": "boolean",
                    "description": "Whether inactive refresh tokens should remain valid indefinitely.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "infiniteTokenLifetime": {
                    "type": "boolean",
                    "description": "Whether refresh tokens should remain valid indefinitely. If false, `token_lifetime` should also be set.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "leeway": {
                    "type": "integer",
                    "description": "The amount of time in seconds in which a refresh token may be reused without triggering reuse detection.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rotationType": {
                    "type": "string",
                    "description": "Options include `rotating`, `non-rotating`. When `rotating`, exchanging a refresh token will cause a new refresh token to be issued and the existing token will be invalidated. This allows for automatic detection of token reuse if the token is leaked.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tokenLifetime": {
                    "type": "integer",
                    "description": "The absolute lifetime of a refresh token in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "expirationType",
                "rotationType"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "expirationType",
                        "idleTokenLifetime",
                        "infiniteIdleTokenLifetime",
                        "infiniteTokenLifetime",
                        "leeway",
                        "rotationType",
                        "tokenLifetime"
                    ]
                }
            }
        },
        "auth0:index/GuardianDuo:GuardianDuo": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Indicates whether Duo MFA is enabled.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hostname": {
                    "type": "string",
                    "description": "Duo API Hostname, see the Duo documentation for more details on Duo setup.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "integrationKey": {
                    "type": "string",
                    "description": "Duo client ID, see the Duo documentation for more details on Duo setup.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secretKey": {
                    "type": "string",
                    "description": "Duo client secret, see the Duo documentation for more details on Duo setup.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "auth0:index/GuardianPhone:GuardianPhone": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Indicates whether Phone MFA is enabled.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "messageTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Message types to use, array of `sms` and/or `voice`. Adding both to the array should enable the user to choose.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "options": {
                    "$ref": "#/types/auth0:index/GuardianPhoneOptions:GuardianPhoneOptions",
                    "description": "Options for the various providers.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "provider": {
                    "type": "string",
                    "description": "Provider to use, one of `auth0`, `twilio` or `phone-message-hook`. Selecting `phone-message-hook` will require a Phone Message Action to be created before. [Learn how](https://auth0.com/docs/customize/actions/flows-and-triggers/send-phone-message-flow).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled",
                        "options"
                    ]
                }
            }
        },
        "auth0:index/GuardianPhoneOptions:GuardianPhoneOptions": {
            "properties": {
                "authToken": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "enrollmentMessage": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "from": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "messagingServiceSid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "verificationMessage": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "auth0:index/GuardianPush:GuardianPush": {
            "properties": {
                "amazonSns": {
                    "$ref": "#/types/auth0:index/GuardianPushAmazonSns:GuardianPushAmazonSns",
                    "description": "Configuration for Amazon SNS.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "customApp": {
                    "$ref": "#/types/auth0:index/GuardianPushCustomApp:GuardianPushCustomApp",
                    "description": "Configuration for the Guardian Custom App.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Indicates whether Push MFA is enabled.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "provider": {
                    "type": "string",
                    "description": "Provider to use, one of `guardian`, `sns`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "amazonSns",
                        "customApp",
                        "enabled"
                    ]
                }
            }
        },
        "auth0:index/GuardianPushAmazonSns:GuardianPushAmazonSns": {
            "properties": {
                "awsAccessKeyId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "awsRegion": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "awsSecretAccessKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "snsApnsPlatformApplicationArn": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "snsGcmPlatformApplicationArn": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "awsAccessKeyId",
                "awsRegion",
                "awsSecretAccessKey",
                "snsApnsPlatformApplicationArn",
                "snsGcmPlatformApplicationArn"
            ]
        },
        "auth0:index/GuardianPushCustomApp:GuardianPushCustomApp": {
            "properties": {
                "appName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "appleAppLink": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "googleAppLink": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "auth0:index/GuardianWebauthnPlatform:GuardianWebauthnPlatform": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Indicates whether WebAuthn with FIDO Device Biometrics MFA is enabled.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "overrideRelyingParty": {
                    "type": "boolean",
                    "description": "The Relying Party is the domain for which the WebAuthn keys will be issued, set to `true` if you are customizing the identifier.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "relyingPartyIdentifier": {
                    "type": "string",
                    "description": "The Relying Party should be a suffix of the custom domain.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled",
                        "overrideRelyingParty",
                        "relyingPartyIdentifier"
                    ]
                }
            }
        },
        "auth0:index/GuardianWebauthnRoaming:GuardianWebauthnRoaming": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Indicates whether WebAuthn with FIDO Security Keys MFA is enabled.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "overrideRelyingParty": {
                    "type": "boolean",
                    "description": "The Relying Party is the domain for which the WebAuthn keys will be issued, set to `true` if you are customizing the identifier.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "relyingPartyIdentifier": {
                    "type": "string",
                    "description": "The Relying Party should be a suffix of the custom domain.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userVerification": {
                    "type": "string",
                    "description": "User verification, one of `discouraged`, `preferred` or `required`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled",
                        "overrideRelyingParty",
                        "relyingPartyIdentifier",
                        "userVerification"
                    ]
                }
            }
        },
        "auth0:index/LogStreamSink:LogStreamSink": {
            "properties": {
                "awsAccountId": {
                    "type": "string",
                    "description": "The AWS Account ID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "awsPartnerEventSource": {
                    "type": "string",
                    "description": "Name of the Partner Event Source to be used with AWS. Generally generated by Auth0 and passed to AWS, so this should be an output attribute.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "awsRegion": {
                    "type": "string",
                    "description": "The AWS Region, e.g. \"us-east-2\").\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "azurePartnerTopic": {
                    "type": "string",
                    "description": "Name of the Partner Topic to be used with Azure. Generally should not be specified.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "azureRegion": {
                    "type": "string",
                    "description": "The Azure region code, e.g. \"ne\")\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "azureResourceGroup": {
                    "type": "string",
                    "description": "The Azure EventGrid resource group which allows you to manage all Azure assets within one subscription.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "azureSubscriptionId": {
                    "type": "string",
                    "description": "The unique alphanumeric string that identifies your Azure subscription.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "datadogApiKey": {
                    "type": "string",
                    "description": "The Datadog API key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "datadogRegion": {
                    "type": "string",
                    "description": "The Datadog region. Options are [\"us\", \"eu\", \"us3\", \"us5\"].\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "httpAuthorization": {
                    "type": "string",
                    "description": "Sent in the HTTP \"Authorization\" header with each request.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "httpContentFormat": {
                    "type": "string",
                    "description": "The format of data sent over HTTP. Options are \"JSONLINES\", \"JSONARRAY\" or \"JSONOBJECT\"\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "httpContentType": {
                    "type": "string",
                    "description": "The \"Content-Type\" header to send over HTTP. Common value is \"application/json\".\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "httpCustomHeaders": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "description": "Additional HTTP headers to be included as part of the HTTP request.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "httpEndpoint": {
                    "type": "string",
                    "description": "The HTTP endpoint to send streaming logs.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mixpanelProjectId": {
                    "type": "string",
                    "description": "The Mixpanel project ID, found on the Project Settings page.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mixpanelRegion": {
                    "type": "string",
                    "description": "The Mixpanel region. Options are [\"us\", \"eu\"]. EU is required for customers with EU data residency requirements.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mixpanelServiceAccountPassword": {
                    "type": "string",
                    "description": "The Mixpanel Service Account password.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "mixpanelServiceAccountUsername": {
                    "type": "string",
                    "description": "The Mixpanel Service Account username. Services Accounts can be created in the Project Settings page.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "segmentWriteKey": {
                    "type": "string",
                    "description": "The [Segment Write Key](https://segment.com/docs/connections/find-writekey/).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "splunkDomain": {
                    "type": "string",
                    "description": "The Splunk domain name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "splunkPort": {
                    "type": "string",
                    "description": "The Splunk port.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "splunkSecure": {
                    "type": "boolean",
                    "description": "This toggle should be turned off when using self-signed certificates.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "splunkToken": {
                    "type": "string",
                    "description": "The Splunk access token.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "sumoSourceAddress": {
                    "type": "string",
                    "description": "Generated URL for your defined HTTP source in Sumo Logic for collecting streaming data from Auth0.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "awsPartnerEventSource",
                        "azurePartnerTopic"
                    ]
                }
            }
        },
        "auth0:index/OrganizationBranding:OrganizationBranding": {
            "properties": {
                "colors": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Color scheme used to customize the login pages.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logoUrl": {
                    "type": "string",
                    "description": "URL of logo to display on login page.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "auth0:index/ResourceServerScope:ResourceServerScope": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the permission (scope).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "Name of the permission (scope). Examples include `read:appointments` or `delete:appointments`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "value"
            ]
        },
        "auth0:index/RolePermission:RolePermission": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the permission (scope).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceServerIdentifier": {
                    "type": "string",
                    "description": "Unique identifier for the resource server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "resourceServerIdentifier"
            ]
        },
        "auth0:index/TenantChangePassword:TenantChangePassword": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Indicates whether to use the custom change password page.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "html": {
                    "type": "string",
                    "description": "HTML format with supported Liquid syntax. Customized content of the change password page.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "html"
            ]
        },
        "auth0:index/TenantErrorPage:TenantErrorPage": {
            "properties": {
                "html": {
                    "type": "string",
                    "description": "HTML format with supported Liquid syntax. Customized content of the error page.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "showLogLink": {
                    "type": "boolean",
                    "description": "Indicates whether to show the link to logs as part of the default error page.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "description": "URL to redirect to when an error occurs rather than showing the default error page.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "html",
                "showLogLink",
                "url"
            ]
        },
        "auth0:index/TenantFlags:TenantFlags": {
            "properties": {
                "allowLegacyDelegationGrantTypes": {
                    "type": "boolean",
                    "description": "Whether the legacy delegation endpoint will be enabled for your account (true) or not available (false).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "allowLegacyRoGrantTypes": {
                    "type": "boolean",
                    "description": "Whether the legacy `auth/ro` endpoint (used with resource owner password and passwordless features) will be enabled for your account (true) or not available (false).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "allowLegacyTokeninfoEndpoint": {
                    "type": "boolean",
                    "description": "If enabled, customers can use Tokeninfo Endpoint, otherwise they can not use it.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dashboardInsightsView": {
                    "type": "boolean",
                    "description": "Enables new insights activity page view.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dashboardLogStreamsNext": {
                    "type": "boolean",
                    "description": "Enables beta access to log streaming changes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "disableClickjackProtectionHeaders": {
                    "type": "boolean",
                    "description": "Indicates whether classic Universal Login prompts include additional security headers to prevent clickjacking.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "disableFieldsMapFix": {
                    "type": "boolean",
                    "description": "Disables SAML fields map fix for bad mappings with repeated attributes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "disableManagementApiSmsObfuscation": {
                    "type": "boolean",
                    "description": "If true, SMS phone numbers will not be obfuscated in Management API GET calls.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableAdfsWaadEmailVerification": {
                    "type": "boolean",
                    "description": "If enabled, users will be presented with an email verification prompt during their first login when using Azure AD or ADFS connections.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableApisSection": {
                    "type": "boolean",
                    "description": "Indicates whether the APIs section is enabled for the tenant.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableClientConnections": {
                    "type": "boolean",
                    "description": "Indicates whether all current connections should be enabled when a new client is created.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableCustomDomainInEmails": {
                    "type": "boolean",
                    "description": "Indicates whether the tenant allows custom domains in emails.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableDynamicClientRegistration": {
                    "type": "boolean",
                    "description": "Indicates whether the tenant allows dynamic client registration.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableIdtokenApi2": {
                    "type": "boolean",
                    "description": "Whether ID tokens can be used to authorize some types of requests to API v2 (true) or not (false).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableLegacyLogsSearchV2": {
                    "type": "boolean",
                    "description": "Indicates whether to use the older v2 legacy logs search.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableLegacyProfile": {
                    "type": "boolean",
                    "description": "Whether ID tokens and the userinfo endpoint includes a complete user profile (true) or only OpenID Connect claims (false).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enablePipeline2": {
                    "type": "boolean",
                    "description": "Indicates whether advanced API Authorization scenarios are enabled.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enablePublicSignupUserExistsError": {
                    "type": "boolean",
                    "description": "Indicates whether the public sign up process shows a `user_exists` error if the user already exists.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "noDiscloseEnterpriseConnections": {
                    "type": "boolean",
                    "description": "Do not Publish Enterprise Connections Information with IdP domains on the lock configuration file.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "revokeRefreshTokenGrant": {
                    "type": "boolean",
                    "description": "Delete underlying grant when a refresh token is revoked via the Authentication API.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "universalLogin": {
                    "type": "boolean",
                    "description": "Indicates whether the tenant uses Universal Login.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "useScopeDescriptionsForConsent": {
                    "type": "boolean",
                    "description": "Indicates whether to use scope descriptions for consent.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "allowLegacyDelegationGrantTypes",
                        "allowLegacyRoGrantTypes",
                        "allowLegacyTokeninfoEndpoint",
                        "dashboardInsightsView",
                        "dashboardLogStreamsNext",
                        "disableClickjackProtectionHeaders",
                        "disableFieldsMapFix",
                        "disableManagementApiSmsObfuscation",
                        "enableAdfsWaadEmailVerification",
                        "enableApisSection",
                        "enableClientConnections",
                        "enableCustomDomainInEmails",
                        "enableDynamicClientRegistration",
                        "enableIdtokenApi2",
                        "enableLegacyLogsSearchV2",
                        "enableLegacyProfile",
                        "enablePipeline2",
                        "enablePublicSignupUserExistsError",
                        "noDiscloseEnterpriseConnections",
                        "revokeRefreshTokenGrant",
                        "universalLogin",
                        "useScopeDescriptionsForConsent"
                    ]
                }
            }
        },
        "auth0:index/TenantGuardianMfaPage:TenantGuardianMfaPage": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Indicates whether to use the custom Guardian page.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "html": {
                    "type": "string",
                    "description": "HTML format with supported Liquid syntax. Customized content of the Guardian page.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "html"
            ]
        },
        "auth0:index/TenantSessionCookie:TenantSessionCookie": {
            "properties": {
                "mode": {
                    "type": "string",
                    "description": "Behavior of tenant session cookie. Accepts either \"persistent\" or \"non-persistent\".\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "auth0:index/TenantUniversalLogin:TenantUniversalLogin": {
            "properties": {
                "colors": {
                    "$ref": "#/types/auth0:index/TenantUniversalLoginColors:TenantUniversalLoginColors",
                    "description": "Configuration settings for Universal Login colors.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "auth0:index/TenantUniversalLoginColors:TenantUniversalLoginColors": {
            "properties": {
                "pageBackground": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "primary": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "pageBackground",
                        "primary"
                    ]
                }
            }
        },
        "auth0:index/TriggerBindingAction:TriggerBindingAction": {
            "properties": {
                "displayName": {
                    "type": "string",
                    "description": "The name of an action.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "Action ID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "displayName",
                "id"
            ]
        },
        "auth0:index/getClientAddon:getClientAddon": {
            "properties": {
                "aws": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "azureBlob": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "azureSb": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "box": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cloudbees": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "concur": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dropbox": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "echosign": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "egnyte": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "firebase": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "layer": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mscrm": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "newrelic": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "office365": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rms": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "salesforce": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "salesforceApi": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "salesforceSandboxApi": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "samlps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/auth0:index/getClientAddonSamlp:getClientAddonSamlp"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sapApi": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sentry": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sharepoint": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "slack": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "springcm": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "wams": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "wsfed": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zendesk": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zoom": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "aws",
                "azureBlob",
                "azureSb",
                "box",
                "cloudbees",
                "concur",
                "dropbox",
                "echosign",
                "egnyte",
                "firebase",
                "layer",
                "mscrm",
                "newrelic",
                "office365",
                "rms",
                "salesforce",
                "salesforceApi",
                "salesforceSandboxApi",
                "samlps",
                "sapApi",
                "sentry",
                "sharepoint",
                "slack",
                "springcm",
                "wams",
                "wsfed",
                "zendesk",
                "zoom"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getClientAddonSamlp:getClientAddonSamlp": {
            "properties": {
                "audience": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "authnContextClassRef": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "binding": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createUpnClaim": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "destination": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "digestAlgorithm": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "includeAttributeNameFormat": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "issuer": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lifetimeInSeconds": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logout": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mapIdentities": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mapUnknownClaimsAsIs": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mappings": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nameIdentifierFormat": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nameIdentifierProbes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "passthroughClaimsWithNoMapping": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "recipient": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "signResponse": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "signatureAlgorithm": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "signingCert": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "typedAttributes": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "audience",
                "authnContextClassRef",
                "binding",
                "createUpnClaim",
                "destination",
                "digestAlgorithm",
                "includeAttributeNameFormat",
                "issuer",
                "lifetimeInSeconds",
                "logout",
                "mapIdentities",
                "mapUnknownClaimsAsIs",
                "mappings",
                "nameIdentifierFormat",
                "nameIdentifierProbes",
                "passthroughClaimsWithNoMapping",
                "recipient",
                "signResponse",
                "signatureAlgorithm",
                "signingCert",
                "typedAttributes"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getClientJwtConfiguration:getClientJwtConfiguration": {
            "properties": {
                "alg": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lifetimeInSeconds": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scopes": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secretEncoded": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "alg",
                "lifetimeInSeconds",
                "scopes",
                "secretEncoded"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getClientMobile:getClientMobile": {
            "properties": {
                "androids": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/auth0:index/getClientMobileAndroid:getClientMobileAndroid"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ios": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/auth0:index/getClientMobileIo:getClientMobileIo"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "androids",
                "ios"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getClientMobileAndroid:getClientMobileAndroid": {
            "properties": {
                "appPackageName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sha256CertFingerprints": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "appPackageName",
                "sha256CertFingerprints"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getClientMobileIo:getClientMobileIo": {
            "properties": {
                "appBundleIdentifier": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "teamId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "appBundleIdentifier",
                "teamId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getClientNativeSocialLogin:getClientNativeSocialLogin": {
            "properties": {
                "apples": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/auth0:index/getClientNativeSocialLoginApple:getClientNativeSocialLoginApple"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "facebooks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/auth0:index/getClientNativeSocialLoginFacebook:getClientNativeSocialLoginFacebook"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "apples",
                "facebooks"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getClientNativeSocialLoginApple:getClientNativeSocialLoginApple": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getClientNativeSocialLoginFacebook:getClientNativeSocialLoginFacebook": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getClientRefreshToken:getClientRefreshToken": {
            "properties": {
                "expirationType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "idleTokenLifetime": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "infiniteIdleTokenLifetime": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "infiniteTokenLifetime": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "leeway": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rotationType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tokenLifetime": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "expirationType",
                "idleTokenLifetime",
                "infiniteIdleTokenLifetime",
                "infiniteTokenLifetime",
                "leeway",
                "rotationType",
                "tokenLifetime"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getGlobalClientAddon:getGlobalClientAddon": {
            "properties": {
                "aws": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "azureBlob": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "azureSb": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "box": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cloudbees": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "concur": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dropbox": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "echosign": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "egnyte": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "firebase": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "layer": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mscrm": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "newrelic": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "office365": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rms": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "salesforce": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "salesforceApi": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "salesforceSandboxApi": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "samlps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/auth0:index/getGlobalClientAddonSamlp:getGlobalClientAddonSamlp"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sapApi": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sentry": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sharepoint": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "slack": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "springcm": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "wams": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "wsfed": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zendesk": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zoom": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "aws",
                "azureBlob",
                "azureSb",
                "box",
                "cloudbees",
                "concur",
                "dropbox",
                "echosign",
                "egnyte",
                "firebase",
                "layer",
                "mscrm",
                "newrelic",
                "office365",
                "rms",
                "salesforce",
                "salesforceApi",
                "salesforceSandboxApi",
                "samlps",
                "sapApi",
                "sentry",
                "sharepoint",
                "slack",
                "springcm",
                "wams",
                "wsfed",
                "zendesk",
                "zoom"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getGlobalClientAddonSamlp:getGlobalClientAddonSamlp": {
            "properties": {
                "audience": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "authnContextClassRef": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "binding": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createUpnClaim": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "destination": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "digestAlgorithm": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "includeAttributeNameFormat": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "issuer": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lifetimeInSeconds": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logout": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mapIdentities": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mapUnknownClaimsAsIs": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mappings": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nameIdentifierFormat": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nameIdentifierProbes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "passthroughClaimsWithNoMapping": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "recipient": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "signResponse": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "signatureAlgorithm": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "signingCert": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "typedAttributes": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "audience",
                "authnContextClassRef",
                "binding",
                "createUpnClaim",
                "destination",
                "digestAlgorithm",
                "includeAttributeNameFormat",
                "issuer",
                "lifetimeInSeconds",
                "logout",
                "mapIdentities",
                "mapUnknownClaimsAsIs",
                "mappings",
                "nameIdentifierFormat",
                "nameIdentifierProbes",
                "passthroughClaimsWithNoMapping",
                "recipient",
                "signResponse",
                "signatureAlgorithm",
                "signingCert",
                "typedAttributes"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getGlobalClientJwtConfiguration:getGlobalClientJwtConfiguration": {
            "properties": {
                "alg": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lifetimeInSeconds": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scopes": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secretEncoded": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "alg",
                "lifetimeInSeconds",
                "scopes",
                "secretEncoded"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getGlobalClientMobile:getGlobalClientMobile": {
            "properties": {
                "androids": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/auth0:index/getGlobalClientMobileAndroid:getGlobalClientMobileAndroid"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ios": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/auth0:index/getGlobalClientMobileIo:getGlobalClientMobileIo"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "androids",
                "ios"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getGlobalClientMobileAndroid:getGlobalClientMobileAndroid": {
            "properties": {
                "appPackageName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sha256CertFingerprints": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "appPackageName",
                "sha256CertFingerprints"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getGlobalClientMobileIo:getGlobalClientMobileIo": {
            "properties": {
                "appBundleIdentifier": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "teamId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "appBundleIdentifier",
                "teamId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getGlobalClientNativeSocialLogin:getGlobalClientNativeSocialLogin": {
            "properties": {
                "apples": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/auth0:index/getGlobalClientNativeSocialLoginApple:getGlobalClientNativeSocialLoginApple"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "facebooks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/auth0:index/getGlobalClientNativeSocialLoginFacebook:getGlobalClientNativeSocialLoginFacebook"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "apples",
                "facebooks"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getGlobalClientNativeSocialLoginApple:getGlobalClientNativeSocialLoginApple": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getGlobalClientNativeSocialLoginFacebook:getGlobalClientNativeSocialLoginFacebook": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getGlobalClientRefreshToken:getGlobalClientRefreshToken": {
            "properties": {
                "expirationType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "idleTokenLifetime": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "infiniteIdleTokenLifetime": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "infiniteTokenLifetime": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "leeway": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rotationType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tokenLifetime": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "expirationType",
                "idleTokenLifetime",
                "infiniteIdleTokenLifetime",
                "infiniteTokenLifetime",
                "leeway",
                "rotationType",
                "tokenLifetime"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the auth0 package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "apiToken": {
                "type": "string",
                "description": "Your Auth0 [management api access\ntoken](https://auth0.com/docs/security/tokens/access-tokens/management-api-access-tokens). It can also be sourced from\nthe `AUTH0_API_TOKEN` environment variable. It can be used instead of `client_id` + `client_secret`. If both are\nspecified, `api_token` will be used over `client_id` + `client_secret` fields.\n"
            },
            "audience": {
                "type": "string",
                "description": "Your Auth0 audience when using a custom domain. It can also be sourced from the `AUTH0_AUDIENCE` environment variable.\n"
            },
            "clientId": {
                "type": "string",
                "description": "Your Auth0 client ID. It can also be sourced from the `AUTH0_CLIENT_ID` environment variable.\n"
            },
            "clientSecret": {
                "type": "string",
                "description": "Your Auth0 client secret. It can also be sourced from the `AUTH0_CLIENT_SECRET` environment variable.\n"
            },
            "debug": {
                "type": "boolean",
                "description": "Indicates whether to turn on debug mode.\n"
            },
            "domain": {
                "type": "string",
                "description": "Your Auth0 domain name. It can also be sourced from the `AUTH0_DOMAIN` environment variable.\n"
            }
        },
        "required": [
            "domain"
        ],
        "inputProperties": {
            "apiToken": {
                "type": "string",
                "description": "Your Auth0 [management api access\ntoken](https://auth0.com/docs/security/tokens/access-tokens/management-api-access-tokens). It can also be sourced from\nthe `AUTH0_API_TOKEN` environment variable. It can be used instead of `client_id` + `client_secret`. If both are\nspecified, `api_token` will be used over `client_id` + `client_secret` fields.\n"
            },
            "audience": {
                "type": "string",
                "description": "Your Auth0 audience when using a custom domain. It can also be sourced from the `AUTH0_AUDIENCE` environment variable.\n"
            },
            "clientId": {
                "type": "string",
                "description": "Your Auth0 client ID. It can also be sourced from the `AUTH0_CLIENT_ID` environment variable.\n"
            },
            "clientSecret": {
                "type": "string",
                "description": "Your Auth0 client secret. It can also be sourced from the `AUTH0_CLIENT_SECRET` environment variable.\n"
            },
            "debug": {
                "type": "boolean",
                "description": "Indicates whether to turn on debug mode.\n",
                "defaultInfo": {
                    "environment": [
                        "AUTH0_DEBUG"
                    ]
                }
            },
            "domain": {
                "type": "string",
                "description": "Your Auth0 domain name. It can also be sourced from the `AUTH0_DOMAIN` environment variable.\n"
            }
        },
        "requiredInputs": [
            "domain"
        ]
    },
    "resources": {
        "auth0:index/action:Action": {
            "description": "Actions are secure, tenant-specific, versioned functions written in Node.js that execute at certain points during the Auth0 runtime. Actions are used to customize and extend Auth0's capabilities with custom logic.\n\n\n## Import\n\nAn action can be imported using the action's ID. # Example\n\n```sh\n $ pulumi import auth0:index/action:Action my_action 12f4f21b-017a-319d-92e7-2291c1ca36c4\n```\n\n ~\u003e For security reasons importing `secrets` is not allowed. Therefore, it is advised to import the action without secrets and adding them back after the action has been imported. ",
            "properties": {
                "code": {
                    "type": "string",
                    "description": "The source code of the action.\n"
                },
                "dependencies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/auth0:index/ActionDependency:ActionDependency"
                    },
                    "description": "List of third party npm modules, and their versions, that this action depends on.\n"
                },
                "deploy": {
                    "type": "boolean",
                    "description": "Deploying an action will create a new immutable version of the action. If the action is currently bound to a trigger, then the system will begin executing the newly deployed version of the action immediately.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the action.\n"
                },
                "runtime": {
                    "type": "string",
                    "description": "The Node runtime. Defaults to `node12`. Possible values are: `node12`, `node16` or `node18`.\n"
                },
                "secrets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/auth0:index/ActionSecret:ActionSecret"
                    },
                    "description": "List of secrets that are included in an action or a version of an action.\n"
                },
                "supportedTriggers": {
                    "$ref": "#/types/auth0:index/ActionSupportedTriggers:ActionSupportedTriggers",
                    "description": "List of triggers that this action supports. At this time, an action can only target a single trigger at a time. Read\n[Retrieving the set of triggers available within\nactions](https://registry.terraform.io/providers/auth0/auth0/latest/docs/guides/action_triggers) to retrieve the latest\ntrigger versions supported.\n"
                },
                "versionId": {
                    "type": "string",
                    "description": "Version ID of the action. This value is available if `deploy` is set to true.\n"
                }
            },
            "required": [
                "code",
                "name",
                "runtime",
                "supportedTriggers",
                "versionId"
            ],
            "inputProperties": {
                "code": {
                    "type": "string",
                    "description": "The source code of the action.\n"
                },
                "dependencies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/auth0:index/ActionDependency:ActionDependency"
                    },
                    "description": "List of third party npm modules, and their versions, that this action depends on.\n"
                },
                "deploy": {
                    "type": "boolean",
                    "description": "Deploying an action will create a new immutable version of the action. If the action is currently bound to a trigger, then the system will begin executing the newly deployed version of the action immediately.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the action.\n"
                },
                "runtime": {
                    "type": "string",
                    "description": "The Node runtime. Defaults to `node12`. Possible values are: `node12`, `node16` or `node18`.\n"
                },
                "secrets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/auth0:index/ActionSecret:ActionSecret"
                    },
                    "description": "List of secrets that are included in an action or a version of an action.\n"
                },
                "supportedTriggers": {
                    "$ref": "#/types/auth0:index/ActionSupportedTriggers:ActionSupportedTriggers",
                    "description": "List of triggers that this action supports. At this time, an action can only target a single trigger at a time. Read\n[Retrieving the set of triggers available within\nactions](https://registry.terraform.io/providers/auth0/auth0/latest/docs/guides/action_triggers) to retrieve the latest\ntrigger versions supported.\n"
                }
            },
            "requiredInputs": [
                "code",
                "supportedTriggers"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Action resources.\n",
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "The source code of the action.\n"
                    },
                    "dependencies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/auth0:index/ActionDependency:ActionDependency"
                        },
                        "description": "List of third party npm modules, and their versions, that this action depends on.\n"
                    },
                    "deploy": {
                        "type": "boolean",
                        "description": "Deploying an action will create a new immutable version of the action. If the action is currently bound to a trigger, then the system will begin executing the newly deployed version of the action immediately.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the action.\n"
                    },
                    "runtime": {
                        "type": "string",
                        "description": "The Node runtime. Defaults to `node12`. Possible values are: `node12`, `node16` or `node18`.\n"
                    },
                    "secrets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/auth0:index/ActionSecret:ActionSecret"
                        },
                        "description": "List of secrets that are included in an action or a version of an action.\n"
                    },
                    "supportedTriggers": {
                        "$ref": "#/types/auth0:index/ActionSupportedTriggers:ActionSupportedTriggers",
                        "description": "List of triggers that this action supports. At this time, an action can only target a single trigger at a time. Read\n[Retrieving the set of triggers available within\nactions](https://registry.terraform.io/providers/auth0/auth0/latest/docs/guides/action_triggers) to retrieve the latest\ntrigger versions supported.\n"
                    },
                    "versionId": {
                        "type": "string",
                        "description": "Version ID of the action. This value is available if `deploy` is set to true.\n"
                    }
                },
                "type": "object"
            }
        },
        "auth0:index/attackProtection:AttackProtection": {
            "description": "Auth0 can detect attacks and stop malicious attempts to access your application such as blocking traffic from certain IPs and displaying CAPTCHAs.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as auth0 from \"@pulumi/auth0\";\n\nconst myProtection = new auth0.AttackProtection(\"myProtection\", {\n    breachedPasswordDetection: {\n        adminNotificationFrequencies: [\"daily\"],\n        enabled: true,\n        method: \"standard\",\n        preUserRegistration: {\n            shields: [\"block\"],\n        },\n        shields: [\n            \"admin_notification\",\n            \"block\",\n        ],\n    },\n    bruteForceProtection: {\n        allowlists: [\"127.0.0.1\"],\n        enabled: true,\n        maxAttempts: 5,\n        mode: \"count_per_identifier_and_ip\",\n        shields: [\n            \"block\",\n            \"user_notification\",\n        ],\n    },\n    suspiciousIpThrottling: {\n        allowlists: [\"192.168.1.1\"],\n        enabled: true,\n        preLogin: {\n            maxAttempts: 100,\n            rate: 864000,\n        },\n        preUserRegistration: {\n            maxAttempts: 50,\n            rate: 1200,\n        },\n        shields: [\n            \"admin_notification\",\n            \"block\",\n        ],\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_auth0 as auth0\n\nmy_protection = auth0.AttackProtection(\"myProtection\",\n    breached_password_detection=auth0.AttackProtectionBreachedPasswordDetectionArgs(\n        admin_notification_frequencies=[\"daily\"],\n        enabled=True,\n        method=\"standard\",\n        pre_user_registration=auth0.AttackProtectionBreachedPasswordDetectionPreUserRegistrationArgs(\n            shields=[\"block\"],\n        ),\n        shields=[\n            \"admin_notification\",\n            \"block\",\n        ],\n    ),\n    brute_force_protection=auth0.AttackProtectionBruteForceProtectionArgs(\n        allowlists=[\"127.0.0.1\"],\n        enabled=True,\n        max_attempts=5,\n        mode=\"count_per_identifier_and_ip\",\n        shields=[\n            \"block\",\n            \"user_notification\",\n        ],\n    ),\n    suspicious_ip_throttling=auth0.AttackProtectionSuspiciousIpThrottlingArgs(\n        allowlists=[\"192.168.1.1\"],\n        enabled=True,\n        pre_login=auth0.AttackProtectionSuspiciousIpThrottlingPreLoginArgs(\n            max_attempts=100,\n            rate=864000,\n        ),\n        pre_user_registration=auth0.AttackProtectionSuspiciousIpThrottlingPreUserRegistrationArgs(\n            max_attempts=50,\n            rate=1200,\n        ),\n        shields=[\n            \"admin_notification\",\n            \"block\",\n        ],\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Auth0 = Pulumi.Auth0;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myProtection = new Auth0.AttackProtection(\"myProtection\", new()\n    {\n        BreachedPasswordDetection = new Auth0.Inputs.AttackProtectionBreachedPasswordDetectionArgs\n        {\n            AdminNotificationFrequencies = new[]\n            {\n                \"daily\",\n            },\n            Enabled = true,\n            Method = \"standard\",\n            PreUserRegistration = new Auth0.Inputs.AttackProtectionBreachedPasswordDetectionPreUserRegistrationArgs\n            {\n                Shields = new[]\n                {\n                    \"block\",\n                },\n            },\n            Shields = new[]\n            {\n                \"admin_notification\",\n                \"block\",\n            },\n        },\n        BruteForceProtection = new Auth0.Inputs.AttackProtectionBruteForceProtectionArgs\n        {\n            Allowlists = new[]\n            {\n                \"127.0.0.1\",\n            },\n            Enabled = true,\n            MaxAttempts = 5,\n            Mode = \"count_per_identifier_and_ip\",\n            Shields = new[]\n            {\n                \"block\",\n                \"user_notification\",\n            },\n        },\n        SuspiciousIpThrottling = new Auth0.Inputs.AttackProtectionSuspiciousIpThrottlingArgs\n        {\n            Allowlists = new[]\n            {\n                \"192.168.1.1\",\n            },\n            Enabled = true,\n            PreLogin = new Auth0.Inputs.AttackProtectionSuspiciousIpThrottlingPreLoginArgs\n            {\n                MaxAttempts = 100,\n                Rate = 864000,\n            },\n            PreUserRegistration = new Auth0.Inputs.AttackProtectionSuspiciousIpThrottlingPreUserRegistrationArgs\n            {\n                MaxAttempts = 50,\n                Rate = 1200,\n            },\n            Shields = new[]\n            {\n                \"admin_notification\",\n                \"block\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-auth0/sdk/v2/go/auth0\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := auth0.NewAttackProtection(ctx, \"myProtection\", \u0026auth0.AttackProtectionArgs{\n\t\t\tBreachedPasswordDetection: \u0026auth0.AttackProtectionBreachedPasswordDetectionArgs{\n\t\t\t\tAdminNotificationFrequencies: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"daily\"),\n\t\t\t\t},\n\t\t\t\tEnabled: pulumi.Bool(true),\n\t\t\t\tMethod:  pulumi.String(\"standard\"),\n\t\t\t\tPreUserRegistration: \u0026auth0.AttackProtectionBreachedPasswordDetectionPreUserRegistrationArgs{\n\t\t\t\t\tShields: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"block\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tShields: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"admin_notification\"),\n\t\t\t\t\tpulumi.String(\"block\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tBruteForceProtection: \u0026auth0.AttackProtectionBruteForceProtectionArgs{\n\t\t\t\tAllowlists: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"127.0.0.1\"),\n\t\t\t\t},\n\t\t\t\tEnabled:     pulumi.Bool(true),\n\t\t\t\tMaxAttempts: pulumi.Int(5),\n\t\t\t\tMode:        pulumi.String(\"count_per_identifier_and_ip\"),\n\t\t\t\tShields: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"block\"),\n\t\t\t\t\tpulumi.String(\"user_notification\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tSuspiciousIpThrottling: \u0026auth0.AttackProtectionSuspiciousIpThrottlingArgs{\n\t\t\t\tAllowlists: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"192.168.1.1\"),\n\t\t\t\t},\n\t\t\t\tEnabled: pulumi.Bool(true),\n\t\t\t\tPreLogin: \u0026auth0.AttackProtectionSuspiciousIpThrottlingPreLoginArgs{\n\t\t\t\t\tMaxAttempts: pulumi.Int(100),\n\t\t\t\t\tRate:        pulumi.Int(864000),\n\t\t\t\t},\n\t\t\t\tPreUserRegistration: \u0026auth0.AttackProtectionSuspiciousIpThrottlingPreUserRegistrationArgs{\n\t\t\t\t\tMaxAttempts: pulumi.Int(50),\n\t\t\t\t\tRate:        pulumi.Int(1200),\n\t\t\t\t},\n\t\t\t\tShields: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"admin_notification\"),\n\t\t\t\t\tpulumi.String(\"block\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.auth0.AttackProtection;\nimport com.pulumi.auth0.AttackProtectionArgs;\nimport com.pulumi.auth0.inputs.AttackProtectionBreachedPasswordDetectionArgs;\nimport com.pulumi.auth0.inputs.AttackProtectionBreachedPasswordDetectionPreUserRegistrationArgs;\nimport com.pulumi.auth0.inputs.AttackProtectionBruteForceProtectionArgs;\nimport com.pulumi.auth0.inputs.AttackProtectionSuspiciousIpThrottlingArgs;\nimport com.pulumi.auth0.inputs.AttackProtectionSuspiciousIpThrottlingPreLoginArgs;\nimport com.pulumi.auth0.inputs.AttackProtectionSuspiciousIpThrottlingPreUserRegistrationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myProtection = new AttackProtection(\"myProtection\", AttackProtectionArgs.builder()        \n            .breachedPasswordDetection(AttackProtectionBreachedPasswordDetectionArgs.builder()\n                .adminNotificationFrequencies(\"daily\")\n                .enabled(true)\n                .method(\"standard\")\n                .preUserRegistration(AttackProtectionBreachedPasswordDetectionPreUserRegistrationArgs.builder()\n                    .shields(\"block\")\n                    .build())\n                .shields(                \n                    \"admin_notification\",\n                    \"block\")\n                .build())\n            .bruteForceProtection(AttackProtectionBruteForceProtectionArgs.builder()\n                .allowlists(\"127.0.0.1\")\n                .enabled(true)\n                .maxAttempts(5)\n                .mode(\"count_per_identifier_and_ip\")\n                .shields(                \n                    \"block\",\n                    \"user_notification\")\n                .build())\n            .suspiciousIpThrottling(AttackProtectionSuspiciousIpThrottlingArgs.builder()\n                .allowlists(\"192.168.1.1\")\n                .enabled(true)\n                .preLogin(AttackProtectionSuspiciousIpThrottlingPreLoginArgs.builder()\n                    .maxAttempts(100)\n                    .rate(864000)\n                    .build())\n                .preUserRegistration(AttackProtectionSuspiciousIpThrottlingPreUserRegistrationArgs.builder()\n                    .maxAttempts(50)\n                    .rate(1200)\n                    .build())\n                .shields(                \n                    \"admin_notification\",\n                    \"block\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myProtection:\n    type: auth0:AttackProtection\n    properties:\n      breachedPasswordDetection:\n        adminNotificationFrequencies:\n          - daily\n        enabled: true\n        method: standard\n        preUserRegistration:\n          shields:\n            - block\n        shields:\n          - admin_notification\n          - block\n      bruteForceProtection:\n        allowlists:\n          - 127.0.0.1\n        enabled: true\n        maxAttempts: 5\n        mode: count_per_identifier_and_ip\n        shields:\n          - block\n          - user_notification\n      suspiciousIpThrottling:\n        allowlists:\n          - 192.168.1.1\n        enabled: true\n        preLogin:\n          maxAttempts: 100\n          rate: 864000\n        preUserRegistration:\n          maxAttempts: 50\n          rate: 1200\n        shields:\n          - admin_notification\n          - block\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nAs this is not a resource identifiable by an ID within the Auth0 Management API, attack_protection can be imported using a random string. # We recommend [Version 4 UUID](https://www.uuidgenerator.net/version4) # Example\n\n```sh\n $ pulumi import auth0:index/attackProtection:AttackProtection my_protection 24940d4b-4bd4-44e7-894e-f92e4de36a40\n```\n\n ",
            "properties": {
                "breachedPasswordDetection": {
                    "$ref": "#/types/auth0:index/AttackProtectionBreachedPasswordDetection:AttackProtectionBreachedPasswordDetection",
                    "description": "Breached password detection protects your applications from bad actors logging in with stolen credentials.\n"
                },
                "bruteForceProtection": {
                    "$ref": "#/types/auth0:index/AttackProtectionBruteForceProtection:AttackProtectionBruteForceProtection",
                    "description": "Brute-force protection safeguards against a single IP address attacking a single user account.\n"
                },
                "suspiciousIpThrottling": {
                    "$ref": "#/types/auth0:index/AttackProtectionSuspiciousIpThrottling:AttackProtectionSuspiciousIpThrottling",
                    "description": "Suspicious IP throttling blocks traffic from any IP address that rapidly attempts too many logins or signups.\n"
                }
            },
            "required": [
                "breachedPasswordDetection",
                "bruteForceProtection",
                "suspiciousIpThrottling"
            ],
            "inputProperties": {
                "breachedPasswordDetection": {
                    "$ref": "#/types/auth0:index/AttackProtectionBreachedPasswordDetection:AttackProtectionBreachedPasswordDetection",
                    "description": "Breached password detection protects your applications from bad actors logging in with stolen credentials.\n"
                },
                "bruteForceProtection": {
                    "$ref": "#/types/auth0:index/AttackProtectionBruteForceProtection:AttackProtectionBruteForceProtection",
                    "description": "Brute-force protection safeguards against a single IP address attacking a single user account.\n"
                },
                "suspiciousIpThrottling": {
                    "$ref": "#/types/auth0:index/AttackProtectionSuspiciousIpThrottling:AttackProtectionSuspiciousIpThrottling",
                    "description": "Suspicious IP throttling blocks traffic from any IP address that rapidly attempts too many logins or signups.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AttackProtection resources.\n",
                "properties": {
                    "breachedPasswordDetection": {
                        "$ref": "#/types/auth0:index/AttackProtectionBreachedPasswordDetection:AttackProtectionBreachedPasswordDetection",
                        "description": "Breached password detection protects your applications from bad actors logging in with stolen credentials.\n"
                    },
                    "bruteForceProtection": {
                        "$ref": "#/types/auth0:index/AttackProtectionBruteForceProtection:AttackProtectionBruteForceProtection",
                        "description": "Brute-force protection safeguards against a single IP address attacking a single user account.\n"
                    },
                    "suspiciousIpThrottling": {
                        "$ref": "#/types/auth0:index/AttackProtectionSuspiciousIpThrottling:AttackProtectionSuspiciousIpThrottling",
                        "description": "Suspicious IP throttling blocks traffic from any IP address that rapidly attempts too many logins or signups.\n"
                    }
                },
                "type": "object"
            }
        },
        "auth0:index/branding:Branding": {
            "description": "This resource allows you to manage branding within your Auth0 tenant. Auth0 can be customized with a look and feel that aligns with your organization's brand requirements and user expectations.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as auth0 from \"@pulumi/auth0\";\nimport * as fs from \"fs\";\n\nconst myBrand = new auth0.Branding(\"myBrand\", {\n    logoUrl: \"https://mycompany.org/logo.png\",\n    colors: {\n        primary: \"#0059d6\",\n        pageBackground: \"#000000\",\n    },\n    universalLogin: {\n        body: fs.readFileSync(\"universal_login_body.html\"),\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_auth0 as auth0\n\nmy_brand = auth0.Branding(\"myBrand\",\n    logo_url=\"https://mycompany.org/logo.png\",\n    colors=auth0.BrandingColorsArgs(\n        primary=\"#0059d6\",\n        page_background=\"#000000\",\n    ),\n    universal_login=auth0.BrandingUniversalLoginArgs(\n        body=(lambda path: open(path).read())(\"universal_login_body.html\"),\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.IO;\nusing Pulumi;\nusing Auth0 = Pulumi.Auth0;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myBrand = new Auth0.Branding(\"myBrand\", new()\n    {\n        LogoUrl = \"https://mycompany.org/logo.png\",\n        Colors = new Auth0.Inputs.BrandingColorsArgs\n        {\n            Primary = \"#0059d6\",\n            PageBackground = \"#000000\",\n        },\n        UniversalLogin = new Auth0.Inputs.BrandingUniversalLoginArgs\n        {\n            Body = File.ReadAllText(\"universal_login_body.html\"),\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"io/ioutil\"\n\n\t\"github.com/pulumi/pulumi-auth0/sdk/v2/go/auth0\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc readFileOrPanic(path string) pulumi.StringPtrInput {\n\tdata, err := ioutil.ReadFile(path)\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\treturn pulumi.String(string(data))\n}\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := auth0.NewBranding(ctx, \"myBrand\", \u0026auth0.BrandingArgs{\n\t\t\tLogoUrl: pulumi.String(\"https://mycompany.org/logo.png\"),\n\t\t\tColors: \u0026auth0.BrandingColorsArgs{\n\t\t\t\tPrimary:        pulumi.String(\"#0059d6\"),\n\t\t\t\tPageBackground: pulumi.String(\"#000000\"),\n\t\t\t},\n\t\t\tUniversalLogin: \u0026auth0.BrandingUniversalLoginArgs{\n\t\t\t\tBody: readFileOrPanic(\"universal_login_body.html\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.auth0.Branding;\nimport com.pulumi.auth0.BrandingArgs;\nimport com.pulumi.auth0.inputs.BrandingColorsArgs;\nimport com.pulumi.auth0.inputs.BrandingUniversalLoginArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myBrand = new Branding(\"myBrand\", BrandingArgs.builder()        \n            .logoUrl(\"https://mycompany.org/logo.png\")\n            .colors(BrandingColorsArgs.builder()\n                .primary(\"#0059d6\")\n                .pageBackground(\"#000000\")\n                .build())\n            .universalLogin(BrandingUniversalLoginArgs.builder()\n                .body(Files.readString(Paths.get(\"universal_login_body.html\")))\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myBrand:\n    type: auth0:Branding\n    properties:\n      logoUrl: https://mycompany.org/logo.png\n      colors:\n        primary: '#0059d6'\n        pageBackground: '#000000'\n      universalLogin:\n        body:\n          fn::readFile: universal_login_body.html\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nAs this is not a resource identifiable by an ID within the Auth0 Management API, branding can be imported using a random string. # We recommend [Version 4 UUID](https://www.uuidgenerator.net/version4) # Example\n\n```sh\n $ pulumi import auth0:index/branding:Branding my_brand 22f4f21b-017a-319d-92e7-2291c1ca36c4\n```\n\n ",
            "properties": {
                "colors": {
                    "$ref": "#/types/auth0:index/BrandingColors:BrandingColors",
                    "description": "Configuration settings for colors for branding.\n"
                },
                "faviconUrl": {
                    "type": "string",
                    "description": "URL for the favicon.\n"
                },
                "font": {
                    "$ref": "#/types/auth0:index/BrandingFont:BrandingFont",
                    "description": "Configuration settings to customize the font.\n"
                },
                "logoUrl": {
                    "type": "string",
                    "description": "URL of logo for branding.\n"
                },
                "universalLogin": {
                    "$ref": "#/types/auth0:index/BrandingUniversalLogin:BrandingUniversalLogin",
                    "description": "Configuration settings for Universal Login.\n"
                }
            },
            "required": [
                "faviconUrl",
                "logoUrl"
            ],
            "inputProperties": {
                "colors": {
                    "$ref": "#/types/auth0:index/BrandingColors:BrandingColors",
                    "description": "Configuration settings for colors for branding.\n"
                },
                "faviconUrl": {
                    "type": "string",
                    "description": "URL for the favicon.\n"
                },
                "font": {
                    "$ref": "#/types/auth0:index/BrandingFont:BrandingFont",
                    "description": "Configuration settings to customize the font.\n"
                },
                "logoUrl": {
                    "type": "string",
                    "description": "URL of logo for branding.\n"
                },
                "universalLogin": {
                    "$ref": "#/types/auth0:index/BrandingUniversalLogin:BrandingUniversalLogin",
                    "description": "Configuration settings for Universal Login.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Branding resources.\n",
                "properties": {
                    "colors": {
                        "$ref": "#/types/auth0:index/BrandingColors:BrandingColors",
                        "description": "Configuration settings for colors for branding.\n"
                    },
                    "faviconUrl": {
                        "type": "string",
                        "description": "URL for the favicon.\n"
                    },
                    "font": {
                        "$ref": "#/types/auth0:index/BrandingFont:BrandingFont",
                        "description": "Configuration settings to customize the font.\n"
                    },
                    "logoUrl": {
                        "type": "string",
                        "description": "URL of logo for branding.\n"
                    },
                    "universalLogin": {
                        "$ref": "#/types/auth0:index/BrandingUniversalLogin:BrandingUniversalLogin",
                        "description": "Configuration settings for Universal Login.\n"
                    }
                },
                "type": "object"
            }
        },
        "auth0:index/brandingTheme:BrandingTheme": {
            "description": "This resource allows you to manage branding themes for your Universal Login page within your Auth0 tenant.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as auth0 from \"@pulumi/auth0\";\n\nconst myTheme = new auth0.BrandingTheme(\"myTheme\", {\n    borders: {\n        buttonBorderRadius: 1,\n        buttonBorderWeight: 1,\n        buttonsStyle: \"pill\",\n        inputBorderRadius: 3,\n        inputBorderWeight: 1,\n        inputsStyle: \"pill\",\n        showWidgetShadow: false,\n        widgetBorderWeight: 1,\n        widgetCornerRadius: 3,\n    },\n    colors: {\n        bodyText: \"#FF00CC\",\n        error: \"#FF00CC\",\n        header: \"#FF00CC\",\n        icons: \"#FF00CC\",\n        inputBackground: \"#FF00CC\",\n        inputBorder: \"#FF00CC\",\n        inputFilledText: \"#FF00CC\",\n        inputLabelsPlaceholders: \"#FF00CC\",\n        linksFocusedComponents: \"#FF00CC\",\n        primaryButton: \"#FF00CC\",\n        primaryButtonLabel: \"#FF00CC\",\n        secondaryButtonBorder: \"#FF00CC\",\n        secondaryButtonLabel: \"#FF00CC\",\n        success: \"#FF00CC\",\n        widgetBackground: \"#FF00CC\",\n        widgetBorder: \"#FF00CC\",\n    },\n    fonts: {\n        bodyText: {\n            bold: false,\n            size: 100,\n        },\n        buttonsText: {\n            bold: false,\n            size: 100,\n        },\n        fontUrl: \"https://google.com/font.woff\",\n        inputLabels: {\n            bold: false,\n            size: 100,\n        },\n        links: {\n            bold: false,\n            size: 100,\n        },\n        linksStyle: \"normal\",\n        referenceTextSize: 12,\n        subtitle: {\n            bold: false,\n            size: 100,\n        },\n        title: {\n            bold: false,\n            size: 100,\n        },\n    },\n    pageBackground: {\n        backgroundColor: \"#000000\",\n        backgroundImageUrl: \"https://google.com/background.png\",\n        pageLayout: \"center\",\n    },\n    widget: {\n        headerTextAlignment: \"center\",\n        logoHeight: 55,\n        logoPosition: \"center\",\n        logoUrl: \"https://google.com/logo.png\",\n        socialButtonsLayout: \"top\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_auth0 as auth0\n\nmy_theme = auth0.BrandingTheme(\"myTheme\",\n    borders=auth0.BrandingThemeBordersArgs(\n        button_border_radius=1,\n        button_border_weight=1,\n        buttons_style=\"pill\",\n        input_border_radius=3,\n        input_border_weight=1,\n        inputs_style=\"pill\",\n        show_widget_shadow=False,\n        widget_border_weight=1,\n        widget_corner_radius=3,\n    ),\n    colors=auth0.BrandingThemeColorsArgs(\n        body_text=\"#FF00CC\",\n        error=\"#FF00CC\",\n        header=\"#FF00CC\",\n        icons=\"#FF00CC\",\n        input_background=\"#FF00CC\",\n        input_border=\"#FF00CC\",\n        input_filled_text=\"#FF00CC\",\n        input_labels_placeholders=\"#FF00CC\",\n        links_focused_components=\"#FF00CC\",\n        primary_button=\"#FF00CC\",\n        primary_button_label=\"#FF00CC\",\n        secondary_button_border=\"#FF00CC\",\n        secondary_button_label=\"#FF00CC\",\n        success=\"#FF00CC\",\n        widget_background=\"#FF00CC\",\n        widget_border=\"#FF00CC\",\n    ),\n    fonts=auth0.BrandingThemeFontsArgs(\n        body_text=auth0.BrandingThemeFontsBodyTextArgs(\n            bold=False,\n            size=100,\n        ),\n        buttons_text=auth0.BrandingThemeFontsButtonsTextArgs(\n            bold=False,\n            size=100,\n        ),\n        font_url=\"https://google.com/font.woff\",\n        input_labels=auth0.BrandingThemeFontsInputLabelsArgs(\n            bold=False,\n            size=100,\n        ),\n        links=auth0.BrandingThemeFontsLinksArgs(\n            bold=False,\n            size=100,\n        ),\n        links_style=\"normal\",\n        reference_text_size=12,\n        subtitle=auth0.BrandingThemeFontsSubtitleArgs(\n            bold=False,\n            size=100,\n        ),\n        title=auth0.BrandingThemeFontsTitleArgs(\n            bold=False,\n            size=100,\n        ),\n    ),\n    page_background=auth0.BrandingThemePageBackgroundArgs(\n        background_color=\"#000000\",\n        background_image_url=\"https://google.com/background.png\",\n        page_layout=\"center\",\n    ),\n    widget=auth0.BrandingThemeWidgetArgs(\n        header_text_alignment=\"center\",\n        logo_height=55,\n        logo_position=\"center\",\n        logo_url=\"https://google.com/logo.png\",\n        social_buttons_layout=\"top\",\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Auth0 = Pulumi.Auth0;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myTheme = new Auth0.BrandingTheme(\"myTheme\", new()\n    {\n        Borders = new Auth0.Inputs.BrandingThemeBordersArgs\n        {\n            ButtonBorderRadius = 1,\n            ButtonBorderWeight = 1,\n            ButtonsStyle = \"pill\",\n            InputBorderRadius = 3,\n            InputBorderWeight = 1,\n            InputsStyle = \"pill\",\n            ShowWidgetShadow = false,\n            WidgetBorderWeight = 1,\n            WidgetCornerRadius = 3,\n        },\n        Colors = new Auth0.Inputs.BrandingThemeColorsArgs\n        {\n            BodyText = \"#FF00CC\",\n            Error = \"#FF00CC\",\n            Header = \"#FF00CC\",\n            Icons = \"#FF00CC\",\n            InputBackground = \"#FF00CC\",\n            InputBorder = \"#FF00CC\",\n            InputFilledText = \"#FF00CC\",\n            InputLabelsPlaceholders = \"#FF00CC\",\n            LinksFocusedComponents = \"#FF00CC\",\n            PrimaryButton = \"#FF00CC\",\n            PrimaryButtonLabel = \"#FF00CC\",\n            SecondaryButtonBorder = \"#FF00CC\",\n            SecondaryButtonLabel = \"#FF00CC\",\n            Success = \"#FF00CC\",\n            WidgetBackground = \"#FF00CC\",\n            WidgetBorder = \"#FF00CC\",\n        },\n        Fonts = new Auth0.Inputs.BrandingThemeFontsArgs\n        {\n            BodyText = new Auth0.Inputs.BrandingThemeFontsBodyTextArgs\n            {\n                Bold = false,\n                Size = 100,\n            },\n            ButtonsText = new Auth0.Inputs.BrandingThemeFontsButtonsTextArgs\n            {\n                Bold = false,\n                Size = 100,\n            },\n            FontUrl = \"https://google.com/font.woff\",\n            InputLabels = new Auth0.Inputs.BrandingThemeFontsInputLabelsArgs\n            {\n                Bold = false,\n                Size = 100,\n            },\n            Links = new Auth0.Inputs.BrandingThemeFontsLinksArgs\n            {\n                Bold = false,\n                Size = 100,\n            },\n            LinksStyle = \"normal\",\n            ReferenceTextSize = 12,\n            Subtitle = new Auth0.Inputs.BrandingThemeFontsSubtitleArgs\n            {\n                Bold = false,\n                Size = 100,\n            },\n            Title = new Auth0.Inputs.BrandingThemeFontsTitleArgs\n            {\n                Bold = false,\n                Size = 100,\n            },\n        },\n        PageBackground = new Auth0.Inputs.BrandingThemePageBackgroundArgs\n        {\n            BackgroundColor = \"#000000\",\n            BackgroundImageUrl = \"https://google.com/background.png\",\n            PageLayout = \"center\",\n        },\n        Widget = new Auth0.Inputs.BrandingThemeWidgetArgs\n        {\n            HeaderTextAlignment = \"center\",\n            LogoHeight = 55,\n            LogoPosition = \"center\",\n            LogoUrl = \"https://google.com/logo.png\",\n            SocialButtonsLayout = \"top\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-auth0/sdk/v2/go/auth0\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := auth0.NewBrandingTheme(ctx, \"myTheme\", \u0026auth0.BrandingThemeArgs{\n\t\t\tBorders: \u0026auth0.BrandingThemeBordersArgs{\n\t\t\t\tButtonBorderRadius: pulumi.Float64(1),\n\t\t\t\tButtonBorderWeight: pulumi.Float64(1),\n\t\t\t\tButtonsStyle:       pulumi.String(\"pill\"),\n\t\t\t\tInputBorderRadius:  pulumi.Float64(3),\n\t\t\t\tInputBorderWeight:  pulumi.Float64(1),\n\t\t\t\tInputsStyle:        pulumi.String(\"pill\"),\n\t\t\t\tShowWidgetShadow:   pulumi.Bool(false),\n\t\t\t\tWidgetBorderWeight: pulumi.Float64(1),\n\t\t\t\tWidgetCornerRadius: pulumi.Float64(3),\n\t\t\t},\n\t\t\tColors: \u0026auth0.BrandingThemeColorsArgs{\n\t\t\t\tBodyText:                pulumi.String(\"#FF00CC\"),\n\t\t\t\tError:                   pulumi.String(\"#FF00CC\"),\n\t\t\t\tHeader:                  pulumi.String(\"#FF00CC\"),\n\t\t\t\tIcons:                   pulumi.String(\"#FF00CC\"),\n\t\t\t\tInputBackground:         pulumi.String(\"#FF00CC\"),\n\t\t\t\tInputBorder:             pulumi.String(\"#FF00CC\"),\n\t\t\t\tInputFilledText:         pulumi.String(\"#FF00CC\"),\n\t\t\t\tInputLabelsPlaceholders: pulumi.String(\"#FF00CC\"),\n\t\t\t\tLinksFocusedComponents:  pulumi.String(\"#FF00CC\"),\n\t\t\t\tPrimaryButton:           pulumi.String(\"#FF00CC\"),\n\t\t\t\tPrimaryButtonLabel:      pulumi.String(\"#FF00CC\"),\n\t\t\t\tSecondaryButtonBorder:   pulumi.String(\"#FF00CC\"),\n\t\t\t\tSecondaryButtonLabel:    pulumi.String(\"#FF00CC\"),\n\t\t\t\tSuccess:                 pulumi.String(\"#FF00CC\"),\n\t\t\t\tWidgetBackground:        pulumi.String(\"#FF00CC\"),\n\t\t\t\tWidgetBorder:            pulumi.String(\"#FF00CC\"),\n\t\t\t},\n\t\t\tFonts: \u0026auth0.BrandingThemeFontsArgs{\n\t\t\t\tBodyText: \u0026auth0.BrandingThemeFontsBodyTextArgs{\n\t\t\t\t\tBold: pulumi.Bool(false),\n\t\t\t\t\tSize: pulumi.Float64(100),\n\t\t\t\t},\n\t\t\t\tButtonsText: \u0026auth0.BrandingThemeFontsButtonsTextArgs{\n\t\t\t\t\tBold: pulumi.Bool(false),\n\t\t\t\t\tSize: pulumi.Float64(100),\n\t\t\t\t},\n\t\t\t\tFontUrl: pulumi.String(\"https://google.com/font.woff\"),\n\t\t\t\tInputLabels: \u0026auth0.BrandingThemeFontsInputLabelsArgs{\n\t\t\t\t\tBold: pulumi.Bool(false),\n\t\t\t\t\tSize: pulumi.Float64(100),\n\t\t\t\t},\n\t\t\t\tLinks: \u0026auth0.BrandingThemeFontsLinksArgs{\n\t\t\t\t\tBold: pulumi.Bool(false),\n\t\t\t\t\tSize: pulumi.Float64(100),\n\t\t\t\t},\n\t\t\t\tLinksStyle:        pulumi.String(\"normal\"),\n\t\t\t\tReferenceTextSize: pulumi.Float64(12),\n\t\t\t\tSubtitle: \u0026auth0.BrandingThemeFontsSubtitleArgs{\n\t\t\t\t\tBold: pulumi.Bool(false),\n\t\t\t\t\tSize: pulumi.Float64(100),\n\t\t\t\t},\n\t\t\t\tTitle: \u0026auth0.BrandingThemeFontsTitleArgs{\n\t\t\t\t\tBold: pulumi.Bool(false),\n\t\t\t\t\tSize: pulumi.Float64(100),\n\t\t\t\t},\n\t\t\t},\n\t\t\tPageBackground: \u0026auth0.BrandingThemePageBackgroundArgs{\n\t\t\t\tBackgroundColor:    pulumi.String(\"#000000\"),\n\t\t\t\tBackgroundImageUrl: pulumi.String(\"https://google.com/background.png\"),\n\t\t\t\tPageLayout:         pulumi.String(\"center\"),\n\t\t\t},\n\t\t\tWidget: \u0026auth0.BrandingThemeWidgetArgs{\n\t\t\t\tHeaderTextAlignment: pulumi.String(\"center\"),\n\t\t\t\tLogoHeight:          pulumi.Float64(55),\n\t\t\t\tLogoPosition:        pulumi.String(\"center\"),\n\t\t\t\tLogoUrl:             pulumi.String(\"https://google.com/logo.png\"),\n\t\t\t\tSocialButtonsLayout: pulumi.String(\"top\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.auth0.BrandingTheme;\nimport com.pulumi.auth0.BrandingThemeArgs;\nimport com.pulumi.auth0.inputs.BrandingThemeBordersArgs;\nimport com.pulumi.auth0.inputs.BrandingThemeColorsArgs;\nimport com.pulumi.auth0.inputs.BrandingThemeFontsArgs;\nimport com.pulumi.auth0.inputs.BrandingThemeFontsBodyTextArgs;\nimport com.pulumi.auth0.inputs.BrandingThemeFontsButtonsTextArgs;\nimport com.pulumi.auth0.inputs.BrandingThemeFontsInputLabelsArgs;\nimport com.pulumi.auth0.inputs.BrandingThemeFontsLinksArgs;\nimport com.pulumi.auth0.inputs.BrandingThemeFontsSubtitleArgs;\nimport com.pulumi.auth0.inputs.BrandingThemeFontsTitleArgs;\nimport com.pulumi.auth0.inputs.BrandingThemePageBackgroundArgs;\nimport com.pulumi.auth0.inputs.BrandingThemeWidgetArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myTheme = new BrandingTheme(\"myTheme\", BrandingThemeArgs.builder()        \n            .borders(BrandingThemeBordersArgs.builder()\n                .buttonBorderRadius(1)\n                .buttonBorderWeight(1)\n                .buttonsStyle(\"pill\")\n                .inputBorderRadius(3)\n                .inputBorderWeight(1)\n                .inputsStyle(\"pill\")\n                .showWidgetShadow(false)\n                .widgetBorderWeight(1)\n                .widgetCornerRadius(3)\n                .build())\n            .colors(BrandingThemeColorsArgs.builder()\n                .bodyText(\"#FF00CC\")\n                .error(\"#FF00CC\")\n                .header(\"#FF00CC\")\n                .icons(\"#FF00CC\")\n                .inputBackground(\"#FF00CC\")\n                .inputBorder(\"#FF00CC\")\n                .inputFilledText(\"#FF00CC\")\n                .inputLabelsPlaceholders(\"#FF00CC\")\n                .linksFocusedComponents(\"#FF00CC\")\n                .primaryButton(\"#FF00CC\")\n                .primaryButtonLabel(\"#FF00CC\")\n                .secondaryButtonBorder(\"#FF00CC\")\n                .secondaryButtonLabel(\"#FF00CC\")\n                .success(\"#FF00CC\")\n                .widgetBackground(\"#FF00CC\")\n                .widgetBorder(\"#FF00CC\")\n                .build())\n            .fonts(BrandingThemeFontsArgs.builder()\n                .bodyText(BrandingThemeFontsBodyTextArgs.builder()\n                    .bold(false)\n                    .size(100)\n                    .build())\n                .buttonsText(BrandingThemeFontsButtonsTextArgs.builder()\n                    .bold(false)\n                    .size(100)\n                    .build())\n                .fontUrl(\"https://google.com/font.woff\")\n                .inputLabels(BrandingThemeFontsInputLabelsArgs.builder()\n                    .bold(false)\n                    .size(100)\n                    .build())\n                .links(BrandingThemeFontsLinksArgs.builder()\n                    .bold(false)\n                    .size(100)\n                    .build())\n                .linksStyle(\"normal\")\n                .referenceTextSize(12)\n                .subtitle(BrandingThemeFontsSubtitleArgs.builder()\n                    .bold(false)\n                    .size(100)\n                    .build())\n                .title(BrandingThemeFontsTitleArgs.builder()\n                    .bold(false)\n                    .size(100)\n                    .build())\n                .build())\n            .pageBackground(BrandingThemePageBackgroundArgs.builder()\n                .backgroundColor(\"#000000\")\n                .backgroundImageUrl(\"https://google.com/background.png\")\n                .pageLayout(\"center\")\n                .build())\n            .widget(BrandingThemeWidgetArgs.builder()\n                .headerTextAlignment(\"center\")\n                .logoHeight(55)\n                .logoPosition(\"center\")\n                .logoUrl(\"https://google.com/logo.png\")\n                .socialButtonsLayout(\"top\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myTheme:\n    type: auth0:BrandingTheme\n    properties:\n      borders:\n        buttonBorderRadius: 1\n        buttonBorderWeight: 1\n        buttonsStyle: pill\n        inputBorderRadius: 3\n        inputBorderWeight: 1\n        inputsStyle: pill\n        showWidgetShadow: false\n        widgetBorderWeight: 1\n        widgetCornerRadius: 3\n      colors:\n        bodyText: '#FF00CC'\n        error: '#FF00CC'\n        header: '#FF00CC'\n        icons: '#FF00CC'\n        inputBackground: '#FF00CC'\n        inputBorder: '#FF00CC'\n        inputFilledText: '#FF00CC'\n        inputLabelsPlaceholders: '#FF00CC'\n        linksFocusedComponents: '#FF00CC'\n        primaryButton: '#FF00CC'\n        primaryButtonLabel: '#FF00CC'\n        secondaryButtonBorder: '#FF00CC'\n        secondaryButtonLabel: '#FF00CC'\n        success: '#FF00CC'\n        widgetBackground: '#FF00CC'\n        widgetBorder: '#FF00CC'\n      fonts:\n        bodyText:\n          bold: false\n          size: 100\n        buttonsText:\n          bold: false\n          size: 100\n        fontUrl: https://google.com/font.woff\n        inputLabels:\n          bold: false\n          size: 100\n        links:\n          bold: false\n          size: 100\n        linksStyle: normal\n        referenceTextSize: 12\n        subtitle:\n          bold: false\n          size: 100\n        title:\n          bold: false\n          size: 100\n      pageBackground:\n        backgroundColor: '#000000'\n        backgroundImageUrl: https://google.com/background.png\n        pageLayout: center\n      widget:\n        headerTextAlignment: center\n        logoHeight: 55\n        logoPosition: center\n        logoUrl: https://google.com/logo.png\n        socialButtonsLayout: top\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nBranding Themes can be imported using their ID. # Example\n\n```sh\n $ pulumi import auth0:index/brandingTheme:BrandingTheme my_theme XXXXXXXXXXXXXXXXXXXX\n```\n\n ",
            "properties": {
                "borders": {
                    "$ref": "#/types/auth0:index/BrandingThemeBorders:BrandingThemeBorders"
                },
                "colors": {
                    "$ref": "#/types/auth0:index/BrandingThemeColors:BrandingThemeColors"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name for the branding theme.\n"
                },
                "fonts": {
                    "$ref": "#/types/auth0:index/BrandingThemeFonts:BrandingThemeFonts"
                },
                "pageBackground": {
                    "$ref": "#/types/auth0:index/BrandingThemePageBackground:BrandingThemePageBackground"
                },
                "widget": {
                    "$ref": "#/types/auth0:index/BrandingThemeWidget:BrandingThemeWidget"
                }
            },
            "required": [
                "borders",
                "colors",
                "fonts",
                "pageBackground",
                "widget"
            ],
            "inputProperties": {
                "borders": {
                    "$ref": "#/types/auth0:index/BrandingThemeBorders:BrandingThemeBorders"
                },
                "colors": {
                    "$ref": "#/types/auth0:index/BrandingThemeColors:BrandingThemeColors"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name for the branding theme.\n"
                },
                "fonts": {
                    "$ref": "#/types/auth0:index/BrandingThemeFonts:BrandingThemeFonts"
                },
                "pageBackground": {
                    "$ref": "#/types/auth0:index/BrandingThemePageBackground:BrandingThemePageBackground"
                },
                "widget": {
                    "$ref": "#/types/auth0:index/BrandingThemeWidget:BrandingThemeWidget"
                }
            },
            "requiredInputs": [
                "borders",
                "colors",
                "fonts",
                "pageBackground",
                "widget"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BrandingTheme resources.\n",
                "properties": {
                    "borders": {
                        "$ref": "#/types/auth0:index/BrandingThemeBorders:BrandingThemeBorders"
                    },
                    "colors": {
                        "$ref": "#/types/auth0:index/BrandingThemeColors:BrandingThemeColors"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The display name for the branding theme.\n"
                    },
                    "fonts": {
                        "$ref": "#/types/auth0:index/BrandingThemeFonts:BrandingThemeFonts"
                    },
                    "pageBackground": {
                        "$ref": "#/types/auth0:index/BrandingThemePageBackground:BrandingThemePageBackground"
                    },
                    "widget": {
                        "$ref": "#/types/auth0:index/BrandingThemeWidget:BrandingThemeWidget"
                    }
                },
                "type": "object"
            }
        },
        "auth0:index/client:Client": {
            "description": "With this resource, you can set up applications that use Auth0 for authentication and configure allowed callback URLs and secrets for these applications.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.auth0.Client;\nimport com.pulumi.auth0.ClientArgs;\nimport com.pulumi.auth0.inputs.ClientAddonsArgs;\nimport com.pulumi.auth0.inputs.ClientAddonsSamlpArgs;\nimport com.pulumi.auth0.inputs.ClientJwtConfigurationArgs;\nimport com.pulumi.auth0.inputs.ClientMobileArgs;\nimport com.pulumi.auth0.inputs.ClientMobileIosArgs;\nimport com.pulumi.auth0.inputs.ClientRefreshTokenArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myClient = new Client(\"myClient\", ClientArgs.builder()        \n            .addons(ClientAddonsArgs.builder()\n                .samlp(ClientAddonsSamlpArgs.builder()\n                    .audience(\"https://example.com/saml\")\n                    .createUpnClaim(false)\n                    .issuer(\"https://example.com\")\n                    .mapIdentities(false)\n                    .mapUnknownClaimsAsIs(false)\n                    .mappings(Map.ofEntries(\n                        Map.entry(\"email\", \"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress\"),\n                        Map.entry(\"name\", \"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name\")\n                    ))\n                    .nameIdentifierFormat(\"urn:oasis:names:tc:SAML:2.0:nameid-format:persistent\")\n                    .nameIdentifierProbes(\"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress\")\n                    .passthroughClaimsWithNoMapping(false)\n                    .signingCert(\"\"\"\n-----BEGIN PUBLIC KEY-----\nMIGf...bpP/t3\n+JGNGIRMj1hF1rnb6QIDAQAB\n-----END PUBLIC KEY-----\n\n                    \"\"\")\n                    .signingKey(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                    .build())\n                .build())\n            .allowedLogoutUrls(\"https://example.com\")\n            .allowedOrigins(\"https://example.com\")\n            .appType(\"non_interactive\")\n            .callbacks(\"https://example.com/callback\")\n            .clientMetadata(Map.of(\"foo\", \"zoo\"))\n            .customLoginPageOn(true)\n            .description(\"Test Applications Long Description\")\n            .grantTypes(            \n                \"authorization_code\",\n                \"http://auth0.com/oauth/grant-type/password-realm\",\n                \"implicit\",\n                \"password\",\n                \"refresh_token\")\n            .isFirstParty(true)\n            .isTokenEndpointIpHeaderTrusted(true)\n            .jwtConfiguration(ClientJwtConfigurationArgs.builder()\n                .alg(\"RS256\")\n                .lifetimeInSeconds(300)\n                .scopes(Map.of(\"foo\", \"bar\"))\n                .secretEncoded(true)\n                .build())\n            .mobile(ClientMobileArgs.builder()\n                .ios(ClientMobileIosArgs.builder()\n                    .appBundleIdentifier(\"com.my.bundle.id\")\n                    .teamId(\"9JA89QQLNQ\")\n                    .build())\n                .build())\n            .oidcConformant(false)\n            .refreshToken(ClientRefreshTokenArgs.builder()\n                .expirationType(\"expiring\")\n                .leeway(0)\n                .rotationType(\"rotating\")\n                .tokenLifetime(2592000)\n                .build())\n            .tokenEndpointAuthMethod(\"client_secret_post\")\n            .webOrigins(\"https://example.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myClient:\n    type: auth0:Client\n    properties:\n      addons:\n        samlp:\n          audience: https://example.com/saml\n          createUpnClaim: false\n          issuer: https://example.com\n          mapIdentities: false\n          mapUnknownClaimsAsIs: false\n          mappings:\n            email: http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress\n            name: http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name\n          nameIdentifierFormat: urn:oasis:names:tc:SAML:2.0:nameid-format:persistent\n          nameIdentifierProbes:\n            - http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress\n          passthroughClaimsWithNoMapping: false\n          signingCert: |+\n            -----BEGIN PUBLIC KEY-----\n            MIGf...bpP/t3\n            +JGNGIRMj1hF1rnb6QIDAQAB\n            -----END PUBLIC KEY-----\n\n          signingKey:\n            - cert: |+\n                -----BEGIN PUBLIC KEY-----\n                MIGf...bpP/t3\n                +JGNGIRMj1hF1rnb6QIDAQAB\n                -----END PUBLIC KEY-----\n\n              key: |+\n                -----BEGIN PRIVATE KEY-----\n                MIGf...bpP/t3\n                +JGNGIRMj1hF1rnb6QIDAQAB\n                -----END PUBLIC KEY-----\n\n      allowedLogoutUrls:\n        - https://example.com\n      allowedOrigins:\n        - https://example.com\n      appType: non_interactive\n      callbacks:\n        - https://example.com/callback\n      clientMetadata:\n        foo: zoo\n      customLoginPageOn: true\n      description: Test Applications Long Description\n      grantTypes:\n        - authorization_code\n        - http://auth0.com/oauth/grant-type/password-realm\n        - implicit\n        - password\n        - refresh_token\n      isFirstParty: true\n      isTokenEndpointIpHeaderTrusted: true\n      jwtConfiguration:\n        alg: RS256\n        lifetimeInSeconds: 300\n        scopes:\n          foo: bar\n        secretEncoded: true\n      mobile:\n        ios:\n          appBundleIdentifier: com.my.bundle.id\n          teamId: 9JA89QQLNQ\n      oidcConformant: false\n      refreshToken:\n        expirationType: expiring\n        leeway: 0\n        rotationType: rotating\n        tokenLifetime: 2.592e+06\n      tokenEndpointAuthMethod: client_secret_post\n      webOrigins:\n        - https://example.com\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nA client can be imported using the client's ID. # Example\n\n```sh\n $ pulumi import auth0:index/client:Client my_client AaiyAPdpYdesoKnqjj8HJqRn4T5titww\n```\n\n ",
            "properties": {
                "addons": {
                    "$ref": "#/types/auth0:index/ClientAddons:ClientAddons",
                    "description": "Addons enabled for this client and their associated configurations.\n"
                },
                "allowedClients": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of applications ID's that will be allowed to make delegation request. By default, all applications will be allowed.\n"
                },
                "allowedLogoutUrls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "URLs that Auth0 may redirect to after logout.\n"
                },
                "allowedOrigins": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "URLs that represent valid origins for cross-origin resource sharing. By default, all your callback URLs will be allowed.\n"
                },
                "appType": {
                    "type": "string",
                    "description": "Type of application the client represents. Possible values are: `native`, `spa`, `regular_web`, `non_interactive`, `sso_integration`. Specific SSO integrations types accepted as well are: `rms`, `box`, `cloudbees`, `concur`, `dropbox`, `mscrm`, `echosign`, `egnyte`, `newrelic`, `office365`, `salesforce`, `sentry`, `sharepoint`, `slack`, `springcm`, `zendesk`, `zoom`.\n"
                },
                "callbacks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "URLs that Auth0 may call back to after a user authenticates for the client. Make sure to specify the protocol (https://) otherwise the callback may fail in some cases. With the exception of custom URI schemes for native clients, all callbacks should use protocol https://.\n"
                },
                "clientAliases": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of audiences/realms for SAML protocol. Used by the wsfed addon.\n"
                },
                "clientId": {
                    "type": "string",
                    "description": "The ID of the client.\n"
                },
                "clientMetadata": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Metadata associated with the client, in the form of an object with string values (max 255 chars). Maximum of 10 metadata properties allowed. Field names (max 255 chars) are alphanumeric and may only include the following special characters: `:,-+=_*?\"/\\()\u003c\u003e@ [Tab] [Space]`.\n"
                },
                "clientSecret": {
                    "type": "string",
                    "description": "Secret for the client. Keep this private. To access this attribute you need to add the `read:client_keys` scope to the\nTerraform client. Otherwise, the attribute will contain an empty string.\n",
                    "secret": true
                },
                "clientSecretRotationTrigger": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Custom metadata for the rotation. The contents of this map are arbitrary and are hashed by the provider. When the hash changes, a rotation is triggered. For example, the map could contain the user making the change, the date of the change, and a text reason for the change. For more info: [rotate-client-secret](https://auth0.com/docs/get-started/applications/rotate-client-secret).\n"
                },
                "crossOriginAuth": {
                    "type": "boolean",
                    "description": "Whether this client can be used to make cross-origin authentication requests (`true`) or it is not allowed to make such requests (`false`). Requires the `coa_toggle_enabled` feature flag to be enabled on the tenant by the support team.\n"
                },
                "crossOriginLoc": {
                    "type": "string",
                    "description": "URL of the location in your site where the cross-origin verification takes place for the cross-origin auth flow when performing authentication in your own domain instead of Auth0 Universal Login page.\n"
                },
                "customLoginPage": {
                    "type": "string",
                    "description": "The content (HTML, CSS, JS) of the custom login page.\n"
                },
                "customLoginPageOn": {
                    "type": "boolean",
                    "description": "Indicates whether a custom login page is to be used.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the purpose of the client.\n",
                    "default": "Managed by Pulumi"
                },
                "encryptionKey": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Encryption used for WS-Fed responses with this client.\n"
                },
                "formTemplate": {
                    "type": "string",
                    "description": "HTML form template to be used for WS-Federation.\n"
                },
                "grantTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Types of grants that this client is authorized to use.\n"
                },
                "initiateLoginUri": {
                    "type": "string",
                    "description": "Initiate login URI. Must be HTTPS or an empty string.\n"
                },
                "isFirstParty": {
                    "type": "boolean",
                    "description": "Indicates whether this client is a first-party client.\n"
                },
                "isTokenEndpointIpHeaderTrusted": {
                    "type": "boolean",
                    "description": "Indicates whether the token endpoint IP header is trusted.\n"
                },
                "jwtConfiguration": {
                    "$ref": "#/types/auth0:index/ClientJwtConfiguration:ClientJwtConfiguration",
                    "description": "Configuration settings for the JWTs issued for this client.\n"
                },
                "logoUri": {
                    "type": "string",
                    "description": "URL of the logo for the client. Recommended size is 150px x 150px. If none is set, the default badge for the application type will be shown.\n"
                },
                "mobile": {
                    "$ref": "#/types/auth0:index/ClientMobile:ClientMobile",
                    "description": "Additional configuration for native mobile apps.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the client.\n"
                },
                "nativeSocialLogin": {
                    "$ref": "#/types/auth0:index/ClientNativeSocialLogin:ClientNativeSocialLogin",
                    "description": "Configuration settings to toggle native social login for mobile native applications. Once this is set it must stay set, with both resources set to `false` in order to change the `app_type`.\n"
                },
                "oidcConformant": {
                    "type": "boolean",
                    "description": "Indicates whether this client will conform to strict OIDC specifications.\n"
                },
                "organizationRequireBehavior": {
                    "type": "string",
                    "description": "Defines how to proceed during an authentication transaction when `organization_usage = \"require\"`. Can be `no_prompt` (default) or `pre_login_prompt`.\n"
                },
                "organizationUsage": {
                    "type": "string",
                    "description": "Defines how to proceed during an authentication transaction with regards to an organization. Can be `deny` (default), `allow` or `require`.\n"
                },
                "refreshToken": {
                    "$ref": "#/types/auth0:index/ClientRefreshToken:ClientRefreshToken",
                    "description": "Configuration settings for the refresh tokens issued for this client.\n"
                },
                "signingKeys": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "description": "List containing a map of the public cert of the signing key and the public cert of the signing key in PKCS7.\n",
                    "secret": true
                },
                "sso": {
                    "type": "boolean",
                    "description": "Applies only to SSO clients and determines whether Auth0 will handle Single Sign-On (true) or whether the identity provider will (false).\n"
                },
                "ssoDisabled": {
                    "type": "boolean",
                    "description": "Indicates whether or not SSO is disabled.\n"
                },
                "tokenEndpointAuthMethod": {
                    "type": "string",
                    "description": "Defines the requested authentication method for the token endpoint. Options include `none` (public client without a client secret), `client_secret_post` (client uses HTTP POST parameters), `client_secret_basic` (client uses HTTP Basic).\n"
                },
                "webOrigins": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "URLs that represent valid web origins for use with web message response mode.\n"
                }
            },
            "required": [
                "addons",
                "clientId",
                "clientSecret",
                "customLoginPageOn",
                "description",
                "grantTypes",
                "isFirstParty",
                "isTokenEndpointIpHeaderTrusted",
                "jwtConfiguration",
                "mobile",
                "name",
                "nativeSocialLogin",
                "oidcConformant",
                "refreshToken",
                "signingKeys",
                "tokenEndpointAuthMethod"
            ],
            "inputProperties": {
                "addons": {
                    "$ref": "#/types/auth0:index/ClientAddons:ClientAddons",
                    "description": "Addons enabled for this client and their associated configurations.\n"
                },
                "allowedClients": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of applications ID's that will be allowed to make delegation request. By default, all applications will be allowed.\n"
                },
                "allowedLogoutUrls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "URLs that Auth0 may redirect to after logout.\n"
                },
                "allowedOrigins": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "URLs that represent valid origins for cross-origin resource sharing. By default, all your callback URLs will be allowed.\n"
                },
                "appType": {
                    "type": "string",
                    "description": "Type of application the client represents. Possible values are: `native`, `spa`, `regular_web`, `non_interactive`, `sso_integration`. Specific SSO integrations types accepted as well are: `rms`, `box`, `cloudbees`, `concur`, `dropbox`, `mscrm`, `echosign`, `egnyte`, `newrelic`, `office365`, `salesforce`, `sentry`, `sharepoint`, `slack`, `springcm`, `zendesk`, `zoom`.\n"
                },
                "callbacks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "URLs that Auth0 may call back to after a user authenticates for the client. Make sure to specify the protocol (https://) otherwise the callback may fail in some cases. With the exception of custom URI schemes for native clients, all callbacks should use protocol https://.\n"
                },
                "clientAliases": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of audiences/realms for SAML protocol. Used by the wsfed addon.\n"
                },
                "clientMetadata": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Metadata associated with the client, in the form of an object with string values (max 255 chars). Maximum of 10 metadata properties allowed. Field names (max 255 chars) are alphanumeric and may only include the following special characters: `:,-+=_*?\"/\\()\u003c\u003e@ [Tab] [Space]`.\n"
                },
                "clientSecretRotationTrigger": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Custom metadata for the rotation. The contents of this map are arbitrary and are hashed by the provider. When the hash changes, a rotation is triggered. For example, the map could contain the user making the change, the date of the change, and a text reason for the change. For more info: [rotate-client-secret](https://auth0.com/docs/get-started/applications/rotate-client-secret).\n"
                },
                "crossOriginAuth": {
                    "type": "boolean",
                    "description": "Whether this client can be used to make cross-origin authentication requests (`true`) or it is not allowed to make such requests (`false`). Requires the `coa_toggle_enabled` feature flag to be enabled on the tenant by the support team.\n"
                },
                "crossOriginLoc": {
                    "type": "string",
                    "description": "URL of the location in your site where the cross-origin verification takes place for the cross-origin auth flow when performing authentication in your own domain instead of Auth0 Universal Login page.\n"
                },
                "customLoginPage": {
                    "type": "string",
                    "description": "The content (HTML, CSS, JS) of the custom login page.\n"
                },
                "customLoginPageOn": {
                    "type": "boolean",
                    "description": "Indicates whether a custom login page is to be used.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the purpose of the client.\n",
                    "default": "Managed by Pulumi"
                },
                "encryptionKey": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Encryption used for WS-Fed responses with this client.\n"
                },
                "formTemplate": {
                    "type": "string",
                    "description": "HTML form template to be used for WS-Federation.\n"
                },
                "grantTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Types of grants that this client is authorized to use.\n"
                },
                "initiateLoginUri": {
                    "type": "string",
                    "description": "Initiate login URI. Must be HTTPS or an empty string.\n"
                },
                "isFirstParty": {
                    "type": "boolean",
                    "description": "Indicates whether this client is a first-party client.\n"
                },
                "isTokenEndpointIpHeaderTrusted": {
                    "type": "boolean",
                    "description": "Indicates whether the token endpoint IP header is trusted.\n"
                },
                "jwtConfiguration": {
                    "$ref": "#/types/auth0:index/ClientJwtConfiguration:ClientJwtConfiguration",
                    "description": "Configuration settings for the JWTs issued for this client.\n"
                },
                "logoUri": {
                    "type": "string",
                    "description": "URL of the logo for the client. Recommended size is 150px x 150px. If none is set, the default badge for the application type will be shown.\n"
                },
                "mobile": {
                    "$ref": "#/types/auth0:index/ClientMobile:ClientMobile",
                    "description": "Additional configuration for native mobile apps.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the client.\n"
                },
                "nativeSocialLogin": {
                    "$ref": "#/types/auth0:index/ClientNativeSocialLogin:ClientNativeSocialLogin",
                    "description": "Configuration settings to toggle native social login for mobile native applications. Once this is set it must stay set, with both resources set to `false` in order to change the `app_type`.\n"
                },
                "oidcConformant": {
                    "type": "boolean",
                    "description": "Indicates whether this client will conform to strict OIDC specifications.\n"
                },
                "organizationRequireBehavior": {
                    "type": "string",
                    "description": "Defines how to proceed during an authentication transaction when `organization_usage = \"require\"`. Can be `no_prompt` (default) or `pre_login_prompt`.\n"
                },
                "organizationUsage": {
                    "type": "string",
                    "description": "Defines how to proceed during an authentication transaction with regards to an organization. Can be `deny` (default), `allow` or `require`.\n"
                },
                "refreshToken": {
                    "$ref": "#/types/auth0:index/ClientRefreshToken:ClientRefreshToken",
                    "description": "Configuration settings for the refresh tokens issued for this client.\n"
                },
                "sso": {
                    "type": "boolean",
                    "description": "Applies only to SSO clients and determines whether Auth0 will handle Single Sign-On (true) or whether the identity provider will (false).\n"
                },
                "ssoDisabled": {
                    "type": "boolean",
                    "description": "Indicates whether or not SSO is disabled.\n"
                },
                "tokenEndpointAuthMethod": {
                    "type": "string",
                    "description": "Defines the requested authentication method for the token endpoint. Options include `none` (public client without a client secret), `client_secret_post` (client uses HTTP POST parameters), `client_secret_basic` (client uses HTTP Basic).\n"
                },
                "webOrigins": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "URLs that represent valid web origins for use with web message response mode.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Client resources.\n",
                "properties": {
                    "addons": {
                        "$ref": "#/types/auth0:index/ClientAddons:ClientAddons",
                        "description": "Addons enabled for this client and their associated configurations.\n"
                    },
                    "allowedClients": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of applications ID's that will be allowed to make delegation request. By default, all applications will be allowed.\n"
                    },
                    "allowedLogoutUrls": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "URLs that Auth0 may redirect to after logout.\n"
                    },
                    "allowedOrigins": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "URLs that represent valid origins for cross-origin resource sharing. By default, all your callback URLs will be allowed.\n"
                    },
                    "appType": {
                        "type": "string",
                        "description": "Type of application the client represents. Possible values are: `native`, `spa`, `regular_web`, `non_interactive`, `sso_integration`. Specific SSO integrations types accepted as well are: `rms`, `box`, `cloudbees`, `concur`, `dropbox`, `mscrm`, `echosign`, `egnyte`, `newrelic`, `office365`, `salesforce`, `sentry`, `sharepoint`, `slack`, `springcm`, `zendesk`, `zoom`.\n"
                    },
                    "callbacks": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "URLs that Auth0 may call back to after a user authenticates for the client. Make sure to specify the protocol (https://) otherwise the callback may fail in some cases. With the exception of custom URI schemes for native clients, all callbacks should use protocol https://.\n"
                    },
                    "clientAliases": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of audiences/realms for SAML protocol. Used by the wsfed addon.\n"
                    },
                    "clientId": {
                        "type": "string",
                        "description": "The ID of the client.\n"
                    },
                    "clientMetadata": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Metadata associated with the client, in the form of an object with string values (max 255 chars). Maximum of 10 metadata properties allowed. Field names (max 255 chars) are alphanumeric and may only include the following special characters: `:,-+=_*?\"/\\()\u003c\u003e@ [Tab] [Space]`.\n"
                    },
                    "clientSecret": {
                        "type": "string",
                        "description": "Secret for the client. Keep this private. To access this attribute you need to add the `read:client_keys` scope to the\nTerraform client. Otherwise, the attribute will contain an empty string.\n",
                        "secret": true
                    },
                    "clientSecretRotationTrigger": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Custom metadata for the rotation. The contents of this map are arbitrary and are hashed by the provider. When the hash changes, a rotation is triggered. For example, the map could contain the user making the change, the date of the change, and a text reason for the change. For more info: [rotate-client-secret](https://auth0.com/docs/get-started/applications/rotate-client-secret).\n"
                    },
                    "crossOriginAuth": {
                        "type": "boolean",
                        "description": "Whether this client can be used to make cross-origin authentication requests (`true`) or it is not allowed to make such requests (`false`). Requires the `coa_toggle_enabled` feature flag to be enabled on the tenant by the support team.\n"
                    },
                    "crossOriginLoc": {
                        "type": "string",
                        "description": "URL of the location in your site where the cross-origin verification takes place for the cross-origin auth flow when performing authentication in your own domain instead of Auth0 Universal Login page.\n"
                    },
                    "customLoginPage": {
                        "type": "string",
                        "description": "The content (HTML, CSS, JS) of the custom login page.\n"
                    },
                    "customLoginPageOn": {
                        "type": "boolean",
                        "description": "Indicates whether a custom login page is to be used.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the purpose of the client.\n",
                        "default": "Managed by Pulumi"
                    },
                    "encryptionKey": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Encryption used for WS-Fed responses with this client.\n"
                    },
                    "formTemplate": {
                        "type": "string",
                        "description": "HTML form template to be used for WS-Federation.\n"
                    },
                    "grantTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Types of grants that this client is authorized to use.\n"
                    },
                    "initiateLoginUri": {
                        "type": "string",
                        "description": "Initiate login URI. Must be HTTPS or an empty string.\n"
                    },
                    "isFirstParty": {
                        "type": "boolean",
                        "description": "Indicates whether this client is a first-party client.\n"
                    },
                    "isTokenEndpointIpHeaderTrusted": {
                        "type": "boolean",
                        "description": "Indicates whether the token endpoint IP header is trusted.\n"
                    },
                    "jwtConfiguration": {
                        "$ref": "#/types/auth0:index/ClientJwtConfiguration:ClientJwtConfiguration",
                        "description": "Configuration settings for the JWTs issued for this client.\n"
                    },
                    "logoUri": {
                        "type": "string",
                        "description": "URL of the logo for the client. Recommended size is 150px x 150px. If none is set, the default badge for the application type will be shown.\n"
                    },
                    "mobile": {
                        "$ref": "#/types/auth0:index/ClientMobile:ClientMobile",
                        "description": "Additional configuration for native mobile apps.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the client.\n"
                    },
                    "nativeSocialLogin": {
                        "$ref": "#/types/auth0:index/ClientNativeSocialLogin:ClientNativeSocialLogin",
                        "description": "Configuration settings to toggle native social login for mobile native applications. Once this is set it must stay set, with both resources set to `false` in order to change the `app_type`.\n"
                    },
                    "oidcConformant": {
                        "type": "boolean",
                        "description": "Indicates whether this client will conform to strict OIDC specifications.\n"
                    },
                    "organizationRequireBehavior": {
                        "type": "string",
                        "description": "Defines how to proceed during an authentication transaction when `organization_usage = \"require\"`. Can be `no_prompt` (default) or `pre_login_prompt`.\n"
                    },
                    "organizationUsage": {
                        "type": "string",
                        "description": "Defines how to proceed during an authentication transaction with regards to an organization. Can be `deny` (default), `allow` or `require`.\n"
                    },
                    "refreshToken": {
                        "$ref": "#/types/auth0:index/ClientRefreshToken:ClientRefreshToken",
                        "description": "Configuration settings for the refresh tokens issued for this client.\n"
                    },
                    "signingKeys": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "additionalProperties": {
                                "$ref": "pulumi.json#/Any"
                            }
                        },
                        "description": "List containing a map of the public cert of the signing key and the public cert of the signing key in PKCS7.\n",
                        "secret": true
                    },
                    "sso": {
                        "type": "boolean",
                        "description": "Applies only to SSO clients and determines whether Auth0 will handle Single Sign-On (true) or whether the identity provider will (false).\n"
                    },
                    "ssoDisabled": {
                        "type": "boolean",
                        "description": "Indicates whether or not SSO is disabled.\n"
                    },
                    "tokenEndpointAuthMethod": {
                        "type": "string",
                        "description": "Defines the requested authentication method for the token endpoint. Options include `none` (public client without a client secret), `client_secret_post` (client uses HTTP POST parameters), `client_secret_basic` (client uses HTTP Basic).\n"
                    },
                    "webOrigins": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "URLs that represent valid web origins for use with web message response mode.\n"
                    }
                },
                "type": "object"
            }
        },
        "auth0:index/clientGrant:ClientGrant": {
            "description": "Auth0 uses various grant types, or methods by which you grant limited access to your resources to another entity without exposing credentials. The OAuth 2.0 protocol supports several types of grants, which allow different types of access. This resource allows you to create and manage client grants used with configured Auth0 clients.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as auth0 from \"@pulumi/auth0\";\n\n// The following example grants a client the \"create:foo\" permission (scope).\nconst myClient = new auth0.Client(\"myClient\", {});\nconst myResourceServer = new auth0.ResourceServer(\"myResourceServer\", {\n    identifier: \"https://api.example.com/client-grant\",\n    scopes: [\n        {\n            value: \"create:foo\",\n            description: \"Create foos\",\n        },\n        {\n            value: \"create:bar\",\n            description: \"Create bars\",\n        },\n    ],\n});\nconst myClientGrant = new auth0.ClientGrant(\"myClientGrant\", {\n    clientId: myClient.id,\n    audience: myResourceServer.identifier,\n    scopes: [\"create:foo\"],\n});\n```\n```python\nimport pulumi\nimport pulumi_auth0 as auth0\n\n# The following example grants a client the \"create:foo\" permission (scope).\nmy_client = auth0.Client(\"myClient\")\nmy_resource_server = auth0.ResourceServer(\"myResourceServer\",\n    identifier=\"https://api.example.com/client-grant\",\n    scopes=[\n        auth0.ResourceServerScopeArgs(\n            value=\"create:foo\",\n            description=\"Create foos\",\n        ),\n        auth0.ResourceServerScopeArgs(\n            value=\"create:bar\",\n            description=\"Create bars\",\n        ),\n    ])\nmy_client_grant = auth0.ClientGrant(\"myClientGrant\",\n    client_id=my_client.id,\n    audience=my_resource_server.identifier,\n    scopes=[\"create:foo\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Auth0 = Pulumi.Auth0;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // The following example grants a client the \"create:foo\" permission (scope).\n    var myClient = new Auth0.Client(\"myClient\");\n\n    var myResourceServer = new Auth0.ResourceServer(\"myResourceServer\", new()\n    {\n        Identifier = \"https://api.example.com/client-grant\",\n        Scopes = new[]\n        {\n            new Auth0.Inputs.ResourceServerScopeArgs\n            {\n                Value = \"create:foo\",\n                Description = \"Create foos\",\n            },\n            new Auth0.Inputs.ResourceServerScopeArgs\n            {\n                Value = \"create:bar\",\n                Description = \"Create bars\",\n            },\n        },\n    });\n\n    var myClientGrant = new Auth0.ClientGrant(\"myClientGrant\", new()\n    {\n        ClientId = myClient.Id,\n        Audience = myResourceServer.Identifier,\n        Scopes = new[]\n        {\n            \"create:foo\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-auth0/sdk/v2/go/auth0\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyClient, err := auth0.NewClient(ctx, \"myClient\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmyResourceServer, err := auth0.NewResourceServer(ctx, \"myResourceServer\", \u0026auth0.ResourceServerArgs{\n\t\t\tIdentifier: pulumi.String(\"https://api.example.com/client-grant\"),\n\t\t\tScopes: auth0.ResourceServerScopeArray{\n\t\t\t\t\u0026auth0.ResourceServerScopeArgs{\n\t\t\t\t\tValue:       pulumi.String(\"create:foo\"),\n\t\t\t\t\tDescription: pulumi.String(\"Create foos\"),\n\t\t\t\t},\n\t\t\t\t\u0026auth0.ResourceServerScopeArgs{\n\t\t\t\t\tValue:       pulumi.String(\"create:bar\"),\n\t\t\t\t\tDescription: pulumi.String(\"Create bars\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = auth0.NewClientGrant(ctx, \"myClientGrant\", \u0026auth0.ClientGrantArgs{\n\t\t\tClientId: myClient.ID(),\n\t\t\tAudience: myResourceServer.Identifier,\n\t\t\tScopes: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"create:foo\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.auth0.Client;\nimport com.pulumi.auth0.ResourceServer;\nimport com.pulumi.auth0.ResourceServerArgs;\nimport com.pulumi.auth0.inputs.ResourceServerScopeArgs;\nimport com.pulumi.auth0.ClientGrant;\nimport com.pulumi.auth0.ClientGrantArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myClient = new Client(\"myClient\");\n\n        var myResourceServer = new ResourceServer(\"myResourceServer\", ResourceServerArgs.builder()        \n            .identifier(\"https://api.example.com/client-grant\")\n            .scopes(            \n                ResourceServerScopeArgs.builder()\n                    .value(\"create:foo\")\n                    .description(\"Create foos\")\n                    .build(),\n                ResourceServerScopeArgs.builder()\n                    .value(\"create:bar\")\n                    .description(\"Create bars\")\n                    .build())\n            .build());\n\n        var myClientGrant = new ClientGrant(\"myClientGrant\", ClientGrantArgs.builder()        \n            .clientId(myClient.id())\n            .audience(myResourceServer.identifier())\n            .scopes(\"create:foo\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # The following example grants a client the \"create:foo\" permission (scope).\n  myClient:\n    type: auth0:Client\n  myResourceServer:\n    type: auth0:ResourceServer\n    properties:\n      identifier: https://api.example.com/client-grant\n      scopes:\n        - value: create:foo\n          description: Create foos\n        - value: create:bar\n          description: Create bars\n  myClientGrant:\n    type: auth0:ClientGrant\n    properties:\n      clientId: ${myClient.id}\n      audience: ${myResourceServer.identifier}\n      scopes:\n        - create:foo\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nClient grants can be imported using the grant ID. # Application -\u003e APIs -\u003e Expand the required API # Example\n\n```sh\n $ pulumi import auth0:index/clientGrant:ClientGrant my_client_grant cgr_XXXXXXXXXXXXXXXX\n```\n\n ",
            "properties": {
                "audience": {
                    "type": "string",
                    "description": "Audience or API Identifier for this grant.\n"
                },
                "clientId": {
                    "type": "string",
                    "description": "ID of the client for this grant.\n"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Permissions (scopes) included in this grant.\n"
                }
            },
            "required": [
                "audience",
                "clientId",
                "scopes"
            ],
            "inputProperties": {
                "audience": {
                    "type": "string",
                    "description": "Audience or API Identifier for this grant.\n",
                    "willReplaceOnChanges": true
                },
                "clientId": {
                    "type": "string",
                    "description": "ID of the client for this grant.\n",
                    "willReplaceOnChanges": true
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Permissions (scopes) included in this grant.\n"
                }
            },
            "requiredInputs": [
                "audience",
                "clientId",
                "scopes"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ClientGrant resources.\n",
                "properties": {
                    "audience": {
                        "type": "string",
                        "description": "Audience or API Identifier for this grant.\n",
                        "willReplaceOnChanges": true
                    },
                    "clientId": {
                        "type": "string",
                        "description": "ID of the client for this grant.\n",
                        "willReplaceOnChanges": true
                    },
                    "scopes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Permissions (scopes) included in this grant.\n"
                    }
                },
                "type": "object"
            }
        },
        "auth0:index/connection:Connection": {
            "description": "With Auth0, you can define sources of users, otherwise known as connections, which may include identity providers (such as Google or LinkedIn), databases, or passwordless authentication methods. This resource allows you to configure and manage connections to be used with your clients and users.\n\n\u003e The Auth0 dashboard displays only one connection per social provider. Although the Auth0 Management API allows the\ncreation of multiple connections per strategy, the additional connections may not be visible in the Auth0 dashboard.\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### Google OAuth2 Connection\n\n\u003e Your Auth0 account may be pre-configured with a `google-oauth2` connection.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as auth0 from \"@pulumi/auth0\";\n\nconst googleOauth2 = new auth0.Connection(\"googleOauth2\", {\n    options: {\n        allowedAudiences: [\n            \"example.com\",\n            \"api.example.com\",\n        ],\n        clientId: \"\u003cclient-id\u003e\",\n        clientSecret: \"\u003cclient-secret\u003e\",\n        nonPersistentAttrs: [\n            \"ethnicity\",\n            \"gender\",\n        ],\n        scopes: [\n            \"email\",\n            \"profile\",\n            \"gmail\",\n            \"youtube\",\n        ],\n        setUserRootAttributes: \"on_each_login\",\n    },\n    strategy: \"google-oauth2\",\n});\n```\n```python\nimport pulumi\nimport pulumi_auth0 as auth0\n\ngoogle_oauth2 = auth0.Connection(\"googleOauth2\",\n    options=auth0.ConnectionOptionsArgs(\n        allowed_audiences=[\n            \"example.com\",\n            \"api.example.com\",\n        ],\n        client_id=\"\u003cclient-id\u003e\",\n        client_secret=\"\u003cclient-secret\u003e\",\n        non_persistent_attrs=[\n            \"ethnicity\",\n            \"gender\",\n        ],\n        scopes=[\n            \"email\",\n            \"profile\",\n            \"gmail\",\n            \"youtube\",\n        ],\n        set_user_root_attributes=\"on_each_login\",\n    ),\n    strategy=\"google-oauth2\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Auth0 = Pulumi.Auth0;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var googleOauth2 = new Auth0.Connection(\"googleOauth2\", new()\n    {\n        Options = new Auth0.Inputs.ConnectionOptionsArgs\n        {\n            AllowedAudiences = new[]\n            {\n                \"example.com\",\n                \"api.example.com\",\n            },\n            ClientId = \"\u003cclient-id\u003e\",\n            ClientSecret = \"\u003cclient-secret\u003e\",\n            NonPersistentAttrs = new[]\n            {\n                \"ethnicity\",\n                \"gender\",\n            },\n            Scopes = new[]\n            {\n                \"email\",\n                \"profile\",\n                \"gmail\",\n                \"youtube\",\n            },\n            SetUserRootAttributes = \"on_each_login\",\n        },\n        Strategy = \"google-oauth2\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-auth0/sdk/v2/go/auth0\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := auth0.NewConnection(ctx, \"googleOauth2\", \u0026auth0.ConnectionArgs{\n\t\t\tOptions: \u0026auth0.ConnectionOptionsArgs{\n\t\t\t\tAllowedAudiences: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"example.com\"),\n\t\t\t\t\tpulumi.String(\"api.example.com\"),\n\t\t\t\t},\n\t\t\t\tClientId:     pulumi.String(\"\u003cclient-id\u003e\"),\n\t\t\t\tClientSecret: pulumi.String(\"\u003cclient-secret\u003e\"),\n\t\t\t\tNonPersistentAttrs: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"ethnicity\"),\n\t\t\t\t\tpulumi.String(\"gender\"),\n\t\t\t\t},\n\t\t\t\tScopes: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"email\"),\n\t\t\t\t\tpulumi.String(\"profile\"),\n\t\t\t\t\tpulumi.String(\"gmail\"),\n\t\t\t\t\tpulumi.String(\"youtube\"),\n\t\t\t\t},\n\t\t\t\tSetUserRootAttributes: pulumi.String(\"on_each_login\"),\n\t\t\t},\n\t\t\tStrategy: pulumi.String(\"google-oauth2\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.auth0.Connection;\nimport com.pulumi.auth0.ConnectionArgs;\nimport com.pulumi.auth0.inputs.ConnectionOptionsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var googleOauth2 = new Connection(\"googleOauth2\", ConnectionArgs.builder()        \n            .options(ConnectionOptionsArgs.builder()\n                .allowedAudiences(                \n                    \"example.com\",\n                    \"api.example.com\")\n                .clientId(\"\u003cclient-id\u003e\")\n                .clientSecret(\"\u003cclient-secret\u003e\")\n                .nonPersistentAttrs(                \n                    \"ethnicity\",\n                    \"gender\")\n                .scopes(                \n                    \"email\",\n                    \"profile\",\n                    \"gmail\",\n                    \"youtube\")\n                .setUserRootAttributes(\"on_each_login\")\n                .build())\n            .strategy(\"google-oauth2\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  googleOauth2:\n    type: auth0:Connection\n    properties:\n      options:\n        allowedAudiences:\n          - example.com\n          - api.example.com\n        clientId: \u003cclient-id\u003e\n        clientSecret: \u003cclient-secret\u003e\n        nonPersistentAttrs:\n          - ethnicity\n          - gender\n        scopes:\n          - email\n          - profile\n          - gmail\n          - youtube\n        setUserRootAttributes: on_each_login\n      strategy: google-oauth2\n```\n{{% /example %}}\n{{% example %}}\n### Facebook Connection\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as auth0 from \"@pulumi/auth0\";\n\nconst facebook = new auth0.Connection(\"facebook\", {\n    options: {\n        clientId: \"\u003cclient-id\u003e\",\n        clientSecret: \"\u003cclient-secret\u003e\",\n        nonPersistentAttrs: [\n            \"ethnicity\",\n            \"gender\",\n        ],\n        scopes: [\n            \"public_profile\",\n            \"email\",\n            \"groups_access_member_info\",\n            \"user_birthday\",\n        ],\n        setUserRootAttributes: \"on_each_login\",\n    },\n    strategy: \"facebook\",\n});\n```\n```python\nimport pulumi\nimport pulumi_auth0 as auth0\n\nfacebook = auth0.Connection(\"facebook\",\n    options=auth0.ConnectionOptionsArgs(\n        client_id=\"\u003cclient-id\u003e\",\n        client_secret=\"\u003cclient-secret\u003e\",\n        non_persistent_attrs=[\n            \"ethnicity\",\n            \"gender\",\n        ],\n        scopes=[\n            \"public_profile\",\n            \"email\",\n            \"groups_access_member_info\",\n            \"user_birthday\",\n        ],\n        set_user_root_attributes=\"on_each_login\",\n    ),\n    strategy=\"facebook\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Auth0 = Pulumi.Auth0;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var facebook = new Auth0.Connection(\"facebook\", new()\n    {\n        Options = new Auth0.Inputs.ConnectionOptionsArgs\n        {\n            ClientId = \"\u003cclient-id\u003e\",\n            ClientSecret = \"\u003cclient-secret\u003e\",\n            NonPersistentAttrs = new[]\n            {\n                \"ethnicity\",\n                \"gender\",\n            },\n            Scopes = new[]\n            {\n                \"public_profile\",\n                \"email\",\n                \"groups_access_member_info\",\n                \"user_birthday\",\n            },\n            SetUserRootAttributes = \"on_each_login\",\n        },\n        Strategy = \"facebook\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-auth0/sdk/v2/go/auth0\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := auth0.NewConnection(ctx, \"facebook\", \u0026auth0.ConnectionArgs{\n\t\t\tOptions: \u0026auth0.ConnectionOptionsArgs{\n\t\t\t\tClientId:     pulumi.String(\"\u003cclient-id\u003e\"),\n\t\t\t\tClientSecret: pulumi.String(\"\u003cclient-secret\u003e\"),\n\t\t\t\tNonPersistentAttrs: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"ethnicity\"),\n\t\t\t\t\tpulumi.String(\"gender\"),\n\t\t\t\t},\n\t\t\t\tScopes: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"public_profile\"),\n\t\t\t\t\tpulumi.String(\"email\"),\n\t\t\t\t\tpulumi.String(\"groups_access_member_info\"),\n\t\t\t\t\tpulumi.String(\"user_birthday\"),\n\t\t\t\t},\n\t\t\t\tSetUserRootAttributes: pulumi.String(\"on_each_login\"),\n\t\t\t},\n\t\t\tStrategy: pulumi.String(\"facebook\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.auth0.Connection;\nimport com.pulumi.auth0.ConnectionArgs;\nimport com.pulumi.auth0.inputs.ConnectionOptionsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var facebook = new Connection(\"facebook\", ConnectionArgs.builder()        \n            .options(ConnectionOptionsArgs.builder()\n                .clientId(\"\u003cclient-id\u003e\")\n                .clientSecret(\"\u003cclient-secret\u003e\")\n                .nonPersistentAttrs(                \n                    \"ethnicity\",\n                    \"gender\")\n                .scopes(                \n                    \"public_profile\",\n                    \"email\",\n                    \"groups_access_member_info\",\n                    \"user_birthday\")\n                .setUserRootAttributes(\"on_each_login\")\n                .build())\n            .strategy(\"facebook\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  facebook:\n    type: auth0:Connection\n    properties:\n      options:\n        clientId: \u003cclient-id\u003e\n        clientSecret: \u003cclient-secret\u003e\n        nonPersistentAttrs:\n          - ethnicity\n          - gender\n        scopes:\n          - public_profile\n          - email\n          - groups_access_member_info\n          - user_birthday\n        setUserRootAttributes: on_each_login\n      strategy: facebook\n```\n{{% /example %}}\n{{% example %}}\n### Apple Connection\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as auth0 from \"@pulumi/auth0\";\n\nconst apple = new auth0.Connection(\"apple\", {\n    options: {\n        clientId: \"\u003cclient-id\u003e\",\n        clientSecret: `-----BEGIN PRIVATE KEY-----\nMIHBAgEAMA0GCSqGSIb3DQEBAQUABIGsMIGpAgEAA\n-----END PRIVATE KEY-----\n`,\n        keyId: \"\u003ckey-id\u003e\",\n        nonPersistentAttrs: [\n            \"ethnicity\",\n            \"gender\",\n        ],\n        scopes: [\n            \"email\",\n            \"name\",\n        ],\n        setUserRootAttributes: \"on_first_login\",\n        teamId: \"\u003cteam-id\u003e\",\n    },\n    strategy: \"apple\",\n});\n```\n```python\nimport pulumi\nimport pulumi_auth0 as auth0\n\napple = auth0.Connection(\"apple\",\n    options=auth0.ConnectionOptionsArgs(\n        client_id=\"\u003cclient-id\u003e\",\n        client_secret=\"\"\"-----BEGIN PRIVATE KEY-----\nMIHBAgEAMA0GCSqGSIb3DQEBAQUABIGsMIGpAgEAA\n-----END PRIVATE KEY-----\n\"\"\",\n        key_id=\"\u003ckey-id\u003e\",\n        non_persistent_attrs=[\n            \"ethnicity\",\n            \"gender\",\n        ],\n        scopes=[\n            \"email\",\n            \"name\",\n        ],\n        set_user_root_attributes=\"on_first_login\",\n        team_id=\"\u003cteam-id\u003e\",\n    ),\n    strategy=\"apple\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Auth0 = Pulumi.Auth0;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var apple = new Auth0.Connection(\"apple\", new()\n    {\n        Options = new Auth0.Inputs.ConnectionOptionsArgs\n        {\n            ClientId = \"\u003cclient-id\u003e\",\n            ClientSecret = @\"-----BEGIN PRIVATE KEY-----\nMIHBAgEAMA0GCSqGSIb3DQEBAQUABIGsMIGpAgEAA\n-----END PRIVATE KEY-----\n\",\n            KeyId = \"\u003ckey-id\u003e\",\n            NonPersistentAttrs = new[]\n            {\n                \"ethnicity\",\n                \"gender\",\n            },\n            Scopes = new[]\n            {\n                \"email\",\n                \"name\",\n            },\n            SetUserRootAttributes = \"on_first_login\",\n            TeamId = \"\u003cteam-id\u003e\",\n        },\n        Strategy = \"apple\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-auth0/sdk/v2/go/auth0\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := auth0.NewConnection(ctx, \"apple\", \u0026auth0.ConnectionArgs{\n\t\t\tOptions: \u0026auth0.ConnectionOptionsArgs{\n\t\t\t\tClientId:     pulumi.String(\"\u003cclient-id\u003e\"),\n\t\t\t\tClientSecret: pulumi.String(fmt.Sprintf(\"-----BEGIN PRIVATE KEY-----\\nMIHBAgEAMA0GCSqGSIb3DQEBAQUABIGsMIGpAgEAA\\n-----END PRIVATE KEY-----\\n\")),\n\t\t\t\tKeyId:        pulumi.String(\"\u003ckey-id\u003e\"),\n\t\t\t\tNonPersistentAttrs: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"ethnicity\"),\n\t\t\t\t\tpulumi.String(\"gender\"),\n\t\t\t\t},\n\t\t\t\tScopes: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"email\"),\n\t\t\t\t\tpulumi.String(\"name\"),\n\t\t\t\t},\n\t\t\t\tSetUserRootAttributes: pulumi.String(\"on_first_login\"),\n\t\t\t\tTeamId:                pulumi.String(\"\u003cteam-id\u003e\"),\n\t\t\t},\n\t\t\tStrategy: pulumi.String(\"apple\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.auth0.Connection;\nimport com.pulumi.auth0.ConnectionArgs;\nimport com.pulumi.auth0.inputs.ConnectionOptionsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var apple = new Connection(\"apple\", ConnectionArgs.builder()        \n            .options(ConnectionOptionsArgs.builder()\n                .clientId(\"\u003cclient-id\u003e\")\n                .clientSecret(\"\"\"\n-----BEGIN PRIVATE KEY-----\nMIHBAgEAMA0GCSqGSIb3DQEBAQUABIGsMIGpAgEAA\n-----END PRIVATE KEY-----\n                \"\"\")\n                .keyId(\"\u003ckey-id\u003e\")\n                .nonPersistentAttrs(                \n                    \"ethnicity\",\n                    \"gender\")\n                .scopes(                \n                    \"email\",\n                    \"name\")\n                .setUserRootAttributes(\"on_first_login\")\n                .teamId(\"\u003cteam-id\u003e\")\n                .build())\n            .strategy(\"apple\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  apple:\n    type: auth0:Connection\n    properties:\n      options:\n        clientId: \u003cclient-id\u003e\n        clientSecret: |\n          -----BEGIN PRIVATE KEY-----\n          MIHBAgEAMA0GCSqGSIb3DQEBAQUABIGsMIGpAgEAA\n          -----END PRIVATE KEY-----\n        keyId: \u003ckey-id\u003e\n        nonPersistentAttrs:\n          - ethnicity\n          - gender\n        scopes:\n          - email\n          - name\n        setUserRootAttributes: on_first_login\n        teamId: \u003cteam-id\u003e\n      strategy: apple\n```\n{{% /example %}}\n{{% example %}}\n### LinkedIn Connection\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as auth0 from \"@pulumi/auth0\";\n\nconst linkedin = new auth0.Connection(\"linkedin\", {\n    options: {\n        clientId: \"\u003cclient-id\u003e\",\n        clientSecret: \"\u003cclient-secret\u003e\",\n        nonPersistentAttrs: [\n            \"ethnicity\",\n            \"gender\",\n        ],\n        scopes: [\n            \"basic_profile\",\n            \"profile\",\n            \"email\",\n        ],\n        setUserRootAttributes: \"on_each_login\",\n        strategyVersion: 2,\n    },\n    strategy: \"linkedin\",\n});\n```\n```python\nimport pulumi\nimport pulumi_auth0 as auth0\n\nlinkedin = auth0.Connection(\"linkedin\",\n    options=auth0.ConnectionOptionsArgs(\n        client_id=\"\u003cclient-id\u003e\",\n        client_secret=\"\u003cclient-secret\u003e\",\n        non_persistent_attrs=[\n            \"ethnicity\",\n            \"gender\",\n        ],\n        scopes=[\n            \"basic_profile\",\n            \"profile\",\n            \"email\",\n        ],\n        set_user_root_attributes=\"on_each_login\",\n        strategy_version=2,\n    ),\n    strategy=\"linkedin\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Auth0 = Pulumi.Auth0;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var linkedin = new Auth0.Connection(\"linkedin\", new()\n    {\n        Options = new Auth0.Inputs.ConnectionOptionsArgs\n        {\n            ClientId = \"\u003cclient-id\u003e\",\n            ClientSecret = \"\u003cclient-secret\u003e\",\n            NonPersistentAttrs = new[]\n            {\n                \"ethnicity\",\n                \"gender\",\n            },\n            Scopes = new[]\n            {\n                \"basic_profile\",\n                \"profile\",\n                \"email\",\n            },\n            SetUserRootAttributes = \"on_each_login\",\n            StrategyVersion = 2,\n        },\n        Strategy = \"linkedin\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-auth0/sdk/v2/go/auth0\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := auth0.NewConnection(ctx, \"linkedin\", \u0026auth0.ConnectionArgs{\n\t\t\tOptions: \u0026auth0.ConnectionOptionsArgs{\n\t\t\t\tClientId:     pulumi.String(\"\u003cclient-id\u003e\"),\n\t\t\t\tClientSecret: pulumi.String(\"\u003cclient-secret\u003e\"),\n\t\t\t\tNonPersistentAttrs: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"ethnicity\"),\n\t\t\t\t\tpulumi.String(\"gender\"),\n\t\t\t\t},\n\t\t\t\tScopes: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"basic_profile\"),\n\t\t\t\t\tpulumi.String(\"profile\"),\n\t\t\t\t\tpulumi.String(\"email\"),\n\t\t\t\t},\n\t\t\t\tSetUserRootAttributes: pulumi.String(\"on_each_login\"),\n\t\t\t\tStrategyVersion:       pulumi.Int(2),\n\t\t\t},\n\t\t\tStrategy: pulumi.String(\"linkedin\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.auth0.Connection;\nimport com.pulumi.auth0.ConnectionArgs;\nimport com.pulumi.auth0.inputs.ConnectionOptionsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var linkedin = new Connection(\"linkedin\", ConnectionArgs.builder()        \n            .options(ConnectionOptionsArgs.builder()\n                .clientId(\"\u003cclient-id\u003e\")\n                .clientSecret(\"\u003cclient-secret\u003e\")\n                .nonPersistentAttrs(                \n                    \"ethnicity\",\n                    \"gender\")\n                .scopes(                \n                    \"basic_profile\",\n                    \"profile\",\n                    \"email\")\n                .setUserRootAttributes(\"on_each_login\")\n                .strategyVersion(2)\n                .build())\n            .strategy(\"linkedin\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  linkedin:\n    type: auth0:Connection\n    properties:\n      options:\n        clientId: \u003cclient-id\u003e\n        clientSecret: \u003cclient-secret\u003e\n        nonPersistentAttrs:\n          - ethnicity\n          - gender\n        scopes:\n          - basic_profile\n          - profile\n          - email\n        setUserRootAttributes: on_each_login\n        strategyVersion: 2\n      strategy: linkedin\n```\n{{% /example %}}\n{{% example %}}\n### GitHub Connection\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as auth0 from \"@pulumi/auth0\";\n\nconst github = new auth0.Connection(\"github\", {\n    options: {\n        clientId: \"\u003cclient-id\u003e\",\n        clientSecret: \"\u003cclient-secret\u003e\",\n        nonPersistentAttrs: [\n            \"ethnicity\",\n            \"gender\",\n        ],\n        scopes: [\n            \"email\",\n            \"profile\",\n            \"public_repo\",\n            \"repo\",\n        ],\n        setUserRootAttributes: \"on_each_login\",\n    },\n    strategy: \"github\",\n});\n```\n```python\nimport pulumi\nimport pulumi_auth0 as auth0\n\ngithub = auth0.Connection(\"github\",\n    options=auth0.ConnectionOptionsArgs(\n        client_id=\"\u003cclient-id\u003e\",\n        client_secret=\"\u003cclient-secret\u003e\",\n        non_persistent_attrs=[\n            \"ethnicity\",\n            \"gender\",\n        ],\n        scopes=[\n            \"email\",\n            \"profile\",\n            \"public_repo\",\n            \"repo\",\n        ],\n        set_user_root_attributes=\"on_each_login\",\n    ),\n    strategy=\"github\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Auth0 = Pulumi.Auth0;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var github = new Auth0.Connection(\"github\", new()\n    {\n        Options = new Auth0.Inputs.ConnectionOptionsArgs\n        {\n            ClientId = \"\u003cclient-id\u003e\",\n            ClientSecret = \"\u003cclient-secret\u003e\",\n            NonPersistentAttrs = new[]\n            {\n                \"ethnicity\",\n                \"gender\",\n            },\n            Scopes = new[]\n            {\n                \"email\",\n                \"profile\",\n                \"public_repo\",\n                \"repo\",\n            },\n            SetUserRootAttributes = \"on_each_login\",\n        },\n        Strategy = \"github\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-auth0/sdk/v2/go/auth0\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := auth0.NewConnection(ctx, \"github\", \u0026auth0.ConnectionArgs{\n\t\t\tOptions: \u0026auth0.ConnectionOptionsArgs{\n\t\t\t\tClientId:     pulumi.String(\"\u003cclient-id\u003e\"),\n\t\t\t\tClientSecret: pulumi.String(\"\u003cclient-secret\u003e\"),\n\t\t\t\tNonPersistentAttrs: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"ethnicity\"),\n\t\t\t\t\tpulumi.String(\"gender\"),\n\t\t\t\t},\n\t\t\t\tScopes: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"email\"),\n\t\t\t\t\tpulumi.String(\"profile\"),\n\t\t\t\t\tpulumi.String(\"public_repo\"),\n\t\t\t\t\tpulumi.String(\"repo\"),\n\t\t\t\t},\n\t\t\t\tSetUserRootAttributes: pulumi.String(\"on_each_login\"),\n\t\t\t},\n\t\t\tStrategy: pulumi.String(\"github\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.auth0.Connection;\nimport com.pulumi.auth0.ConnectionArgs;\nimport com.pulumi.auth0.inputs.ConnectionOptionsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var github = new Connection(\"github\", ConnectionArgs.builder()        \n            .options(ConnectionOptionsArgs.builder()\n                .clientId(\"\u003cclient-id\u003e\")\n                .clientSecret(\"\u003cclient-secret\u003e\")\n                .nonPersistentAttrs(                \n                    \"ethnicity\",\n                    \"gender\")\n                .scopes(                \n                    \"email\",\n                    \"profile\",\n                    \"public_repo\",\n                    \"repo\")\n                .setUserRootAttributes(\"on_each_login\")\n                .build())\n            .strategy(\"github\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  github:\n    type: auth0:Connection\n    properties:\n      options:\n        clientId: \u003cclient-id\u003e\n        clientSecret: \u003cclient-secret\u003e\n        nonPersistentAttrs:\n          - ethnicity\n          - gender\n        scopes:\n          - email\n          - profile\n          - public_repo\n          - repo\n        setUserRootAttributes: on_each_login\n      strategy: github\n```\n{{% /example %}}\n{{% example %}}\n### SalesForce Connection\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as auth0 from \"@pulumi/auth0\";\n\nconst salesforce = new auth0.Connection(\"salesforce\", {\n    options: {\n        clientId: \"\u003cclient-id\u003e\",\n        clientSecret: \"\u003cclient-secret\u003e\",\n        communityBaseUrl: \"https://salesforce.example.com\",\n        nonPersistentAttrs: [\n            \"ethnicity\",\n            \"gender\",\n        ],\n        scopes: [\n            \"openid\",\n            \"email\",\n        ],\n        setUserRootAttributes: \"on_first_login\",\n    },\n    strategy: \"salesforce\",\n});\n```\n```python\nimport pulumi\nimport pulumi_auth0 as auth0\n\nsalesforce = auth0.Connection(\"salesforce\",\n    options=auth0.ConnectionOptionsArgs(\n        client_id=\"\u003cclient-id\u003e\",\n        client_secret=\"\u003cclient-secret\u003e\",\n        community_base_url=\"https://salesforce.example.com\",\n        non_persistent_attrs=[\n            \"ethnicity\",\n            \"gender\",\n        ],\n        scopes=[\n            \"openid\",\n            \"email\",\n        ],\n        set_user_root_attributes=\"on_first_login\",\n    ),\n    strategy=\"salesforce\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Auth0 = Pulumi.Auth0;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var salesforce = new Auth0.Connection(\"salesforce\", new()\n    {\n        Options = new Auth0.Inputs.ConnectionOptionsArgs\n        {\n            ClientId = \"\u003cclient-id\u003e\",\n            ClientSecret = \"\u003cclient-secret\u003e\",\n            CommunityBaseUrl = \"https://salesforce.example.com\",\n            NonPersistentAttrs = new[]\n            {\n                \"ethnicity\",\n                \"gender\",\n            },\n            Scopes = new[]\n            {\n                \"openid\",\n                \"email\",\n            },\n            SetUserRootAttributes = \"on_first_login\",\n        },\n        Strategy = \"salesforce\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-auth0/sdk/v2/go/auth0\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := auth0.NewConnection(ctx, \"salesforce\", \u0026auth0.ConnectionArgs{\n\t\t\tOptions: \u0026auth0.ConnectionOptionsArgs{\n\t\t\t\tClientId:         pulumi.String(\"\u003cclient-id\u003e\"),\n\t\t\t\tClientSecret:     pulumi.String(\"\u003cclient-secret\u003e\"),\n\t\t\t\tCommunityBaseUrl: pulumi.String(\"https://salesforce.example.com\"),\n\t\t\t\tNonPersistentAttrs: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"ethnicity\"),\n\t\t\t\t\tpulumi.String(\"gender\"),\n\t\t\t\t},\n\t\t\t\tScopes: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"openid\"),\n\t\t\t\t\tpulumi.String(\"email\"),\n\t\t\t\t},\n\t\t\t\tSetUserRootAttributes: pulumi.String(\"on_first_login\"),\n\t\t\t},\n\t\t\tStrategy: pulumi.String(\"salesforce\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.auth0.Connection;\nimport com.pulumi.auth0.ConnectionArgs;\nimport com.pulumi.auth0.inputs.ConnectionOptionsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var salesforce = new Connection(\"salesforce\", ConnectionArgs.builder()        \n            .options(ConnectionOptionsArgs.builder()\n                .clientId(\"\u003cclient-id\u003e\")\n                .clientSecret(\"\u003cclient-secret\u003e\")\n                .communityBaseUrl(\"https://salesforce.example.com\")\n                .nonPersistentAttrs(                \n                    \"ethnicity\",\n                    \"gender\")\n                .scopes(                \n                    \"openid\",\n                    \"email\")\n                .setUserRootAttributes(\"on_first_login\")\n                .build())\n            .strategy(\"salesforce\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  salesforce:\n    type: auth0:Connection\n    properties:\n      options:\n        clientId: \u003cclient-id\u003e\n        clientSecret: \u003cclient-secret\u003e\n        communityBaseUrl: https://salesforce.example.com\n        nonPersistentAttrs:\n          - ethnicity\n          - gender\n        scopes:\n          - openid\n          - email\n        setUserRootAttributes: on_first_login\n      strategy: salesforce\n```\n{{% /example %}}\n{{% example %}}\n### OAuth2 Connection\n\nAlso applies to following connection strategies: `dropbox`, `bitbucket`, `paypal`, `twitter`, `amazon`, `yahoo`, `box`, `wordpress`, `discord`, `imgur`, `spotify`, `shopify`, `figma`, `slack-oauth-2`, `digitalocean`, `twitch`, `vimeo`, `custom`\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as auth0 from \"@pulumi/auth0\";\n\nconst oauth2 = new auth0.Connection(\"oauth2\", {\n    options: {\n        authorizationEndpoint: \"https://auth.example.com/oauth2/authorize\",\n        clientId: \"\u003cclient-id\u003e\",\n        clientSecret: \"\u003cclient-secret\u003e\",\n        iconUrl: \"https://auth.example.com/assets/logo.png\",\n        nonPersistentAttrs: [\n            \"ethnicity\",\n            \"gender\",\n        ],\n        pkceEnabled: true,\n        scopes: [\n            \"basic_profile\",\n            \"profile\",\n            \"email\",\n        ],\n        scripts: {\n            fetchUserProfile: `        function fetchUserProfile(accessToken, context, callback) {\n          return callback(new Error(\"Whoops!\"));\n        }\n      \n`,\n        },\n        setUserRootAttributes: \"on_each_login\",\n        tokenEndpoint: \"https://auth.example.com/oauth2/token\",\n    },\n    strategy: \"oauth2\",\n});\n```\n```python\nimport pulumi\nimport pulumi_auth0 as auth0\n\noauth2 = auth0.Connection(\"oauth2\",\n    options=auth0.ConnectionOptionsArgs(\n        authorization_endpoint=\"https://auth.example.com/oauth2/authorize\",\n        client_id=\"\u003cclient-id\u003e\",\n        client_secret=\"\u003cclient-secret\u003e\",\n        icon_url=\"https://auth.example.com/assets/logo.png\",\n        non_persistent_attrs=[\n            \"ethnicity\",\n            \"gender\",\n        ],\n        pkce_enabled=True,\n        scopes=[\n            \"basic_profile\",\n            \"profile\",\n            \"email\",\n        ],\n        scripts={\n            \"fetchUserProfile\": \"\"\"        function fetchUserProfile(accessToken, context, callback) {\n          return callback(new Error(\"Whoops!\"));\n        }\n      \n\"\"\",\n        },\n        set_user_root_attributes=\"on_each_login\",\n        token_endpoint=\"https://auth.example.com/oauth2/token\",\n    ),\n    strategy=\"oauth2\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Auth0 = Pulumi.Auth0;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var oauth2 = new Auth0.Connection(\"oauth2\", new()\n    {\n        Options = new Auth0.Inputs.ConnectionOptionsArgs\n        {\n            AuthorizationEndpoint = \"https://auth.example.com/oauth2/authorize\",\n            ClientId = \"\u003cclient-id\u003e\",\n            ClientSecret = \"\u003cclient-secret\u003e\",\n            IconUrl = \"https://auth.example.com/assets/logo.png\",\n            NonPersistentAttrs = new[]\n            {\n                \"ethnicity\",\n                \"gender\",\n            },\n            PkceEnabled = true,\n            Scopes = new[]\n            {\n                \"basic_profile\",\n                \"profile\",\n                \"email\",\n            },\n            Scripts = \n            {\n                { \"fetchUserProfile\", @\"        function fetchUserProfile(accessToken, context, callback) {\n          return callback(new Error(\"\"Whoops!\"\"));\n        }\n      \n\" },\n            },\n            SetUserRootAttributes = \"on_each_login\",\n            TokenEndpoint = \"https://auth.example.com/oauth2/token\",\n        },\n        Strategy = \"oauth2\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-auth0/sdk/v2/go/auth0\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := auth0.NewConnection(ctx, \"oauth2\", \u0026auth0.ConnectionArgs{\n\t\t\tOptions: \u0026auth0.ConnectionOptionsArgs{\n\t\t\t\tAuthorizationEndpoint: pulumi.String(\"https://auth.example.com/oauth2/authorize\"),\n\t\t\t\tClientId:              pulumi.String(\"\u003cclient-id\u003e\"),\n\t\t\t\tClientSecret:          pulumi.String(\"\u003cclient-secret\u003e\"),\n\t\t\t\tIconUrl:               pulumi.String(\"https://auth.example.com/assets/logo.png\"),\n\t\t\t\tNonPersistentAttrs: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"ethnicity\"),\n\t\t\t\t\tpulumi.String(\"gender\"),\n\t\t\t\t},\n\t\t\t\tPkceEnabled: pulumi.Bool(true),\n\t\t\t\tScopes: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"basic_profile\"),\n\t\t\t\t\tpulumi.String(\"profile\"),\n\t\t\t\t\tpulumi.String(\"email\"),\n\t\t\t\t},\n\t\t\t\tScripts: pulumi.StringMap{\n\t\t\t\t\t\"fetchUserProfile\": pulumi.String(fmt.Sprintf(\"        function fetchUserProfile(accessToken, context, callback) {\\n          return callback(new Error(\\\"Whoops!\\\"));\\n        }\\n      \\n\")),\n\t\t\t\t},\n\t\t\t\tSetUserRootAttributes: pulumi.String(\"on_each_login\"),\n\t\t\t\tTokenEndpoint:         pulumi.String(\"https://auth.example.com/oauth2/token\"),\n\t\t\t},\n\t\t\tStrategy: pulumi.String(\"oauth2\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.auth0.Connection;\nimport com.pulumi.auth0.ConnectionArgs;\nimport com.pulumi.auth0.inputs.ConnectionOptionsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var oauth2 = new Connection(\"oauth2\", ConnectionArgs.builder()        \n            .options(ConnectionOptionsArgs.builder()\n                .authorizationEndpoint(\"https://auth.example.com/oauth2/authorize\")\n                .clientId(\"\u003cclient-id\u003e\")\n                .clientSecret(\"\u003cclient-secret\u003e\")\n                .iconUrl(\"https://auth.example.com/assets/logo.png\")\n                .nonPersistentAttrs(                \n                    \"ethnicity\",\n                    \"gender\")\n                .pkceEnabled(true)\n                .scopes(                \n                    \"basic_profile\",\n                    \"profile\",\n                    \"email\")\n                .scripts(Map.of(\"fetchUserProfile\", \"\"\"\n        function fetchUserProfile(accessToken, context, callback) {\n          return callback(new Error(\"Whoops!\"));\n        }\n      \n                \"\"\"))\n                .setUserRootAttributes(\"on_each_login\")\n                .tokenEndpoint(\"https://auth.example.com/oauth2/token\")\n                .build())\n            .strategy(\"oauth2\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  oauth2:\n    type: auth0:Connection\n    properties:\n      options:\n        authorizationEndpoint: https://auth.example.com/oauth2/authorize\n        clientId: \u003cclient-id\u003e\n        clientSecret: \u003cclient-secret\u003e\n        iconUrl: https://auth.example.com/assets/logo.png\n        nonPersistentAttrs:\n          - ethnicity\n          - gender\n        pkceEnabled: true\n        scopes:\n          - basic_profile\n          - profile\n          - email\n        scripts:\n          fetchUserProfile: \"        function fetchUserProfile(accessToken, context, callback) {\\n          return callback(new Error(\\\"Whoops!\\\"));\\n        }\\n      \\n\"\n        setUserRootAttributes: on_each_login\n        tokenEndpoint: https://auth.example.com/oauth2/token\n      strategy: oauth2\n```\n{{% /example %}}\n{{% example %}}\n### SMS Connection\n\n\u003e To be able to see this in the management dashboard as well, the name of the connection must be set to \"sms\".\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as auth0 from \"@pulumi/auth0\";\n\nconst sms = new auth0.Connection(\"sms\", {\n    isDomainConnection: false,\n    options: {\n        bruteForceProtection: true,\n        disableSignup: false,\n        forwardRequestInfo: true,\n        from: \"+15555555555\",\n        gatewayAuthentication: {\n            audience: \"https://somewhere.com/sms-gateway\",\n            method: \"bearer\",\n            secret: \"4e2680bb74ec2ae24736476dd37ed6c2\",\n            secretBase64Encoded: false,\n            subject: \"test.us.auth0.com:sms\",\n        },\n        gatewayUrl: \"https://somewhere.com/sms-gateway\",\n        name: \"sms\",\n        provider: \"sms_gateway\",\n        syntax: \"md_with_macros\",\n        template: \"@@password@@\",\n        totp: {\n            length: 6,\n            timeStep: 300,\n        },\n    },\n    strategy: \"sms\",\n});\n```\n```python\nimport pulumi\nimport pulumi_auth0 as auth0\n\nsms = auth0.Connection(\"sms\",\n    is_domain_connection=False,\n    options=auth0.ConnectionOptionsArgs(\n        brute_force_protection=True,\n        disable_signup=False,\n        forward_request_info=True,\n        from_=\"+15555555555\",\n        gateway_authentication=auth0.ConnectionOptionsGatewayAuthenticationArgs(\n            audience=\"https://somewhere.com/sms-gateway\",\n            method=\"bearer\",\n            secret=\"4e2680bb74ec2ae24736476dd37ed6c2\",\n            secret_base64_encoded=False,\n            subject=\"test.us.auth0.com:sms\",\n        ),\n        gateway_url=\"https://somewhere.com/sms-gateway\",\n        name=\"sms\",\n        provider=\"sms_gateway\",\n        syntax=\"md_with_macros\",\n        template=\"@@password@@\",\n        totp=auth0.ConnectionOptionsTotpArgs(\n            length=6,\n            time_step=300,\n        ),\n    ),\n    strategy=\"sms\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Auth0 = Pulumi.Auth0;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var sms = new Auth0.Connection(\"sms\", new()\n    {\n        IsDomainConnection = false,\n        Options = new Auth0.Inputs.ConnectionOptionsArgs\n        {\n            BruteForceProtection = true,\n            DisableSignup = false,\n            ForwardRequestInfo = true,\n            From = \"+15555555555\",\n            GatewayAuthentication = new Auth0.Inputs.ConnectionOptionsGatewayAuthenticationArgs\n            {\n                Audience = \"https://somewhere.com/sms-gateway\",\n                Method = \"bearer\",\n                Secret = \"4e2680bb74ec2ae24736476dd37ed6c2\",\n                SecretBase64Encoded = false,\n                Subject = \"test.us.auth0.com:sms\",\n            },\n            GatewayUrl = \"https://somewhere.com/sms-gateway\",\n            Name = \"sms\",\n            Provider = \"sms_gateway\",\n            Syntax = \"md_with_macros\",\n            Template = \"@@password@@\",\n            Totp = new Auth0.Inputs.ConnectionOptionsTotpArgs\n            {\n                Length = 6,\n                TimeStep = 300,\n            },\n        },\n        Strategy = \"sms\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-auth0/sdk/v2/go/auth0\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := auth0.NewConnection(ctx, \"sms\", \u0026auth0.ConnectionArgs{\n\t\t\tIsDomainConnection: pulumi.Bool(false),\n\t\t\tOptions: \u0026auth0.ConnectionOptionsArgs{\n\t\t\t\tBruteForceProtection: pulumi.Bool(true),\n\t\t\t\tDisableSignup:        pulumi.Bool(false),\n\t\t\t\tForwardRequestInfo:   pulumi.Bool(true),\n\t\t\t\tFrom:                 pulumi.String(\"+15555555555\"),\n\t\t\t\tGatewayAuthentication: \u0026auth0.ConnectionOptionsGatewayAuthenticationArgs{\n\t\t\t\t\tAudience:            pulumi.String(\"https://somewhere.com/sms-gateway\"),\n\t\t\t\t\tMethod:              pulumi.String(\"bearer\"),\n\t\t\t\t\tSecret:              pulumi.String(\"4e2680bb74ec2ae24736476dd37ed6c2\"),\n\t\t\t\t\tSecretBase64Encoded: pulumi.Bool(false),\n\t\t\t\t\tSubject:             pulumi.String(\"test.us.auth0.com:sms\"),\n\t\t\t\t},\n\t\t\t\tGatewayUrl: pulumi.String(\"https://somewhere.com/sms-gateway\"),\n\t\t\t\tName:       pulumi.String(\"sms\"),\n\t\t\t\tProvider:   pulumi.String(\"sms_gateway\"),\n\t\t\t\tSyntax:     pulumi.String(\"md_with_macros\"),\n\t\t\t\tTemplate:   pulumi.String(\"@@password@@\"),\n\t\t\t\tTotp: \u0026auth0.ConnectionOptionsTotpArgs{\n\t\t\t\t\tLength:   pulumi.Int(6),\n\t\t\t\t\tTimeStep: pulumi.Int(300),\n\t\t\t\t},\n\t\t\t},\n\t\t\tStrategy: pulumi.String(\"sms\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.auth0.Connection;\nimport com.pulumi.auth0.ConnectionArgs;\nimport com.pulumi.auth0.inputs.ConnectionOptionsArgs;\nimport com.pulumi.auth0.inputs.ConnectionOptionsGatewayAuthenticationArgs;\nimport com.pulumi.auth0.inputs.ConnectionOptionsTotpArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var sms = new Connection(\"sms\", ConnectionArgs.builder()        \n            .isDomainConnection(false)\n            .options(ConnectionOptionsArgs.builder()\n                .bruteForceProtection(true)\n                .disableSignup(false)\n                .forwardRequestInfo(true)\n                .from(\"+15555555555\")\n                .gatewayAuthentication(ConnectionOptionsGatewayAuthenticationArgs.builder()\n                    .audience(\"https://somewhere.com/sms-gateway\")\n                    .method(\"bearer\")\n                    .secret(\"4e2680bb74ec2ae24736476dd37ed6c2\")\n                    .secretBase64Encoded(false)\n                    .subject(\"test.us.auth0.com:sms\")\n                    .build())\n                .gatewayUrl(\"https://somewhere.com/sms-gateway\")\n                .name(\"sms\")\n                .provider(\"sms_gateway\")\n                .syntax(\"md_with_macros\")\n                .template(\"@@password@@\")\n                .totp(ConnectionOptionsTotpArgs.builder()\n                    .length(6)\n                    .timeStep(300)\n                    .build())\n                .build())\n            .strategy(\"sms\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  sms:\n    type: auth0:Connection\n    properties:\n      isDomainConnection: false\n      options:\n        bruteForceProtection: true\n        disableSignup: false\n        forwardRequestInfo: true\n        from: '+15555555555'\n        gatewayAuthentication:\n          audience: https://somewhere.com/sms-gateway\n          method: bearer\n          secret: 4e2680bb74ec2ae24736476dd37ed6c2\n          secretBase64Encoded: false\n          subject: test.us.auth0.com:sms\n        gatewayUrl: https://somewhere.com/sms-gateway\n        name: sms\n        provider: sms_gateway\n        syntax: md_with_macros\n        template: '@@password@@'\n        totp:\n          length: 6\n          timeStep: 300\n      strategy: sms\n```\n{{% /example %}}\n{{% example %}}\n### Email Connection\n\n\u003e To be able to see this in the management dashboard as well, the name of the connection must be set to \"email\".\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as auth0 from \"@pulumi/auth0\";\n\nconst passwordlessEmail = new auth0.Connection(\"passwordlessEmail\", {\n    options: {\n        authParams: {\n            responseType: \"code\",\n            scope: \"openid email profile offline_access\",\n        },\n        bruteForceProtection: true,\n        disableSignup: false,\n        from: \"{{ application.name }} \u003croot@auth0.com\u003e\",\n        name: \"email\",\n        nonPersistentAttrs: [],\n        setUserRootAttributes: \"on_each_login\",\n        subject: \"Welcome to {{ application.name }}\",\n        syntax: \"liquid\",\n        template: \"\u003chtml\u003eThis is the body of the email\u003c/html\u003e\",\n        totp: {\n            length: 6,\n            timeStep: 300,\n        },\n    },\n    strategy: \"email\",\n});\n```\n```python\nimport pulumi\nimport pulumi_auth0 as auth0\n\npasswordless_email = auth0.Connection(\"passwordlessEmail\",\n    options=auth0.ConnectionOptionsArgs(\n        auth_params={\n            \"responseType\": \"code\",\n            \"scope\": \"openid email profile offline_access\",\n        },\n        brute_force_protection=True,\n        disable_signup=False,\n        from_=\"{{ application.name }} \u003croot@auth0.com\u003e\",\n        name=\"email\",\n        non_persistent_attrs=[],\n        set_user_root_attributes=\"on_each_login\",\n        subject=\"Welcome to {{ application.name }}\",\n        syntax=\"liquid\",\n        template=\"\u003chtml\u003eThis is the body of the email\u003c/html\u003e\",\n        totp=auth0.ConnectionOptionsTotpArgs(\n            length=6,\n            time_step=300,\n        ),\n    ),\n    strategy=\"email\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Auth0 = Pulumi.Auth0;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var passwordlessEmail = new Auth0.Connection(\"passwordlessEmail\", new()\n    {\n        Options = new Auth0.Inputs.ConnectionOptionsArgs\n        {\n            AuthParams = \n            {\n                { \"responseType\", \"code\" },\n                { \"scope\", \"openid email profile offline_access\" },\n            },\n            BruteForceProtection = true,\n            DisableSignup = false,\n            From = \"{{ application.name }} \u003croot@auth0.com\u003e\",\n            Name = \"email\",\n            NonPersistentAttrs = new[] {},\n            SetUserRootAttributes = \"on_each_login\",\n            Subject = \"Welcome to {{ application.name }}\",\n            Syntax = \"liquid\",\n            Template = \"\u003chtml\u003eThis is the body of the email\u003c/html\u003e\",\n            Totp = new Auth0.Inputs.ConnectionOptionsTotpArgs\n            {\n                Length = 6,\n                TimeStep = 300,\n            },\n        },\n        Strategy = \"email\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-auth0/sdk/v2/go/auth0\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := auth0.NewConnection(ctx, \"passwordlessEmail\", \u0026auth0.ConnectionArgs{\n\t\t\tOptions: \u0026auth0.ConnectionOptionsArgs{\n\t\t\t\tAuthParams: pulumi.StringMap{\n\t\t\t\t\t\"responseType\": pulumi.String(\"code\"),\n\t\t\t\t\t\"scope\":        pulumi.String(\"openid email profile offline_access\"),\n\t\t\t\t},\n\t\t\t\tBruteForceProtection:  pulumi.Bool(true),\n\t\t\t\tDisableSignup:         pulumi.Bool(false),\n\t\t\t\tFrom:                  pulumi.String(\"{{ application.name }} \u003croot@auth0.com\u003e\"),\n\t\t\t\tName:                  pulumi.String(\"email\"),\n\t\t\t\tNonPersistentAttrs:    pulumi.StringArray{},\n\t\t\t\tSetUserRootAttributes: pulumi.String(\"on_each_login\"),\n\t\t\t\tSubject:               pulumi.String(\"Welcome to {{ application.name }}\"),\n\t\t\t\tSyntax:                pulumi.String(\"liquid\"),\n\t\t\t\tTemplate:              pulumi.String(\"\u003chtml\u003eThis is the body of the email\u003c/html\u003e\"),\n\t\t\t\tTotp: \u0026auth0.ConnectionOptionsTotpArgs{\n\t\t\t\t\tLength:   pulumi.Int(6),\n\t\t\t\t\tTimeStep: pulumi.Int(300),\n\t\t\t\t},\n\t\t\t},\n\t\t\tStrategy: pulumi.String(\"email\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.auth0.Connection;\nimport com.pulumi.auth0.ConnectionArgs;\nimport com.pulumi.auth0.inputs.ConnectionOptionsArgs;\nimport com.pulumi.auth0.inputs.ConnectionOptionsTotpArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var passwordlessEmail = new Connection(\"passwordlessEmail\", ConnectionArgs.builder()        \n            .options(ConnectionOptionsArgs.builder()\n                .authParams(Map.ofEntries(\n                    Map.entry(\"responseType\", \"code\"),\n                    Map.entry(\"scope\", \"openid email profile offline_access\")\n                ))\n                .bruteForceProtection(true)\n                .disableSignup(false)\n                .from(\"{{ application.name }} \u003croot@auth0.com\u003e\")\n                .name(\"email\")\n                .nonPersistentAttrs()\n                .setUserRootAttributes(\"on_each_login\")\n                .subject(\"Welcome to {{ application.name }}\")\n                .syntax(\"liquid\")\n                .template(\"\u003chtml\u003eThis is the body of the email\u003c/html\u003e\")\n                .totp(ConnectionOptionsTotpArgs.builder()\n                    .length(6)\n                    .timeStep(300)\n                    .build())\n                .build())\n            .strategy(\"email\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  passwordlessEmail:\n    type: auth0:Connection\n    properties:\n      options:\n        authParams:\n          responseType: code\n          scope: openid email profile offline_access\n        bruteForceProtection: true\n        disableSignup: false\n        from: '{{ application.name }} \u003croot@auth0.com\u003e'\n        name: email\n        nonPersistentAttrs: []\n        setUserRootAttributes: on_each_login\n        subject: Welcome to {{ application.name }}\n        syntax: liquid\n        template: \u003chtml\u003eThis is the body of the email\u003c/html\u003e\n        totp:\n          length: 6\n          timeStep: 300\n      strategy: email\n```\n{{% /example %}}\n{{% example %}}\n### WindowsLive Connection\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as auth0 from \"@pulumi/auth0\";\n\nconst windowslive = new auth0.Connection(\"windowslive\", {\n    options: {\n        clientId: \"\u003cclient-id\u003e\",\n        clientSecret: \"\u003cclient-secret\u003e\",\n        nonPersistentAttrs: [\n            \"ethnicity\",\n            \"gender\",\n        ],\n        scopes: [\n            \"signin\",\n            \"graph_user\",\n        ],\n        setUserRootAttributes: \"on_first_login\",\n        strategyVersion: 2,\n    },\n    strategy: \"windowslive\",\n});\n```\n```python\nimport pulumi\nimport pulumi_auth0 as auth0\n\nwindowslive = auth0.Connection(\"windowslive\",\n    options=auth0.ConnectionOptionsArgs(\n        client_id=\"\u003cclient-id\u003e\",\n        client_secret=\"\u003cclient-secret\u003e\",\n        non_persistent_attrs=[\n            \"ethnicity\",\n            \"gender\",\n        ],\n        scopes=[\n            \"signin\",\n            \"graph_user\",\n        ],\n        set_user_root_attributes=\"on_first_login\",\n        strategy_version=2,\n    ),\n    strategy=\"windowslive\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Auth0 = Pulumi.Auth0;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var windowslive = new Auth0.Connection(\"windowslive\", new()\n    {\n        Options = new Auth0.Inputs.ConnectionOptionsArgs\n        {\n            ClientId = \"\u003cclient-id\u003e\",\n            ClientSecret = \"\u003cclient-secret\u003e\",\n            NonPersistentAttrs = new[]\n            {\n                \"ethnicity\",\n                \"gender\",\n            },\n            Scopes = new[]\n            {\n                \"signin\",\n                \"graph_user\",\n            },\n            SetUserRootAttributes = \"on_first_login\",\n            StrategyVersion = 2,\n        },\n        Strategy = \"windowslive\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-auth0/sdk/v2/go/auth0\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := auth0.NewConnection(ctx, \"windowslive\", \u0026auth0.ConnectionArgs{\n\t\t\tOptions: \u0026auth0.ConnectionOptionsArgs{\n\t\t\t\tClientId:     pulumi.String(\"\u003cclient-id\u003e\"),\n\t\t\t\tClientSecret: pulumi.String(\"\u003cclient-secret\u003e\"),\n\t\t\t\tNonPersistentAttrs: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"ethnicity\"),\n\t\t\t\t\tpulumi.String(\"gender\"),\n\t\t\t\t},\n\t\t\t\tScopes: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"signin\"),\n\t\t\t\t\tpulumi.String(\"graph_user\"),\n\t\t\t\t},\n\t\t\t\tSetUserRootAttributes: pulumi.String(\"on_first_login\"),\n\t\t\t\tStrategyVersion:       pulumi.Int(2),\n\t\t\t},\n\t\t\tStrategy: pulumi.String(\"windowslive\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.auth0.Connection;\nimport com.pulumi.auth0.ConnectionArgs;\nimport com.pulumi.auth0.inputs.ConnectionOptionsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var windowslive = new Connection(\"windowslive\", ConnectionArgs.builder()        \n            .options(ConnectionOptionsArgs.builder()\n                .clientId(\"\u003cclient-id\u003e\")\n                .clientSecret(\"\u003cclient-secret\u003e\")\n                .nonPersistentAttrs(                \n                    \"ethnicity\",\n                    \"gender\")\n                .scopes(                \n                    \"signin\",\n                    \"graph_user\")\n                .setUserRootAttributes(\"on_first_login\")\n                .strategyVersion(2)\n                .build())\n            .strategy(\"windowslive\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  windowslive:\n    type: auth0:Connection\n    properties:\n      options:\n        clientId: \u003cclient-id\u003e\n        clientSecret: \u003cclient-secret\u003e\n        nonPersistentAttrs:\n          - ethnicity\n          - gender\n        scopes:\n          - signin\n          - graph_user\n        setUserRootAttributes: on_first_login\n        strategyVersion: 2\n      strategy: windowslive\n```\n{{% /example %}}\n{{% example %}}\n### OIDC Connection\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as auth0 from \"@pulumi/auth0\";\n\nconst oidc = new auth0.Connection(\"oidc\", {\n    displayName: \"OIDC Connection\",\n    options: {\n        authorizationEndpoint: \"https://www.paypal.com/signin/authorize\",\n        clientId: \"1234567\",\n        clientSecret: \"1234567\",\n        discoveryUrl: \"https://www.paypalobjects.com/.well-known/openid-configuration\",\n        domainAliases: [\"example.com\"],\n        iconUrl: \"https://example.com/assets/logo.png\",\n        issuer: \"https://www.paypalobjects.com\",\n        jwksUri: \"https://api.paypal.com/v1/oauth2/certs\",\n        nonPersistentAttrs: [\n            \"ethnicity\",\n            \"gender\",\n        ],\n        scopes: [\n            \"openid\",\n            \"email\",\n        ],\n        setUserRootAttributes: \"on_first_login\",\n        tenantDomain: \"\",\n        tokenEndpoint: \"https://api.paypal.com/v1/oauth2/token\",\n        type: \"front_channel\",\n        userinfoEndpoint: \"https://api.paypal.com/v1/oauth2/token/userinfo\",\n    },\n    showAsButton: false,\n    strategy: \"oidc\",\n});\n```\n```python\nimport pulumi\nimport pulumi_auth0 as auth0\n\noidc = auth0.Connection(\"oidc\",\n    display_name=\"OIDC Connection\",\n    options=auth0.ConnectionOptionsArgs(\n        authorization_endpoint=\"https://www.paypal.com/signin/authorize\",\n        client_id=\"1234567\",\n        client_secret=\"1234567\",\n        discovery_url=\"https://www.paypalobjects.com/.well-known/openid-configuration\",\n        domain_aliases=[\"example.com\"],\n        icon_url=\"https://example.com/assets/logo.png\",\n        issuer=\"https://www.paypalobjects.com\",\n        jwks_uri=\"https://api.paypal.com/v1/oauth2/certs\",\n        non_persistent_attrs=[\n            \"ethnicity\",\n            \"gender\",\n        ],\n        scopes=[\n            \"openid\",\n            \"email\",\n        ],\n        set_user_root_attributes=\"on_first_login\",\n        tenant_domain=\"\",\n        token_endpoint=\"https://api.paypal.com/v1/oauth2/token\",\n        type=\"front_channel\",\n        userinfo_endpoint=\"https://api.paypal.com/v1/oauth2/token/userinfo\",\n    ),\n    show_as_button=False,\n    strategy=\"oidc\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Auth0 = Pulumi.Auth0;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var oidc = new Auth0.Connection(\"oidc\", new()\n    {\n        DisplayName = \"OIDC Connection\",\n        Options = new Auth0.Inputs.ConnectionOptionsArgs\n        {\n            AuthorizationEndpoint = \"https://www.paypal.com/signin/authorize\",\n            ClientId = \"1234567\",\n            ClientSecret = \"1234567\",\n            DiscoveryUrl = \"https://www.paypalobjects.com/.well-known/openid-configuration\",\n            DomainAliases = new[]\n            {\n                \"example.com\",\n            },\n            IconUrl = \"https://example.com/assets/logo.png\",\n            Issuer = \"https://www.paypalobjects.com\",\n            JwksUri = \"https://api.paypal.com/v1/oauth2/certs\",\n            NonPersistentAttrs = new[]\n            {\n                \"ethnicity\",\n                \"gender\",\n            },\n            Scopes = new[]\n            {\n                \"openid\",\n                \"email\",\n            },\n            SetUserRootAttributes = \"on_first_login\",\n            TenantDomain = \"\",\n            TokenEndpoint = \"https://api.paypal.com/v1/oauth2/token\",\n            Type = \"front_channel\",\n            UserinfoEndpoint = \"https://api.paypal.com/v1/oauth2/token/userinfo\",\n        },\n        ShowAsButton = false,\n        Strategy = \"oidc\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-auth0/sdk/v2/go/auth0\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := auth0.NewConnection(ctx, \"oidc\", \u0026auth0.ConnectionArgs{\n\t\t\tDisplayName: pulumi.String(\"OIDC Connection\"),\n\t\t\tOptions: \u0026auth0.ConnectionOptionsArgs{\n\t\t\t\tAuthorizationEndpoint: pulumi.String(\"https://www.paypal.com/signin/authorize\"),\n\t\t\t\tClientId:              pulumi.String(\"1234567\"),\n\t\t\t\tClientSecret:          pulumi.String(\"1234567\"),\n\t\t\t\tDiscoveryUrl:          pulumi.String(\"https://www.paypalobjects.com/.well-known/openid-configuration\"),\n\t\t\t\tDomainAliases: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"example.com\"),\n\t\t\t\t},\n\t\t\t\tIconUrl: pulumi.String(\"https://example.com/assets/logo.png\"),\n\t\t\t\tIssuer:  pulumi.String(\"https://www.paypalobjects.com\"),\n\t\t\t\tJwksUri: pulumi.String(\"https://api.paypal.com/v1/oauth2/certs\"),\n\t\t\t\tNonPersistentAttrs: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"ethnicity\"),\n\t\t\t\t\tpulumi.String(\"gender\"),\n\t\t\t\t},\n\t\t\t\tScopes: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"openid\"),\n\t\t\t\t\tpulumi.String(\"email\"),\n\t\t\t\t},\n\t\t\t\tSetUserRootAttributes: pulumi.String(\"on_first_login\"),\n\t\t\t\tTenantDomain:          pulumi.String(\"\"),\n\t\t\t\tTokenEndpoint:         pulumi.String(\"https://api.paypal.com/v1/oauth2/token\"),\n\t\t\t\tType:                  pulumi.String(\"front_channel\"),\n\t\t\t\tUserinfoEndpoint:      pulumi.String(\"https://api.paypal.com/v1/oauth2/token/userinfo\"),\n\t\t\t},\n\t\t\tShowAsButton: pulumi.Bool(false),\n\t\t\tStrategy:     pulumi.String(\"oidc\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.auth0.Connection;\nimport com.pulumi.auth0.ConnectionArgs;\nimport com.pulumi.auth0.inputs.ConnectionOptionsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var oidc = new Connection(\"oidc\", ConnectionArgs.builder()        \n            .displayName(\"OIDC Connection\")\n            .options(ConnectionOptionsArgs.builder()\n                .authorizationEndpoint(\"https://www.paypal.com/signin/authorize\")\n                .clientId(\"1234567\")\n                .clientSecret(\"1234567\")\n                .discoveryUrl(\"https://www.paypalobjects.com/.well-known/openid-configuration\")\n                .domainAliases(\"example.com\")\n                .iconUrl(\"https://example.com/assets/logo.png\")\n                .issuer(\"https://www.paypalobjects.com\")\n                .jwksUri(\"https://api.paypal.com/v1/oauth2/certs\")\n                .nonPersistentAttrs(                \n                    \"ethnicity\",\n                    \"gender\")\n                .scopes(                \n                    \"openid\",\n                    \"email\")\n                .setUserRootAttributes(\"on_first_login\")\n                .tenantDomain(\"\")\n                .tokenEndpoint(\"https://api.paypal.com/v1/oauth2/token\")\n                .type(\"front_channel\")\n                .userinfoEndpoint(\"https://api.paypal.com/v1/oauth2/token/userinfo\")\n                .build())\n            .showAsButton(false)\n            .strategy(\"oidc\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  oidc:\n    type: auth0:Connection\n    properties:\n      displayName: OIDC Connection\n      options:\n        authorizationEndpoint: https://www.paypal.com/signin/authorize\n        clientId: '1234567'\n        clientSecret: '1234567'\n        discoveryUrl: https://www.paypalobjects.com/.well-known/openid-configuration\n        domainAliases:\n          - example.com\n        iconUrl: https://example.com/assets/logo.png\n        issuer: https://www.paypalobjects.com\n        jwksUri: https://api.paypal.com/v1/oauth2/certs\n        nonPersistentAttrs:\n          - ethnicity\n          - gender\n        scopes:\n          - openid\n          - email\n        setUserRootAttributes: on_first_login\n        tenantDomain:\n        tokenEndpoint: https://api.paypal.com/v1/oauth2/token\n        type: front_channel\n        userinfoEndpoint: https://api.paypal.com/v1/oauth2/token/userinfo\n      showAsButton: false\n      strategy: oidc\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nConnections can be imported using their ID. # Example\n\n```sh\n $ pulumi import auth0:index/connection:Connection google con_a17f21fdb24d48a0\n```\n\n ",
            "properties": {
                "displayName": {
                    "type": "string",
                    "description": "Name used in login screen.\n"
                },
                "isDomainConnection": {
                    "type": "boolean",
                    "description": "Indicates whether the connection is domain level.\n"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Metadata associated with the connection, in the form of a map of string values (max 255 chars). Maximum of 10 metadata properties allowed.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the connection.\n"
                },
                "options": {
                    "$ref": "#/types/auth0:index/ConnectionOptions:ConnectionOptions",
                    "description": "Configuration settings for connection options.\n"
                },
                "realms": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Defines the realms for which the connection will be used (e.g., email domains). If not specified, the connection name is added as the realm.\n"
                },
                "showAsButton": {
                    "type": "boolean",
                    "description": "Display connection as a button. Only available on enterprise connections.\n"
                },
                "strategy": {
                    "type": "string",
                    "description": "Type of the connection, which indicates the identity provider.\n"
                },
                "strategyVersion": {
                    "type": "string"
                },
                "validation": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "isDomainConnection",
                "name",
                "options",
                "realms",
                "strategy",
                "strategyVersion"
            ],
            "inputProperties": {
                "displayName": {
                    "type": "string",
                    "description": "Name used in login screen.\n"
                },
                "isDomainConnection": {
                    "type": "boolean",
                    "description": "Indicates whether the connection is domain level.\n"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Metadata associated with the connection, in the form of a map of string values (max 255 chars). Maximum of 10 metadata properties allowed.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the connection.\n",
                    "willReplaceOnChanges": true
                },
                "options": {
                    "$ref": "#/types/auth0:index/ConnectionOptions:ConnectionOptions",
                    "description": "Configuration settings for connection options.\n"
                },
                "realms": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Defines the realms for which the connection will be used (e.g., email domains). If not specified, the connection name is added as the realm.\n"
                },
                "showAsButton": {
                    "type": "boolean",
                    "description": "Display connection as a button. Only available on enterprise connections.\n"
                },
                "strategy": {
                    "type": "string",
                    "description": "Type of the connection, which indicates the identity provider.\n",
                    "willReplaceOnChanges": true
                },
                "strategyVersion": {
                    "type": "string"
                },
                "validation": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            },
            "requiredInputs": [
                "strategy"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Connection resources.\n",
                "properties": {
                    "displayName": {
                        "type": "string",
                        "description": "Name used in login screen.\n"
                    },
                    "isDomainConnection": {
                        "type": "boolean",
                        "description": "Indicates whether the connection is domain level.\n"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Metadata associated with the connection, in the form of a map of string values (max 255 chars). Maximum of 10 metadata properties allowed.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the connection.\n",
                        "willReplaceOnChanges": true
                    },
                    "options": {
                        "$ref": "#/types/auth0:index/ConnectionOptions:ConnectionOptions",
                        "description": "Configuration settings for connection options.\n"
                    },
                    "realms": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Defines the realms for which the connection will be used (e.g., email domains). If not specified, the connection name is added as the realm.\n"
                    },
                    "showAsButton": {
                        "type": "boolean",
                        "description": "Display connection as a button. Only available on enterprise connections.\n"
                    },
                    "strategy": {
                        "type": "string",
                        "description": "Type of the connection, which indicates the identity provider.\n",
                        "willReplaceOnChanges": true
                    },
                    "strategyVersion": {
                        "type": "string"
                    },
                    "validation": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                },
                "type": "object"
            }
        },
        "auth0:index/connectionClient:ConnectionClient": {
            "description": "With this resource, you can manage enabled clients on a connection.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as auth0 from \"@pulumi/auth0\";\n\nconst myConn = new auth0.Connection(\"myConn\", {strategy: \"auth0\"});\n// Avoid using the enabled_clients = [...],\n// if using the auth0_connection_client resource.\nconst myClient = new auth0.Client(\"myClient\", {});\nconst myConnClientAssoc = new auth0.ConnectionClient(\"myConnClientAssoc\", {\n    connectionId: myConn.id,\n    clientId: myClient.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_auth0 as auth0\n\nmy_conn = auth0.Connection(\"myConn\", strategy=\"auth0\")\n# Avoid using the enabled_clients = [...],\n# if using the auth0_connection_client resource.\nmy_client = auth0.Client(\"myClient\")\nmy_conn_client_assoc = auth0.ConnectionClient(\"myConnClientAssoc\",\n    connection_id=my_conn.id,\n    client_id=my_client.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Auth0 = Pulumi.Auth0;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myConn = new Auth0.Connection(\"myConn\", new()\n    {\n        Strategy = \"auth0\",\n    });\n\n    // Avoid using the enabled_clients = [...],\n    // if using the auth0_connection_client resource.\n    var myClient = new Auth0.Client(\"myClient\");\n\n    var myConnClientAssoc = new Auth0.ConnectionClient(\"myConnClientAssoc\", new()\n    {\n        ConnectionId = myConn.Id,\n        ClientId = myClient.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-auth0/sdk/v2/go/auth0\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyConn, err := auth0.NewConnection(ctx, \"myConn\", \u0026auth0.ConnectionArgs{\n\t\t\tStrategy: pulumi.String(\"auth0\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmyClient, err := auth0.NewClient(ctx, \"myClient\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = auth0.NewConnectionClient(ctx, \"myConnClientAssoc\", \u0026auth0.ConnectionClientArgs{\n\t\t\tConnectionId: myConn.ID(),\n\t\t\tClientId:     myClient.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.auth0.Connection;\nimport com.pulumi.auth0.ConnectionArgs;\nimport com.pulumi.auth0.Client;\nimport com.pulumi.auth0.ConnectionClient;\nimport com.pulumi.auth0.ConnectionClientArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myConn = new Connection(\"myConn\", ConnectionArgs.builder()        \n            .strategy(\"auth0\")\n            .build());\n\n        var myClient = new Client(\"myClient\");\n\n        var myConnClientAssoc = new ConnectionClient(\"myConnClientAssoc\", ConnectionClientArgs.builder()        \n            .connectionId(myConn.id())\n            .clientId(myClient.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myConn:\n    type: auth0:Connection\n    properties:\n      strategy: auth0\n  myClient:\n    type: auth0:Client\n  myConnClientAssoc:\n    type: auth0:ConnectionClient\n    properties:\n      connectionId: ${myConn.id}\n      clientId: ${myClient.id}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThis resource can be imported by specifying the connection ID and client ID separated by \":\". # Example\n\n```sh\n $ pulumi import auth0:index/connectionClient:ConnectionClient my_conn_client_assoc con_XXXXX:XXXXXXXX\n```\n\n ",
            "properties": {
                "clientId": {
                    "type": "string",
                    "description": "ID of the client for which the connection is enabled.\n"
                },
                "connectionId": {
                    "type": "string",
                    "description": "ID of the connection on which to enable the client.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the connection on which to enable the client.\n"
                },
                "strategy": {
                    "type": "string",
                    "description": "The strategy of the connection on which to enable the client.\n"
                }
            },
            "required": [
                "clientId",
                "connectionId",
                "name",
                "strategy"
            ],
            "inputProperties": {
                "clientId": {
                    "type": "string",
                    "description": "ID of the client for which the connection is enabled.\n",
                    "willReplaceOnChanges": true
                },
                "connectionId": {
                    "type": "string",
                    "description": "ID of the connection on which to enable the client.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "clientId",
                "connectionId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ConnectionClient resources.\n",
                "properties": {
                    "clientId": {
                        "type": "string",
                        "description": "ID of the client for which the connection is enabled.\n",
                        "willReplaceOnChanges": true
                    },
                    "connectionId": {
                        "type": "string",
                        "description": "ID of the connection on which to enable the client.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the connection on which to enable the client.\n"
                    },
                    "strategy": {
                        "type": "string",
                        "description": "The strategy of the connection on which to enable the client.\n"
                    }
                },
                "type": "object"
            }
        },
        "auth0:index/customDomain:CustomDomain": {
            "description": "With Auth0, you can use a custom domain to maintain a consistent user experience. This resource allows you to create and manage a custom domain within your Auth0 tenant.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as auth0 from \"@pulumi/auth0\";\n\nconst myCustomDomain = new auth0.CustomDomain(\"myCustomDomain\", {\n    domain: \"auth.example.com\",\n    type: \"auth0_managed_certs\",\n});\n```\n```python\nimport pulumi\nimport pulumi_auth0 as auth0\n\nmy_custom_domain = auth0.CustomDomain(\"myCustomDomain\",\n    domain=\"auth.example.com\",\n    type=\"auth0_managed_certs\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Auth0 = Pulumi.Auth0;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myCustomDomain = new Auth0.CustomDomain(\"myCustomDomain\", new()\n    {\n        Domain = \"auth.example.com\",\n        Type = \"auth0_managed_certs\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-auth0/sdk/v2/go/auth0\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := auth0.NewCustomDomain(ctx, \"myCustomDomain\", \u0026auth0.CustomDomainArgs{\n\t\t\tDomain: pulumi.String(\"auth.example.com\"),\n\t\t\tType:   pulumi.String(\"auth0_managed_certs\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.auth0.CustomDomain;\nimport com.pulumi.auth0.CustomDomainArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myCustomDomain = new CustomDomain(\"myCustomDomain\", CustomDomainArgs.builder()        \n            .domain(\"auth.example.com\")\n            .type(\"auth0_managed_certs\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myCustomDomain:\n    type: auth0:CustomDomain\n    properties:\n      domain: auth.example.com\n      type: auth0_managed_certs\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nCustom domains can be imported using their ID. # Example\n\n```sh\n $ pulumi import auth0:index/customDomain:CustomDomain my_custom_domain cd_XXXXXXXXXXXXXXXX\n```\n\n ",
            "properties": {
                "customClientIpHeader": {
                    "type": "string",
                    "description": "The HTTP header to fetch the client's IP address. Cannot be set on auth0_managed domains.\n"
                },
                "domain": {
                    "type": "string",
                    "description": "Name of the custom domain.\n"
                },
                "originDomainName": {
                    "type": "string",
                    "description": "Once the configuration status is `ready`, the DNS name of the Auth0 origin server that handles traffic for the custom domain.\n"
                },
                "primary": {
                    "type": "boolean",
                    "description": "Indicates whether this is a primary domain.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Configuration status for the custom domain. Options include `disabled`, `pending`, `pending_verification`, and `ready`.\n"
                },
                "tlsPolicy": {
                    "type": "string",
                    "description": "TLS policy for the custom domain. Available options are: `compatible` or `recommended`. Compatible includes TLS 1.0, 1.1, 1.2, and recommended only includes TLS 1.2. Cannot be set on self_managed domains.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Provisioning type for the custom domain. Options include `auth0_managed_certs` and `self_managed_certs`.\n"
                },
                "verifications": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/auth0:index/CustomDomainVerification:CustomDomainVerification"
                    },
                    "description": "Configuration settings for verification.\n"
                }
            },
            "required": [
                "domain",
                "originDomainName",
                "primary",
                "status",
                "tlsPolicy",
                "type",
                "verifications"
            ],
            "inputProperties": {
                "customClientIpHeader": {
                    "type": "string",
                    "description": "The HTTP header to fetch the client's IP address. Cannot be set on auth0_managed domains.\n"
                },
                "domain": {
                    "type": "string",
                    "description": "Name of the custom domain.\n",
                    "willReplaceOnChanges": true
                },
                "tlsPolicy": {
                    "type": "string",
                    "description": "TLS policy for the custom domain. Available options are: `compatible` or `recommended`. Compatible includes TLS 1.0, 1.1, 1.2, and recommended only includes TLS 1.2. Cannot be set on self_managed domains.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Provisioning type for the custom domain. Options include `auth0_managed_certs` and `self_managed_certs`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "domain",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CustomDomain resources.\n",
                "properties": {
                    "customClientIpHeader": {
                        "type": "string",
                        "description": "The HTTP header to fetch the client's IP address. Cannot be set on auth0_managed domains.\n"
                    },
                    "domain": {
                        "type": "string",
                        "description": "Name of the custom domain.\n",
                        "willReplaceOnChanges": true
                    },
                    "originDomainName": {
                        "type": "string",
                        "description": "Once the configuration status is `ready`, the DNS name of the Auth0 origin server that handles traffic for the custom domain.\n"
                    },
                    "primary": {
                        "type": "boolean",
                        "description": "Indicates whether this is a primary domain.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Configuration status for the custom domain. Options include `disabled`, `pending`, `pending_verification`, and `ready`.\n"
                    },
                    "tlsPolicy": {
                        "type": "string",
                        "description": "TLS policy for the custom domain. Available options are: `compatible` or `recommended`. Compatible includes TLS 1.0, 1.1, 1.2, and recommended only includes TLS 1.2. Cannot be set on self_managed domains.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Provisioning type for the custom domain. Options include `auth0_managed_certs` and `self_managed_certs`.\n",
                        "willReplaceOnChanges": true
                    },
                    "verifications": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/auth0:index/CustomDomainVerification:CustomDomainVerification"
                        },
                        "description": "Configuration settings for verification.\n"
                    }
                },
                "type": "object"
            }
        },
        "auth0:index/customDomainVerification:CustomDomainVerification": {
            "description": "With Auth0, you can use a custom domain to maintain a consistent user experience. This is a three-step process; you must configure the custom domain in Auth0, then create a DNS record for the domain, then verify the DNS record in Auth0. This resource allows for automating the verification part of the process.\n\n\n## Import\n\nYou can import this resource using the custom domain ID. # Example\n\n```sh\n $ pulumi import auth0:index/customDomainVerification:CustomDomainVerification my_custom_domain_verification cd_XXXXXXXXXXXXXXXX\n```\n\n ",
            "properties": {
                "cnameApiKey": {
                    "type": "string",
                    "description": "The value of the `cname-api-key` header to send when forwarding requests. Only present if the type of the custom domain\nis `self_managed_certs` and Terraform originally managed the domain's verification.\n",
                    "secret": true
                },
                "customDomainId": {
                    "type": "string",
                    "description": "ID of the custom domain resource.\n"
                },
                "originDomainName": {
                    "type": "string",
                    "description": "The DNS name of the Auth0 origin server that handles traffic for the custom domain.\n"
                }
            },
            "required": [
                "cnameApiKey",
                "customDomainId",
                "originDomainName"
            ],
            "inputProperties": {
                "customDomainId": {
                    "type": "string",
                    "description": "ID of the custom domain resource.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "customDomainId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CustomDomainVerification resources.\n",
                "properties": {
                    "cnameApiKey": {
                        "type": "string",
                        "description": "The value of the `cname-api-key` header to send when forwarding requests. Only present if the type of the custom domain\nis `self_managed_certs` and Terraform originally managed the domain's verification.\n",
                        "secret": true
                    },
                    "customDomainId": {
                        "type": "string",
                        "description": "ID of the custom domain resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "originDomainName": {
                        "type": "string",
                        "description": "The DNS name of the Auth0 origin server that handles traffic for the custom domain.\n"
                    }
                },
                "type": "object"
            }
        },
        "auth0:index/email:Email": {
            "description": "With Auth0, you can have standard welcome, password reset, and account verification email-based workflows built right into Auth0. This resource allows you to configure email providers, so you can route all emails that are part of Auth0's authentication workflows through the supported high-volume email service of your choice.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as auth0 from \"@pulumi/auth0\";\n\n// This is an example on how to set up the email provider with Amazon SES.\nconst amazonSesEmailProvider = new auth0.Email(\"amazonSesEmailProvider\", {\n    credentials: {\n        accessKeyId: \"AKIAXXXXXXXXXXXXXXXX\",\n        region: \"us-east-1\",\n        secretAccessKey: \"7e8c2148xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n    },\n    defaultFromAddress: \"accounts@example.com\",\n    enabled: true,\n});\n// This is an example on how to set up the email provider with SMTP.\nconst smtpEmailProvider = new auth0.Email(\"smtpEmailProvider\", {\n    credentials: {\n        smtpHost: \"your.smtp.host.com\",\n        smtpPass: \"SMTP Password\",\n        smtpPort: 583,\n        smtpUser: \"SMTP Username\",\n    },\n    defaultFromAddress: \"accounts@example.com\",\n    enabled: true,\n});\n// This is an example on how to set up the email provider with Sendgrid.\nconst sendgridEmailProvider = new auth0.Email(\"sendgridEmailProvider\", {\n    credentials: {\n        apiKey: \"secretAPIKey\",\n    },\n    defaultFromAddress: \"accounts@example.com\",\n    enabled: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_auth0 as auth0\n\n# This is an example on how to set up the email provider with Amazon SES.\namazon_ses_email_provider = auth0.Email(\"amazonSesEmailProvider\",\n    credentials=auth0.EmailCredentialsArgs(\n        access_key_id=\"AKIAXXXXXXXXXXXXXXXX\",\n        region=\"us-east-1\",\n        secret_access_key=\"7e8c2148xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n    ),\n    default_from_address=\"accounts@example.com\",\n    enabled=True)\n# This is an example on how to set up the email provider with SMTP.\nsmtp_email_provider = auth0.Email(\"smtpEmailProvider\",\n    credentials=auth0.EmailCredentialsArgs(\n        smtp_host=\"your.smtp.host.com\",\n        smtp_pass=\"SMTP Password\",\n        smtp_port=583,\n        smtp_user=\"SMTP Username\",\n    ),\n    default_from_address=\"accounts@example.com\",\n    enabled=True)\n# This is an example on how to set up the email provider with Sendgrid.\nsendgrid_email_provider = auth0.Email(\"sendgridEmailProvider\",\n    credentials=auth0.EmailCredentialsArgs(\n        api_key=\"secretAPIKey\",\n    ),\n    default_from_address=\"accounts@example.com\",\n    enabled=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Auth0 = Pulumi.Auth0;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // This is an example on how to set up the email provider with Amazon SES.\n    var amazonSesEmailProvider = new Auth0.Email(\"amazonSesEmailProvider\", new()\n    {\n        Credentials = new Auth0.Inputs.EmailCredentialsArgs\n        {\n            AccessKeyId = \"AKIAXXXXXXXXXXXXXXXX\",\n            Region = \"us-east-1\",\n            SecretAccessKey = \"7e8c2148xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n        },\n        DefaultFromAddress = \"accounts@example.com\",\n        Enabled = true,\n    });\n\n    // This is an example on how to set up the email provider with SMTP.\n    var smtpEmailProvider = new Auth0.Email(\"smtpEmailProvider\", new()\n    {\n        Credentials = new Auth0.Inputs.EmailCredentialsArgs\n        {\n            SmtpHost = \"your.smtp.host.com\",\n            SmtpPass = \"SMTP Password\",\n            SmtpPort = 583,\n            SmtpUser = \"SMTP Username\",\n        },\n        DefaultFromAddress = \"accounts@example.com\",\n        Enabled = true,\n    });\n\n    // This is an example on how to set up the email provider with Sendgrid.\n    var sendgridEmailProvider = new Auth0.Email(\"sendgridEmailProvider\", new()\n    {\n        Credentials = new Auth0.Inputs.EmailCredentialsArgs\n        {\n            ApiKey = \"secretAPIKey\",\n        },\n        DefaultFromAddress = \"accounts@example.com\",\n        Enabled = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-auth0/sdk/v2/go/auth0\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := auth0.NewEmail(ctx, \"amazonSesEmailProvider\", \u0026auth0.EmailArgs{\n\t\t\tCredentials: \u0026auth0.EmailCredentialsArgs{\n\t\t\t\tAccessKeyId:     pulumi.String(\"AKIAXXXXXXXXXXXXXXXX\"),\n\t\t\t\tRegion:          pulumi.String(\"us-east-1\"),\n\t\t\t\tSecretAccessKey: pulumi.String(\"7e8c2148xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"),\n\t\t\t},\n\t\t\tDefaultFromAddress: pulumi.String(\"accounts@example.com\"),\n\t\t\tEnabled:            pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = auth0.NewEmail(ctx, \"smtpEmailProvider\", \u0026auth0.EmailArgs{\n\t\t\tCredentials: \u0026auth0.EmailCredentialsArgs{\n\t\t\t\tSmtpHost: pulumi.String(\"your.smtp.host.com\"),\n\t\t\t\tSmtpPass: pulumi.String(\"SMTP Password\"),\n\t\t\t\tSmtpPort: pulumi.Int(583),\n\t\t\t\tSmtpUser: pulumi.String(\"SMTP Username\"),\n\t\t\t},\n\t\t\tDefaultFromAddress: pulumi.String(\"accounts@example.com\"),\n\t\t\tEnabled:            pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = auth0.NewEmail(ctx, \"sendgridEmailProvider\", \u0026auth0.EmailArgs{\n\t\t\tCredentials: \u0026auth0.EmailCredentialsArgs{\n\t\t\t\tApiKey: pulumi.String(\"secretAPIKey\"),\n\t\t\t},\n\t\t\tDefaultFromAddress: pulumi.String(\"accounts@example.com\"),\n\t\t\tEnabled:            pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.auth0.Email;\nimport com.pulumi.auth0.EmailArgs;\nimport com.pulumi.auth0.inputs.EmailCredentialsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var amazonSesEmailProvider = new Email(\"amazonSesEmailProvider\", EmailArgs.builder()        \n            .credentials(EmailCredentialsArgs.builder()\n                .accessKeyId(\"AKIAXXXXXXXXXXXXXXXX\")\n                .region(\"us-east-1\")\n                .secretAccessKey(\"7e8c2148xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\")\n                .build())\n            .defaultFromAddress(\"accounts@example.com\")\n            .enabled(true)\n            .build());\n\n        var smtpEmailProvider = new Email(\"smtpEmailProvider\", EmailArgs.builder()        \n            .credentials(EmailCredentialsArgs.builder()\n                .smtpHost(\"your.smtp.host.com\")\n                .smtpPass(\"SMTP Password\")\n                .smtpPort(583)\n                .smtpUser(\"SMTP Username\")\n                .build())\n            .defaultFromAddress(\"accounts@example.com\")\n            .enabled(true)\n            .build());\n\n        var sendgridEmailProvider = new Email(\"sendgridEmailProvider\", EmailArgs.builder()        \n            .credentials(EmailCredentialsArgs.builder()\n                .apiKey(\"secretAPIKey\")\n                .build())\n            .defaultFromAddress(\"accounts@example.com\")\n            .enabled(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # This is an example on how to set up the email provider with Amazon SES.\n  amazonSesEmailProvider:\n    type: auth0:Email\n    properties:\n      credentials:\n        accessKeyId: AKIAXXXXXXXXXXXXXXXX\n        region: us-east-1\n        secretAccessKey: 7e8c2148xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n      defaultFromAddress: accounts@example.com\n      enabled: true\n  # This is an example on how to set up the email provider with SMTP.\n  smtpEmailProvider:\n    type: auth0:Email\n    properties:\n      credentials:\n        smtpHost: your.smtp.host.com\n        smtpPass: SMTP Password\n        smtpPort: 583\n        smtpUser: SMTP Username\n      defaultFromAddress: accounts@example.com\n      enabled: true\n  # This is an example on how to set up the email provider with Sendgrid.\n  sendgridEmailProvider:\n    type: auth0:Email\n    properties:\n      credentials:\n        apiKey: secretAPIKey\n      defaultFromAddress: accounts@example.com\n      enabled: true\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nAs this is not a resource identifiable by an ID within the Auth0 Management API, email can be imported using a random string. # We recommend [Version 4 UUID](https://www.uuidgenerator.net/version4) # Example\n\n```sh\n $ pulumi import auth0:index/email:Email my_email_provider b4213dc2-2eed-42c3-9516-c6131a9ce0b0\n```\n\n ",
            "properties": {
                "credentials": {
                    "$ref": "#/types/auth0:index/EmailCredentials:EmailCredentials",
                    "description": "Configuration settings for the credentials for the email provider.\n"
                },
                "defaultFromAddress": {
                    "type": "string",
                    "description": "Email address to use as the sender when no other \"from\" address is specified.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Indicates whether the email provider is enabled.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the email provider. Options include `mailgun`, `mandrill`, `sendgrid`, `ses`, `smtp`, and `sparkpost`.\n"
                },
                "settings": {
                    "$ref": "#/types/auth0:index/EmailSettings:EmailSettings",
                    "description": "Specific email provider settings.\n"
                }
            },
            "required": [
                "credentials",
                "defaultFromAddress",
                "name",
                "settings"
            ],
            "inputProperties": {
                "credentials": {
                    "$ref": "#/types/auth0:index/EmailCredentials:EmailCredentials",
                    "description": "Configuration settings for the credentials for the email provider.\n"
                },
                "defaultFromAddress": {
                    "type": "string",
                    "description": "Email address to use as the sender when no other \"from\" address is specified.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Indicates whether the email provider is enabled.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the email provider. Options include `mailgun`, `mandrill`, `sendgrid`, `ses`, `smtp`, and `sparkpost`.\n"
                },
                "settings": {
                    "$ref": "#/types/auth0:index/EmailSettings:EmailSettings",
                    "description": "Specific email provider settings.\n"
                }
            },
            "requiredInputs": [
                "credentials",
                "defaultFromAddress"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Email resources.\n",
                "properties": {
                    "credentials": {
                        "$ref": "#/types/auth0:index/EmailCredentials:EmailCredentials",
                        "description": "Configuration settings for the credentials for the email provider.\n"
                    },
                    "defaultFromAddress": {
                        "type": "string",
                        "description": "Email address to use as the sender when no other \"from\" address is specified.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Indicates whether the email provider is enabled.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the email provider. Options include `mailgun`, `mandrill`, `sendgrid`, `ses`, `smtp`, and `sparkpost`.\n"
                    },
                    "settings": {
                        "$ref": "#/types/auth0:index/EmailSettings:EmailSettings",
                        "description": "Specific email provider settings.\n"
                    }
                },
                "type": "object"
            }
        },
        "auth0:index/emailTemplate:EmailTemplate": {
            "description": "With Auth0, you can have standard welcome, password reset, and account verification email-based workflows built right into Auth0. This resource allows you to configure email templates to customize the look, feel, and sender identities of emails sent by Auth0. Used in conjunction with configured email providers.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as auth0 from \"@pulumi/auth0\";\n\nconst myEmailProvider = new auth0.Email(\"myEmailProvider\", {\n    enabled: true,\n    defaultFromAddress: \"accounts@example.com\",\n    credentials: {\n        accessKeyId: \"AKIAXXXXXXXXXXXXXXXX\",\n        secretAccessKey: \"7e8c2148xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n        region: \"us-east-1\",\n    },\n});\nconst myEmailTemplate = new auth0.EmailTemplate(\"myEmailTemplate\", {\n    template: \"welcome_email\",\n    body: \"\u003chtml\u003e\u003cbody\u003e\u003ch1\u003eWelcome!\u003c/h1\u003e\u003c/body\u003e\u003c/html\u003e\",\n    from: \"welcome@example.com\",\n    resultUrl: \"https://example.com/welcome\",\n    subject: \"Welcome\",\n    syntax: \"liquid\",\n    urlLifetimeInSeconds: 3600,\n    enabled: true,\n}, {\n    dependsOn: [myEmailProvider],\n});\n```\n```python\nimport pulumi\nimport pulumi_auth0 as auth0\n\nmy_email_provider = auth0.Email(\"myEmailProvider\",\n    enabled=True,\n    default_from_address=\"accounts@example.com\",\n    credentials=auth0.EmailCredentialsArgs(\n        access_key_id=\"AKIAXXXXXXXXXXXXXXXX\",\n        secret_access_key=\"7e8c2148xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n        region=\"us-east-1\",\n    ))\nmy_email_template = auth0.EmailTemplate(\"myEmailTemplate\",\n    template=\"welcome_email\",\n    body=\"\u003chtml\u003e\u003cbody\u003e\u003ch1\u003eWelcome!\u003c/h1\u003e\u003c/body\u003e\u003c/html\u003e\",\n    from_=\"welcome@example.com\",\n    result_url=\"https://example.com/welcome\",\n    subject=\"Welcome\",\n    syntax=\"liquid\",\n    url_lifetime_in_seconds=3600,\n    enabled=True,\n    opts=pulumi.ResourceOptions(depends_on=[my_email_provider]))\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Auth0 = Pulumi.Auth0;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myEmailProvider = new Auth0.Email(\"myEmailProvider\", new()\n    {\n        Enabled = true,\n        DefaultFromAddress = \"accounts@example.com\",\n        Credentials = new Auth0.Inputs.EmailCredentialsArgs\n        {\n            AccessKeyId = \"AKIAXXXXXXXXXXXXXXXX\",\n            SecretAccessKey = \"7e8c2148xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n            Region = \"us-east-1\",\n        },\n    });\n\n    var myEmailTemplate = new Auth0.EmailTemplate(\"myEmailTemplate\", new()\n    {\n        Template = \"welcome_email\",\n        Body = \"\u003chtml\u003e\u003cbody\u003e\u003ch1\u003eWelcome!\u003c/h1\u003e\u003c/body\u003e\u003c/html\u003e\",\n        From = \"welcome@example.com\",\n        ResultUrl = \"https://example.com/welcome\",\n        Subject = \"Welcome\",\n        Syntax = \"liquid\",\n        UrlLifetimeInSeconds = 3600,\n        Enabled = true,\n    }, new CustomResourceOptions\n    {\n        DependsOn = new[]\n        {\n            myEmailProvider,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-auth0/sdk/v2/go/auth0\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyEmailProvider, err := auth0.NewEmail(ctx, \"myEmailProvider\", \u0026auth0.EmailArgs{\n\t\t\tEnabled:            pulumi.Bool(true),\n\t\t\tDefaultFromAddress: pulumi.String(\"accounts@example.com\"),\n\t\t\tCredentials: \u0026auth0.EmailCredentialsArgs{\n\t\t\t\tAccessKeyId:     pulumi.String(\"AKIAXXXXXXXXXXXXXXXX\"),\n\t\t\t\tSecretAccessKey: pulumi.String(\"7e8c2148xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"),\n\t\t\t\tRegion:          pulumi.String(\"us-east-1\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = auth0.NewEmailTemplate(ctx, \"myEmailTemplate\", \u0026auth0.EmailTemplateArgs{\n\t\t\tTemplate:             pulumi.String(\"welcome_email\"),\n\t\t\tBody:                 pulumi.String(\"\u003chtml\u003e\u003cbody\u003e\u003ch1\u003eWelcome!\u003c/h1\u003e\u003c/body\u003e\u003c/html\u003e\"),\n\t\t\tFrom:                 pulumi.String(\"welcome@example.com\"),\n\t\t\tResultUrl:            pulumi.String(\"https://example.com/welcome\"),\n\t\t\tSubject:              pulumi.String(\"Welcome\"),\n\t\t\tSyntax:               pulumi.String(\"liquid\"),\n\t\t\tUrlLifetimeInSeconds: pulumi.Int(3600),\n\t\t\tEnabled:              pulumi.Bool(true),\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\tmyEmailProvider,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.auth0.Email;\nimport com.pulumi.auth0.EmailArgs;\nimport com.pulumi.auth0.inputs.EmailCredentialsArgs;\nimport com.pulumi.auth0.EmailTemplate;\nimport com.pulumi.auth0.EmailTemplateArgs;\nimport com.pulumi.resources.CustomResourceOptions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myEmailProvider = new Email(\"myEmailProvider\", EmailArgs.builder()        \n            .enabled(true)\n            .defaultFromAddress(\"accounts@example.com\")\n            .credentials(EmailCredentialsArgs.builder()\n                .accessKeyId(\"AKIAXXXXXXXXXXXXXXXX\")\n                .secretAccessKey(\"7e8c2148xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\")\n                .region(\"us-east-1\")\n                .build())\n            .build());\n\n        var myEmailTemplate = new EmailTemplate(\"myEmailTemplate\", EmailTemplateArgs.builder()        \n            .template(\"welcome_email\")\n            .body(\"\u003chtml\u003e\u003cbody\u003e\u003ch1\u003eWelcome!\u003c/h1\u003e\u003c/body\u003e\u003c/html\u003e\")\n            .from(\"welcome@example.com\")\n            .resultUrl(\"https://example.com/welcome\")\n            .subject(\"Welcome\")\n            .syntax(\"liquid\")\n            .urlLifetimeInSeconds(3600)\n            .enabled(true)\n            .build(), CustomResourceOptions.builder()\n                .dependsOn(myEmailProvider)\n                .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myEmailProvider:\n    type: auth0:Email\n    properties:\n      enabled: true\n      defaultFromAddress: accounts@example.com\n      credentials:\n        accessKeyId: AKIAXXXXXXXXXXXXXXXX\n        secretAccessKey: 7e8c2148xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n        region: us-east-1\n  myEmailTemplate:\n    type: auth0:EmailTemplate\n    properties:\n      template: welcome_email\n      body: \u003chtml\u003e\u003cbody\u003e\u003ch1\u003eWelcome!\u003c/h1\u003e\u003c/body\u003e\u003c/html\u003e\n      from: welcome@example.com\n      resultUrl: https://example.com/welcome\n      subject: Welcome\n      syntax: liquid\n      urlLifetimeInSeconds: 3600\n      enabled: true\n    options:\n      dependson:\n        - ${myEmailProvider}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThis resource can be imported using the pre-defined template name. # These names are `verify_email`, `verify_email_by_code`, `reset_email`, `welcome_email`, `blocked_account`, `stolen_credentials`, `enrollment_email`, `mfa_oob_code`, and `user_invitation`. # The names `change_password`, and `password_reset` are also supported for legacy scenarios. # Example\n\n```sh\n $ pulumi import auth0:index/emailTemplate:EmailTemplate my_email_template welcome_email\n```\n\n ",
            "properties": {
                "body": {
                    "type": "string",
                    "description": "Body of the email template. You can include [common variables](https://auth0.com/docs/customize/email/email-templates#common-variables).\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Indicates whether the template is enabled.\n"
                },
                "from": {
                    "type": "string",
                    "description": "Email address to use as the sender. You can include [common variables](https://auth0.com/docs/customize/email/email-templates#common-variables).\n"
                },
                "includeEmailInRedirect": {
                    "type": "boolean",
                    "description": "Whether the `reset_email` and `verify_email` templates should include the user's email address as the email parameter in the `returnUrl` (true) or whether no email address should be included in the redirect (false). Defaults to `true`.\n"
                },
                "resultUrl": {
                    "type": "string",
                    "description": "URL to redirect the user to after a successful action. [Learn more](https://auth0.com/docs/customize/email/email-templates#configure-template-fields).\n"
                },
                "subject": {
                    "type": "string",
                    "description": "Subject line of the email. You can include [common variables](https://auth0.com/docs/customize/email/email-templates#common-variables).\n"
                },
                "syntax": {
                    "type": "string",
                    "description": "Syntax of the template body. You can use either text or HTML with Liquid syntax.\n"
                },
                "template": {
                    "type": "string",
                    "description": "Template name. Options include `verify_email`, `verify_email_by_code`, `reset_email`, `welcome_email`, `blocked_account`, `stolen_credentials`, `enrollment_email`, `mfa_oob_code`, `user_invitation`, `change_password` (legacy), or `password_reset` (legacy).\n"
                },
                "urlLifetimeInSeconds": {
                    "type": "integer",
                    "description": "Number of seconds during which the link within the email will be valid.\n"
                }
            },
            "required": [
                "body",
                "enabled",
                "from",
                "includeEmailInRedirect",
                "subject",
                "syntax",
                "template"
            ],
            "inputProperties": {
                "body": {
                    "type": "string",
                    "description": "Body of the email template. You can include [common variables](https://auth0.com/docs/customize/email/email-templates#common-variables).\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Indicates whether the template is enabled.\n"
                },
                "from": {
                    "type": "string",
                    "description": "Email address to use as the sender. You can include [common variables](https://auth0.com/docs/customize/email/email-templates#common-variables).\n"
                },
                "includeEmailInRedirect": {
                    "type": "boolean",
                    "description": "Whether the `reset_email` and `verify_email` templates should include the user's email address as the email parameter in the `returnUrl` (true) or whether no email address should be included in the redirect (false). Defaults to `true`.\n"
                },
                "resultUrl": {
                    "type": "string",
                    "description": "URL to redirect the user to after a successful action. [Learn more](https://auth0.com/docs/customize/email/email-templates#configure-template-fields).\n"
                },
                "subject": {
                    "type": "string",
                    "description": "Subject line of the email. You can include [common variables](https://auth0.com/docs/customize/email/email-templates#common-variables).\n"
                },
                "syntax": {
                    "type": "string",
                    "description": "Syntax of the template body. You can use either text or HTML with Liquid syntax.\n"
                },
                "template": {
                    "type": "string",
                    "description": "Template name. Options include `verify_email`, `verify_email_by_code`, `reset_email`, `welcome_email`, `blocked_account`, `stolen_credentials`, `enrollment_email`, `mfa_oob_code`, `user_invitation`, `change_password` (legacy), or `password_reset` (legacy).\n"
                },
                "urlLifetimeInSeconds": {
                    "type": "integer",
                    "description": "Number of seconds during which the link within the email will be valid.\n"
                }
            },
            "requiredInputs": [
                "body",
                "enabled",
                "from",
                "subject",
                "syntax",
                "template"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering EmailTemplate resources.\n",
                "properties": {
                    "body": {
                        "type": "string",
                        "description": "Body of the email template. You can include [common variables](https://auth0.com/docs/customize/email/email-templates#common-variables).\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Indicates whether the template is enabled.\n"
                    },
                    "from": {
                        "type": "string",
                        "description": "Email address to use as the sender. You can include [common variables](https://auth0.com/docs/customize/email/email-templates#common-variables).\n"
                    },
                    "includeEmailInRedirect": {
                        "type": "boolean",
                        "description": "Whether the `reset_email` and `verify_email` templates should include the user's email address as the email parameter in the `returnUrl` (true) or whether no email address should be included in the redirect (false). Defaults to `true`.\n"
                    },
                    "resultUrl": {
                        "type": "string",
                        "description": "URL to redirect the user to after a successful action. [Learn more](https://auth0.com/docs/customize/email/email-templates#configure-template-fields).\n"
                    },
                    "subject": {
                        "type": "string",
                        "description": "Subject line of the email. You can include [common variables](https://auth0.com/docs/customize/email/email-templates#common-variables).\n"
                    },
                    "syntax": {
                        "type": "string",
                        "description": "Syntax of the template body. You can use either text or HTML with Liquid syntax.\n"
                    },
                    "template": {
                        "type": "string",
                        "description": "Template name. Options include `verify_email`, `verify_email_by_code`, `reset_email`, `welcome_email`, `blocked_account`, `stolen_credentials`, `enrollment_email`, `mfa_oob_code`, `user_invitation`, `change_password` (legacy), or `password_reset` (legacy).\n"
                    },
                    "urlLifetimeInSeconds": {
                        "type": "integer",
                        "description": "Number of seconds during which the link within the email will be valid.\n"
                    }
                },
                "type": "object"
            }
        },
        "auth0:index/globalClient:GlobalClient": {
            "description": "Use a tenant's global Auth0 Application client.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as auth0 from \"@pulumi/auth0\";\n\nconst global = new auth0.GlobalClient(\"global\", {\n    callbacks: [\"http://somehostname.com/a/callback\"],\n    customLoginPage: `\u003chtml\u003e\n    \u003chead\u003e\u003ctitle\u003eMy Custom Login Page\u003c/title\u003e\u003c/head\u003e\n    \u003cbody\u003e\n        I should probably have a login form here\n    \u003c/body\u003e\n\u003c/html\u003e\n\n`,\n    customLoginPageOn: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_auth0 as auth0\n\nglobal_ = auth0.GlobalClient(\"global\",\n    callbacks=[\"http://somehostname.com/a/callback\"],\n    custom_login_page=\"\"\"\u003chtml\u003e\n    \u003chead\u003e\u003ctitle\u003eMy Custom Login Page\u003c/title\u003e\u003c/head\u003e\n    \u003cbody\u003e\n        I should probably have a login form here\n    \u003c/body\u003e\n\u003c/html\u003e\n\n\"\"\",\n    custom_login_page_on=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Auth0 = Pulumi.Auth0;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @global = new Auth0.GlobalClient(\"global\", new()\n    {\n        Callbacks = new[]\n        {\n            \"http://somehostname.com/a/callback\",\n        },\n        CustomLoginPage = @\"\u003chtml\u003e\n    \u003chead\u003e\u003ctitle\u003eMy Custom Login Page\u003c/title\u003e\u003c/head\u003e\n    \u003cbody\u003e\n        I should probably have a login form here\n    \u003c/body\u003e\n\u003c/html\u003e\n\n\",\n        CustomLoginPageOn = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-auth0/sdk/v2/go/auth0\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := auth0.NewGlobalClient(ctx, \"global\", \u0026auth0.GlobalClientArgs{\n\t\t\tCallbacks: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"http://somehostname.com/a/callback\"),\n\t\t\t},\n\t\t\tCustomLoginPage: pulumi.String(fmt.Sprintf(`\u003chtml\u003e\n    \u003chead\u003e\u003ctitle\u003eMy Custom Login Page\u003c/title\u003e\u003c/head\u003e\n    \u003cbody\u003e\n        I should probably have a login form here\n    \u003c/body\u003e\n\u003c/html\u003e\n\n`)),\n\t\t\tCustomLoginPageOn: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.auth0.GlobalClient;\nimport com.pulumi.auth0.GlobalClientArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var global = new GlobalClient(\"global\", GlobalClientArgs.builder()        \n            .callbacks(\"http://somehostname.com/a/callback\")\n            .customLoginPage(\"\"\"\n\u003chtml\u003e\n    \u003chead\u003e\u003ctitle\u003eMy Custom Login Page\u003c/title\u003e\u003c/head\u003e\n    \u003cbody\u003e\n        I should probably have a login form here\n    \u003c/body\u003e\n\u003c/html\u003e\n\n            \"\"\")\n            .customLoginPageOn(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  global:\n    type: auth0:GlobalClient\n    properties:\n      callbacks:\n        - http://somehostname.com/a/callback\n      customLoginPage: |+\n        \u003chtml\u003e\n            \u003chead\u003e\u003ctitle\u003eMy Custom Login Page\u003c/title\u003e\u003c/head\u003e\n            \u003cbody\u003e\n                I should probably have a login form here\n            \u003c/body\u003e\n        \u003c/html\u003e\n\n      # Auth0 Universal Login - Custom Login Page\n      customLoginPageOn: true\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThe auth0_global_client can be imported using the global client's ID. # You can find the ID of the global client by going to the [API Explorer](https://auth0.com/docs/api/management/v2#!/Clients/get_clients) and fetching the clients that have `\"global\"true`. # Example\n\n```sh\n $ pulumi import auth0:index/globalClient:GlobalClient global XaiyAXXXYdXXXXnqjj8HXXXXXT5titww\n```\n\n ",
            "properties": {
                "addons": {
                    "$ref": "#/types/auth0:index/GlobalClientAddons:GlobalClientAddons",
                    "description": "Addons enabled for this client and their associated configurations.\n"
                },
                "allowedClients": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of applications ID's that will be allowed to make delegation request. By default, all applications will be allowed.\n"
                },
                "allowedLogoutUrls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "URLs that Auth0 may redirect to after logout.\n"
                },
                "allowedOrigins": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "URLs that represent valid origins for cross-origin resource sharing. By default, all your callback URLs will be allowed.\n"
                },
                "appType": {
                    "type": "string",
                    "description": "Type of application the client represents. Possible values are: `native`, `spa`, `regular_web`, `non_interactive`, `sso_integration`. Specific SSO integrations types accepted as well are: `rms`, `box`, `cloudbees`, `concur`, `dropbox`, `mscrm`, `echosign`, `egnyte`, `newrelic`, `office365`, `salesforce`, `sentry`, `sharepoint`, `slack`, `springcm`, `zendesk`, `zoom`.\n"
                },
                "callbacks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "URLs that Auth0 may call back to after a user authenticates for the client. Make sure to specify the protocol (https://) otherwise the callback may fail in some cases. With the exception of custom URI schemes for native clients, all callbacks should use protocol https://.\n"
                },
                "clientAliases": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of audiences/realms for SAML protocol. Used by the wsfed addon.\n"
                },
                "clientId": {
                    "type": "string",
                    "description": "The ID of the client.\n"
                },
                "clientMetadata": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Metadata associated with the client, in the form of an object with string values (max 255 chars). Maximum of 10 metadata properties allowed. Field names (max 255 chars) are alphanumeric and may only include the following special characters: `:,-+=_*?\"/\\()\u003c\u003e@ [Tab] [Space]`.\n"
                },
                "clientSecret": {
                    "type": "string",
                    "description": "Secret for the client. Keep this private. To access this attribute you need to add the `read:client_keys` scope to the\nTerraform client. Otherwise, the attribute will contain an empty string.\n",
                    "secret": true
                },
                "clientSecretRotationTrigger": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Custom metadata for the rotation. The contents of this map are arbitrary and are hashed by the provider. When the hash changes, a rotation is triggered. For example, the map could contain the user making the change, the date of the change, and a text reason for the change. For more info: [rotate-client-secret](https://auth0.com/docs/get-started/applications/rotate-client-secret).\n"
                },
                "crossOriginAuth": {
                    "type": "boolean",
                    "description": "Whether this client can be used to make cross-origin authentication requests (`true`) or it is not allowed to make such requests (`false`). Requires the `coa_toggle_enabled` feature flag to be enabled on the tenant by the support team.\n"
                },
                "crossOriginLoc": {
                    "type": "string",
                    "description": "URL of the location in your site where the cross-origin verification takes place for the cross-origin auth flow when performing authentication in your own domain instead of Auth0 Universal Login page.\n"
                },
                "customLoginPage": {
                    "type": "string",
                    "description": "The content (HTML, CSS, JS) of the custom login page.\n"
                },
                "customLoginPageOn": {
                    "type": "boolean",
                    "description": "Indicates whether a custom login page is to be used.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the purpose of the client.\n"
                },
                "encryptionKey": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Encryption used for WS-Fed responses with this client.\n"
                },
                "formTemplate": {
                    "type": "string",
                    "description": "HTML form template to be used for WS-Federation.\n"
                },
                "grantTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Types of grants that this client is authorized to use.\n"
                },
                "initiateLoginUri": {
                    "type": "string",
                    "description": "Initiate login URI. Must be HTTPS or an empty string.\n"
                },
                "isFirstParty": {
                    "type": "boolean",
                    "description": "Indicates whether this client is a first-party client.\n"
                },
                "isTokenEndpointIpHeaderTrusted": {
                    "type": "boolean",
                    "description": "Indicates whether the token endpoint IP header is trusted.\n"
                },
                "jwtConfiguration": {
                    "$ref": "#/types/auth0:index/GlobalClientJwtConfiguration:GlobalClientJwtConfiguration",
                    "description": "Configuration settings for the JWTs issued for this client.\n"
                },
                "logoUri": {
                    "type": "string",
                    "description": "URL of the logo for the client. Recommended size is 150px x 150px. If none is set, the default badge for the application type will be shown.\n"
                },
                "mobile": {
                    "$ref": "#/types/auth0:index/GlobalClientMobile:GlobalClientMobile",
                    "description": "Additional configuration for native mobile apps.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the client.\n"
                },
                "nativeSocialLogin": {
                    "$ref": "#/types/auth0:index/GlobalClientNativeSocialLogin:GlobalClientNativeSocialLogin",
                    "description": "Configuration settings to toggle native social login for mobile native applications. Once this is set it must stay set, with both resources set to `false` in order to change the `app_type`.\n"
                },
                "oidcConformant": {
                    "type": "boolean",
                    "description": "Indicates whether this client will conform to strict OIDC specifications.\n"
                },
                "organizationRequireBehavior": {
                    "type": "string",
                    "description": "Defines how to proceed during an authentication transaction when `organization_usage = \"require\"`. Can be `no_prompt` (default) or `pre_login_prompt`.\n"
                },
                "organizationUsage": {
                    "type": "string",
                    "description": "Defines how to proceed during an authentication transaction with regards to an organization. Can be `deny` (default), `allow` or `require`.\n"
                },
                "refreshToken": {
                    "$ref": "#/types/auth0:index/GlobalClientRefreshToken:GlobalClientRefreshToken",
                    "description": "Configuration settings for the refresh tokens issued for this client.\n"
                },
                "signingKeys": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "description": "List containing a map of the public cert of the signing key and the public cert of the signing key in PKCS7.\n",
                    "secret": true
                },
                "sso": {
                    "type": "boolean",
                    "description": "Applies only to SSO clients and determines whether Auth0 will handle Single Sign-On (true) or whether the identity provider will (false).\n"
                },
                "ssoDisabled": {
                    "type": "boolean",
                    "description": "Indicates whether or not SSO is disabled.\n"
                },
                "tokenEndpointAuthMethod": {
                    "type": "string",
                    "description": "Defines the requested authentication method for the token endpoint. Options include `none` (public client without a client secret), `client_secret_post` (client uses HTTP POST parameters), `client_secret_basic` (client uses HTTP Basic).\n"
                },
                "webOrigins": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "URLs that represent valid web origins for use with web message response mode.\n"
                }
            },
            "required": [
                "addons",
                "allowedClients",
                "allowedLogoutUrls",
                "allowedOrigins",
                "appType",
                "callbacks",
                "clientAliases",
                "clientId",
                "clientMetadata",
                "clientSecret",
                "crossOriginAuth",
                "crossOriginLoc",
                "customLoginPage",
                "customLoginPageOn",
                "description",
                "encryptionKey",
                "formTemplate",
                "grantTypes",
                "initiateLoginUri",
                "isFirstParty",
                "isTokenEndpointIpHeaderTrusted",
                "jwtConfiguration",
                "logoUri",
                "mobile",
                "name",
                "nativeSocialLogin",
                "oidcConformant",
                "organizationRequireBehavior",
                "organizationUsage",
                "refreshToken",
                "signingKeys",
                "sso",
                "ssoDisabled",
                "tokenEndpointAuthMethod",
                "webOrigins"
            ],
            "inputProperties": {
                "addons": {
                    "$ref": "#/types/auth0:index/GlobalClientAddons:GlobalClientAddons",
                    "description": "Addons enabled for this client and their associated configurations.\n"
                },
                "allowedClients": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of applications ID's that will be allowed to make delegation request. By default, all applications will be allowed.\n"
                },
                "allowedLogoutUrls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "URLs that Auth0 may redirect to after logout.\n"
                },
                "allowedOrigins": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "URLs that represent valid origins for cross-origin resource sharing. By default, all your callback URLs will be allowed.\n"
                },
                "appType": {
                    "type": "string",
                    "description": "Type of application the client represents. Possible values are: `native`, `spa`, `regular_web`, `non_interactive`, `sso_integration`. Specific SSO integrations types accepted as well are: `rms`, `box`, `cloudbees`, `concur`, `dropbox`, `mscrm`, `echosign`, `egnyte`, `newrelic`, `office365`, `salesforce`, `sentry`, `sharepoint`, `slack`, `springcm`, `zendesk`, `zoom`.\n"
                },
                "callbacks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "URLs that Auth0 may call back to after a user authenticates for the client. Make sure to specify the protocol (https://) otherwise the callback may fail in some cases. With the exception of custom URI schemes for native clients, all callbacks should use protocol https://.\n"
                },
                "clientAliases": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of audiences/realms for SAML protocol. Used by the wsfed addon.\n"
                },
                "clientId": {
                    "type": "string",
                    "description": "The ID of the client.\n"
                },
                "clientMetadata": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Metadata associated with the client, in the form of an object with string values (max 255 chars). Maximum of 10 metadata properties allowed. Field names (max 255 chars) are alphanumeric and may only include the following special characters: `:,-+=_*?\"/\\()\u003c\u003e@ [Tab] [Space]`.\n"
                },
                "clientSecret": {
                    "type": "string",
                    "description": "Secret for the client. Keep this private. To access this attribute you need to add the `read:client_keys` scope to the\nTerraform client. Otherwise, the attribute will contain an empty string.\n",
                    "secret": true
                },
                "clientSecretRotationTrigger": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Custom metadata for the rotation. The contents of this map are arbitrary and are hashed by the provider. When the hash changes, a rotation is triggered. For example, the map could contain the user making the change, the date of the change, and a text reason for the change. For more info: [rotate-client-secret](https://auth0.com/docs/get-started/applications/rotate-client-secret).\n"
                },
                "crossOriginAuth": {
                    "type": "boolean",
                    "description": "Whether this client can be used to make cross-origin authentication requests (`true`) or it is not allowed to make such requests (`false`). Requires the `coa_toggle_enabled` feature flag to be enabled on the tenant by the support team.\n"
                },
                "crossOriginLoc": {
                    "type": "string",
                    "description": "URL of the location in your site where the cross-origin verification takes place for the cross-origin auth flow when performing authentication in your own domain instead of Auth0 Universal Login page.\n"
                },
                "customLoginPage": {
                    "type": "string",
                    "description": "The content (HTML, CSS, JS) of the custom login page.\n"
                },
                "customLoginPageOn": {
                    "type": "boolean",
                    "description": "Indicates whether a custom login page is to be used.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the purpose of the client.\n"
                },
                "encryptionKey": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Encryption used for WS-Fed responses with this client.\n"
                },
                "formTemplate": {
                    "type": "string",
                    "description": "HTML form template to be used for WS-Federation.\n"
                },
                "grantTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Types of grants that this client is authorized to use.\n"
                },
                "initiateLoginUri": {
                    "type": "string",
                    "description": "Initiate login URI. Must be HTTPS or an empty string.\n"
                },
                "isFirstParty": {
                    "type": "boolean",
                    "description": "Indicates whether this client is a first-party client.\n"
                },
                "isTokenEndpointIpHeaderTrusted": {
                    "type": "boolean",
                    "description": "Indicates whether the token endpoint IP header is trusted.\n"
                },
                "jwtConfiguration": {
                    "$ref": "#/types/auth0:index/GlobalClientJwtConfiguration:GlobalClientJwtConfiguration",
                    "description": "Configuration settings for the JWTs issued for this client.\n"
                },
                "logoUri": {
                    "type": "string",
                    "description": "URL of the logo for the client. Recommended size is 150px x 150px. If none is set, the default badge for the application type will be shown.\n"
                },
                "mobile": {
                    "$ref": "#/types/auth0:index/GlobalClientMobile:GlobalClientMobile",
                    "description": "Additional configuration for native mobile apps.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the client.\n"
                },
                "nativeSocialLogin": {
                    "$ref": "#/types/auth0:index/GlobalClientNativeSocialLogin:GlobalClientNativeSocialLogin",
                    "description": "Configuration settings to toggle native social login for mobile native applications. Once this is set it must stay set, with both resources set to `false` in order to change the `app_type`.\n"
                },
                "oidcConformant": {
                    "type": "boolean",
                    "description": "Indicates whether this client will conform to strict OIDC specifications.\n"
                },
                "organizationRequireBehavior": {
                    "type": "string",
                    "description": "Defines how to proceed during an authentication transaction when `organization_usage = \"require\"`. Can be `no_prompt` (default) or `pre_login_prompt`.\n"
                },
                "organizationUsage": {
                    "type": "string",
                    "description": "Defines how to proceed during an authentication transaction with regards to an organization. Can be `deny` (default), `allow` or `require`.\n"
                },
                "refreshToken": {
                    "$ref": "#/types/auth0:index/GlobalClientRefreshToken:GlobalClientRefreshToken",
                    "description": "Configuration settings for the refresh tokens issued for this client.\n"
                },
                "signingKeys": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "description": "List containing a map of the public cert of the signing key and the public cert of the signing key in PKCS7.\n",
                    "secret": true
                },
                "sso": {
                    "type": "boolean",
                    "description": "Applies only to SSO clients and determines whether Auth0 will handle Single Sign-On (true) or whether the identity provider will (false).\n"
                },
                "ssoDisabled": {
                    "type": "boolean",
                    "description": "Indicates whether or not SSO is disabled.\n"
                },
                "tokenEndpointAuthMethod": {
                    "type": "string",
                    "description": "Defines the requested authentication method for the token endpoint. Options include `none` (public client without a client secret), `client_secret_post` (client uses HTTP POST parameters), `client_secret_basic` (client uses HTTP Basic).\n"
                },
                "webOrigins": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "URLs that represent valid web origins for use with web message response mode.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GlobalClient resources.\n",
                "properties": {
                    "addons": {
                        "$ref": "#/types/auth0:index/GlobalClientAddons:GlobalClientAddons",
                        "description": "Addons enabled for this client and their associated configurations.\n"
                    },
                    "allowedClients": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of applications ID's that will be allowed to make delegation request. By default, all applications will be allowed.\n"
                    },
                    "allowedLogoutUrls": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "URLs that Auth0 may redirect to after logout.\n"
                    },
                    "allowedOrigins": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "URLs that represent valid origins for cross-origin resource sharing. By default, all your callback URLs will be allowed.\n"
                    },
                    "appType": {
                        "type": "string",
                        "description": "Type of application the client represents. Possible values are: `native`, `spa`, `regular_web`, `non_interactive`, `sso_integration`. Specific SSO integrations types accepted as well are: `rms`, `box`, `cloudbees`, `concur`, `dropbox`, `mscrm`, `echosign`, `egnyte`, `newrelic`, `office365`, `salesforce`, `sentry`, `sharepoint`, `slack`, `springcm`, `zendesk`, `zoom`.\n"
                    },
                    "callbacks": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "URLs that Auth0 may call back to after a user authenticates for the client. Make sure to specify the protocol (https://) otherwise the callback may fail in some cases. With the exception of custom URI schemes for native clients, all callbacks should use protocol https://.\n"
                    },
                    "clientAliases": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of audiences/realms for SAML protocol. Used by the wsfed addon.\n"
                    },
                    "clientId": {
                        "type": "string",
                        "description": "The ID of the client.\n"
                    },
                    "clientMetadata": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Metadata associated with the client, in the form of an object with string values (max 255 chars). Maximum of 10 metadata properties allowed. Field names (max 255 chars) are alphanumeric and may only include the following special characters: `:,-+=_*?\"/\\()\u003c\u003e@ [Tab] [Space]`.\n"
                    },
                    "clientSecret": {
                        "type": "string",
                        "description": "Secret for the client. Keep this private. To access this attribute you need to add the `read:client_keys` scope to the\nTerraform client. Otherwise, the attribute will contain an empty string.\n",
                        "secret": true
                    },
                    "clientSecretRotationTrigger": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Custom metadata for the rotation. The contents of this map are arbitrary and are hashed by the provider. When the hash changes, a rotation is triggered. For example, the map could contain the user making the change, the date of the change, and a text reason for the change. For more info: [rotate-client-secret](https://auth0.com/docs/get-started/applications/rotate-client-secret).\n"
                    },
                    "crossOriginAuth": {
                        "type": "boolean",
                        "description": "Whether this client can be used to make cross-origin authentication requests (`true`) or it is not allowed to make such requests (`false`). Requires the `coa_toggle_enabled` feature flag to be enabled on the tenant by the support team.\n"
                    },
                    "crossOriginLoc": {
                        "type": "string",
                        "description": "URL of the location in your site where the cross-origin verification takes place for the cross-origin auth flow when performing authentication in your own domain instead of Auth0 Universal Login page.\n"
                    },
                    "customLoginPage": {
                        "type": "string",
                        "description": "The content (HTML, CSS, JS) of the custom login page.\n"
                    },
                    "customLoginPageOn": {
                        "type": "boolean",
                        "description": "Indicates whether a custom login page is to be used.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the purpose of the client.\n"
                    },
                    "encryptionKey": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Encryption used for WS-Fed responses with this client.\n"
                    },
                    "formTemplate": {
                        "type": "string",
                        "description": "HTML form template to be used for WS-Federation.\n"
                    },
                    "grantTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Types of grants that this client is authorized to use.\n"
                    },
                    "initiateLoginUri": {
                        "type": "string",
                        "description": "Initiate login URI. Must be HTTPS or an empty string.\n"
                    },
                    "isFirstParty": {
                        "type": "boolean",
                        "description": "Indicates whether this client is a first-party client.\n"
                    },
                    "isTokenEndpointIpHeaderTrusted": {
                        "type": "boolean",
                        "description": "Indicates whether the token endpoint IP header is trusted.\n"
                    },
                    "jwtConfiguration": {
                        "$ref": "#/types/auth0:index/GlobalClientJwtConfiguration:GlobalClientJwtConfiguration",
                        "description": "Configuration settings for the JWTs issued for this client.\n"
                    },
                    "logoUri": {
                        "type": "string",
                        "description": "URL of the logo for the client. Recommended size is 150px x 150px. If none is set, the default badge for the application type will be shown.\n"
                    },
                    "mobile": {
                        "$ref": "#/types/auth0:index/GlobalClientMobile:GlobalClientMobile",
                        "description": "Additional configuration for native mobile apps.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the client.\n"
                    },
                    "nativeSocialLogin": {
                        "$ref": "#/types/auth0:index/GlobalClientNativeSocialLogin:GlobalClientNativeSocialLogin",
                        "description": "Configuration settings to toggle native social login for mobile native applications. Once this is set it must stay set, with both resources set to `false` in order to change the `app_type`.\n"
                    },
                    "oidcConformant": {
                        "type": "boolean",
                        "description": "Indicates whether this client will conform to strict OIDC specifications.\n"
                    },
                    "organizationRequireBehavior": {
                        "type": "string",
                        "description": "Defines how to proceed during an authentication transaction when `organization_usage = \"require\"`. Can be `no_prompt` (default) or `pre_login_prompt`.\n"
                    },
                    "organizationUsage": {
                        "type": "string",
                        "description": "Defines how to proceed during an authentication transaction with regards to an organization. Can be `deny` (default), `allow` or `require`.\n"
                    },
                    "refreshToken": {
                        "$ref": "#/types/auth0:index/GlobalClientRefreshToken:GlobalClientRefreshToken",
                        "description": "Configuration settings for the refresh tokens issued for this client.\n"
                    },
                    "signingKeys": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "additionalProperties": {
                                "$ref": "pulumi.json#/Any"
                            }
                        },
                        "description": "List containing a map of the public cert of the signing key and the public cert of the signing key in PKCS7.\n",
                        "secret": true
                    },
                    "sso": {
                        "type": "boolean",
                        "description": "Applies only to SSO clients and determines whether Auth0 will handle Single Sign-On (true) or whether the identity provider will (false).\n"
                    },
                    "ssoDisabled": {
                        "type": "boolean",
                        "description": "Indicates whether or not SSO is disabled.\n"
                    },
                    "tokenEndpointAuthMethod": {
                        "type": "string",
                        "description": "Defines the requested authentication method for the token endpoint. Options include `none` (public client without a client secret), `client_secret_post` (client uses HTTP POST parameters), `client_secret_basic` (client uses HTTP Basic).\n"
                    },
                    "webOrigins": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "URLs that represent valid web origins for use with web message response mode.\n"
                    }
                },
                "type": "object"
            }
        },
        "auth0:index/guardian:Guardian": {
            "description": "Multi-Factor Authentication works by requiring additional factors during the login process to prevent unauthorized access. With this resource you can configure some options available for MFA.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as auth0 from \"@pulumi/auth0\";\n\nconst myGuardian = new auth0.Guardian(\"myGuardian\", {\n    duo: {\n        enabled: true,\n        hostname: \"api-hostname\",\n        integrationKey: \"someKey\",\n        secretKey: \"someSecret\",\n    },\n    email: true,\n    otp: true,\n    phone: {\n        enabled: true,\n        messageTypes: [\n            \"sms\",\n            \"voice\",\n        ],\n        options: {\n            enrollmentMessage: \"{{code}} is your verification code for {{tenant.friendly_name}}. Please enter this code to verify your enrollment.\",\n            verificationMessage: \"{{code}} is your verification code for {{tenant.friendly_name}}.\",\n        },\n        provider: \"auth0\",\n    },\n    policy: \"all-applications\",\n    push: {\n        amazonSns: {\n            awsAccessKeyId: \"test1\",\n            awsRegion: \"us-west-1\",\n            awsSecretAccessKey: \"secretKey\",\n            snsApnsPlatformApplicationArn: \"test_arn\",\n            snsGcmPlatformApplicationArn: \"test_arn\",\n        },\n        customApp: {\n            appName: \"CustomApp\",\n            appleAppLink: \"https://itunes.apple.com/us/app/my-app/id123121\",\n            googleAppLink: \"https://play.google.com/store/apps/details?id=com.my.app\",\n        },\n        enabled: true,\n        provider: \"sns\",\n    },\n    recoveryCode: true,\n    webauthnPlatform: {\n        enabled: true,\n    },\n    webauthnRoaming: {\n        enabled: true,\n        userVerification: \"required\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_auth0 as auth0\n\nmy_guardian = auth0.Guardian(\"myGuardian\",\n    duo=auth0.GuardianDuoArgs(\n        enabled=True,\n        hostname=\"api-hostname\",\n        integration_key=\"someKey\",\n        secret_key=\"someSecret\",\n    ),\n    email=True,\n    otp=True,\n    phone=auth0.GuardianPhoneArgs(\n        enabled=True,\n        message_types=[\n            \"sms\",\n            \"voice\",\n        ],\n        options=auth0.GuardianPhoneOptionsArgs(\n            enrollment_message=\"{{code}} is your verification code for {{tenant.friendly_name}}. Please enter this code to verify your enrollment.\",\n            verification_message=\"{{code}} is your verification code for {{tenant.friendly_name}}.\",\n        ),\n        provider=\"auth0\",\n    ),\n    policy=\"all-applications\",\n    push=auth0.GuardianPushArgs(\n        amazon_sns=auth0.GuardianPushAmazonSnsArgs(\n            aws_access_key_id=\"test1\",\n            aws_region=\"us-west-1\",\n            aws_secret_access_key=\"secretKey\",\n            sns_apns_platform_application_arn=\"test_arn\",\n            sns_gcm_platform_application_arn=\"test_arn\",\n        ),\n        custom_app=auth0.GuardianPushCustomAppArgs(\n            app_name=\"CustomApp\",\n            apple_app_link=\"https://itunes.apple.com/us/app/my-app/id123121\",\n            google_app_link=\"https://play.google.com/store/apps/details?id=com.my.app\",\n        ),\n        enabled=True,\n        provider=\"sns\",\n    ),\n    recovery_code=True,\n    webauthn_platform=auth0.GuardianWebauthnPlatformArgs(\n        enabled=True,\n    ),\n    webauthn_roaming=auth0.GuardianWebauthnRoamingArgs(\n        enabled=True,\n        user_verification=\"required\",\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Auth0 = Pulumi.Auth0;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myGuardian = new Auth0.Guardian(\"myGuardian\", new()\n    {\n        Duo = new Auth0.Inputs.GuardianDuoArgs\n        {\n            Enabled = true,\n            Hostname = \"api-hostname\",\n            IntegrationKey = \"someKey\",\n            SecretKey = \"someSecret\",\n        },\n        Email = true,\n        Otp = true,\n        Phone = new Auth0.Inputs.GuardianPhoneArgs\n        {\n            Enabled = true,\n            MessageTypes = new[]\n            {\n                \"sms\",\n                \"voice\",\n            },\n            Options = new Auth0.Inputs.GuardianPhoneOptionsArgs\n            {\n                EnrollmentMessage = \"{{code}} is your verification code for {{tenant.friendly_name}}. Please enter this code to verify your enrollment.\",\n                VerificationMessage = \"{{code}} is your verification code for {{tenant.friendly_name}}.\",\n            },\n            Provider = \"auth0\",\n        },\n        Policy = \"all-applications\",\n        Push = new Auth0.Inputs.GuardianPushArgs\n        {\n            AmazonSns = new Auth0.Inputs.GuardianPushAmazonSnsArgs\n            {\n                AwsAccessKeyId = \"test1\",\n                AwsRegion = \"us-west-1\",\n                AwsSecretAccessKey = \"secretKey\",\n                SnsApnsPlatformApplicationArn = \"test_arn\",\n                SnsGcmPlatformApplicationArn = \"test_arn\",\n            },\n            CustomApp = new Auth0.Inputs.GuardianPushCustomAppArgs\n            {\n                AppName = \"CustomApp\",\n                AppleAppLink = \"https://itunes.apple.com/us/app/my-app/id123121\",\n                GoogleAppLink = \"https://play.google.com/store/apps/details?id=com.my.app\",\n            },\n            Enabled = true,\n            Provider = \"sns\",\n        },\n        RecoveryCode = true,\n        WebauthnPlatform = new Auth0.Inputs.GuardianWebauthnPlatformArgs\n        {\n            Enabled = true,\n        },\n        WebauthnRoaming = new Auth0.Inputs.GuardianWebauthnRoamingArgs\n        {\n            Enabled = true,\n            UserVerification = \"required\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-auth0/sdk/v2/go/auth0\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := auth0.NewGuardian(ctx, \"myGuardian\", \u0026auth0.GuardianArgs{\n\t\t\tDuo: \u0026auth0.GuardianDuoArgs{\n\t\t\t\tEnabled:        pulumi.Bool(true),\n\t\t\t\tHostname:       pulumi.String(\"api-hostname\"),\n\t\t\t\tIntegrationKey: pulumi.String(\"someKey\"),\n\t\t\t\tSecretKey:      pulumi.String(\"someSecret\"),\n\t\t\t},\n\t\t\tEmail: pulumi.Bool(true),\n\t\t\tOtp:   pulumi.Bool(true),\n\t\t\tPhone: \u0026auth0.GuardianPhoneArgs{\n\t\t\t\tEnabled: pulumi.Bool(true),\n\t\t\t\tMessageTypes: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"sms\"),\n\t\t\t\t\tpulumi.String(\"voice\"),\n\t\t\t\t},\n\t\t\t\tOptions: \u0026auth0.GuardianPhoneOptionsArgs{\n\t\t\t\t\tEnrollmentMessage:   pulumi.String(\"{{code}} is your verification code for {{tenant.friendly_name}}. Please enter this code to verify your enrollment.\"),\n\t\t\t\t\tVerificationMessage: pulumi.String(\"{{code}} is your verification code for {{tenant.friendly_name}}.\"),\n\t\t\t\t},\n\t\t\t\tProvider: pulumi.String(\"auth0\"),\n\t\t\t},\n\t\t\tPolicy: pulumi.String(\"all-applications\"),\n\t\t\tPush: \u0026auth0.GuardianPushArgs{\n\t\t\t\tAmazonSns: \u0026auth0.GuardianPushAmazonSnsArgs{\n\t\t\t\t\tAwsAccessKeyId:                pulumi.String(\"test1\"),\n\t\t\t\t\tAwsRegion:                     pulumi.String(\"us-west-1\"),\n\t\t\t\t\tAwsSecretAccessKey:            pulumi.String(\"secretKey\"),\n\t\t\t\t\tSnsApnsPlatformApplicationArn: pulumi.String(\"test_arn\"),\n\t\t\t\t\tSnsGcmPlatformApplicationArn:  pulumi.String(\"test_arn\"),\n\t\t\t\t},\n\t\t\t\tCustomApp: \u0026auth0.GuardianPushCustomAppArgs{\n\t\t\t\t\tAppName:       pulumi.String(\"CustomApp\"),\n\t\t\t\t\tAppleAppLink:  pulumi.String(\"https://itunes.apple.com/us/app/my-app/id123121\"),\n\t\t\t\t\tGoogleAppLink: pulumi.String(\"https://play.google.com/store/apps/details?id=com.my.app\"),\n\t\t\t\t},\n\t\t\t\tEnabled:  pulumi.Bool(true),\n\t\t\t\tProvider: pulumi.String(\"sns\"),\n\t\t\t},\n\t\t\tRecoveryCode: pulumi.Bool(true),\n\t\t\tWebauthnPlatform: \u0026auth0.GuardianWebauthnPlatformArgs{\n\t\t\t\tEnabled: pulumi.Bool(true),\n\t\t\t},\n\t\t\tWebauthnRoaming: \u0026auth0.GuardianWebauthnRoamingArgs{\n\t\t\t\tEnabled:          pulumi.Bool(true),\n\t\t\t\tUserVerification: pulumi.String(\"required\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.auth0.Guardian;\nimport com.pulumi.auth0.GuardianArgs;\nimport com.pulumi.auth0.inputs.GuardianDuoArgs;\nimport com.pulumi.auth0.inputs.GuardianPhoneArgs;\nimport com.pulumi.auth0.inputs.GuardianPhoneOptionsArgs;\nimport com.pulumi.auth0.inputs.GuardianPushArgs;\nimport com.pulumi.auth0.inputs.GuardianPushAmazonSnsArgs;\nimport com.pulumi.auth0.inputs.GuardianPushCustomAppArgs;\nimport com.pulumi.auth0.inputs.GuardianWebauthnPlatformArgs;\nimport com.pulumi.auth0.inputs.GuardianWebauthnRoamingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myGuardian = new Guardian(\"myGuardian\", GuardianArgs.builder()        \n            .duo(GuardianDuoArgs.builder()\n                .enabled(true)\n                .hostname(\"api-hostname\")\n                .integrationKey(\"someKey\")\n                .secretKey(\"someSecret\")\n                .build())\n            .email(true)\n            .otp(true)\n            .phone(GuardianPhoneArgs.builder()\n                .enabled(true)\n                .messageTypes(                \n                    \"sms\",\n                    \"voice\")\n                .options(GuardianPhoneOptionsArgs.builder()\n                    .enrollmentMessage(\"{{code}} is your verification code for {{tenant.friendly_name}}. Please enter this code to verify your enrollment.\")\n                    .verificationMessage(\"{{code}} is your verification code for {{tenant.friendly_name}}.\")\n                    .build())\n                .provider(\"auth0\")\n                .build())\n            .policy(\"all-applications\")\n            .push(GuardianPushArgs.builder()\n                .amazonSns(GuardianPushAmazonSnsArgs.builder()\n                    .awsAccessKeyId(\"test1\")\n                    .awsRegion(\"us-west-1\")\n                    .awsSecretAccessKey(\"secretKey\")\n                    .snsApnsPlatformApplicationArn(\"test_arn\")\n                    .snsGcmPlatformApplicationArn(\"test_arn\")\n                    .build())\n                .customApp(GuardianPushCustomAppArgs.builder()\n                    .appName(\"CustomApp\")\n                    .appleAppLink(\"https://itunes.apple.com/us/app/my-app/id123121\")\n                    .googleAppLink(\"https://play.google.com/store/apps/details?id=com.my.app\")\n                    .build())\n                .enabled(true)\n                .provider(\"sns\")\n                .build())\n            .recoveryCode(true)\n            .webauthnPlatform(GuardianWebauthnPlatformArgs.builder()\n                .enabled(true)\n                .build())\n            .webauthnRoaming(GuardianWebauthnRoamingArgs.builder()\n                .enabled(true)\n                .userVerification(\"required\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myGuardian:\n    type: auth0:Guardian\n    properties:\n      duo:\n        enabled: true\n        hostname: api-hostname\n        integrationKey: someKey\n        secretKey: someSecret\n      email: true\n      otp: true\n      phone:\n        enabled: true\n        messageTypes:\n          - sms\n          - voice\n        options:\n          enrollmentMessage: '{{code}} is your verification code for {{tenant.friendly_name}}. Please enter this code to verify your enrollment.'\n          verificationMessage: '{{code}} is your verification code for {{tenant.friendly_name}}.'\n        provider: auth0\n      policy: all-applications\n      push:\n        amazonSns:\n          awsAccessKeyId: test1\n          awsRegion: us-west-1\n          awsSecretAccessKey: secretKey\n          snsApnsPlatformApplicationArn: test_arn\n          snsGcmPlatformApplicationArn: test_arn\n        customApp:\n          appName: CustomApp\n          appleAppLink: https://itunes.apple.com/us/app/my-app/id123121\n          googleAppLink: https://play.google.com/store/apps/details?id=com.my.app\n        enabled: true\n        provider: sns\n      recoveryCode: true\n      webauthnPlatform:\n        enabled: true\n      webauthnRoaming:\n        enabled: true\n        userVerification: required\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nAs this is not a resource identifiable by an ID within the Auth0 Management API, guardian can be imported using a random string. # We recommend [Version 4 UUID](https://www.uuidgenerator.net/version4) # Example\n\n```sh\n $ pulumi import auth0:index/guardian:Guardian my_guardian 24940d4b-4bd4-44e7-894e-f92e4de36a40\n```\n\n ",
            "properties": {
                "duo": {
                    "$ref": "#/types/auth0:index/GuardianDuo:GuardianDuo",
                    "description": "Configuration settings for the Duo MFA. If this block is present, Duo MFA will be enabled, and disabled otherwise.\n"
                },
                "email": {
                    "type": "boolean",
                    "description": "Indicates whether email MFA is enabled.\n"
                },
                "otp": {
                    "type": "boolean",
                    "description": "Indicates whether one time password MFA is enabled.\n"
                },
                "phone": {
                    "$ref": "#/types/auth0:index/GuardianPhone:GuardianPhone",
                    "description": "Configuration settings for the phone MFA. If this block is present, Phone MFA will be enabled, and disabled otherwise.\n"
                },
                "policy": {
                    "type": "string",
                    "description": "Policy to use. Available options are `never`, `all-applications` and `confidence-score`.\n"
                },
                "push": {
                    "$ref": "#/types/auth0:index/GuardianPush:GuardianPush",
                    "description": "Configuration settings for the Push MFA. If this block is present, Push MFA will be enabled, and disabled otherwise.\n"
                },
                "recoveryCode": {
                    "type": "boolean",
                    "description": "Indicates whether recovery code MFA is enabled.\n"
                },
                "webauthnPlatform": {
                    "$ref": "#/types/auth0:index/GuardianWebauthnPlatform:GuardianWebauthnPlatform",
                    "description": "Configuration settings for the WebAuthn with FIDO Device Biometrics MFA. If this block is present, WebAuthn with FIDO Device Biometrics MFA will be enabled, and disabled otherwise.\n"
                },
                "webauthnRoaming": {
                    "$ref": "#/types/auth0:index/GuardianWebauthnRoaming:GuardianWebauthnRoaming",
                    "description": "Configuration settings for the WebAuthn with FIDO Security Keys MFA. If this block is present, WebAuthn with FIDO Security Keys MFA will be enabled, and disabled otherwise.\n"
                }
            },
            "required": [
                "duo",
                "phone",
                "policy",
                "push",
                "webauthnPlatform",
                "webauthnRoaming"
            ],
            "inputProperties": {
                "duo": {
                    "$ref": "#/types/auth0:index/GuardianDuo:GuardianDuo",
                    "description": "Configuration settings for the Duo MFA. If this block is present, Duo MFA will be enabled, and disabled otherwise.\n"
                },
                "email": {
                    "type": "boolean",
                    "description": "Indicates whether email MFA is enabled.\n"
                },
                "otp": {
                    "type": "boolean",
                    "description": "Indicates whether one time password MFA is enabled.\n"
                },
                "phone": {
                    "$ref": "#/types/auth0:index/GuardianPhone:GuardianPhone",
                    "description": "Configuration settings for the phone MFA. If this block is present, Phone MFA will be enabled, and disabled otherwise.\n"
                },
                "policy": {
                    "type": "string",
                    "description": "Policy to use. Available options are `never`, `all-applications` and `confidence-score`.\n"
                },
                "push": {
                    "$ref": "#/types/auth0:index/GuardianPush:GuardianPush",
                    "description": "Configuration settings for the Push MFA. If this block is present, Push MFA will be enabled, and disabled otherwise.\n"
                },
                "recoveryCode": {
                    "type": "boolean",
                    "description": "Indicates whether recovery code MFA is enabled.\n"
                },
                "webauthnPlatform": {
                    "$ref": "#/types/auth0:index/GuardianWebauthnPlatform:GuardianWebauthnPlatform",
                    "description": "Configuration settings for the WebAuthn with FIDO Device Biometrics MFA. If this block is present, WebAuthn with FIDO Device Biometrics MFA will be enabled, and disabled otherwise.\n"
                },
                "webauthnRoaming": {
                    "$ref": "#/types/auth0:index/GuardianWebauthnRoaming:GuardianWebauthnRoaming",
                    "description": "Configuration settings for the WebAuthn with FIDO Security Keys MFA. If this block is present, WebAuthn with FIDO Security Keys MFA will be enabled, and disabled otherwise.\n"
                }
            },
            "requiredInputs": [
                "policy"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Guardian resources.\n",
                "properties": {
                    "duo": {
                        "$ref": "#/types/auth0:index/GuardianDuo:GuardianDuo",
                        "description": "Configuration settings for the Duo MFA. If this block is present, Duo MFA will be enabled, and disabled otherwise.\n"
                    },
                    "email": {
                        "type": "boolean",
                        "description": "Indicates whether email MFA is enabled.\n"
                    },
                    "otp": {
                        "type": "boolean",
                        "description": "Indicates whether one time password MFA is enabled.\n"
                    },
                    "phone": {
                        "$ref": "#/types/auth0:index/GuardianPhone:GuardianPhone",
                        "description": "Configuration settings for the phone MFA. If this block is present, Phone MFA will be enabled, and disabled otherwise.\n"
                    },
                    "policy": {
                        "type": "string",
                        "description": "Policy to use. Available options are `never`, `all-applications` and `confidence-score`.\n"
                    },
                    "push": {
                        "$ref": "#/types/auth0:index/GuardianPush:GuardianPush",
                        "description": "Configuration settings for the Push MFA. If this block is present, Push MFA will be enabled, and disabled otherwise.\n"
                    },
                    "recoveryCode": {
                        "type": "boolean",
                        "description": "Indicates whether recovery code MFA is enabled.\n"
                    },
                    "webauthnPlatform": {
                        "$ref": "#/types/auth0:index/GuardianWebauthnPlatform:GuardianWebauthnPlatform",
                        "description": "Configuration settings for the WebAuthn with FIDO Device Biometrics MFA. If this block is present, WebAuthn with FIDO Device Biometrics MFA will be enabled, and disabled otherwise.\n"
                    },
                    "webauthnRoaming": {
                        "$ref": "#/types/auth0:index/GuardianWebauthnRoaming:GuardianWebauthnRoaming",
                        "description": "Configuration settings for the WebAuthn with FIDO Security Keys MFA. If this block is present, WebAuthn with FIDO Security Keys MFA will be enabled, and disabled otherwise.\n"
                    }
                },
                "type": "object"
            }
        },
        "auth0:index/hook:Hook": {
            "description": "Hooks are secure, self-contained functions that allow you to customize the behavior of Auth0 when executed for selected extensibility points of the Auth0 platform. Auth0 invokes Hooks during runtime to execute your custom Node.js code. Depending on the extensibility point, you can use Hooks with Database Connections and/or Passwordless Connections.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as auth0 from \"@pulumi/auth0\";\n\nconst myHook = new auth0.Hook(\"myHook\", {\n    dependencies: {\n        auth0: \"2.30.0\",\n    },\n    enabled: true,\n    script: `    function (user, context, callback) {\n      callback(null, { user });\n    }\n  \n`,\n    secrets: {\n        foo: \"bar\",\n    },\n    triggerId: \"pre-user-registration\",\n});\n```\n```python\nimport pulumi\nimport pulumi_auth0 as auth0\n\nmy_hook = auth0.Hook(\"myHook\",\n    dependencies={\n        \"auth0\": \"2.30.0\",\n    },\n    enabled=True,\n    script=\"\"\"    function (user, context, callback) {\n      callback(null, { user });\n    }\n  \n\"\"\",\n    secrets={\n        \"foo\": \"bar\",\n    },\n    trigger_id=\"pre-user-registration\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Auth0 = Pulumi.Auth0;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myHook = new Auth0.Hook(\"myHook\", new()\n    {\n        Dependencies = \n        {\n            { \"auth0\", \"2.30.0\" },\n        },\n        Enabled = true,\n        Script = @\"    function (user, context, callback) {\n      callback(null, { user });\n    }\n  \n\",\n        Secrets = \n        {\n            { \"foo\", \"bar\" },\n        },\n        TriggerId = \"pre-user-registration\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-auth0/sdk/v2/go/auth0\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := auth0.NewHook(ctx, \"myHook\", \u0026auth0.HookArgs{\n\t\t\tDependencies: pulumi.AnyMap{\n\t\t\t\t\"auth0\": pulumi.Any(\"2.30.0\"),\n\t\t\t},\n\t\t\tEnabled: pulumi.Bool(true),\n\t\t\tScript:  pulumi.String(fmt.Sprintf(\"    function (user, context, callback) {\\n      callback(null, { user });\\n    }\\n  \\n\")),\n\t\t\tSecrets: pulumi.AnyMap{\n\t\t\t\t\"foo\": pulumi.Any(\"bar\"),\n\t\t\t},\n\t\t\tTriggerId: pulumi.String(\"pre-user-registration\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.auth0.Hook;\nimport com.pulumi.auth0.HookArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myHook = new Hook(\"myHook\", HookArgs.builder()        \n            .dependencies(Map.of(\"auth0\", \"2.30.0\"))\n            .enabled(true)\n            .script(\"\"\"\n    function (user, context, callback) {\n      callback(null, { user });\n    }\n  \n            \"\"\")\n            .secrets(Map.of(\"foo\", \"bar\"))\n            .triggerId(\"pre-user-registration\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myHook:\n    type: auth0:Hook\n    properties:\n      dependencies:\n        auth0: 2.30.0\n      enabled: true\n      script: \"    function (user, context, callback) {\\n      callback(null, { user });\\n    }\\n  \\n\"\n      secrets:\n        foo: bar\n      triggerId: pre-user-registration\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nA hook can be imported using the hook's ID. # Example\n\n```sh\n $ pulumi import auth0:index/hook:Hook my_hook 00001\n```\n\n ",
            "properties": {
                "dependencies": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Dependencies of this hook used by the WebTask server.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the hook is enabled, or disabled.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of this hook.\n"
                },
                "script": {
                    "type": "string",
                    "description": "Code to be executed when this hook runs.\n"
                },
                "secrets": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "The secrets associated with the hook.\n",
                    "secret": true
                },
                "triggerId": {
                    "type": "string",
                    "description": "Execution stage of this rule. Can be credentials-exchange, pre-user-registration, post-user-registration, post-change-password, or send-phone-message.\n"
                }
            },
            "required": [
                "enabled",
                "name",
                "script",
                "triggerId"
            ],
            "inputProperties": {
                "dependencies": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Dependencies of this hook used by the WebTask server.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the hook is enabled, or disabled.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of this hook.\n"
                },
                "script": {
                    "type": "string",
                    "description": "Code to be executed when this hook runs.\n"
                },
                "secrets": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "The secrets associated with the hook.\n",
                    "secret": true
                },
                "triggerId": {
                    "type": "string",
                    "description": "Execution stage of this rule. Can be credentials-exchange, pre-user-registration, post-user-registration, post-change-password, or send-phone-message.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "script",
                "triggerId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Hook resources.\n",
                "properties": {
                    "dependencies": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Dependencies of this hook used by the WebTask server.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether the hook is enabled, or disabled.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of this hook.\n"
                    },
                    "script": {
                        "type": "string",
                        "description": "Code to be executed when this hook runs.\n"
                    },
                    "secrets": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "The secrets associated with the hook.\n",
                        "secret": true
                    },
                    "triggerId": {
                        "type": "string",
                        "description": "Execution stage of this rule. Can be credentials-exchange, pre-user-registration, post-user-registration, post-change-password, or send-phone-message.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "auth0:index/logStream:LogStream": {
            "description": "With this resource, you can manage your Auth0 log streams.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as auth0 from \"@pulumi/auth0\";\n\n// This is an example of an http log stream.\nconst myWebhook = new auth0.LogStream(\"myWebhook\", {\n    filters: [\n        {\n            name: \"auth.login.fail\",\n            type: \"category\",\n        },\n        {\n            name: \"auth.signup.fail\",\n            type: \"category\",\n        },\n    ],\n    sink: {\n        httpAuthorization: \"AKIAXXXXXXXXXXXXXXXX\",\n        httpContentFormat: \"JSONOBJECT\",\n        httpContentType: \"application/json\",\n        httpCustomHeaders: [{\n            header: \"foo\",\n            value: \"bar\",\n        }],\n        httpEndpoint: \"https://example.com/logs\",\n    },\n    type: \"http\",\n});\n// This is an example of an Amazon EventBridge log stream.\nconst exampleAws = new auth0.LogStream(\"exampleAws\", {\n    sink: {\n        awsAccountId: \"my_account_id\",\n        awsRegion: \"us-east-2\",\n    },\n    status: \"active\",\n    type: \"eventbridge\",\n});\n```\n```python\nimport pulumi\nimport pulumi_auth0 as auth0\n\n# This is an example of an http log stream.\nmy_webhook = auth0.LogStream(\"myWebhook\",\n    filters=[\n        {\n            \"name\": \"auth.login.fail\",\n            \"type\": \"category\",\n        },\n        {\n            \"name\": \"auth.signup.fail\",\n            \"type\": \"category\",\n        },\n    ],\n    sink=auth0.LogStreamSinkArgs(\n        http_authorization=\"AKIAXXXXXXXXXXXXXXXX\",\n        http_content_format=\"JSONOBJECT\",\n        http_content_type=\"application/json\",\n        http_custom_headers=[{\n            \"header\": \"foo\",\n            \"value\": \"bar\",\n        }],\n        http_endpoint=\"https://example.com/logs\",\n    ),\n    type=\"http\")\n# This is an example of an Amazon EventBridge log stream.\nexample_aws = auth0.LogStream(\"exampleAws\",\n    sink=auth0.LogStreamSinkArgs(\n        aws_account_id=\"my_account_id\",\n        aws_region=\"us-east-2\",\n    ),\n    status=\"active\",\n    type=\"eventbridge\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Auth0 = Pulumi.Auth0;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // This is an example of an http log stream.\n    var myWebhook = new Auth0.LogStream(\"myWebhook\", new()\n    {\n        Filters = new[]\n        {\n            \n            {\n                { \"name\", \"auth.login.fail\" },\n                { \"type\", \"category\" },\n            },\n            \n            {\n                { \"name\", \"auth.signup.fail\" },\n                { \"type\", \"category\" },\n            },\n        },\n        Sink = new Auth0.Inputs.LogStreamSinkArgs\n        {\n            HttpAuthorization = \"AKIAXXXXXXXXXXXXXXXX\",\n            HttpContentFormat = \"JSONOBJECT\",\n            HttpContentType = \"application/json\",\n            HttpCustomHeaders = new[]\n            {\n                \n                {\n                    { \"header\", \"foo\" },\n                    { \"value\", \"bar\" },\n                },\n            },\n            HttpEndpoint = \"https://example.com/logs\",\n        },\n        Type = \"http\",\n    });\n\n    // This is an example of an Amazon EventBridge log stream.\n    var exampleAws = new Auth0.LogStream(\"exampleAws\", new()\n    {\n        Sink = new Auth0.Inputs.LogStreamSinkArgs\n        {\n            AwsAccountId = \"my_account_id\",\n            AwsRegion = \"us-east-2\",\n        },\n        Status = \"active\",\n        Type = \"eventbridge\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-auth0/sdk/v2/go/auth0\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := auth0.NewLogStream(ctx, \"myWebhook\", \u0026auth0.LogStreamArgs{\n\t\t\tFilters: pulumi.StringMapArray{\n\t\t\t\tpulumi.StringMap{\n\t\t\t\t\t\"name\": pulumi.String(\"auth.login.fail\"),\n\t\t\t\t\t\"type\": pulumi.String(\"category\"),\n\t\t\t\t},\n\t\t\t\tpulumi.StringMap{\n\t\t\t\t\t\"name\": pulumi.String(\"auth.signup.fail\"),\n\t\t\t\t\t\"type\": pulumi.String(\"category\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tSink: \u0026auth0.LogStreamSinkArgs{\n\t\t\t\tHttpAuthorization: pulumi.String(\"AKIAXXXXXXXXXXXXXXXX\"),\n\t\t\t\tHttpContentFormat: pulumi.String(\"JSONOBJECT\"),\n\t\t\t\tHttpContentType:   pulumi.String(\"application/json\"),\n\t\t\t\tHttpCustomHeaders: pulumi.StringMapArray{\n\t\t\t\t\tpulumi.StringMap{\n\t\t\t\t\t\t\"header\": pulumi.String(\"foo\"),\n\t\t\t\t\t\t\"value\":  pulumi.String(\"bar\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tHttpEndpoint: pulumi.String(\"https://example.com/logs\"),\n\t\t\t},\n\t\t\tType: pulumi.String(\"http\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = auth0.NewLogStream(ctx, \"exampleAws\", \u0026auth0.LogStreamArgs{\n\t\t\tSink: \u0026auth0.LogStreamSinkArgs{\n\t\t\t\tAwsAccountId: pulumi.String(\"my_account_id\"),\n\t\t\t\tAwsRegion:    pulumi.String(\"us-east-2\"),\n\t\t\t},\n\t\t\tStatus: pulumi.String(\"active\"),\n\t\t\tType:   pulumi.String(\"eventbridge\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.auth0.LogStream;\nimport com.pulumi.auth0.LogStreamArgs;\nimport com.pulumi.auth0.inputs.LogStreamSinkArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myWebhook = new LogStream(\"myWebhook\", LogStreamArgs.builder()        \n            .filters(            \n                Map.ofEntries(\n                    Map.entry(\"name\", \"auth.login.fail\"),\n                    Map.entry(\"type\", \"category\")\n                ),\n                Map.ofEntries(\n                    Map.entry(\"name\", \"auth.signup.fail\"),\n                    Map.entry(\"type\", \"category\")\n                ))\n            .sink(LogStreamSinkArgs.builder()\n                .httpAuthorization(\"AKIAXXXXXXXXXXXXXXXX\")\n                .httpContentFormat(\"JSONOBJECT\")\n                .httpContentType(\"application/json\")\n                .httpCustomHeaders(Map.ofEntries(\n                    Map.entry(\"header\", \"foo\"),\n                    Map.entry(\"value\", \"bar\")\n                ))\n                .httpEndpoint(\"https://example.com/logs\")\n                .build())\n            .type(\"http\")\n            .build());\n\n        var exampleAws = new LogStream(\"exampleAws\", LogStreamArgs.builder()        \n            .sink(LogStreamSinkArgs.builder()\n                .awsAccountId(\"my_account_id\")\n                .awsRegion(\"us-east-2\")\n                .build())\n            .status(\"active\")\n            .type(\"eventbridge\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # This is an example of an http log stream.\n  myWebhook:\n    type: auth0:LogStream\n    properties:\n      filters:\n        - name: auth.login.fail\n          type: category\n        - name: auth.signup.fail\n          type: category\n      sink:\n        httpAuthorization: AKIAXXXXXXXXXXXXXXXX\n        httpContentFormat: JSONOBJECT\n        httpContentType: application/json\n        httpCustomHeaders:\n          - header: foo\n            value: bar\n        httpEndpoint: https://example.com/logs\n      type: http\n  # This is an example of an Amazon EventBridge log stream.\n  exampleAws:\n    type: auth0:LogStream\n    properties:\n      sink:\n        awsAccountId: my_account_id\n        awsRegion: us-east-2\n      status: active\n      type: eventbridge\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nAn existing log stream can be imported using its ID. # Example\n\n```sh\n $ pulumi import auth0:index/logStream:LogStream example lst_XXXXXXXXXXXXXXXX\n```\n\n ",
            "properties": {
                "filters": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "description": "Only logs events matching these filters will be delivered by the stream. If omitted or empty, all events will be delivered.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the log stream.\n"
                },
                "sink": {
                    "$ref": "#/types/auth0:index/LogStreamSink:LogStreamSink",
                    "description": "The sink configuration for the log stream.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The current status of the log stream. Options are \"active\", \"paused\", \"suspended\".\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the log stream, which indicates the sink provider.\n"
                }
            },
            "required": [
                "name",
                "sink",
                "status",
                "type"
            ],
            "inputProperties": {
                "filters": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "description": "Only logs events matching these filters will be delivered by the stream. If omitted or empty, all events will be delivered.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the log stream.\n"
                },
                "sink": {
                    "$ref": "#/types/auth0:index/LogStreamSink:LogStreamSink",
                    "description": "The sink configuration for the log stream.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The current status of the log stream. Options are \"active\", \"paused\", \"suspended\".\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the log stream, which indicates the sink provider.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "sink",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LogStream resources.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        },
                        "description": "Only logs events matching these filters will be delivered by the stream. If omitted or empty, all events will be delivered.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the log stream.\n"
                    },
                    "sink": {
                        "$ref": "#/types/auth0:index/LogStreamSink:LogStreamSink",
                        "description": "The sink configuration for the log stream.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The current status of the log stream. Options are \"active\", \"paused\", \"suspended\".\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the log stream, which indicates the sink provider.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "auth0:index/organization:Organization": {
            "description": "The Organizations feature represents a broad update to the Auth0 platform that allows our business-to-business (B2B) customers to better manage their partners and customers, and to customize the ways that end-users access their applications. Auth0 customers can use Organizations to:\n\n  - Represent their business customers and partners in Auth0 and manage their\n    membership.\n  - Configure branded, federated login flows for each business.\n  - Build administration capabilities into their products, using Organizations\n    APIs, so that those businesses can manage their own organizations.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as auth0 from \"@pulumi/auth0\";\n\nconst myOrganization = new auth0.Organization(\"myOrganization\", {\n    branding: {\n        colors: {\n            pageBackground: \"#e1e1e1\",\n            primary: \"#f2f2f2\",\n        },\n        logoUrl: \"https://example.com/assets/icons/icon.png\",\n    },\n    displayName: \"Auth0 Inc.\",\n});\n```\n```python\nimport pulumi\nimport pulumi_auth0 as auth0\n\nmy_organization = auth0.Organization(\"myOrganization\",\n    branding=auth0.OrganizationBrandingArgs(\n        colors={\n            \"pageBackground\": \"#e1e1e1\",\n            \"primary\": \"#f2f2f2\",\n        },\n        logo_url=\"https://example.com/assets/icons/icon.png\",\n    ),\n    display_name=\"Auth0 Inc.\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Auth0 = Pulumi.Auth0;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myOrganization = new Auth0.Organization(\"myOrganization\", new()\n    {\n        Branding = new Auth0.Inputs.OrganizationBrandingArgs\n        {\n            Colors = \n            {\n                { \"pageBackground\", \"#e1e1e1\" },\n                { \"primary\", \"#f2f2f2\" },\n            },\n            LogoUrl = \"https://example.com/assets/icons/icon.png\",\n        },\n        DisplayName = \"Auth0 Inc.\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-auth0/sdk/v2/go/auth0\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := auth0.NewOrganization(ctx, \"myOrganization\", \u0026auth0.OrganizationArgs{\n\t\t\tBranding: \u0026auth0.OrganizationBrandingArgs{\n\t\t\t\tColors: pulumi.StringMap{\n\t\t\t\t\t\"pageBackground\": pulumi.String(\"#e1e1e1\"),\n\t\t\t\t\t\"primary\":        pulumi.String(\"#f2f2f2\"),\n\t\t\t\t},\n\t\t\t\tLogoUrl: pulumi.String(\"https://example.com/assets/icons/icon.png\"),\n\t\t\t},\n\t\t\tDisplayName: pulumi.String(\"Auth0 Inc.\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.auth0.Organization;\nimport com.pulumi.auth0.OrganizationArgs;\nimport com.pulumi.auth0.inputs.OrganizationBrandingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myOrganization = new Organization(\"myOrganization\", OrganizationArgs.builder()        \n            .branding(OrganizationBrandingArgs.builder()\n                .colors(Map.ofEntries(\n                    Map.entry(\"pageBackground\", \"#e1e1e1\"),\n                    Map.entry(\"primary\", \"#f2f2f2\")\n                ))\n                .logoUrl(\"https://example.com/assets/icons/icon.png\")\n                .build())\n            .displayName(\"Auth0 Inc.\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myOrganization:\n    type: auth0:Organization\n    properties:\n      branding:\n        colors:\n          pageBackground: '#e1e1e1'\n          primary: '#f2f2f2'\n        logoUrl: https://example.com/assets/icons/icon.png\n      displayName: Auth0 Inc.\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nExisting organizations can be imported using the organization ID. # Example\n\n```sh\n $ pulumi import auth0:index/organization:Organization my_organization org_XXXXXXXXXXXXXX\n```\n\n ",
            "properties": {
                "branding": {
                    "$ref": "#/types/auth0:index/OrganizationBranding:OrganizationBranding",
                    "description": "Defines how to style the login pages.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Friendly name of this organization.\n"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Metadata associated with the organization. Maximum of 10 metadata properties allowed.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of this organization.\n"
                }
            },
            "required": [
                "branding",
                "name"
            ],
            "inputProperties": {
                "branding": {
                    "$ref": "#/types/auth0:index/OrganizationBranding:OrganizationBranding",
                    "description": "Defines how to style the login pages.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Friendly name of this organization.\n"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Metadata associated with the organization. Maximum of 10 metadata properties allowed.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of this organization.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Organization resources.\n",
                "properties": {
                    "branding": {
                        "$ref": "#/types/auth0:index/OrganizationBranding:OrganizationBranding",
                        "description": "Defines how to style the login pages.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Friendly name of this organization.\n"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Metadata associated with the organization. Maximum of 10 metadata properties allowed.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of this organization.\n"
                    }
                },
                "type": "object"
            }
        },
        "auth0:index/organizationConnection:OrganizationConnection": {
            "description": "With this resource, you can manage enabled connections on an organization.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as auth0 from \"@pulumi/auth0\";\n\nconst myConnection = new auth0.Connection(\"myConnection\", {strategy: \"auth0\"});\nconst myOrganization = new auth0.Organization(\"myOrganization\", {displayName: \"My Organization\"});\nconst myOrgConn = new auth0.OrganizationConnection(\"myOrgConn\", {\n    organizationId: myOrganization.id,\n    connectionId: myConnection.id,\n    assignMembershipOnLogin: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_auth0 as auth0\n\nmy_connection = auth0.Connection(\"myConnection\", strategy=\"auth0\")\nmy_organization = auth0.Organization(\"myOrganization\", display_name=\"My Organization\")\nmy_org_conn = auth0.OrganizationConnection(\"myOrgConn\",\n    organization_id=my_organization.id,\n    connection_id=my_connection.id,\n    assign_membership_on_login=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Auth0 = Pulumi.Auth0;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myConnection = new Auth0.Connection(\"myConnection\", new()\n    {\n        Strategy = \"auth0\",\n    });\n\n    var myOrganization = new Auth0.Organization(\"myOrganization\", new()\n    {\n        DisplayName = \"My Organization\",\n    });\n\n    var myOrgConn = new Auth0.OrganizationConnection(\"myOrgConn\", new()\n    {\n        OrganizationId = myOrganization.Id,\n        ConnectionId = myConnection.Id,\n        AssignMembershipOnLogin = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-auth0/sdk/v2/go/auth0\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyConnection, err := auth0.NewConnection(ctx, \"myConnection\", \u0026auth0.ConnectionArgs{\n\t\t\tStrategy: pulumi.String(\"auth0\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmyOrganization, err := auth0.NewOrganization(ctx, \"myOrganization\", \u0026auth0.OrganizationArgs{\n\t\t\tDisplayName: pulumi.String(\"My Organization\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = auth0.NewOrganizationConnection(ctx, \"myOrgConn\", \u0026auth0.OrganizationConnectionArgs{\n\t\t\tOrganizationId:          myOrganization.ID(),\n\t\t\tConnectionId:            myConnection.ID(),\n\t\t\tAssignMembershipOnLogin: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.auth0.Connection;\nimport com.pulumi.auth0.ConnectionArgs;\nimport com.pulumi.auth0.Organization;\nimport com.pulumi.auth0.OrganizationArgs;\nimport com.pulumi.auth0.OrganizationConnection;\nimport com.pulumi.auth0.OrganizationConnectionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myConnection = new Connection(\"myConnection\", ConnectionArgs.builder()        \n            .strategy(\"auth0\")\n            .build());\n\n        var myOrganization = new Organization(\"myOrganization\", OrganizationArgs.builder()        \n            .displayName(\"My Organization\")\n            .build());\n\n        var myOrgConn = new OrganizationConnection(\"myOrgConn\", OrganizationConnectionArgs.builder()        \n            .organizationId(myOrganization.id())\n            .connectionId(myConnection.id())\n            .assignMembershipOnLogin(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myConnection:\n    type: auth0:Connection\n    properties:\n      strategy: auth0\n  myOrganization:\n    type: auth0:Organization\n    properties:\n      displayName: My Organization\n  myOrgConn:\n    type: auth0:OrganizationConnection\n    properties:\n      organizationId: ${myOrganization.id}\n      connectionId: ${myConnection.id}\n      assignMembershipOnLogin: true\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThis resource can be imported by specifying the organization ID and connection ID separated by \":\". # Example\n\n```sh\n $ pulumi import auth0:index/organizationConnection:OrganizationConnection my_org_conn org_XXXXX:con_XXXXX\n```\n\n ",
            "properties": {
                "assignMembershipOnLogin": {
                    "type": "boolean",
                    "description": "When true, all users that log in with this connection will be automatically granted membership in the organization. When false, users must be granted membership in the organization before logging in with this connection.\n"
                },
                "connectionId": {
                    "type": "string",
                    "description": "The ID of the connection to enable for the organization.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the enabled connection.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The ID of the organization to enable the connection for.\n"
                },
                "strategy": {
                    "type": "string",
                    "description": "The strategy of the enabled connection.\n"
                }
            },
            "required": [
                "connectionId",
                "name",
                "organizationId",
                "strategy"
            ],
            "inputProperties": {
                "assignMembershipOnLogin": {
                    "type": "boolean",
                    "description": "When true, all users that log in with this connection will be automatically granted membership in the organization. When false, users must be granted membership in the organization before logging in with this connection.\n"
                },
                "connectionId": {
                    "type": "string",
                    "description": "The ID of the connection to enable for the organization.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The ID of the organization to enable the connection for.\n"
                }
            },
            "requiredInputs": [
                "connectionId",
                "organizationId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering OrganizationConnection resources.\n",
                "properties": {
                    "assignMembershipOnLogin": {
                        "type": "boolean",
                        "description": "When true, all users that log in with this connection will be automatically granted membership in the organization. When false, users must be granted membership in the organization before logging in with this connection.\n"
                    },
                    "connectionId": {
                        "type": "string",
                        "description": "The ID of the connection to enable for the organization.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the enabled connection.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The ID of the organization to enable the connection for.\n"
                    },
                    "strategy": {
                        "type": "string",
                        "description": "The strategy of the enabled connection.\n"
                    }
                },
                "type": "object"
            }
        },
        "auth0:index/organizationMember:OrganizationMember": {
            "description": "This resource is used to manage the assignment of members and their roles within an organization.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as auth0 from \"@pulumi/auth0\";\n\nconst reader = new auth0.Role(\"reader\", {});\nconst admin = new auth0.Role(\"admin\", {});\nconst user = new auth0.User(\"user\", {\n    email: \"test-user@auth0.com\",\n    connectionName: \"Username-Password-Authentication\",\n    emailVerified: true,\n    password: `MyPass123$`,\n});\nconst myOrg = new auth0.Organization(\"myOrg\", {displayName: \"Admin\"});\nconst myOrgMember = new auth0.OrganizationMember(\"myOrgMember\", {\n    organizationId: myOrg.id,\n    userId: user.id,\n    roles: [\n        reader.id,\n        admin.id,\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_auth0 as auth0\n\nreader = auth0.Role(\"reader\")\nadmin = auth0.Role(\"admin\")\nuser = auth0.User(\"user\",\n    email=\"test-user@auth0.com\",\n    connection_name=\"Username-Password-Authentication\",\n    email_verified=True,\n    password=\"MyPass123$\")\nmy_org = auth0.Organization(\"myOrg\", display_name=\"Admin\")\nmy_org_member = auth0.OrganizationMember(\"myOrgMember\",\n    organization_id=my_org.id,\n    user_id=user.id,\n    roles=[\n        reader.id,\n        admin.id,\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Auth0 = Pulumi.Auth0;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var reader = new Auth0.Role(\"reader\");\n\n    var admin = new Auth0.Role(\"admin\");\n\n    var user = new Auth0.User(\"user\", new()\n    {\n        Email = \"test-user@auth0.com\",\n        ConnectionName = \"Username-Password-Authentication\",\n        EmailVerified = true,\n        Password = \"MyPass123$\",\n    });\n\n    var myOrg = new Auth0.Organization(\"myOrg\", new()\n    {\n        DisplayName = \"Admin\",\n    });\n\n    var myOrgMember = new Auth0.OrganizationMember(\"myOrgMember\", new()\n    {\n        OrganizationId = myOrg.Id,\n        UserId = user.Id,\n        Roles = new[]\n        {\n            reader.Id,\n            admin.Id,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-auth0/sdk/v2/go/auth0\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\treader, err := auth0.NewRole(ctx, \"reader\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tadmin, err := auth0.NewRole(ctx, \"admin\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tuser, err := auth0.NewUser(ctx, \"user\", \u0026auth0.UserArgs{\n\t\t\tEmail:          pulumi.String(\"test-user@auth0.com\"),\n\t\t\tConnectionName: pulumi.String(\"Username-Password-Authentication\"),\n\t\t\tEmailVerified:  pulumi.Bool(true),\n\t\t\tPassword:       pulumi.String(fmt.Sprintf(\"MyPass123$\")),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmyOrg, err := auth0.NewOrganization(ctx, \"myOrg\", \u0026auth0.OrganizationArgs{\n\t\t\tDisplayName: pulumi.String(\"Admin\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = auth0.NewOrganizationMember(ctx, \"myOrgMember\", \u0026auth0.OrganizationMemberArgs{\n\t\t\tOrganizationId: myOrg.ID(),\n\t\t\tUserId:         user.ID(),\n\t\t\tRoles: pulumi.StringArray{\n\t\t\t\treader.ID(),\n\t\t\t\tadmin.ID(),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.auth0.Role;\nimport com.pulumi.auth0.User;\nimport com.pulumi.auth0.UserArgs;\nimport com.pulumi.auth0.Organization;\nimport com.pulumi.auth0.OrganizationArgs;\nimport com.pulumi.auth0.OrganizationMember;\nimport com.pulumi.auth0.OrganizationMemberArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var reader = new Role(\"reader\");\n\n        var admin = new Role(\"admin\");\n\n        var user = new User(\"user\", UserArgs.builder()        \n            .email(\"test-user@auth0.com\")\n            .connectionName(\"Username-Password-Authentication\")\n            .emailVerified(true)\n            .password(\"MyPass123$\")\n            .build());\n\n        var myOrg = new Organization(\"myOrg\", OrganizationArgs.builder()        \n            .displayName(\"Admin\")\n            .build());\n\n        var myOrgMember = new OrganizationMember(\"myOrgMember\", OrganizationMemberArgs.builder()        \n            .organizationId(myOrg.id())\n            .userId(user.id())\n            .roles(            \n                reader.id(),\n                admin.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  reader:\n    type: auth0:Role\n  admin:\n    type: auth0:Role\n  user:\n    type: auth0:User\n    properties:\n      email: test-user@auth0.com\n      connectionName: Username-Password-Authentication\n      emailVerified: true\n      password: MyPass123$\n  myOrg:\n    type: auth0:Organization\n    properties:\n      displayName: Admin\n  myOrgMember:\n    type: auth0:OrganizationMember\n    properties:\n      organizationId: ${myOrg.id}\n      userId: ${user.id}\n      roles:\n        - ${reader.id}\n        - ${admin.id}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThis resource can be imported by specifying the organization ID and user ID separated by \":\". # Example\n\n```sh\n $ pulumi import auth0:index/organizationMember:OrganizationMember my_org_member \"org_XXXXX:auth0|XXXXX\"\n```\n\n ",
            "properties": {
                "organizationId": {
                    "type": "string",
                    "description": "The ID of the organization to assign the member to.\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The role ID(s) to assign to the organization member.\n"
                },
                "userId": {
                    "type": "string",
                    "description": "ID of the user to add as an organization member.\n"
                }
            },
            "required": [
                "organizationId",
                "userId"
            ],
            "inputProperties": {
                "organizationId": {
                    "type": "string",
                    "description": "The ID of the organization to assign the member to.\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The role ID(s) to assign to the organization member.\n"
                },
                "userId": {
                    "type": "string",
                    "description": "ID of the user to add as an organization member.\n"
                }
            },
            "requiredInputs": [
                "organizationId",
                "userId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering OrganizationMember resources.\n",
                "properties": {
                    "organizationId": {
                        "type": "string",
                        "description": "The ID of the organization to assign the member to.\n"
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The role ID(s) to assign to the organization member.\n"
                    },
                    "userId": {
                        "type": "string",
                        "description": "ID of the user to add as an organization member.\n"
                    }
                },
                "type": "object"
            }
        },
        "auth0:index/prompt:Prompt": {
            "description": "With this resource, you can manage your Auth0 prompts, including choosing the login experience version.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as auth0 from \"@pulumi/auth0\";\n\nconst myPrompt = new auth0.Prompt(\"myPrompt\", {\n    identifierFirst: false,\n    universalLoginExperience: \"new\",\n    webauthnPlatformFirstFactor: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_auth0 as auth0\n\nmy_prompt = auth0.Prompt(\"myPrompt\",\n    identifier_first=False,\n    universal_login_experience=\"new\",\n    webauthn_platform_first_factor=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Auth0 = Pulumi.Auth0;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myPrompt = new Auth0.Prompt(\"myPrompt\", new()\n    {\n        IdentifierFirst = false,\n        UniversalLoginExperience = \"new\",\n        WebauthnPlatformFirstFactor = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-auth0/sdk/v2/go/auth0\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := auth0.NewPrompt(ctx, \"myPrompt\", \u0026auth0.PromptArgs{\n\t\t\tIdentifierFirst:             pulumi.Bool(false),\n\t\t\tUniversalLoginExperience:    pulumi.String(\"new\"),\n\t\t\tWebauthnPlatformFirstFactor: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.auth0.Prompt;\nimport com.pulumi.auth0.PromptArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myPrompt = new Prompt(\"myPrompt\", PromptArgs.builder()        \n            .identifierFirst(false)\n            .universalLoginExperience(\"new\")\n            .webauthnPlatformFirstFactor(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myPrompt:\n    type: auth0:Prompt\n    properties:\n      identifierFirst: false\n      universalLoginExperience: new\n      webauthnPlatformFirstFactor: true\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nAs this is not a resource identifiable by an ID within the Auth0 Management API, prompts can be imported using a random string. # We recommend [Version 4 UUID](https://www.uuidgenerator.net/version4) # Example\n\n```sh\n $ pulumi import auth0:index/prompt:Prompt my_prompt 22f4f21b-017a-319d-92e7-2291c1ca36c4\n```\n\n ",
            "properties": {
                "identifierFirst": {
                    "type": "boolean",
                    "description": "Indicates whether the identifier first is used when using the new Universal Login experience.\n"
                },
                "universalLoginExperience": {
                    "type": "string",
                    "description": "Which login experience to use. Options include `classic` and `new`.\n"
                },
                "webauthnPlatformFirstFactor": {
                    "type": "boolean",
                    "description": "Determines if the login screen uses identifier and biometrics first.\n"
                }
            },
            "required": [
                "universalLoginExperience",
                "webauthnPlatformFirstFactor"
            ],
            "inputProperties": {
                "identifierFirst": {
                    "type": "boolean",
                    "description": "Indicates whether the identifier first is used when using the new Universal Login experience.\n"
                },
                "universalLoginExperience": {
                    "type": "string",
                    "description": "Which login experience to use. Options include `classic` and `new`.\n"
                },
                "webauthnPlatformFirstFactor": {
                    "type": "boolean",
                    "description": "Determines if the login screen uses identifier and biometrics first.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Prompt resources.\n",
                "properties": {
                    "identifierFirst": {
                        "type": "boolean",
                        "description": "Indicates whether the identifier first is used when using the new Universal Login experience.\n"
                    },
                    "universalLoginExperience": {
                        "type": "string",
                        "description": "Which login experience to use. Options include `classic` and `new`.\n"
                    },
                    "webauthnPlatformFirstFactor": {
                        "type": "boolean",
                        "description": "Determines if the login screen uses identifier and biometrics first.\n"
                    }
                },
                "type": "object"
            }
        },
        "auth0:index/promptCustomText:PromptCustomText": {
            "description": "With this resource, you can manage custom text on your Auth0 prompts. You can read more about custom texts [here](https://auth0.com/docs/customize/universal-login-pages/customize-login-text-prompts).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as auth0 from \"@pulumi/auth0\";\n\nconst example = new auth0.PromptCustomText(\"example\", {\n    prompt: \"login\",\n    language: \"en\",\n    body: JSON.stringify({\n        login: {\n            alertListTitle: \"Alerts\",\n            buttonText: \"Continue\",\n            description: \"Login to\",\n            editEmailText: \"Edit\",\n            emailPlaceholder: \"Email address\",\n            federatedConnectionButtonText: `Continue with ${connectionName}`,\n            footerLinkText: \"Sign up\",\n            footerText: \"Don't have an account?\",\n            forgotPasswordText: \"Forgot password?\",\n            invitationDescription: `Log in to accept ${inviterName}'s invitation to join ${companyName} on ${clientName}.`,\n            invitationTitle: \"You've Been Invited!\",\n            logoAltText: `${companyName}`,\n            pageTitle: `Log in | ${clientName}`,\n            passwordPlaceholder: \"Password\",\n            separatorText: \"Or\",\n            signupActionLinkText: `${footerLinkText}`,\n            signupActionText: `${footerText}`,\n            title: \"Welcome\",\n            usernamePlaceholder: \"Username or email address\",\n        },\n    }),\n});\n```\n```python\nimport pulumi\nimport json\nimport pulumi_auth0 as auth0\n\nexample = auth0.PromptCustomText(\"example\",\n    prompt=\"login\",\n    language=\"en\",\n    body=json.dumps({\n        \"login\": {\n            \"alertListTitle\": \"Alerts\",\n            \"buttonText\": \"Continue\",\n            \"description\": \"Login to\",\n            \"editEmailText\": \"Edit\",\n            \"emailPlaceholder\": \"Email address\",\n            \"federatedConnectionButtonText\": \"Continue with ${connectionName}\",\n            \"footerLinkText\": \"Sign up\",\n            \"footerText\": \"Don't have an account?\",\n            \"forgotPasswordText\": \"Forgot password?\",\n            \"invitationDescription\": \"Log in to accept ${inviterName}'s invitation to join ${companyName} on ${clientName}.\",\n            \"invitationTitle\": \"You've Been Invited!\",\n            \"logoAltText\": \"${companyName}\",\n            \"pageTitle\": \"Log in | ${clientName}\",\n            \"passwordPlaceholder\": \"Password\",\n            \"separatorText\": \"Or\",\n            \"signupActionLinkText\": \"${footerLinkText}\",\n            \"signupActionText\": \"${footerText}\",\n            \"title\": \"Welcome\",\n            \"usernamePlaceholder\": \"Username or email address\",\n        },\n    }))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Text.Json;\nusing Pulumi;\nusing Auth0 = Pulumi.Auth0;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Auth0.PromptCustomText(\"example\", new()\n    {\n        Prompt = \"login\",\n        Language = \"en\",\n        Body = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n        {\n            [\"login\"] = new Dictionary\u003cstring, object?\u003e\n            {\n                [\"alertListTitle\"] = \"Alerts\",\n                [\"buttonText\"] = \"Continue\",\n                [\"description\"] = \"Login to\",\n                [\"editEmailText\"] = \"Edit\",\n                [\"emailPlaceholder\"] = \"Email address\",\n                [\"federatedConnectionButtonText\"] = \"Continue with ${connectionName}\",\n                [\"footerLinkText\"] = \"Sign up\",\n                [\"footerText\"] = \"Don't have an account?\",\n                [\"forgotPasswordText\"] = \"Forgot password?\",\n                [\"invitationDescription\"] = \"Log in to accept ${inviterName}'s invitation to join ${companyName} on ${clientName}.\",\n                [\"invitationTitle\"] = \"You've Been Invited!\",\n                [\"logoAltText\"] = \"${companyName}\",\n                [\"pageTitle\"] = \"Log in | ${clientName}\",\n                [\"passwordPlaceholder\"] = \"Password\",\n                [\"separatorText\"] = \"Or\",\n                [\"signupActionLinkText\"] = \"${footerLinkText}\",\n                [\"signupActionText\"] = \"${footerText}\",\n                [\"title\"] = \"Welcome\",\n                [\"usernamePlaceholder\"] = \"Username or email address\",\n            },\n        }),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-auth0/sdk/v2/go/auth0\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttmpJSON0, err := json.Marshal(map[string]interface{}{\n\t\t\t\"login\": map[string]interface{}{\n\t\t\t\t\"alertListTitle\":                \"Alerts\",\n\t\t\t\t\"buttonText\":                    \"Continue\",\n\t\t\t\t\"description\":                   \"Login to\",\n\t\t\t\t\"editEmailText\":                 \"Edit\",\n\t\t\t\t\"emailPlaceholder\":              \"Email address\",\n\t\t\t\t\"federatedConnectionButtonText\": fmt.Sprintf(\"Continue with ${connectionName}\"),\n\t\t\t\t\"footerLinkText\":                \"Sign up\",\n\t\t\t\t\"footerText\":                    \"Don't have an account?\",\n\t\t\t\t\"forgotPasswordText\":            \"Forgot password?\",\n\t\t\t\t\"invitationDescription\":         fmt.Sprintf(\"Log in to accept ${inviterName}'s invitation to join ${companyName} on ${clientName}.\"),\n\t\t\t\t\"invitationTitle\":               \"You've Been Invited!\",\n\t\t\t\t\"logoAltText\":                   fmt.Sprintf(\"${companyName}\"),\n\t\t\t\t\"pageTitle\":                     fmt.Sprintf(\"Log in | ${clientName}\"),\n\t\t\t\t\"passwordPlaceholder\":           \"Password\",\n\t\t\t\t\"separatorText\":                 \"Or\",\n\t\t\t\t\"signupActionLinkText\":          fmt.Sprintf(\"${footerLinkText}\"),\n\t\t\t\t\"signupActionText\":              fmt.Sprintf(\"${footerText}\"),\n\t\t\t\t\"title\":                         \"Welcome\",\n\t\t\t\t\"usernamePlaceholder\":           \"Username or email address\",\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson0 := string(tmpJSON0)\n\t\t_, err = auth0.NewPromptCustomText(ctx, \"example\", \u0026auth0.PromptCustomTextArgs{\n\t\t\tPrompt:   pulumi.String(\"login\"),\n\t\t\tLanguage: pulumi.String(\"en\"),\n\t\t\tBody:     pulumi.String(json0),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.auth0.PromptCustomText;\nimport com.pulumi.auth0.PromptCustomTextArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new PromptCustomText(\"example\", PromptCustomTextArgs.builder()        \n            .prompt(\"login\")\n            .language(\"en\")\n            .body(serializeJson(\n                jsonObject(\n                    jsonProperty(\"login\", jsonObject(\n                        jsonProperty(\"alertListTitle\", \"Alerts\"),\n                        jsonProperty(\"buttonText\", \"Continue\"),\n                        jsonProperty(\"description\", \"Login to\"),\n                        jsonProperty(\"editEmailText\", \"Edit\"),\n                        jsonProperty(\"emailPlaceholder\", \"Email address\"),\n                        jsonProperty(\"federatedConnectionButtonText\", \"Continue with ${connectionName}\"),\n                        jsonProperty(\"footerLinkText\", \"Sign up\"),\n                        jsonProperty(\"footerText\", \"Don't have an account?\"),\n                        jsonProperty(\"forgotPasswordText\", \"Forgot password?\"),\n                        jsonProperty(\"invitationDescription\", \"Log in to accept ${inviterName}'s invitation to join ${companyName} on ${clientName}.\"),\n                        jsonProperty(\"invitationTitle\", \"You've Been Invited!\"),\n                        jsonProperty(\"logoAltText\", \"${companyName}\"),\n                        jsonProperty(\"pageTitle\", \"Log in | ${clientName}\"),\n                        jsonProperty(\"passwordPlaceholder\", \"Password\"),\n                        jsonProperty(\"separatorText\", \"Or\"),\n                        jsonProperty(\"signupActionLinkText\", \"${footerLinkText}\"),\n                        jsonProperty(\"signupActionText\", \"${footerText}\"),\n                        jsonProperty(\"title\", \"Welcome\"),\n                        jsonProperty(\"usernamePlaceholder\", \"Username or email address\")\n                    ))\n                )))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: auth0:PromptCustomText\n    properties:\n      prompt: login\n      language: en\n      body:\n        fn::toJSON:\n          login:\n            alertListTitle: Alerts\n            buttonText: Continue\n            description: Login to\n            editEmailText: Edit\n            emailPlaceholder: Email address\n            federatedConnectionButtonText: Continue with ${connectionName}\n            footerLinkText: Sign up\n            footerText: Don't have an account?\n            forgotPasswordText: Forgot password?\n            invitationDescription: Log in to accept ${inviterName}'s invitation to join ${companyName} on ${clientName}.\n            invitationTitle: You've Been Invited!\n            logoAltText: ${companyName}\n            pageTitle: Log in | ${clientName}\n            passwordPlaceholder: Password\n            separatorText: Or\n            signupActionLinkText: ${footerLinkText}\n            signupActionText: ${footerText}\n            title: Welcome\n            usernamePlaceholder: Username or email address\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThis resource can be imported by specifying the prompt and language separated by \":\". # Example\n\n```sh\n $ pulumi import auth0:index/promptCustomText:PromptCustomText example login:en\n```\n\n ",
            "properties": {
                "body": {
                    "type": "string",
                    "description": "JSON containing the custom texts. You can check the options for each prompt [here](https://auth0.com/docs/customize/universal-login-pages/customize-login-text-prompts#prompt-values).\n"
                },
                "language": {
                    "type": "string",
                    "description": "Language of the custom text. Options include `ar`, `bg`, `bs`, `cs`, `da`, `de`, `el`, `en`, `es`, `et`, `fi`, `fr`, `fr-CA`, `fr-FR`, `he`, `hi`, `hr`, `hu`, `id`, `is`, `it`, `ja`, `ko`, `lt`, `lv`, `nb`, `nl`, `pl`, `pt`, `pt-BR`, `pt-PT`, `ro`, `ru`, `sk`, `sl`, `sr`, `sv`, `th`, `tr`, `uk`, `vi`, `zh-CN`, `zh-TW`\n"
                },
                "prompt": {
                    "type": "string",
                    "description": "The term `prompt` is used to refer to a specific step in the login flow. Options include `login`, `login-id`, `login-password`, `login-email-verification`, `signup`, `signup-id`, `signup-password`, `reset-password`, `consent`, `mfa-push`, `mfa-otp`, `mfa-voice`, `mfa-phone`, `mfa-webauthn`, `mfa-sms`, `mfa-email`, `mfa-recovery-code`, `mfa`, `status`, `device-flow`, `email-verification`, `email-otp-challenge`, `organizations`, `invitation`, `common`.\n"
                }
            },
            "required": [
                "body",
                "language",
                "prompt"
            ],
            "inputProperties": {
                "body": {
                    "type": "string",
                    "description": "JSON containing the custom texts. You can check the options for each prompt [here](https://auth0.com/docs/customize/universal-login-pages/customize-login-text-prompts#prompt-values).\n"
                },
                "language": {
                    "type": "string",
                    "description": "Language of the custom text. Options include `ar`, `bg`, `bs`, `cs`, `da`, `de`, `el`, `en`, `es`, `et`, `fi`, `fr`, `fr-CA`, `fr-FR`, `he`, `hi`, `hr`, `hu`, `id`, `is`, `it`, `ja`, `ko`, `lt`, `lv`, `nb`, `nl`, `pl`, `pt`, `pt-BR`, `pt-PT`, `ro`, `ru`, `sk`, `sl`, `sr`, `sv`, `th`, `tr`, `uk`, `vi`, `zh-CN`, `zh-TW`\n"
                },
                "prompt": {
                    "type": "string",
                    "description": "The term `prompt` is used to refer to a specific step in the login flow. Options include `login`, `login-id`, `login-password`, `login-email-verification`, `signup`, `signup-id`, `signup-password`, `reset-password`, `consent`, `mfa-push`, `mfa-otp`, `mfa-voice`, `mfa-phone`, `mfa-webauthn`, `mfa-sms`, `mfa-email`, `mfa-recovery-code`, `mfa`, `status`, `device-flow`, `email-verification`, `email-otp-challenge`, `organizations`, `invitation`, `common`.\n"
                }
            },
            "requiredInputs": [
                "body",
                "language",
                "prompt"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PromptCustomText resources.\n",
                "properties": {
                    "body": {
                        "type": "string",
                        "description": "JSON containing the custom texts. You can check the options for each prompt [here](https://auth0.com/docs/customize/universal-login-pages/customize-login-text-prompts#prompt-values).\n"
                    },
                    "language": {
                        "type": "string",
                        "description": "Language of the custom text. Options include `ar`, `bg`, `bs`, `cs`, `da`, `de`, `el`, `en`, `es`, `et`, `fi`, `fr`, `fr-CA`, `fr-FR`, `he`, `hi`, `hr`, `hu`, `id`, `is`, `it`, `ja`, `ko`, `lt`, `lv`, `nb`, `nl`, `pl`, `pt`, `pt-BR`, `pt-PT`, `ro`, `ru`, `sk`, `sl`, `sr`, `sv`, `th`, `tr`, `uk`, `vi`, `zh-CN`, `zh-TW`\n"
                    },
                    "prompt": {
                        "type": "string",
                        "description": "The term `prompt` is used to refer to a specific step in the login flow. Options include `login`, `login-id`, `login-password`, `login-email-verification`, `signup`, `signup-id`, `signup-password`, `reset-password`, `consent`, `mfa-push`, `mfa-otp`, `mfa-voice`, `mfa-phone`, `mfa-webauthn`, `mfa-sms`, `mfa-email`, `mfa-recovery-code`, `mfa`, `status`, `device-flow`, `email-verification`, `email-otp-challenge`, `organizations`, `invitation`, `common`.\n"
                    }
                },
                "type": "object"
            }
        },
        "auth0:index/resourceServer:ResourceServer": {
            "description": "With this resource, you can set up APIs that can be consumed from your authorized applications.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as auth0 from \"@pulumi/auth0\";\n\nconst myResourceServer = new auth0.ResourceServer(\"myResourceServer\", {\n    allowOfflineAccess: true,\n    identifier: \"https://api.example.com\",\n    scopes: [\n        {\n            description: \"Create foos\",\n            value: \"create:foo\",\n        },\n        {\n            description: \"Create bars\",\n            value: \"create:bar\",\n        },\n    ],\n    signingAlg: \"RS256\",\n    skipConsentForVerifiableFirstPartyClients: true,\n    tokenLifetime: 8600,\n});\n```\n```python\nimport pulumi\nimport pulumi_auth0 as auth0\n\nmy_resource_server = auth0.ResourceServer(\"myResourceServer\",\n    allow_offline_access=True,\n    identifier=\"https://api.example.com\",\n    scopes=[\n        auth0.ResourceServerScopeArgs(\n            description=\"Create foos\",\n            value=\"create:foo\",\n        ),\n        auth0.ResourceServerScopeArgs(\n            description=\"Create bars\",\n            value=\"create:bar\",\n        ),\n    ],\n    signing_alg=\"RS256\",\n    skip_consent_for_verifiable_first_party_clients=True,\n    token_lifetime=8600)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Auth0 = Pulumi.Auth0;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myResourceServer = new Auth0.ResourceServer(\"myResourceServer\", new()\n    {\n        AllowOfflineAccess = true,\n        Identifier = \"https://api.example.com\",\n        Scopes = new[]\n        {\n            new Auth0.Inputs.ResourceServerScopeArgs\n            {\n                Description = \"Create foos\",\n                Value = \"create:foo\",\n            },\n            new Auth0.Inputs.ResourceServerScopeArgs\n            {\n                Description = \"Create bars\",\n                Value = \"create:bar\",\n            },\n        },\n        SigningAlg = \"RS256\",\n        SkipConsentForVerifiableFirstPartyClients = true,\n        TokenLifetime = 8600,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-auth0/sdk/v2/go/auth0\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := auth0.NewResourceServer(ctx, \"myResourceServer\", \u0026auth0.ResourceServerArgs{\n\t\t\tAllowOfflineAccess: pulumi.Bool(true),\n\t\t\tIdentifier:         pulumi.String(\"https://api.example.com\"),\n\t\t\tScopes: auth0.ResourceServerScopeArray{\n\t\t\t\t\u0026auth0.ResourceServerScopeArgs{\n\t\t\t\t\tDescription: pulumi.String(\"Create foos\"),\n\t\t\t\t\tValue:       pulumi.String(\"create:foo\"),\n\t\t\t\t},\n\t\t\t\t\u0026auth0.ResourceServerScopeArgs{\n\t\t\t\t\tDescription: pulumi.String(\"Create bars\"),\n\t\t\t\t\tValue:       pulumi.String(\"create:bar\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tSigningAlg: pulumi.String(\"RS256\"),\n\t\t\tSkipConsentForVerifiableFirstPartyClients: pulumi.Bool(true),\n\t\t\tTokenLifetime: pulumi.Int(8600),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.auth0.ResourceServer;\nimport com.pulumi.auth0.ResourceServerArgs;\nimport com.pulumi.auth0.inputs.ResourceServerScopeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myResourceServer = new ResourceServer(\"myResourceServer\", ResourceServerArgs.builder()        \n            .allowOfflineAccess(true)\n            .identifier(\"https://api.example.com\")\n            .scopes(            \n                ResourceServerScopeArgs.builder()\n                    .description(\"Create foos\")\n                    .value(\"create:foo\")\n                    .build(),\n                ResourceServerScopeArgs.builder()\n                    .description(\"Create bars\")\n                    .value(\"create:bar\")\n                    .build())\n            .signingAlg(\"RS256\")\n            .skipConsentForVerifiableFirstPartyClients(true)\n            .tokenLifetime(8600)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myResourceServer:\n    type: auth0:ResourceServer\n    properties:\n      allowOfflineAccess: true\n      identifier: https://api.example.com\n      scopes:\n        - description: Create foos\n          value: create:foo\n        - description: Create bars\n          value: create:bar\n      signingAlg: RS256\n      skipConsentForVerifiableFirstPartyClients: true\n      tokenLifetime: 8600\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nExisting resource servers can be imported using their ID. # Example\n\n```sh\n $ pulumi import auth0:index/resourceServer:ResourceServer my_resource_server XXXXXXXXXXXXXXXXXXXXXXX\n```\n\n ",
            "properties": {
                "allowOfflineAccess": {
                    "type": "boolean",
                    "description": "Indicates whether refresh tokens can be issued for this resource server.\n"
                },
                "enforcePolicies": {
                    "type": "boolean",
                    "description": "If this setting is enabled, RBAC authorization policies will be enforced for this API. Role and permission assignments will be evaluated during the login transaction.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier for the resource server. Used as the audience parameter for authorization calls. Cannot be changed once set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Friendly name for the resource server. Cannot include `\u003c` or `\u003e` characters.\n"
                },
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Used to store additional metadata.\n"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/auth0:index/ResourceServerScope:ResourceServerScope"
                    },
                    "description": "List of permissions (scopes) used by this resource server.\n"
                },
                "signingAlg": {
                    "type": "string",
                    "description": "Algorithm used to sign JWTs. Options include `HS256` and `RS256`.\n"
                },
                "signingSecret": {
                    "type": "string",
                    "description": "Secret used to sign tokens when using symmetric algorithms (HS256).\n"
                },
                "skipConsentForVerifiableFirstPartyClients": {
                    "type": "boolean",
                    "description": "Indicates whether to skip user consent for applications flagged as first party.\n"
                },
                "tokenDialect": {
                    "type": "string",
                    "description": "Dialect of access tokens that should be issued for this resource server. Options include `access_token` or `access_token_authz`. If this setting is set to `access_token_authz`, the Permissions claim will be added to the access token. Only available if RBAC (`enforce_policies`) is enabled for this API.\n"
                },
                "tokenLifetime": {
                    "type": "integer",
                    "description": "Number of seconds during which access tokens issued for this resource server from the token endpoint remain valid.\n"
                },
                "tokenLifetimeForWeb": {
                    "type": "integer",
                    "description": "Number of seconds during which access tokens issued for this resource server via implicit or hybrid flows remain valid. Cannot be greater than the `token_lifetime` value.\n"
                },
                "verificationLocation": {
                    "type": "string",
                    "description": "URL from which to retrieve JWKs for this resource server. Used for verifying the JWT sent to Auth0 for token introspection.\n"
                }
            },
            "required": [
                "enforcePolicies",
                "identifier",
                "name",
                "signingAlg",
                "signingSecret",
                "skipConsentForVerifiableFirstPartyClients",
                "tokenLifetime",
                "tokenLifetimeForWeb"
            ],
            "inputProperties": {
                "allowOfflineAccess": {
                    "type": "boolean",
                    "description": "Indicates whether refresh tokens can be issued for this resource server.\n"
                },
                "enforcePolicies": {
                    "type": "boolean",
                    "description": "If this setting is enabled, RBAC authorization policies will be enforced for this API. Role and permission assignments will be evaluated during the login transaction.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier for the resource server. Used as the audience parameter for authorization calls. Cannot be changed once set.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Friendly name for the resource server. Cannot include `\u003c` or `\u003e` characters.\n"
                },
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Used to store additional metadata.\n"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/auth0:index/ResourceServerScope:ResourceServerScope"
                    },
                    "description": "List of permissions (scopes) used by this resource server.\n"
                },
                "signingAlg": {
                    "type": "string",
                    "description": "Algorithm used to sign JWTs. Options include `HS256` and `RS256`.\n"
                },
                "signingSecret": {
                    "type": "string",
                    "description": "Secret used to sign tokens when using symmetric algorithms (HS256).\n"
                },
                "skipConsentForVerifiableFirstPartyClients": {
                    "type": "boolean",
                    "description": "Indicates whether to skip user consent for applications flagged as first party.\n"
                },
                "tokenDialect": {
                    "type": "string",
                    "description": "Dialect of access tokens that should be issued for this resource server. Options include `access_token` or `access_token_authz`. If this setting is set to `access_token_authz`, the Permissions claim will be added to the access token. Only available if RBAC (`enforce_policies`) is enabled for this API.\n"
                },
                "tokenLifetime": {
                    "type": "integer",
                    "description": "Number of seconds during which access tokens issued for this resource server from the token endpoint remain valid.\n"
                },
                "tokenLifetimeForWeb": {
                    "type": "integer",
                    "description": "Number of seconds during which access tokens issued for this resource server via implicit or hybrid flows remain valid. Cannot be greater than the `token_lifetime` value.\n"
                },
                "verificationLocation": {
                    "type": "string",
                    "description": "URL from which to retrieve JWKs for this resource server. Used for verifying the JWT sent to Auth0 for token introspection.\n"
                }
            },
            "requiredInputs": [
                "identifier"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ResourceServer resources.\n",
                "properties": {
                    "allowOfflineAccess": {
                        "type": "boolean",
                        "description": "Indicates whether refresh tokens can be issued for this resource server.\n"
                    },
                    "enforcePolicies": {
                        "type": "boolean",
                        "description": "If this setting is enabled, RBAC authorization policies will be enforced for this API. Role and permission assignments will be evaluated during the login transaction.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier for the resource server. Used as the audience parameter for authorization calls. Cannot be changed once set.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Friendly name for the resource server. Cannot include `\u003c` or `\u003e` characters.\n"
                    },
                    "options": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Used to store additional metadata.\n"
                    },
                    "scopes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/auth0:index/ResourceServerScope:ResourceServerScope"
                        },
                        "description": "List of permissions (scopes) used by this resource server.\n"
                    },
                    "signingAlg": {
                        "type": "string",
                        "description": "Algorithm used to sign JWTs. Options include `HS256` and `RS256`.\n"
                    },
                    "signingSecret": {
                        "type": "string",
                        "description": "Secret used to sign tokens when using symmetric algorithms (HS256).\n"
                    },
                    "skipConsentForVerifiableFirstPartyClients": {
                        "type": "boolean",
                        "description": "Indicates whether to skip user consent for applications flagged as first party.\n"
                    },
                    "tokenDialect": {
                        "type": "string",
                        "description": "Dialect of access tokens that should be issued for this resource server. Options include `access_token` or `access_token_authz`. If this setting is set to `access_token_authz`, the Permissions claim will be added to the access token. Only available if RBAC (`enforce_policies`) is enabled for this API.\n"
                    },
                    "tokenLifetime": {
                        "type": "integer",
                        "description": "Number of seconds during which access tokens issued for this resource server from the token endpoint remain valid.\n"
                    },
                    "tokenLifetimeForWeb": {
                        "type": "integer",
                        "description": "Number of seconds during which access tokens issued for this resource server via implicit or hybrid flows remain valid. Cannot be greater than the `token_lifetime` value.\n"
                    },
                    "verificationLocation": {
                        "type": "string",
                        "description": "URL from which to retrieve JWKs for this resource server. Used for verifying the JWT sent to Auth0 for token introspection.\n"
                    }
                },
                "type": "object"
            }
        },
        "auth0:index/role:Role": {
            "description": "With this resource, you can create and manage collections of permissions that can be assigned to users, which are otherwise known as roles. Permissions (scopes) are created on `auth0.ResourceServer`, then associated with roles and optionally, users using this resource.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as auth0 from \"@pulumi/auth0\";\n\nconst myResourceServer = new auth0.ResourceServer(\"myResourceServer\", {\n    identifier: \"my-resource-server-identifier\",\n    signingAlg: \"RS256\",\n    tokenLifetime: 86400,\n    skipConsentForVerifiableFirstPartyClients: true,\n    enforcePolicies: true,\n    scopes: [{\n        value: \"read:something\",\n        description: \"read something\",\n    }],\n});\nconst myRole = new auth0.Role(\"myRole\", {\n    description: \"Role Description...\",\n    permissions: [{\n        resourceServerIdentifier: myResourceServer.identifier,\n        name: \"read:something\",\n    }],\n});\nconst myUser = new auth0.User(\"myUser\", {\n    connectionName: \"Username-Password-Authentication\",\n    userId: \"auth0|1234567890\",\n    email: \"test@test.com\",\n    password: `passpass$12$12`,\n    nickname: \"testnick\",\n    username: \"testnick\",\n    roles: [myRole.id],\n});\n```\n```python\nimport pulumi\nimport pulumi_auth0 as auth0\n\nmy_resource_server = auth0.ResourceServer(\"myResourceServer\",\n    identifier=\"my-resource-server-identifier\",\n    signing_alg=\"RS256\",\n    token_lifetime=86400,\n    skip_consent_for_verifiable_first_party_clients=True,\n    enforce_policies=True,\n    scopes=[auth0.ResourceServerScopeArgs(\n        value=\"read:something\",\n        description=\"read something\",\n    )])\nmy_role = auth0.Role(\"myRole\",\n    description=\"Role Description...\",\n    permissions=[auth0.RolePermissionArgs(\n        resource_server_identifier=my_resource_server.identifier,\n        name=\"read:something\",\n    )])\nmy_user = auth0.User(\"myUser\",\n    connection_name=\"Username-Password-Authentication\",\n    user_id=\"auth0|1234567890\",\n    email=\"test@test.com\",\n    password=\"passpass$12$12\",\n    nickname=\"testnick\",\n    username=\"testnick\",\n    roles=[my_role.id])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Auth0 = Pulumi.Auth0;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myResourceServer = new Auth0.ResourceServer(\"myResourceServer\", new()\n    {\n        Identifier = \"my-resource-server-identifier\",\n        SigningAlg = \"RS256\",\n        TokenLifetime = 86400,\n        SkipConsentForVerifiableFirstPartyClients = true,\n        EnforcePolicies = true,\n        Scopes = new[]\n        {\n            new Auth0.Inputs.ResourceServerScopeArgs\n            {\n                Value = \"read:something\",\n                Description = \"read something\",\n            },\n        },\n    });\n\n    var myRole = new Auth0.Role(\"myRole\", new()\n    {\n        Description = \"Role Description...\",\n        Permissions = new[]\n        {\n            new Auth0.Inputs.RolePermissionArgs\n            {\n                ResourceServerIdentifier = myResourceServer.Identifier,\n                Name = \"read:something\",\n            },\n        },\n    });\n\n    var myUser = new Auth0.User(\"myUser\", new()\n    {\n        ConnectionName = \"Username-Password-Authentication\",\n        UserId = \"auth0|1234567890\",\n        Email = \"test@test.com\",\n        Password = \"passpass$12$12\",\n        Nickname = \"testnick\",\n        Username = \"testnick\",\n        Roles = new[]\n        {\n            myRole.Id,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-auth0/sdk/v2/go/auth0\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyResourceServer, err := auth0.NewResourceServer(ctx, \"myResourceServer\", \u0026auth0.ResourceServerArgs{\n\t\t\tIdentifier:    pulumi.String(\"my-resource-server-identifier\"),\n\t\t\tSigningAlg:    pulumi.String(\"RS256\"),\n\t\t\tTokenLifetime: pulumi.Int(86400),\n\t\t\tSkipConsentForVerifiableFirstPartyClients: pulumi.Bool(true),\n\t\t\tEnforcePolicies: pulumi.Bool(true),\n\t\t\tScopes: auth0.ResourceServerScopeArray{\n\t\t\t\t\u0026auth0.ResourceServerScopeArgs{\n\t\t\t\t\tValue:       pulumi.String(\"read:something\"),\n\t\t\t\t\tDescription: pulumi.String(\"read something\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmyRole, err := auth0.NewRole(ctx, \"myRole\", \u0026auth0.RoleArgs{\n\t\t\tDescription: pulumi.String(\"Role Description...\"),\n\t\t\tPermissions: auth0.RolePermissionArray{\n\t\t\t\t\u0026auth0.RolePermissionArgs{\n\t\t\t\t\tResourceServerIdentifier: myResourceServer.Identifier,\n\t\t\t\t\tName:                     pulumi.String(\"read:something\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = auth0.NewUser(ctx, \"myUser\", \u0026auth0.UserArgs{\n\t\t\tConnectionName: pulumi.String(\"Username-Password-Authentication\"),\n\t\t\tUserId:         pulumi.String(\"auth0|1234567890\"),\n\t\t\tEmail:          pulumi.String(\"test@test.com\"),\n\t\t\tPassword:       pulumi.String(fmt.Sprintf(\"passpass$12$12\")),\n\t\t\tNickname:       pulumi.String(\"testnick\"),\n\t\t\tUsername:       pulumi.String(\"testnick\"),\n\t\t\tRoles: pulumi.StringArray{\n\t\t\t\tmyRole.ID(),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.auth0.ResourceServer;\nimport com.pulumi.auth0.ResourceServerArgs;\nimport com.pulumi.auth0.inputs.ResourceServerScopeArgs;\nimport com.pulumi.auth0.Role;\nimport com.pulumi.auth0.RoleArgs;\nimport com.pulumi.auth0.inputs.RolePermissionArgs;\nimport com.pulumi.auth0.User;\nimport com.pulumi.auth0.UserArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myResourceServer = new ResourceServer(\"myResourceServer\", ResourceServerArgs.builder()        \n            .identifier(\"my-resource-server-identifier\")\n            .signingAlg(\"RS256\")\n            .tokenLifetime(86400)\n            .skipConsentForVerifiableFirstPartyClients(true)\n            .enforcePolicies(true)\n            .scopes(ResourceServerScopeArgs.builder()\n                .value(\"read:something\")\n                .description(\"read something\")\n                .build())\n            .build());\n\n        var myRole = new Role(\"myRole\", RoleArgs.builder()        \n            .description(\"Role Description...\")\n            .permissions(RolePermissionArgs.builder()\n                .resourceServerIdentifier(myResourceServer.identifier())\n                .name(\"read:something\")\n                .build())\n            .build());\n\n        var myUser = new User(\"myUser\", UserArgs.builder()        \n            .connectionName(\"Username-Password-Authentication\")\n            .userId(\"auth0|1234567890\")\n            .email(\"test@test.com\")\n            .password(\"passpass$12$12\")\n            .nickname(\"testnick\")\n            .username(\"testnick\")\n            .roles(myRole.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myResourceServer:\n    type: auth0:ResourceServer\n    properties:\n      identifier: my-resource-server-identifier\n      signingAlg: RS256\n      tokenLifetime: 86400\n      skipConsentForVerifiableFirstPartyClients: true\n      enforcePolicies: true\n      scopes:\n        - value: read:something\n          description: read something\n  myUser:\n    type: auth0:User\n    properties:\n      connectionName: Username-Password-Authentication\n      userId: auth0|1234567890\n      email: test@test.com\n      password: passpass$12$12\n      nickname: testnick\n      username: testnick\n      roles:\n        - ${myRole.id}\n  myRole:\n    type: auth0:Role\n    properties:\n      description: Role Description...\n      permissions:\n        - resourceServerIdentifier: ${myResourceServer.identifier}\n          name: read:something\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nExisting roles can be imported using their ID. # Example\n\n```sh\n $ pulumi import auth0:index/role:Role my_role XXXXXXXXXXXXXXXXXXXXXXX\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the role.\n",
                    "default": "Managed by Pulumi"
                },
                "name": {
                    "type": "string",
                    "description": "Name for this role.\n"
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/auth0:index/RolePermission:RolePermission"
                    },
                    "description": "Configuration settings for permissions (scopes) attached to the role.\n"
                }
            },
            "required": [
                "description",
                "name"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the role.\n",
                    "default": "Managed by Pulumi"
                },
                "name": {
                    "type": "string",
                    "description": "Name for this role.\n"
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/auth0:index/RolePermission:RolePermission"
                    },
                    "description": "Configuration settings for permissions (scopes) attached to the role.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Role resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the role.\n",
                        "default": "Managed by Pulumi"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name for this role.\n"
                    },
                    "permissions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/auth0:index/RolePermission:RolePermission"
                        },
                        "description": "Configuration settings for permissions (scopes) attached to the role.\n"
                    }
                },
                "type": "object"
            }
        },
        "auth0:index/rule:Rule": {
            "description": "With Auth0, you can create custom Javascript snippets that run in a secure, isolated sandbox as part of your authentication pipeline, which are otherwise known as rules. This resource allows you to create and manage rules. You can create global variable for use with rules by using the `auth0.RuleConfig` resource.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as auth0 from \"@pulumi/auth0\";\n\nconst myRule = new auth0.Rule(\"myRule\", {\n    enabled: true,\n    script: `    function (user, context, callback) {\n      callback(null, user, context);\n    }\n  \n`,\n});\n```\n```python\nimport pulumi\nimport pulumi_auth0 as auth0\n\nmy_rule = auth0.Rule(\"myRule\",\n    enabled=True,\n    script=\"\"\"    function (user, context, callback) {\n      callback(null, user, context);\n    }\n  \n\"\"\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Auth0 = Pulumi.Auth0;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myRule = new Auth0.Rule(\"myRule\", new()\n    {\n        Enabled = true,\n        Script = @\"    function (user, context, callback) {\n      callback(null, user, context);\n    }\n  \n\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-auth0/sdk/v2/go/auth0\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := auth0.NewRule(ctx, \"myRule\", \u0026auth0.RuleArgs{\n\t\t\tEnabled: pulumi.Bool(true),\n\t\t\tScript:  pulumi.String(fmt.Sprintf(\"    function (user, context, callback) {\\n      callback(null, user, context);\\n    }\\n  \\n\")),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.auth0.Rule;\nimport com.pulumi.auth0.RuleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myRule = new Rule(\"myRule\", RuleArgs.builder()        \n            .enabled(true)\n            .script(\"\"\"\n    function (user, context, callback) {\n      callback(null, user, context);\n    }\n  \n            \"\"\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myRule:\n    type: auth0:Rule\n    properties:\n      enabled: true\n      script: \"    function (user, context, callback) {\\n      callback(null, user, context);\\n    }\\n  \\n\"\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nExisting rules can be imported using their ID. # Example\n\n```sh\n $ pulumi import auth0:index/rule:Rule my_rule rul_XXXXXXXXXXXXX\n```\n\n ",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Indicates whether the rule is enabled.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the rule. May only contain alphanumeric characters, spaces, and hyphens. May neither start nor end with hyphens or spaces.\n"
                },
                "order": {
                    "type": "integer",
                    "description": "Order in which the rule executes relative to other rules. Lower-valued rules execute first.\n"
                },
                "script": {
                    "type": "string",
                    "description": "Code to be executed when the rule runs.\n"
                }
            },
            "required": [
                "enabled",
                "name",
                "order",
                "script"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Indicates whether the rule is enabled.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the rule. May only contain alphanumeric characters, spaces, and hyphens. May neither start nor end with hyphens or spaces.\n"
                },
                "order": {
                    "type": "integer",
                    "description": "Order in which the rule executes relative to other rules. Lower-valued rules execute first.\n"
                },
                "script": {
                    "type": "string",
                    "description": "Code to be executed when the rule runs.\n"
                }
            },
            "requiredInputs": [
                "script"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Rule resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Indicates whether the rule is enabled.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the rule. May only contain alphanumeric characters, spaces, and hyphens. May neither start nor end with hyphens or spaces.\n"
                    },
                    "order": {
                        "type": "integer",
                        "description": "Order in which the rule executes relative to other rules. Lower-valued rules execute first.\n"
                    },
                    "script": {
                        "type": "string",
                        "description": "Code to be executed when the rule runs.\n"
                    }
                },
                "type": "object"
            }
        },
        "auth0:index/ruleConfig:RuleConfig": {
            "description": "With Auth0, you can create custom Javascript snippets that run in a secure, isolated sandbox as part of your authentication pipeline, which are otherwise known as rules. This resource allows you to create and manage variables that are available to all rules via Auth0's global configuration object. Used in conjunction with configured rules.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as auth0 from \"@pulumi/auth0\";\n\nconst myRule = new auth0.Rule(\"myRule\", {\n    enabled: true,\n    script: `    function (user, context, callback) {\n      callback(null, user, context);\n    }\n  \n`,\n});\nconst myRuleConfig = new auth0.RuleConfig(\"myRuleConfig\", {\n    key: \"foo\",\n    value: \"bar\",\n});\n```\n```python\nimport pulumi\nimport pulumi_auth0 as auth0\n\nmy_rule = auth0.Rule(\"myRule\",\n    enabled=True,\n    script=\"\"\"    function (user, context, callback) {\n      callback(null, user, context);\n    }\n  \n\"\"\")\nmy_rule_config = auth0.RuleConfig(\"myRuleConfig\",\n    key=\"foo\",\n    value=\"bar\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Auth0 = Pulumi.Auth0;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myRule = new Auth0.Rule(\"myRule\", new()\n    {\n        Enabled = true,\n        Script = @\"    function (user, context, callback) {\n      callback(null, user, context);\n    }\n  \n\",\n    });\n\n    var myRuleConfig = new Auth0.RuleConfig(\"myRuleConfig\", new()\n    {\n        Key = \"foo\",\n        Value = \"bar\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-auth0/sdk/v2/go/auth0\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := auth0.NewRule(ctx, \"myRule\", \u0026auth0.RuleArgs{\n\t\t\tEnabled: pulumi.Bool(true),\n\t\t\tScript:  pulumi.String(fmt.Sprintf(\"    function (user, context, callback) {\\n      callback(null, user, context);\\n    }\\n  \\n\")),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = auth0.NewRuleConfig(ctx, \"myRuleConfig\", \u0026auth0.RuleConfigArgs{\n\t\t\tKey:   pulumi.String(\"foo\"),\n\t\t\tValue: pulumi.String(\"bar\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.auth0.Rule;\nimport com.pulumi.auth0.RuleArgs;\nimport com.pulumi.auth0.RuleConfig;\nimport com.pulumi.auth0.RuleConfigArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myRule = new Rule(\"myRule\", RuleArgs.builder()        \n            .enabled(true)\n            .script(\"\"\"\n    function (user, context, callback) {\n      callback(null, user, context);\n    }\n  \n            \"\"\")\n            .build());\n\n        var myRuleConfig = new RuleConfig(\"myRuleConfig\", RuleConfigArgs.builder()        \n            .key(\"foo\")\n            .value(\"bar\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myRule:\n    type: auth0:Rule\n    properties:\n      enabled: true\n      script: \"    function (user, context, callback) {\\n      callback(null, user, context);\\n    }\\n  \\n\"\n  myRuleConfig:\n    type: auth0:RuleConfig\n    properties:\n      key: foo\n      value: bar\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nExisting rule configs can be imported using their key name. # Example\n\n```sh\n $ pulumi import auth0:index/ruleConfig:RuleConfig my_rule_config foo\n```\n\n ",
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Key for a rules configuration variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value for a rules configuration variable.\n",
                    "secret": true
                }
            },
            "required": [
                "key",
                "value"
            ],
            "inputProperties": {
                "key": {
                    "type": "string",
                    "description": "Key for a rules configuration variable.\n",
                    "willReplaceOnChanges": true
                },
                "value": {
                    "type": "string",
                    "description": "Value for a rules configuration variable.\n",
                    "secret": true
                }
            },
            "requiredInputs": [
                "key",
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RuleConfig resources.\n",
                "properties": {
                    "key": {
                        "type": "string",
                        "description": "Key for a rules configuration variable.\n",
                        "willReplaceOnChanges": true
                    },
                    "value": {
                        "type": "string",
                        "description": "Value for a rules configuration variable.\n",
                        "secret": true
                    }
                },
                "type": "object"
            }
        },
        "auth0:index/tenant:Tenant": {
            "description": "With this resource, you can manage Auth0 tenants, including setting logos and support contact information, setting error pages, and configuring default tenant behaviors.\n\n\u003e Creating tenants through the Management API is not currently supported. Therefore, this resource can only\nmanage an existing tenant created through the Auth0 dashboard.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as auth0 from \"@pulumi/auth0\";\n\nconst myTenant = new auth0.Tenant(\"myTenant\", {\n    allowedLogoutUrls: [\"http://example.com/logout\"],\n    changePassword: {\n        enabled: true,\n        html: \"\u003chtml\u003eChange Password\u003c/html\u003e\",\n    },\n    defaultRedirectionUri: \"https://example.com/login\",\n    enabledLocales: [\"en\"],\n    errorPage: {\n        html: \"\u003chtml\u003eError Page\u003c/html\u003e\",\n        showLogLink: true,\n        url: \"https://example.com/errors\",\n    },\n    flags: {\n        disableClickjackProtectionHeaders: true,\n        disableFieldsMapFix: false,\n        disableManagementApiSmsObfuscation: false,\n        enablePublicSignupUserExistsError: true,\n        noDiscloseEnterpriseConnections: false,\n        universalLogin: true,\n        useScopeDescriptionsForConsent: true,\n    },\n    friendlyName: \"Tenant Name\",\n    guardianMfaPage: {\n        enabled: true,\n        html: \"\u003chtml\u003eMFA\u003c/html\u003e\",\n    },\n    pictureUrl: \"http://example.com/logo.png\",\n    sandboxVersion: \"12\",\n    sessionCookie: {\n        mode: \"non-persistent\",\n    },\n    sessionLifetime: 8760,\n    supportEmail: \"support@example.com\",\n    supportUrl: \"http://example.com/support\",\n    universalLogin: {\n        colors: {\n            pageBackground: \"#000000\",\n            primary: \"#0059d6\",\n        },\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_auth0 as auth0\n\nmy_tenant = auth0.Tenant(\"myTenant\",\n    allowed_logout_urls=[\"http://example.com/logout\"],\n    change_password=auth0.TenantChangePasswordArgs(\n        enabled=True,\n        html=\"\u003chtml\u003eChange Password\u003c/html\u003e\",\n    ),\n    default_redirection_uri=\"https://example.com/login\",\n    enabled_locales=[\"en\"],\n    error_page=auth0.TenantErrorPageArgs(\n        html=\"\u003chtml\u003eError Page\u003c/html\u003e\",\n        show_log_link=True,\n        url=\"https://example.com/errors\",\n    ),\n    flags=auth0.TenantFlagsArgs(\n        disable_clickjack_protection_headers=True,\n        disable_fields_map_fix=False,\n        disable_management_api_sms_obfuscation=False,\n        enable_public_signup_user_exists_error=True,\n        no_disclose_enterprise_connections=False,\n        universal_login=True,\n        use_scope_descriptions_for_consent=True,\n    ),\n    friendly_name=\"Tenant Name\",\n    guardian_mfa_page=auth0.TenantGuardianMfaPageArgs(\n        enabled=True,\n        html=\"\u003chtml\u003eMFA\u003c/html\u003e\",\n    ),\n    picture_url=\"http://example.com/logo.png\",\n    sandbox_version=\"12\",\n    session_cookie=auth0.TenantSessionCookieArgs(\n        mode=\"non-persistent\",\n    ),\n    session_lifetime=8760,\n    support_email=\"support@example.com\",\n    support_url=\"http://example.com/support\",\n    universal_login=auth0.TenantUniversalLoginArgs(\n        colors=auth0.TenantUniversalLoginColorsArgs(\n            page_background=\"#000000\",\n            primary=\"#0059d6\",\n        ),\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Auth0 = Pulumi.Auth0;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myTenant = new Auth0.Tenant(\"myTenant\", new()\n    {\n        AllowedLogoutUrls = new[]\n        {\n            \"http://example.com/logout\",\n        },\n        ChangePassword = new Auth0.Inputs.TenantChangePasswordArgs\n        {\n            Enabled = true,\n            Html = \"\u003chtml\u003eChange Password\u003c/html\u003e\",\n        },\n        DefaultRedirectionUri = \"https://example.com/login\",\n        EnabledLocales = new[]\n        {\n            \"en\",\n        },\n        ErrorPage = new Auth0.Inputs.TenantErrorPageArgs\n        {\n            Html = \"\u003chtml\u003eError Page\u003c/html\u003e\",\n            ShowLogLink = true,\n            Url = \"https://example.com/errors\",\n        },\n        Flags = new Auth0.Inputs.TenantFlagsArgs\n        {\n            DisableClickjackProtectionHeaders = true,\n            DisableFieldsMapFix = false,\n            DisableManagementApiSmsObfuscation = false,\n            EnablePublicSignupUserExistsError = true,\n            NoDiscloseEnterpriseConnections = false,\n            UniversalLogin = true,\n            UseScopeDescriptionsForConsent = true,\n        },\n        FriendlyName = \"Tenant Name\",\n        GuardianMfaPage = new Auth0.Inputs.TenantGuardianMfaPageArgs\n        {\n            Enabled = true,\n            Html = \"\u003chtml\u003eMFA\u003c/html\u003e\",\n        },\n        PictureUrl = \"http://example.com/logo.png\",\n        SandboxVersion = \"12\",\n        SessionCookie = new Auth0.Inputs.TenantSessionCookieArgs\n        {\n            Mode = \"non-persistent\",\n        },\n        SessionLifetime = 8760,\n        SupportEmail = \"support@example.com\",\n        SupportUrl = \"http://example.com/support\",\n        UniversalLogin = new Auth0.Inputs.TenantUniversalLoginArgs\n        {\n            Colors = new Auth0.Inputs.TenantUniversalLoginColorsArgs\n            {\n                PageBackground = \"#000000\",\n                Primary = \"#0059d6\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-auth0/sdk/v2/go/auth0\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := auth0.NewTenant(ctx, \"myTenant\", \u0026auth0.TenantArgs{\n\t\t\tAllowedLogoutUrls: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"http://example.com/logout\"),\n\t\t\t},\n\t\t\tChangePassword: \u0026auth0.TenantChangePasswordArgs{\n\t\t\t\tEnabled: pulumi.Bool(true),\n\t\t\t\tHtml:    pulumi.String(\"\u003chtml\u003eChange Password\u003c/html\u003e\"),\n\t\t\t},\n\t\t\tDefaultRedirectionUri: pulumi.String(\"https://example.com/login\"),\n\t\t\tEnabledLocales: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"en\"),\n\t\t\t},\n\t\t\tErrorPage: \u0026auth0.TenantErrorPageArgs{\n\t\t\t\tHtml:        pulumi.String(\"\u003chtml\u003eError Page\u003c/html\u003e\"),\n\t\t\t\tShowLogLink: pulumi.Bool(true),\n\t\t\t\tUrl:         pulumi.String(\"https://example.com/errors\"),\n\t\t\t},\n\t\t\tFlags: \u0026auth0.TenantFlagsArgs{\n\t\t\t\tDisableClickjackProtectionHeaders:  pulumi.Bool(true),\n\t\t\t\tDisableFieldsMapFix:                pulumi.Bool(false),\n\t\t\t\tDisableManagementApiSmsObfuscation: pulumi.Bool(false),\n\t\t\t\tEnablePublicSignupUserExistsError:  pulumi.Bool(true),\n\t\t\t\tNoDiscloseEnterpriseConnections:    pulumi.Bool(false),\n\t\t\t\tUniversalLogin:                     pulumi.Bool(true),\n\t\t\t\tUseScopeDescriptionsForConsent:     pulumi.Bool(true),\n\t\t\t},\n\t\t\tFriendlyName: pulumi.String(\"Tenant Name\"),\n\t\t\tGuardianMfaPage: \u0026auth0.TenantGuardianMfaPageArgs{\n\t\t\t\tEnabled: pulumi.Bool(true),\n\t\t\t\tHtml:    pulumi.String(\"\u003chtml\u003eMFA\u003c/html\u003e\"),\n\t\t\t},\n\t\t\tPictureUrl:     pulumi.String(\"http://example.com/logo.png\"),\n\t\t\tSandboxVersion: pulumi.String(\"12\"),\n\t\t\tSessionCookie: \u0026auth0.TenantSessionCookieArgs{\n\t\t\t\tMode: pulumi.String(\"non-persistent\"),\n\t\t\t},\n\t\t\tSessionLifetime: pulumi.Float64(8760),\n\t\t\tSupportEmail:    pulumi.String(\"support@example.com\"),\n\t\t\tSupportUrl:      pulumi.String(\"http://example.com/support\"),\n\t\t\tUniversalLogin: \u0026auth0.TenantUniversalLoginArgs{\n\t\t\t\tColors: \u0026auth0.TenantUniversalLoginColorsArgs{\n\t\t\t\t\tPageBackground: pulumi.String(\"#000000\"),\n\t\t\t\t\tPrimary:        pulumi.String(\"#0059d6\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.auth0.Tenant;\nimport com.pulumi.auth0.TenantArgs;\nimport com.pulumi.auth0.inputs.TenantChangePasswordArgs;\nimport com.pulumi.auth0.inputs.TenantErrorPageArgs;\nimport com.pulumi.auth0.inputs.TenantFlagsArgs;\nimport com.pulumi.auth0.inputs.TenantGuardianMfaPageArgs;\nimport com.pulumi.auth0.inputs.TenantSessionCookieArgs;\nimport com.pulumi.auth0.inputs.TenantUniversalLoginArgs;\nimport com.pulumi.auth0.inputs.TenantUniversalLoginColorsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myTenant = new Tenant(\"myTenant\", TenantArgs.builder()        \n            .allowedLogoutUrls(\"http://example.com/logout\")\n            .changePassword(TenantChangePasswordArgs.builder()\n                .enabled(true)\n                .html(\"\u003chtml\u003eChange Password\u003c/html\u003e\")\n                .build())\n            .defaultRedirectionUri(\"https://example.com/login\")\n            .enabledLocales(\"en\")\n            .errorPage(TenantErrorPageArgs.builder()\n                .html(\"\u003chtml\u003eError Page\u003c/html\u003e\")\n                .showLogLink(true)\n                .url(\"https://example.com/errors\")\n                .build())\n            .flags(TenantFlagsArgs.builder()\n                .disableClickjackProtectionHeaders(true)\n                .disableFieldsMapFix(false)\n                .disableManagementApiSmsObfuscation(false)\n                .enablePublicSignupUserExistsError(true)\n                .noDiscloseEnterpriseConnections(false)\n                .universalLogin(true)\n                .useScopeDescriptionsForConsent(true)\n                .build())\n            .friendlyName(\"Tenant Name\")\n            .guardianMfaPage(TenantGuardianMfaPageArgs.builder()\n                .enabled(true)\n                .html(\"\u003chtml\u003eMFA\u003c/html\u003e\")\n                .build())\n            .pictureUrl(\"http://example.com/logo.png\")\n            .sandboxVersion(\"12\")\n            .sessionCookie(TenantSessionCookieArgs.builder()\n                .mode(\"non-persistent\")\n                .build())\n            .sessionLifetime(8760)\n            .supportEmail(\"support@example.com\")\n            .supportUrl(\"http://example.com/support\")\n            .universalLogin(TenantUniversalLoginArgs.builder()\n                .colors(TenantUniversalLoginColorsArgs.builder()\n                    .pageBackground(\"#000000\")\n                    .primary(\"#0059d6\")\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myTenant:\n    type: auth0:Tenant\n    properties:\n      allowedLogoutUrls:\n        - http://example.com/logout\n      changePassword:\n        enabled: true\n        html: \u003chtml\u003eChange Password\u003c/html\u003e\n      defaultRedirectionUri: https://example.com/login\n      enabledLocales:\n        - en\n      errorPage:\n        html: \u003chtml\u003eError Page\u003c/html\u003e\n        showLogLink: true\n        url: https://example.com/errors\n      flags:\n        disableClickjackProtectionHeaders: true\n        disableFieldsMapFix: false\n        disableManagementApiSmsObfuscation: false\n        enablePublicSignupUserExistsError: true\n        noDiscloseEnterpriseConnections: false\n        universalLogin: true\n        useScopeDescriptionsForConsent: true\n      friendlyName: Tenant Name\n      guardianMfaPage:\n        enabled: true\n        html: \u003chtml\u003eMFA\u003c/html\u003e\n      pictureUrl: http://example.com/logo.png\n      sandboxVersion: '12'\n      sessionCookie:\n        mode: non-persistent\n      sessionLifetime: 8760\n      supportEmail: support@example.com\n      supportUrl: http://example.com/support\n      universalLogin:\n        colors:\n          pageBackground: '#000000'\n          primary: '#0059d6'\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nAs this is not a resource identifiable by an ID within the Auth0 Management API, tenant can be imported using a random string. # We recommend [Version 4 UUID](https://www.uuidgenerator.net/version4) # Example\n\n```sh\n $ pulumi import auth0:index/tenant:Tenant my_tenant 82f4f21b-017a-319d-92e7-2291c1ca36c4\n```\n\n ",
            "properties": {
                "allowedLogoutUrls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "URLs that Auth0 may redirect to after logout.\n"
                },
                "changePassword": {
                    "$ref": "#/types/auth0:index/TenantChangePassword:TenantChangePassword",
                    "description": "Configuration settings for change password page.\n"
                },
                "defaultAudience": {
                    "type": "string",
                    "description": "API Audience to use by default for API Authorization flows. This setting is equivalent to appending the audience to every authorization request made to the tenant for every application.\n"
                },
                "defaultDirectory": {
                    "type": "string",
                    "description": "Name of the connection to be used for Password Grant exchanges. Options include `auth0-adldap`, `ad`, `auth0`, `email`, `sms`, `waad`, and `adfs`.\n"
                },
                "defaultRedirectionUri": {
                    "type": "string",
                    "description": "The default absolute redirection URI. Must be HTTPS or an empty string.\n"
                },
                "enabledLocales": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Supported locales for the user interface. The first locale in the list will be used to set the default locale.\n"
                },
                "errorPage": {
                    "$ref": "#/types/auth0:index/TenantErrorPage:TenantErrorPage",
                    "description": "Configuration settings for error pages.\n"
                },
                "flags": {
                    "$ref": "#/types/auth0:index/TenantFlags:TenantFlags",
                    "description": "Configuration settings for tenant flags.\n"
                },
                "friendlyName": {
                    "type": "string",
                    "description": "Friendly name for the tenant.\n"
                },
                "guardianMfaPage": {
                    "$ref": "#/types/auth0:index/TenantGuardianMfaPage:TenantGuardianMfaPage",
                    "description": "Configuration settings for the Guardian MFA page.\n"
                },
                "idleSessionLifetime": {
                    "type": "number",
                    "description": "Number of hours during which a session can be inactive before the user must log in again.\n"
                },
                "pictureUrl": {
                    "type": "string",
                    "description": "URL of logo to be shown for the tenant. Recommended size is 150px x 150px. If no URL is provided, the Auth0 logo will be used.\n"
                },
                "sandboxVersion": {
                    "type": "string",
                    "description": "Selected sandbox version for the extensibility environment, which allows you to use custom scripts to extend parts of Auth0's functionality.\n"
                },
                "sessionCookie": {
                    "$ref": "#/types/auth0:index/TenantSessionCookie:TenantSessionCookie",
                    "description": "Alters behavior of tenant's session cookie. Contains a single `mode` property.\n"
                },
                "sessionLifetime": {
                    "type": "number",
                    "description": "Number of hours during which a session will stay valid.\n"
                },
                "supportEmail": {
                    "type": "string",
                    "description": "Support email address for authenticating users.\n"
                },
                "supportUrl": {
                    "type": "string",
                    "description": "Support URL for authenticating users.\n"
                },
                "universalLogin": {
                    "$ref": "#/types/auth0:index/TenantUniversalLogin:TenantUniversalLogin",
                    "description": "Configuration settings for Universal Login.\n"
                }
            },
            "required": [
                "allowedLogoutUrls",
                "changePassword",
                "defaultAudience",
                "defaultDirectory",
                "defaultRedirectionUri",
                "enabledLocales",
                "errorPage",
                "flags",
                "friendlyName",
                "guardianMfaPage",
                "pictureUrl",
                "sandboxVersion",
                "sessionCookie",
                "supportEmail",
                "supportUrl",
                "universalLogin"
            ],
            "inputProperties": {
                "allowedLogoutUrls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "URLs that Auth0 may redirect to after logout.\n"
                },
                "changePassword": {
                    "$ref": "#/types/auth0:index/TenantChangePassword:TenantChangePassword",
                    "description": "Configuration settings for change password page.\n"
                },
                "defaultAudience": {
                    "type": "string",
                    "description": "API Audience to use by default for API Authorization flows. This setting is equivalent to appending the audience to every authorization request made to the tenant for every application.\n"
                },
                "defaultDirectory": {
                    "type": "string",
                    "description": "Name of the connection to be used for Password Grant exchanges. Options include `auth0-adldap`, `ad`, `auth0`, `email`, `sms`, `waad`, and `adfs`.\n"
                },
                "defaultRedirectionUri": {
                    "type": "string",
                    "description": "The default absolute redirection URI. Must be HTTPS or an empty string.\n"
                },
                "enabledLocales": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Supported locales for the user interface. The first locale in the list will be used to set the default locale.\n"
                },
                "errorPage": {
                    "$ref": "#/types/auth0:index/TenantErrorPage:TenantErrorPage",
                    "description": "Configuration settings for error pages.\n"
                },
                "flags": {
                    "$ref": "#/types/auth0:index/TenantFlags:TenantFlags",
                    "description": "Configuration settings for tenant flags.\n"
                },
                "friendlyName": {
                    "type": "string",
                    "description": "Friendly name for the tenant.\n"
                },
                "guardianMfaPage": {
                    "$ref": "#/types/auth0:index/TenantGuardianMfaPage:TenantGuardianMfaPage",
                    "description": "Configuration settings for the Guardian MFA page.\n"
                },
                "idleSessionLifetime": {
                    "type": "number",
                    "description": "Number of hours during which a session can be inactive before the user must log in again.\n"
                },
                "pictureUrl": {
                    "type": "string",
                    "description": "URL of logo to be shown for the tenant. Recommended size is 150px x 150px. If no URL is provided, the Auth0 logo will be used.\n"
                },
                "sandboxVersion": {
                    "type": "string",
                    "description": "Selected sandbox version for the extensibility environment, which allows you to use custom scripts to extend parts of Auth0's functionality.\n"
                },
                "sessionCookie": {
                    "$ref": "#/types/auth0:index/TenantSessionCookie:TenantSessionCookie",
                    "description": "Alters behavior of tenant's session cookie. Contains a single `mode` property.\n"
                },
                "sessionLifetime": {
                    "type": "number",
                    "description": "Number of hours during which a session will stay valid.\n"
                },
                "supportEmail": {
                    "type": "string",
                    "description": "Support email address for authenticating users.\n"
                },
                "supportUrl": {
                    "type": "string",
                    "description": "Support URL for authenticating users.\n"
                },
                "universalLogin": {
                    "$ref": "#/types/auth0:index/TenantUniversalLogin:TenantUniversalLogin",
                    "description": "Configuration settings for Universal Login.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Tenant resources.\n",
                "properties": {
                    "allowedLogoutUrls": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "URLs that Auth0 may redirect to after logout.\n"
                    },
                    "changePassword": {
                        "$ref": "#/types/auth0:index/TenantChangePassword:TenantChangePassword",
                        "description": "Configuration settings for change password page.\n"
                    },
                    "defaultAudience": {
                        "type": "string",
                        "description": "API Audience to use by default for API Authorization flows. This setting is equivalent to appending the audience to every authorization request made to the tenant for every application.\n"
                    },
                    "defaultDirectory": {
                        "type": "string",
                        "description": "Name of the connection to be used for Password Grant exchanges. Options include `auth0-adldap`, `ad`, `auth0`, `email`, `sms`, `waad`, and `adfs`.\n"
                    },
                    "defaultRedirectionUri": {
                        "type": "string",
                        "description": "The default absolute redirection URI. Must be HTTPS or an empty string.\n"
                    },
                    "enabledLocales": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Supported locales for the user interface. The first locale in the list will be used to set the default locale.\n"
                    },
                    "errorPage": {
                        "$ref": "#/types/auth0:index/TenantErrorPage:TenantErrorPage",
                        "description": "Configuration settings for error pages.\n"
                    },
                    "flags": {
                        "$ref": "#/types/auth0:index/TenantFlags:TenantFlags",
                        "description": "Configuration settings for tenant flags.\n"
                    },
                    "friendlyName": {
                        "type": "string",
                        "description": "Friendly name for the tenant.\n"
                    },
                    "guardianMfaPage": {
                        "$ref": "#/types/auth0:index/TenantGuardianMfaPage:TenantGuardianMfaPage",
                        "description": "Configuration settings for the Guardian MFA page.\n"
                    },
                    "idleSessionLifetime": {
                        "type": "number",
                        "description": "Number of hours during which a session can be inactive before the user must log in again.\n"
                    },
                    "pictureUrl": {
                        "type": "string",
                        "description": "URL of logo to be shown for the tenant. Recommended size is 150px x 150px. If no URL is provided, the Auth0 logo will be used.\n"
                    },
                    "sandboxVersion": {
                        "type": "string",
                        "description": "Selected sandbox version for the extensibility environment, which allows you to use custom scripts to extend parts of Auth0's functionality.\n"
                    },
                    "sessionCookie": {
                        "$ref": "#/types/auth0:index/TenantSessionCookie:TenantSessionCookie",
                        "description": "Alters behavior of tenant's session cookie. Contains a single `mode` property.\n"
                    },
                    "sessionLifetime": {
                        "type": "number",
                        "description": "Number of hours during which a session will stay valid.\n"
                    },
                    "supportEmail": {
                        "type": "string",
                        "description": "Support email address for authenticating users.\n"
                    },
                    "supportUrl": {
                        "type": "string",
                        "description": "Support URL for authenticating users.\n"
                    },
                    "universalLogin": {
                        "$ref": "#/types/auth0:index/TenantUniversalLogin:TenantUniversalLogin",
                        "description": "Configuration settings for Universal Login.\n"
                    }
                },
                "type": "object"
            }
        },
        "auth0:index/triggerBinding:TriggerBinding": {
            "description": "With this resource, you can bind an action to a trigger. Once an action is created and deployed, it can be attached (i.e. bound) to a trigger so that it will be executed as part of a flow. The list of actions reflects the order in which they will be executed during the appropriate flow.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as auth0 from \"@pulumi/auth0\";\n\nconst actionFoo = new auth0.Action(\"actionFoo\", {\n    code: `exports.onContinuePostLogin = async (event, api) =\u003e {\n  console.log(\"foo\");\n};\"\n`,\n    deploy: true,\n    supportedTriggers: {\n        id: \"post-login\",\n        version: \"v3\",\n    },\n});\nconst actionBar = new auth0.Action(\"actionBar\", {\n    code: `exports.onContinuePostLogin = async (event, api) =\u003e {\n  console.log(\"bar\");\n};\"\n`,\n    deploy: true,\n    supportedTriggers: {\n        id: \"post-login\",\n        version: \"v3\",\n    },\n});\nconst loginFlow = new auth0.TriggerBinding(\"loginFlow\", {\n    trigger: \"post-login\",\n    actions: [\n        {\n            id: actionFoo.id,\n            displayName: actionFoo.name,\n        },\n        {\n            id: actionBar.id,\n            displayName: actionBar.name,\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_auth0 as auth0\n\naction_foo = auth0.Action(\"actionFoo\",\n    code=\"\"\"exports.onContinuePostLogin = async (event, api) =\u003e {\n  console.log(\"foo\");\n};\"\n\"\"\",\n    deploy=True,\n    supported_triggers=auth0.ActionSupportedTriggersArgs(\n        id=\"post-login\",\n        version=\"v3\",\n    ))\naction_bar = auth0.Action(\"actionBar\",\n    code=\"\"\"exports.onContinuePostLogin = async (event, api) =\u003e {\n  console.log(\"bar\");\n};\"\n\"\"\",\n    deploy=True,\n    supported_triggers=auth0.ActionSupportedTriggersArgs(\n        id=\"post-login\",\n        version=\"v3\",\n    ))\nlogin_flow = auth0.TriggerBinding(\"loginFlow\",\n    trigger=\"post-login\",\n    actions=[\n        auth0.TriggerBindingActionArgs(\n            id=action_foo.id,\n            display_name=action_foo.name,\n        ),\n        auth0.TriggerBindingActionArgs(\n            id=action_bar.id,\n            display_name=action_bar.name,\n        ),\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Auth0 = Pulumi.Auth0;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var actionFoo = new Auth0.Action(\"actionFoo\", new()\n    {\n        Code = @\"exports.onContinuePostLogin = async (event, api) =\u003e {\n  console.log(\"\"foo\"\");\n};\"\"\n\",\n        Deploy = true,\n        SupportedTriggers = new Auth0.Inputs.ActionSupportedTriggersArgs\n        {\n            Id = \"post-login\",\n            Version = \"v3\",\n        },\n    });\n\n    var actionBar = new Auth0.Action(\"actionBar\", new()\n    {\n        Code = @\"exports.onContinuePostLogin = async (event, api) =\u003e {\n  console.log(\"\"bar\"\");\n};\"\"\n\",\n        Deploy = true,\n        SupportedTriggers = new Auth0.Inputs.ActionSupportedTriggersArgs\n        {\n            Id = \"post-login\",\n            Version = \"v3\",\n        },\n    });\n\n    var loginFlow = new Auth0.TriggerBinding(\"loginFlow\", new()\n    {\n        Trigger = \"post-login\",\n        Actions = new[]\n        {\n            new Auth0.Inputs.TriggerBindingActionArgs\n            {\n                Id = actionFoo.Id,\n                DisplayName = actionFoo.Name,\n            },\n            new Auth0.Inputs.TriggerBindingActionArgs\n            {\n                Id = actionBar.Id,\n                DisplayName = actionBar.Name,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-auth0/sdk/v2/go/auth0\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tactionFoo, err := auth0.NewAction(ctx, \"actionFoo\", \u0026auth0.ActionArgs{\n\t\t\tCode:   pulumi.String(fmt.Sprintf(\"exports.onContinuePostLogin = async (event, api) =\u003e {\\n  console.log(\\\"foo\\\");\\n};\\\"\\n\")),\n\t\t\tDeploy: pulumi.Bool(true),\n\t\t\tSupportedTriggers: \u0026auth0.ActionSupportedTriggersArgs{\n\t\t\t\tId:      pulumi.String(\"post-login\"),\n\t\t\t\tVersion: pulumi.String(\"v3\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tactionBar, err := auth0.NewAction(ctx, \"actionBar\", \u0026auth0.ActionArgs{\n\t\t\tCode:   pulumi.String(fmt.Sprintf(\"exports.onContinuePostLogin = async (event, api) =\u003e {\\n  console.log(\\\"bar\\\");\\n};\\\"\\n\")),\n\t\t\tDeploy: pulumi.Bool(true),\n\t\t\tSupportedTriggers: \u0026auth0.ActionSupportedTriggersArgs{\n\t\t\t\tId:      pulumi.String(\"post-login\"),\n\t\t\t\tVersion: pulumi.String(\"v3\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = auth0.NewTriggerBinding(ctx, \"loginFlow\", \u0026auth0.TriggerBindingArgs{\n\t\t\tTrigger: pulumi.String(\"post-login\"),\n\t\t\tActions: auth0.TriggerBindingActionArray{\n\t\t\t\t\u0026auth0.TriggerBindingActionArgs{\n\t\t\t\t\tId:          actionFoo.ID(),\n\t\t\t\t\tDisplayName: actionFoo.Name,\n\t\t\t\t},\n\t\t\t\t\u0026auth0.TriggerBindingActionArgs{\n\t\t\t\t\tId:          actionBar.ID(),\n\t\t\t\t\tDisplayName: actionBar.Name,\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.auth0.Action;\nimport com.pulumi.auth0.ActionArgs;\nimport com.pulumi.auth0.inputs.ActionSupportedTriggersArgs;\nimport com.pulumi.auth0.TriggerBinding;\nimport com.pulumi.auth0.TriggerBindingArgs;\nimport com.pulumi.auth0.inputs.TriggerBindingActionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var actionFoo = new Action(\"actionFoo\", ActionArgs.builder()        \n            .code(\"\"\"\nexports.onContinuePostLogin = async (event, api) =\u003e {\n  console.log(\"foo\");\n};\"\n            \"\"\")\n            .deploy(true)\n            .supportedTriggers(ActionSupportedTriggersArgs.builder()\n                .id(\"post-login\")\n                .version(\"v3\")\n                .build())\n            .build());\n\n        var actionBar = new Action(\"actionBar\", ActionArgs.builder()        \n            .code(\"\"\"\nexports.onContinuePostLogin = async (event, api) =\u003e {\n  console.log(\"bar\");\n};\"\n            \"\"\")\n            .deploy(true)\n            .supportedTriggers(ActionSupportedTriggersArgs.builder()\n                .id(\"post-login\")\n                .version(\"v3\")\n                .build())\n            .build());\n\n        var loginFlow = new TriggerBinding(\"loginFlow\", TriggerBindingArgs.builder()        \n            .trigger(\"post-login\")\n            .actions(            \n                TriggerBindingActionArgs.builder()\n                    .id(actionFoo.id())\n                    .displayName(actionFoo.name())\n                    .build(),\n                TriggerBindingActionArgs.builder()\n                    .id(actionBar.id())\n                    .displayName(actionBar.name())\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  actionFoo:\n    type: auth0:Action\n    properties:\n      code: |\n        exports.onContinuePostLogin = async (event, api) =\u003e {\n          console.log(\"foo\");\n        };\"\n      deploy: true\n      supportedTriggers:\n        id: post-login\n        version: v3\n  actionBar:\n    type: auth0:Action\n    properties:\n      code: |\n        exports.onContinuePostLogin = async (event, api) =\u003e {\n          console.log(\"bar\");\n        };\"\n      deploy: true\n      supportedTriggers:\n        id: post-login\n        version: v3\n  loginFlow:\n    type: auth0:TriggerBinding\n    properties:\n      trigger: post-login\n      actions:\n        - id: ${actionFoo.id}\n          displayName: ${actionFoo.name}\n        - id: ${actionBar.id}\n          displayName: ${actionBar.name}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThis resource can be imported using the bindings trigger ID. # Example\n\n```sh\n $ pulumi import auth0:index/triggerBinding:TriggerBinding example \"post-login\"\n```\n\n ",
            "properties": {
                "actions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/auth0:index/TriggerBindingAction:TriggerBindingAction"
                    },
                    "description": "The actions bound to this trigger\n"
                },
                "trigger": {
                    "type": "string",
                    "description": "The ID of the trigger to bind with.\n"
                }
            },
            "required": [
                "actions",
                "trigger"
            ],
            "inputProperties": {
                "actions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/auth0:index/TriggerBindingAction:TriggerBindingAction"
                    },
                    "description": "The actions bound to this trigger\n"
                },
                "trigger": {
                    "type": "string",
                    "description": "The ID of the trigger to bind with.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "actions",
                "trigger"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TriggerBinding resources.\n",
                "properties": {
                    "actions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/auth0:index/TriggerBindingAction:TriggerBindingAction"
                        },
                        "description": "The actions bound to this trigger\n"
                    },
                    "trigger": {
                        "type": "string",
                        "description": "The ID of the trigger to bind with.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "auth0:index/user:User": {
            "description": "With this resource, you can manage user identities, including resetting passwords, and creating, provisioning, blocking, and deleting users.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as auth0 from \"@pulumi/auth0\";\n\nconst admin = new auth0.Role(\"admin\", {description: \"Administrator\"});\nconst user = new auth0.User(\"user\", {\n    connectionName: \"Username-Password-Authentication\",\n    userId: \"12345\",\n    username: \"unique_username\",\n    nickname: \"some.nickname\",\n    email: \"test@test.com\",\n    emailVerified: true,\n    password: `passpass$12$12`,\n    picture: \"https://www.example.com/a-valid-picture-url.jpg\",\n    roles: [admin.id],\n});\n```\n```python\nimport pulumi\nimport pulumi_auth0 as auth0\n\nadmin = auth0.Role(\"admin\", description=\"Administrator\")\nuser = auth0.User(\"user\",\n    connection_name=\"Username-Password-Authentication\",\n    user_id=\"12345\",\n    username=\"unique_username\",\n    nickname=\"some.nickname\",\n    email=\"test@test.com\",\n    email_verified=True,\n    password=\"passpass$12$12\",\n    picture=\"https://www.example.com/a-valid-picture-url.jpg\",\n    roles=[admin.id])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Auth0 = Pulumi.Auth0;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var admin = new Auth0.Role(\"admin\", new()\n    {\n        Description = \"Administrator\",\n    });\n\n    var user = new Auth0.User(\"user\", new()\n    {\n        ConnectionName = \"Username-Password-Authentication\",\n        UserId = \"12345\",\n        Username = \"unique_username\",\n        Nickname = \"some.nickname\",\n        Email = \"test@test.com\",\n        EmailVerified = true,\n        Password = \"passpass$12$12\",\n        Picture = \"https://www.example.com/a-valid-picture-url.jpg\",\n        Roles = new[]\n        {\n            admin.Id,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-auth0/sdk/v2/go/auth0\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tadmin, err := auth0.NewRole(ctx, \"admin\", \u0026auth0.RoleArgs{\n\t\t\tDescription: pulumi.String(\"Administrator\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = auth0.NewUser(ctx, \"user\", \u0026auth0.UserArgs{\n\t\t\tConnectionName: pulumi.String(\"Username-Password-Authentication\"),\n\t\t\tUserId:         pulumi.String(\"12345\"),\n\t\t\tUsername:       pulumi.String(\"unique_username\"),\n\t\t\tNickname:       pulumi.String(\"some.nickname\"),\n\t\t\tEmail:          pulumi.String(\"test@test.com\"),\n\t\t\tEmailVerified:  pulumi.Bool(true),\n\t\t\tPassword:       pulumi.String(fmt.Sprintf(\"passpass$12$12\")),\n\t\t\tPicture:        pulumi.String(\"https://www.example.com/a-valid-picture-url.jpg\"),\n\t\t\tRoles: pulumi.StringArray{\n\t\t\t\tadmin.ID(),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.auth0.Role;\nimport com.pulumi.auth0.RoleArgs;\nimport com.pulumi.auth0.User;\nimport com.pulumi.auth0.UserArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var admin = new Role(\"admin\", RoleArgs.builder()        \n            .description(\"Administrator\")\n            .build());\n\n        var user = new User(\"user\", UserArgs.builder()        \n            .connectionName(\"Username-Password-Authentication\")\n            .userId(\"12345\")\n            .username(\"unique_username\")\n            .nickname(\"some.nickname\")\n            .email(\"test@test.com\")\n            .emailVerified(true)\n            .password(\"passpass$12$12\")\n            .picture(\"https://www.example.com/a-valid-picture-url.jpg\")\n            .roles(admin.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  user:\n    type: auth0:User\n    properties:\n      connectionName: Username-Password-Authentication\n      userId: '12345'\n      username: unique_username\n      nickname: some.nickname\n      email: test@test.com\n      emailVerified: true\n      password: passpass$12$12\n      picture: https://www.example.com/a-valid-picture-url.jpg\n      roles:\n        - ${admin.id}\n  admin:\n    type: auth0:Role\n    properties:\n      description: Administrator\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThis resource can be imported using the user ID. # Example\n\n```sh\n $ pulumi import auth0:index/user:User user auth0|111111111111111111111111\n```\n\n ",
            "properties": {
                "appMetadata": {
                    "type": "string",
                    "description": "Custom fields that store info about the user that impact the user's core functionality, such as how an application functions or what the user can access. Examples include support plans and IDs for external accounts.\n"
                },
                "blocked": {
                    "type": "boolean",
                    "description": "Indicates whether the user is blocked or not.\n"
                },
                "connectionName": {
                    "type": "string",
                    "description": "Name of the connection from which the user information was sourced.\n"
                },
                "email": {
                    "type": "string",
                    "description": "Email address of the user.\n"
                },
                "emailVerified": {
                    "type": "boolean",
                    "description": "Indicates whether the email address has been verified.\n"
                },
                "familyName": {
                    "type": "string",
                    "description": "Family name of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled 'Sync user profile attributes at each login'. For more information, see: [Configure Identity Provider Connection for User Profile Updates](https://auth0.com/docs/manage-users/user-accounts/user-profiles/configure-connection-sync-with-auth0).\n"
                },
                "givenName": {
                    "type": "string",
                    "description": "Given name of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled 'Sync user profile attributes at each login'. For more information, see: [Configure Identity Provider Connection for User Profile Updates](https://auth0.com/docs/manage-users/user-accounts/user-profiles/configure-connection-sync-with-auth0).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled 'Sync user profile attributes at each login'. For more information, see: [Configure Identity Provider Connection for User Profile Updates](https://auth0.com/docs/manage-users/user-accounts/user-profiles/configure-connection-sync-with-auth0).\n"
                },
                "nickname": {
                    "type": "string",
                    "description": "Preferred nickname or alias of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled 'Sync user profile attributes at each login'. For more information, see: [Configure Identity Provider Connection for User Profile Updates](https://auth0.com/docs/manage-users/user-accounts/user-profiles/configure-connection-sync-with-auth0).\n"
                },
                "password": {
                    "type": "string",
                    "description": "Initial password for this user. Required for non-passwordless connections (SMS and email).\n",
                    "secret": true
                },
                "phoneNumber": {
                    "type": "string",
                    "description": "Phone number for the user; follows the E.164 recommendation. Used for SMS connections.\n"
                },
                "phoneVerified": {
                    "type": "boolean",
                    "description": "Indicates whether the phone number has been verified.\n"
                },
                "picture": {
                    "type": "string",
                    "description": "Picture of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled 'Sync user profile attributes at each login'. For more information, see: [Configure Identity Provider Connection for User Profile Updates](https://auth0.com/docs/manage-users/user-accounts/user-profiles/configure-connection-sync-with-auth0).\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of IDs of roles assigned to the user.\n"
                },
                "userId": {
                    "type": "string",
                    "description": "ID of the user.\n"
                },
                "userMetadata": {
                    "type": "string",
                    "description": "Custom fields that store info about the user that does not impact a user's core functionality. Examples include work address, home address, and user preferences.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username of the user. Only valid if the connection requires a username.\n"
                },
                "verifyEmail": {
                    "type": "boolean",
                    "description": "Indicates whether the user will receive a verification email after creation. Overrides behavior of `email_verified` parameter.\n"
                }
            },
            "required": [
                "connectionName",
                "name",
                "nickname",
                "picture",
                "userId"
            ],
            "inputProperties": {
                "appMetadata": {
                    "type": "string",
                    "description": "Custom fields that store info about the user that impact the user's core functionality, such as how an application functions or what the user can access. Examples include support plans and IDs for external accounts.\n"
                },
                "blocked": {
                    "type": "boolean",
                    "description": "Indicates whether the user is blocked or not.\n"
                },
                "connectionName": {
                    "type": "string",
                    "description": "Name of the connection from which the user information was sourced.\n"
                },
                "email": {
                    "type": "string",
                    "description": "Email address of the user.\n"
                },
                "emailVerified": {
                    "type": "boolean",
                    "description": "Indicates whether the email address has been verified.\n"
                },
                "familyName": {
                    "type": "string",
                    "description": "Family name of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled 'Sync user profile attributes at each login'. For more information, see: [Configure Identity Provider Connection for User Profile Updates](https://auth0.com/docs/manage-users/user-accounts/user-profiles/configure-connection-sync-with-auth0).\n"
                },
                "givenName": {
                    "type": "string",
                    "description": "Given name of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled 'Sync user profile attributes at each login'. For more information, see: [Configure Identity Provider Connection for User Profile Updates](https://auth0.com/docs/manage-users/user-accounts/user-profiles/configure-connection-sync-with-auth0).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled 'Sync user profile attributes at each login'. For more information, see: [Configure Identity Provider Connection for User Profile Updates](https://auth0.com/docs/manage-users/user-accounts/user-profiles/configure-connection-sync-with-auth0).\n"
                },
                "nickname": {
                    "type": "string",
                    "description": "Preferred nickname or alias of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled 'Sync user profile attributes at each login'. For more information, see: [Configure Identity Provider Connection for User Profile Updates](https://auth0.com/docs/manage-users/user-accounts/user-profiles/configure-connection-sync-with-auth0).\n"
                },
                "password": {
                    "type": "string",
                    "description": "Initial password for this user. Required for non-passwordless connections (SMS and email).\n",
                    "secret": true
                },
                "phoneNumber": {
                    "type": "string",
                    "description": "Phone number for the user; follows the E.164 recommendation. Used for SMS connections.\n"
                },
                "phoneVerified": {
                    "type": "boolean",
                    "description": "Indicates whether the phone number has been verified.\n"
                },
                "picture": {
                    "type": "string",
                    "description": "Picture of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled 'Sync user profile attributes at each login'. For more information, see: [Configure Identity Provider Connection for User Profile Updates](https://auth0.com/docs/manage-users/user-accounts/user-profiles/configure-connection-sync-with-auth0).\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of IDs of roles assigned to the user.\n"
                },
                "userId": {
                    "type": "string",
                    "description": "ID of the user.\n"
                },
                "userMetadata": {
                    "type": "string",
                    "description": "Custom fields that store info about the user that does not impact a user's core functionality. Examples include work address, home address, and user preferences.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username of the user. Only valid if the connection requires a username.\n"
                },
                "verifyEmail": {
                    "type": "boolean",
                    "description": "Indicates whether the user will receive a verification email after creation. Overrides behavior of `email_verified` parameter.\n"
                }
            },
            "requiredInputs": [
                "connectionName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering User resources.\n",
                "properties": {
                    "appMetadata": {
                        "type": "string",
                        "description": "Custom fields that store info about the user that impact the user's core functionality, such as how an application functions or what the user can access. Examples include support plans and IDs for external accounts.\n"
                    },
                    "blocked": {
                        "type": "boolean",
                        "description": "Indicates whether the user is blocked or not.\n"
                    },
                    "connectionName": {
                        "type": "string",
                        "description": "Name of the connection from which the user information was sourced.\n"
                    },
                    "email": {
                        "type": "string",
                        "description": "Email address of the user.\n"
                    },
                    "emailVerified": {
                        "type": "boolean",
                        "description": "Indicates whether the email address has been verified.\n"
                    },
                    "familyName": {
                        "type": "string",
                        "description": "Family name of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled 'Sync user profile attributes at each login'. For more information, see: [Configure Identity Provider Connection for User Profile Updates](https://auth0.com/docs/manage-users/user-accounts/user-profiles/configure-connection-sync-with-auth0).\n"
                    },
                    "givenName": {
                        "type": "string",
                        "description": "Given name of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled 'Sync user profile attributes at each login'. For more information, see: [Configure Identity Provider Connection for User Profile Updates](https://auth0.com/docs/manage-users/user-accounts/user-profiles/configure-connection-sync-with-auth0).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled 'Sync user profile attributes at each login'. For more information, see: [Configure Identity Provider Connection for User Profile Updates](https://auth0.com/docs/manage-users/user-accounts/user-profiles/configure-connection-sync-with-auth0).\n"
                    },
                    "nickname": {
                        "type": "string",
                        "description": "Preferred nickname or alias of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled 'Sync user profile attributes at each login'. For more information, see: [Configure Identity Provider Connection for User Profile Updates](https://auth0.com/docs/manage-users/user-accounts/user-profiles/configure-connection-sync-with-auth0).\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "Initial password for this user. Required for non-passwordless connections (SMS and email).\n",
                        "secret": true
                    },
                    "phoneNumber": {
                        "type": "string",
                        "description": "Phone number for the user; follows the E.164 recommendation. Used for SMS connections.\n"
                    },
                    "phoneVerified": {
                        "type": "boolean",
                        "description": "Indicates whether the phone number has been verified.\n"
                    },
                    "picture": {
                        "type": "string",
                        "description": "Picture of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled 'Sync user profile attributes at each login'. For more information, see: [Configure Identity Provider Connection for User Profile Updates](https://auth0.com/docs/manage-users/user-accounts/user-profiles/configure-connection-sync-with-auth0).\n"
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Set of IDs of roles assigned to the user.\n"
                    },
                    "userId": {
                        "type": "string",
                        "description": "ID of the user.\n"
                    },
                    "userMetadata": {
                        "type": "string",
                        "description": "Custom fields that store info about the user that does not impact a user's core functionality. Examples include work address, home address, and user preferences.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username of the user. Only valid if the connection requires a username.\n"
                    },
                    "verifyEmail": {
                        "type": "boolean",
                        "description": "Indicates whether the user will receive a verification email after creation. Overrides behavior of `email_verified` parameter.\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "auth0:index/getClient:getClient": {
            "description": "Data source to retrieve a specific Auth0 Application client by 'client_id' or 'name'.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as auth0 from \"@pulumi/auth0\";\n\nconst some-client-by-name = auth0.getClient({\n    name: \"Name of my Application\",\n});\nconst some-client-by-id = auth0.getClient({\n    clientId: \"abcdefghkijklmnopqrstuvwxyz0123456789\",\n});\n```\n```python\nimport pulumi\nimport pulumi_auth0 as auth0\n\nsome_client_by_name = auth0.get_client(name=\"Name of my Application\")\nsome_client_by_id = auth0.get_client(client_id=\"abcdefghkijklmnopqrstuvwxyz0123456789\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Auth0 = Pulumi.Auth0;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var some_client_by_name = Auth0.GetClient.Invoke(new()\n    {\n        Name = \"Name of my Application\",\n    });\n\n    var some_client_by_id = Auth0.GetClient.Invoke(new()\n    {\n        ClientId = \"abcdefghkijklmnopqrstuvwxyz0123456789\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-auth0/sdk/v2/go/auth0\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := auth0.LookupClient(ctx, \u0026auth0.LookupClientArgs{\n\t\t\tName: pulumi.StringRef(\"Name of my Application\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = auth0.LookupClient(ctx, \u0026auth0.LookupClientArgs{\n\t\t\tClientId: pulumi.StringRef(\"abcdefghkijklmnopqrstuvwxyz0123456789\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.auth0.Auth0Functions;\nimport com.pulumi.auth0.inputs.GetClientArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var some-client-by-name = Auth0Functions.getClient(GetClientArgs.builder()\n            .name(\"Name of my Application\")\n            .build());\n\n        final var some-client-by-id = Auth0Functions.getClient(GetClientArgs.builder()\n            .clientId(\"abcdefghkijklmnopqrstuvwxyz0123456789\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  some-client-by-name:\n    fn::invoke:\n      Function: auth0:getClient\n      Arguments:\n        name: Name of my Application\n  some-client-by-id:\n    fn::invoke:\n      Function: auth0:getClient\n      Arguments:\n        clientId: abcdefghkijklmnopqrstuvwxyz0123456789\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getClient.\n",
                "properties": {
                    "clientId": {
                        "type": "string",
                        "description": "The ID of the client. If not provided, `name` must be set.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the client. If not provided, `client_id` must be set.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getClient.\n",
                "properties": {
                    "addons": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/auth0:index/getClientAddon:getClientAddon"
                        },
                        "description": "Addons enabled for this client and their associated configurations.\n"
                    },
                    "allowedClients": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of applications ID's that will be allowed to make delegation request. By default, all applications will be allowed.\n"
                    },
                    "allowedLogoutUrls": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "URLs that Auth0 may redirect to after logout.\n"
                    },
                    "allowedOrigins": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "URLs that represent valid origins for cross-origin resource sharing. By default, all your callback URLs will be allowed.\n"
                    },
                    "appType": {
                        "type": "string",
                        "description": "Type of application the client represents. Possible values are: `native`, `spa`, `regular_web`, `non_interactive`, `sso_integration`. Specific SSO integrations types accepted as well are: `rms`, `box`, `cloudbees`, `concur`, `dropbox`, `mscrm`, `echosign`, `egnyte`, `newrelic`, `office365`, `salesforce`, `sentry`, `sharepoint`, `slack`, `springcm`, `zendesk`, `zoom`.\n"
                    },
                    "callbacks": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "URLs that Auth0 may call back to after a user authenticates for the client. Make sure to specify the protocol (https://) otherwise the callback may fail in some cases. With the exception of custom URI schemes for native clients, all callbacks should use protocol https://.\n"
                    },
                    "clientAliases": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of audiences/realms for SAML protocol. Used by the wsfed addon.\n"
                    },
                    "clientId": {
                        "type": "string",
                        "description": "The ID of the client. If not provided, `name` must be set.\n"
                    },
                    "clientMetadata": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Metadata associated with the client, in the form of an object with string values (max 255 chars). Maximum of 10 metadata properties allowed. Field names (max 255 chars) are alphanumeric and may only include the following special characters: `:,-+=_*?\"/\\()\u003c\u003e@ [Tab] [Space]`.\n"
                    },
                    "clientSecret": {
                        "type": "string"
                    },
                    "crossOriginAuth": {
                        "type": "boolean",
                        "description": "Whether this client can be used to make cross-origin authentication requests (`true`) or it is not allowed to make such requests (`false`). Requires the `coa_toggle_enabled` feature flag to be enabled on the tenant by the support team.\n"
                    },
                    "crossOriginLoc": {
                        "type": "string",
                        "description": "URL of the location in your site where the cross-origin verification takes place for the cross-origin auth flow when performing authentication in your own domain instead of Auth0 Universal Login page.\n"
                    },
                    "customLoginPage": {
                        "type": "string",
                        "description": "The content (HTML, CSS, JS) of the custom login page.\n"
                    },
                    "customLoginPageOn": {
                        "type": "boolean",
                        "description": "Indicates whether a custom login page is to be used.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the purpose of the client.\n"
                    },
                    "encryptionKey": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Encryption used for WS-Fed responses with this client.\n"
                    },
                    "formTemplate": {
                        "type": "string",
                        "description": "HTML form template to be used for WS-Federation.\n"
                    },
                    "grantTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Types of grants that this client is authorized to use.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "initiateLoginUri": {
                        "type": "string",
                        "description": "Initiate login URI. Must be HTTPS or an empty string.\n"
                    },
                    "isFirstParty": {
                        "type": "boolean",
                        "description": "Indicates whether this client is a first-party client.\n"
                    },
                    "isTokenEndpointIpHeaderTrusted": {
                        "type": "boolean",
                        "description": "Indicates whether the token endpoint IP header is trusted.\n"
                    },
                    "jwtConfigurations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/auth0:index/getClientJwtConfiguration:getClientJwtConfiguration"
                        },
                        "description": "Configuration settings for the JWTs issued for this client.\n"
                    },
                    "logoUri": {
                        "type": "string",
                        "description": "URL of the logo for the client. Recommended size is 150px x 150px. If none is set, the default badge for the application type will be shown.\n"
                    },
                    "mobiles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/auth0:index/getClientMobile:getClientMobile"
                        },
                        "description": "Additional configuration for native mobile apps.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the client. If not provided, `client_id` must be set.\n"
                    },
                    "nativeSocialLogins": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/auth0:index/getClientNativeSocialLogin:getClientNativeSocialLogin"
                        },
                        "description": "Configuration settings to toggle native social login for mobile native applications. Once this is set it must stay set, with both resources set to `false` in order to change the `app_type`.\n"
                    },
                    "oidcConformant": {
                        "type": "boolean",
                        "description": "Indicates whether this client will conform to strict OIDC specifications.\n"
                    },
                    "organizationRequireBehavior": {
                        "type": "string",
                        "description": "Defines how to proceed during an authentication transaction when `organization_usage = \"require\"`. Can be `no_prompt` (default) or `pre_login_prompt`.\n"
                    },
                    "organizationUsage": {
                        "type": "string",
                        "description": "Defines how to proceed during an authentication transaction with regards to an organization. Can be `deny` (default), `allow` or `require`.\n"
                    },
                    "refreshTokens": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/auth0:index/getClientRefreshToken:getClientRefreshToken"
                        },
                        "description": "Configuration settings for the refresh tokens issued for this client.\n"
                    },
                    "signingKeys": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "additionalProperties": {
                                "$ref": "pulumi.json#/Any"
                            }
                        },
                        "description": "List containing a map of the public cert of the signing key and the public cert of the signing key in PKCS7.\n"
                    },
                    "sso": {
                        "type": "boolean",
                        "description": "Applies only to SSO clients and determines whether Auth0 will handle Single Sign-On (true) or whether the identity provider will (false).\n"
                    },
                    "ssoDisabled": {
                        "type": "boolean",
                        "description": "Indicates whether or not SSO is disabled.\n"
                    },
                    "tokenEndpointAuthMethod": {
                        "type": "string",
                        "description": "Defines the requested authentication method for the token endpoint. Options include `none` (public client without a client secret), `client_secret_post` (client uses HTTP POST parameters), `client_secret_basic` (client uses HTTP Basic).\n"
                    },
                    "webOrigins": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "URLs that represent valid web origins for use with web message response mode.\n"
                    }
                },
                "type": "object",
                "required": [
                    "addons",
                    "allowedClients",
                    "allowedLogoutUrls",
                    "allowedOrigins",
                    "appType",
                    "callbacks",
                    "clientAliases",
                    "clientMetadata",
                    "clientSecret",
                    "crossOriginAuth",
                    "crossOriginLoc",
                    "customLoginPage",
                    "customLoginPageOn",
                    "description",
                    "encryptionKey",
                    "formTemplate",
                    "grantTypes",
                    "initiateLoginUri",
                    "isFirstParty",
                    "isTokenEndpointIpHeaderTrusted",
                    "jwtConfigurations",
                    "logoUri",
                    "mobiles",
                    "nativeSocialLogins",
                    "oidcConformant",
                    "organizationRequireBehavior",
                    "organizationUsage",
                    "refreshTokens",
                    "signingKeys",
                    "sso",
                    "ssoDisabled",
                    "tokenEndpointAuthMethod",
                    "webOrigins",
                    "id"
                ]
            }
        },
        "auth0:index/getGlobalClient:getGlobalClient": {
            "description": "Retrieves a tenant's global Auth0 Application client.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as auth0 from \"@pulumi/auth0\";\n\nconst global = auth0.getGlobalClient({});\n```\n```python\nimport pulumi\nimport pulumi_auth0 as auth0\n\nglobal_ = auth0.get_global_client()\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Auth0 = Pulumi.Auth0;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @global = Auth0.GetGlobalClient.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-auth0/sdk/v2/go/auth0\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := auth0.LookupGlobalClient(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.auth0.Auth0Functions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var global = Auth0Functions.getGlobalClient();\n\n    }\n}\n```\n```yaml\nvariables:\n  global:\n    fn::invoke:\n      Function: auth0:getGlobalClient\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getGlobalClient.\n",
                "properties": {
                    "addons": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/auth0:index/getGlobalClientAddon:getGlobalClientAddon"
                        },
                        "description": "Addons enabled for this client and their associated configurations.\n"
                    },
                    "allowedClients": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of applications ID's that will be allowed to make delegation request. By default, all applications will be allowed.\n"
                    },
                    "allowedLogoutUrls": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "URLs that Auth0 may redirect to after logout.\n"
                    },
                    "allowedOrigins": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "URLs that represent valid origins for cross-origin resource sharing. By default, all your callback URLs will be allowed.\n"
                    },
                    "appType": {
                        "type": "string",
                        "description": "Type of application the client represents. Possible values are: `native`, `spa`, `regular_web`, `non_interactive`, `sso_integration`. Specific SSO integrations types accepted as well are: `rms`, `box`, `cloudbees`, `concur`, `dropbox`, `mscrm`, `echosign`, `egnyte`, `newrelic`, `office365`, `salesforce`, `sentry`, `sharepoint`, `slack`, `springcm`, `zendesk`, `zoom`.\n"
                    },
                    "callbacks": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "URLs that Auth0 may call back to after a user authenticates for the client. Make sure to specify the protocol (https://) otherwise the callback may fail in some cases. With the exception of custom URI schemes for native clients, all callbacks should use protocol https://.\n"
                    },
                    "clientAliases": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of audiences/realms for SAML protocol. Used by the wsfed addon.\n"
                    },
                    "clientId": {
                        "type": "string",
                        "description": "The ID of the client.\n"
                    },
                    "clientMetadata": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Metadata associated with the client, in the form of an object with string values (max 255 chars). Maximum of 10 metadata properties allowed. Field names (max 255 chars) are alphanumeric and may only include the following special characters: `:,-+=_*?\"/\\()\u003c\u003e@ [Tab] [Space]`.\n"
                    },
                    "clientSecret": {
                        "type": "string"
                    },
                    "crossOriginAuth": {
                        "type": "boolean",
                        "description": "Whether this client can be used to make cross-origin authentication requests (`true`) or it is not allowed to make such requests (`false`). Requires the `coa_toggle_enabled` feature flag to be enabled on the tenant by the support team.\n"
                    },
                    "crossOriginLoc": {
                        "type": "string",
                        "description": "URL of the location in your site where the cross-origin verification takes place for the cross-origin auth flow when performing authentication in your own domain instead of Auth0 Universal Login page.\n"
                    },
                    "customLoginPage": {
                        "type": "string",
                        "description": "The content (HTML, CSS, JS) of the custom login page.\n"
                    },
                    "customLoginPageOn": {
                        "type": "boolean",
                        "description": "Indicates whether a custom login page is to be used.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the purpose of the client.\n"
                    },
                    "encryptionKey": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Encryption used for WS-Fed responses with this client.\n"
                    },
                    "formTemplate": {
                        "type": "string",
                        "description": "HTML form template to be used for WS-Federation.\n"
                    },
                    "grantTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Types of grants that this client is authorized to use.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "initiateLoginUri": {
                        "type": "string",
                        "description": "Initiate login URI. Must be HTTPS or an empty string.\n"
                    },
                    "isFirstParty": {
                        "type": "boolean",
                        "description": "Indicates whether this client is a first-party client.\n"
                    },
                    "isTokenEndpointIpHeaderTrusted": {
                        "type": "boolean",
                        "description": "Indicates whether the token endpoint IP header is trusted.\n"
                    },
                    "jwtConfigurations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/auth0:index/getGlobalClientJwtConfiguration:getGlobalClientJwtConfiguration"
                        },
                        "description": "Configuration settings for the JWTs issued for this client.\n"
                    },
                    "logoUri": {
                        "type": "string",
                        "description": "URL of the logo for the client. Recommended size is 150px x 150px. If none is set, the default badge for the application type will be shown.\n"
                    },
                    "mobiles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/auth0:index/getGlobalClientMobile:getGlobalClientMobile"
                        },
                        "description": "Additional configuration for native mobile apps.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the client.\n"
                    },
                    "nativeSocialLogins": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/auth0:index/getGlobalClientNativeSocialLogin:getGlobalClientNativeSocialLogin"
                        },
                        "description": "Configuration settings to toggle native social login for mobile native applications. Once this is set it must stay set, with both resources set to `false` in order to change the `app_type`.\n"
                    },
                    "oidcConformant": {
                        "type": "boolean",
                        "description": "Indicates whether this client will conform to strict OIDC specifications.\n"
                    },
                    "organizationRequireBehavior": {
                        "type": "string",
                        "description": "Defines how to proceed during an authentication transaction when `organization_usage = \"require\"`. Can be `no_prompt` (default) or `pre_login_prompt`.\n"
                    },
                    "organizationUsage": {
                        "type": "string",
                        "description": "Defines how to proceed during an authentication transaction with regards to an organization. Can be `deny` (default), `allow` or `require`.\n"
                    },
                    "refreshTokens": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/auth0:index/getGlobalClientRefreshToken:getGlobalClientRefreshToken"
                        },
                        "description": "Configuration settings for the refresh tokens issued for this client.\n"
                    },
                    "signingKeys": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "additionalProperties": {
                                "$ref": "pulumi.json#/Any"
                            }
                        },
                        "description": "List containing a map of the public cert of the signing key and the public cert of the signing key in PKCS7.\n"
                    },
                    "sso": {
                        "type": "boolean",
                        "description": "Applies only to SSO clients and determines whether Auth0 will handle Single Sign-On (true) or whether the identity provider will (false).\n"
                    },
                    "ssoDisabled": {
                        "type": "boolean",
                        "description": "Indicates whether or not SSO is disabled.\n"
                    },
                    "tokenEndpointAuthMethod": {
                        "type": "string",
                        "description": "Defines the requested authentication method for the token endpoint. Options include `none` (public client without a client secret), `client_secret_post` (client uses HTTP POST parameters), `client_secret_basic` (client uses HTTP Basic).\n"
                    },
                    "webOrigins": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "URLs that represent valid web origins for use with web message response mode.\n"
                    }
                },
                "type": "object",
                "required": [
                    "addons",
                    "allowedClients",
                    "allowedLogoutUrls",
                    "allowedOrigins",
                    "appType",
                    "callbacks",
                    "clientAliases",
                    "clientId",
                    "clientMetadata",
                    "clientSecret",
                    "crossOriginAuth",
                    "crossOriginLoc",
                    "customLoginPage",
                    "customLoginPageOn",
                    "description",
                    "encryptionKey",
                    "formTemplate",
                    "grantTypes",
                    "initiateLoginUri",
                    "isFirstParty",
                    "isTokenEndpointIpHeaderTrusted",
                    "jwtConfigurations",
                    "logoUri",
                    "mobiles",
                    "name",
                    "nativeSocialLogins",
                    "oidcConformant",
                    "organizationRequireBehavior",
                    "organizationUsage",
                    "refreshTokens",
                    "signingKeys",
                    "sso",
                    "ssoDisabled",
                    "tokenEndpointAuthMethod",
                    "webOrigins",
                    "id"
                ]
            }
        },
        "auth0:index/getTenant:getTenant": {
            "description": "Use this data source to access information about the tenant this provider is configured to access.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as auth0 from \"@pulumi/auth0\";\n\nconst myTenant = auth0.getTenant({});\n```\n```python\nimport pulumi\nimport pulumi_auth0 as auth0\n\nmy_tenant = auth0.get_tenant()\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Auth0 = Pulumi.Auth0;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myTenant = Auth0.GetTenant.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-auth0/sdk/v2/go/auth0\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := auth0.LookupTenant(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.auth0.Auth0Functions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myTenant = Auth0Functions.getTenant();\n\n    }\n}\n```\n```yaml\nvariables:\n  myTenant:\n    fn::invoke:\n      Function: auth0:getTenant\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getTenant.\n",
                "properties": {
                    "domain": {
                        "type": "string",
                        "description": "Your Auth0 domain name.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "managementApiIdentifier": {
                        "type": "string",
                        "description": "The identifier value of the built-in Management API resource server, which can be used as an audience when configuring client grants.\n"
                    }
                },
                "type": "object",
                "required": [
                    "domain",
                    "managementApiIdentifier",
                    "id"
                ]
            }
        }
    }
}