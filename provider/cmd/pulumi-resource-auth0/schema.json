{
    "name": "auth0",
    "description": "A Pulumi package for creating and managing auth0 cloud resources.",
    "keywords": [
        "pulumi",
        "auth0"
    ],
    "homepage": "https://pulumi.io",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`auth0` Terraform Provider](https://github.com/auth0/terraform-provider-auth0).",
    "repository": "https://github.com/pulumi/pulumi-auth0",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "compatibility": "tfbridge20"
        },
        "go": {
            "importBasePath": "github.com/pulumi/pulumi-auth0/sdk/v3/go/auth0",
            "generateResourceContainerTypes": true,
            "generateExtraInputTypes": true
        },
        "nodejs": {
            "packageDescription": "A Pulumi package for creating and managing auth0 cloud resources.",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/auth0/terraform-provider-auth0)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-auth0` repo](https://github.com/pulumi/pulumi-auth0/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-auth0` repo](https://github.com/auth0/terraform-provider-auth0/issues).",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "compatibility": "tfbridge20",
            "disableUnionOutputTypes": true
        },
        "python": {
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            },
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/auth0/terraform-provider-auth0)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-auth0` repo](https://github.com/pulumi/pulumi-auth0/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-auth0` repo](https://github.com/auth0/terraform-provider-auth0/issues).",
            "compatibility": "tfbridge20",
            "pyproject": {
                "enabled": true
            }
        }
    },
    "config": {
        "variables": {
            "apiToken": {
                "type": "string",
                "description": "Your Auth0 [management api access\ntoken](https://auth0.com/docs/security/tokens/access-tokens/management-api-access-tokens). It can also be sourced from\nthe `AUTH0_API_TOKEN` environment variable. It can be used instead of `client_id` + `client_secret`. If both are\nspecified, `api_token` will be used over `client_id` + `client_secret` fields.\n"
            },
            "audience": {
                "type": "string",
                "description": "Your Auth0 audience when using a custom domain. It can also be sourced from the `AUTH0_AUDIENCE` environment variable.\n"
            },
            "clientId": {
                "type": "string",
                "description": "Your Auth0 client ID. It can also be sourced from the `AUTH0_CLIENT_ID` environment variable.\n"
            },
            "clientSecret": {
                "type": "string",
                "description": "Your Auth0 client secret. It can also be sourced from the `AUTH0_CLIENT_SECRET` environment variable.\n"
            },
            "debug": {
                "type": "boolean",
                "description": "Indicates whether to turn on debug mode.\n",
                "defaultInfo": {
                    "environment": [
                        "AUTH0_DEBUG"
                    ]
                }
            },
            "domain": {
                "type": "string",
                "description": "Your Auth0 domain name. It can also be sourced from the `AUTH0_DOMAIN` environment variable.\n"
            }
        }
    },
    "types": {
        "auth0:index/ActionDependency:ActionDependency": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Dependency name, e.g. `lodash`.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Dependency version, e.g. `latest` or `4.17.21`.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "version"
            ]
        },
        "auth0:index/ActionSecret:ActionSecret": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Secret name.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Secret value.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ]
        },
        "auth0:index/ActionSupportedTriggers:ActionSupportedTriggers": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The trigger ID.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The trigger version. This regulates which `runtime` versions are supported.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "version"
            ]
        },
        "auth0:index/AttackProtectionBreachedPasswordDetection:AttackProtectionBreachedPasswordDetection": {
            "properties": {
                "adminNotificationFrequencies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "When `admin_notification` is enabled within the `shields` property, determines how often email notifications are sent. Possible values: `immediately`, `daily`, `weekly`, `monthly`.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether breached password detection is active.\n"
                },
                "method": {
                    "type": "string",
                    "description": "The subscription level for breached password detection methods. Use \"enhanced\" to enable Credential Guard. Possible values: `standard`, `enhanced`.\n"
                },
                "preUserRegistration": {
                    "$ref": "#/types/auth0:index/AttackProtectionBreachedPasswordDetectionPreUserRegistration:AttackProtectionBreachedPasswordDetectionPreUserRegistration",
                    "description": "Configuration options that apply before every user registration attempt. Only available on public tenants.\n"
                },
                "shields": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Action to take when a breached password is detected. Options include: `block` (block compromised user accounts), `user_notification` (send an email to user when we detect that they are using compromised credentials) and `admin_notification` (send an email with a summary of the number of accounts logging in with compromised credentials).\n"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "adminNotificationFrequencies",
                        "enabled",
                        "method",
                        "preUserRegistration",
                        "shields"
                    ]
                }
            }
        },
        "auth0:index/AttackProtectionBreachedPasswordDetectionPreUserRegistration:AttackProtectionBreachedPasswordDetectionPreUserRegistration": {
            "properties": {
                "shields": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Action to take when a breached password is detected during a signup. Possible values: `block` (block compromised credentials for new accounts), `admin_notification` (send an email notification with a summary of compromised credentials in new accounts).\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "shields"
                    ]
                }
            }
        },
        "auth0:index/AttackProtectionBruteForceProtection:AttackProtectionBruteForceProtection": {
            "properties": {
                "allowlists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of trusted IP addresses that will not have attack protection enforced against them. This field allows you to specify multiple IP addresses, or ranges. You can use IPv4 or IPv6 addresses and CIDR notation.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether brute force attack protections are active.\n"
                },
                "maxAttempts": {
                    "type": "integer",
                    "description": "Maximum number of consecutive failed login attempts from a single user before blocking is triggered. Only available on public tenants.\n"
                },
                "mode": {
                    "type": "string",
                    "description": "Determines whether the IP address is used when counting failed attempts. Possible values: `count_per_identifier_and_ip` (lockout an account from a given IP Address) or `count_per_identifier` (lockout an account regardless of IP Address).\n"
                },
                "shields": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Action to take when a brute force protection threshold is violated. Possible values: `block` (block login attempts for a flagged user account), `user_notification` (send an email to user when their account has been blocked).\n"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "allowlists",
                        "enabled",
                        "maxAttempts",
                        "mode",
                        "shields"
                    ]
                }
            }
        },
        "auth0:index/AttackProtectionSuspiciousIpThrottling:AttackProtectionSuspiciousIpThrottling": {
            "properties": {
                "allowlists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of trusted IP addresses that will not have attack protection enforced against them. This field allows you to specify multiple IP addresses, or ranges. You can use IPv4 or IPv6 addresses and CIDR notation.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether suspicious IP throttling attack protections are active.\n"
                },
                "preLogin": {
                    "$ref": "#/types/auth0:index/AttackProtectionSuspiciousIpThrottlingPreLogin:AttackProtectionSuspiciousIpThrottlingPreLogin",
                    "description": "Configuration options that apply before every login attempt. Only available on public tenants.\n"
                },
                "preUserRegistration": {
                    "$ref": "#/types/auth0:index/AttackProtectionSuspiciousIpThrottlingPreUserRegistration:AttackProtectionSuspiciousIpThrottlingPreUserRegistration",
                    "description": "Configuration options that apply before every user registration attempt. Only available on public tenants.\n"
                },
                "shields": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Action to take when a suspicious IP throttling threshold is violated. Possible values: `block` (throttle traffic from an IP address when there is a high number of login attempts targeting too many different accounts), `admin_notification` (send an email notification when traffic is throttled on one or more IP addresses due to high-velocity traffic).\n"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "allowlists",
                        "enabled",
                        "preLogin",
                        "preUserRegistration",
                        "shields"
                    ]
                }
            }
        },
        "auth0:index/AttackProtectionSuspiciousIpThrottlingPreLogin:AttackProtectionSuspiciousIpThrottlingPreLogin": {
            "properties": {
                "maxAttempts": {
                    "type": "integer",
                    "description": "Maximum number of consecutive failed login attempts from a single user before blocking is triggered. Only available on public tenants.\n"
                },
                "rate": {
                    "type": "integer",
                    "description": "Interval of time, given in milliseconds at which new login tokens will become available after they have been used by an IP address. Each login attempt will be added on the defined throttling rate.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "maxAttempts",
                        "rate"
                    ]
                }
            }
        },
        "auth0:index/AttackProtectionSuspiciousIpThrottlingPreUserRegistration:AttackProtectionSuspiciousIpThrottlingPreUserRegistration": {
            "properties": {
                "maxAttempts": {
                    "type": "integer",
                    "description": "Maximum number of consecutive failed login attempts from a single user before blocking is triggered. Only available on public tenants.\n"
                },
                "rate": {
                    "type": "integer",
                    "description": "Interval of time, given in milliseconds at which new login tokens will become available after they have been used by an IP address. Each login attempt will be added on the defined throttling rate.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "maxAttempts",
                        "rate"
                    ]
                }
            }
        },
        "auth0:index/BrandingColors:BrandingColors": {
            "properties": {
                "pageBackground": {
                    "type": "string",
                    "description": "Background color of login pages in hexadecimal.\n"
                },
                "primary": {
                    "type": "string",
                    "description": "Primary button background color in hexadecimal.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "pageBackground",
                        "primary"
                    ]
                }
            }
        },
        "auth0:index/BrandingFont:BrandingFont": {
            "properties": {
                "url": {
                    "type": "string",
                    "description": "URL for the custom font.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "url"
                    ]
                }
            }
        },
        "auth0:index/BrandingThemeBorders:BrandingThemeBorders": {
            "properties": {
                "buttonBorderRadius": {
                    "type": "number",
                    "description": "Button border radius. Value needs to be between `1` and `10`. Defaults to `3.0`.\n"
                },
                "buttonBorderWeight": {
                    "type": "number",
                    "description": "Button border weight. Value needs to be between `0` and `10`. Defaults to `1.0`.\n"
                },
                "buttonsStyle": {
                    "type": "string",
                    "description": "Buttons style. Available options: `pill`, `rounded`, `sharp`. Defaults to `rounded`.\n"
                },
                "inputBorderRadius": {
                    "type": "number",
                    "description": "Input border radius. Value needs to be between `0` and `10`. Defaults to `3.0`.\n"
                },
                "inputBorderWeight": {
                    "type": "number",
                    "description": "Input border weight. Value needs to be between `0` and `3`. Defaults to `1.0`.\n"
                },
                "inputsStyle": {
                    "type": "string",
                    "description": "Inputs style. Available options: `pill`, `rounded`, `sharp`. Defaults to `rounded`.\n"
                },
                "showWidgetShadow": {
                    "type": "boolean",
                    "description": "Show widget shadow. Defaults to `true`.\n"
                },
                "widgetBorderWeight": {
                    "type": "number",
                    "description": "Widget border weight. Value needs to be between `0` and `10`. Defaults to `0.0`.\n"
                },
                "widgetCornerRadius": {
                    "type": "number",
                    "description": "Widget corner radius. Value needs to be between `0` and `50`. Defaults to `5.0`.\n"
                }
            },
            "type": "object"
        },
        "auth0:index/BrandingThemeColors:BrandingThemeColors": {
            "properties": {
                "baseFocusColor": {
                    "type": "string",
                    "description": "Base focus color. Defaults to `#635dff`.\n"
                },
                "baseHoverColor": {
                    "type": "string",
                    "description": "Base hover color. Defaults to `#000000`.\n"
                },
                "bodyText": {
                    "type": "string",
                    "description": "Body text. Defaults to `#1e212a`.\n"
                },
                "error": {
                    "type": "string",
                    "description": "Error. Defaults to `#d03c38`.\n"
                },
                "header": {
                    "type": "string",
                    "description": "Header. Defaults to `#1e212a`.\n"
                },
                "icons": {
                    "type": "string",
                    "description": "Icons. Defaults to `#65676e`.\n"
                },
                "inputBackground": {
                    "type": "string",
                    "description": "Input background. Defaults to `#ffffff`.\n"
                },
                "inputBorder": {
                    "type": "string",
                    "description": "Input border. Defaults to `#c9cace`.\n"
                },
                "inputFilledText": {
                    "type": "string",
                    "description": "Input filled text. Defaults to `#000000`.\n"
                },
                "inputLabelsPlaceholders": {
                    "type": "string",
                    "description": "Input labels \u0026 placeholders. Defaults to `#65676e`.\n"
                },
                "linksFocusedComponents": {
                    "type": "string",
                    "description": "Links \u0026 focused components. Defaults to `#635dff`.\n"
                },
                "primaryButton": {
                    "type": "string",
                    "description": "Primary button. Defaults to `#635dff`.\n"
                },
                "primaryButtonLabel": {
                    "type": "string",
                    "description": "Primary button label. Defaults to `#ffffff`.\n"
                },
                "secondaryButtonBorder": {
                    "type": "string",
                    "description": "Secondary button border. Defaults to `#c9cace`.\n"
                },
                "secondaryButtonLabel": {
                    "type": "string",
                    "description": "Secondary button label. Defaults to `#1e212a`.\n"
                },
                "success": {
                    "type": "string",
                    "description": "Success. Defaults to `#13a688`.\n"
                },
                "widgetBackground": {
                    "type": "string",
                    "description": "Widget background. Defaults to `#ffffff`.\n"
                },
                "widgetBorder": {
                    "type": "string",
                    "description": "Widget border. Defaults to `#c9cace`.\n"
                }
            },
            "type": "object"
        },
        "auth0:index/BrandingThemeFonts:BrandingThemeFonts": {
            "properties": {
                "bodyText": {
                    "$ref": "#/types/auth0:index/BrandingThemeFontsBodyText:BrandingThemeFontsBodyText",
                    "description": "Body text.\n"
                },
                "buttonsText": {
                    "$ref": "#/types/auth0:index/BrandingThemeFontsButtonsText:BrandingThemeFontsButtonsText",
                    "description": "Buttons text.\n"
                },
                "fontUrl": {
                    "type": "string",
                    "description": "Font URL. Defaults to an empty string.\n"
                },
                "inputLabels": {
                    "$ref": "#/types/auth0:index/BrandingThemeFontsInputLabels:BrandingThemeFontsInputLabels",
                    "description": "Input labels.\n"
                },
                "links": {
                    "$ref": "#/types/auth0:index/BrandingThemeFontsLinks:BrandingThemeFontsLinks",
                    "description": "Links.\n"
                },
                "linksStyle": {
                    "type": "string",
                    "description": "Links style. Defaults to `normal`.\n"
                },
                "referenceTextSize": {
                    "type": "number",
                    "description": "Reference text size. Value needs to be between `12` and `24`. Defaults to `16.0`.\n"
                },
                "subtitle": {
                    "$ref": "#/types/auth0:index/BrandingThemeFontsSubtitle:BrandingThemeFontsSubtitle",
                    "description": "Subtitle.\n"
                },
                "title": {
                    "$ref": "#/types/auth0:index/BrandingThemeFontsTitle:BrandingThemeFontsTitle",
                    "description": "Title.\n"
                }
            },
            "type": "object",
            "required": [
                "bodyText",
                "buttonsText",
                "inputLabels",
                "links",
                "subtitle",
                "title"
            ]
        },
        "auth0:index/BrandingThemeFontsBodyText:BrandingThemeFontsBodyText": {
            "properties": {
                "bold": {
                    "type": "boolean",
                    "description": "Body text bold. Defaults to `false`.\n"
                },
                "size": {
                    "type": "number",
                    "description": "Body text size. Value needs to be between `0` and `150`. Defaults to `87.5`.\n"
                }
            },
            "type": "object"
        },
        "auth0:index/BrandingThemeFontsButtonsText:BrandingThemeFontsButtonsText": {
            "properties": {
                "bold": {
                    "type": "boolean",
                    "description": "Body text bold. Defaults to `false`.\n"
                },
                "size": {
                    "type": "number",
                    "description": "Body text size. Value needs to be between `0` and `150`. Defaults to `87.5`.\n"
                }
            },
            "type": "object"
        },
        "auth0:index/BrandingThemeFontsInputLabels:BrandingThemeFontsInputLabels": {
            "properties": {
                "bold": {
                    "type": "boolean",
                    "description": "Body text bold. Defaults to `false`.\n"
                },
                "size": {
                    "type": "number",
                    "description": "Body text size. Value needs to be between `0` and `150`. Defaults to `87.5`.\n"
                }
            },
            "type": "object"
        },
        "auth0:index/BrandingThemeFontsLinks:BrandingThemeFontsLinks": {
            "properties": {
                "bold": {
                    "type": "boolean",
                    "description": "Body text bold. Defaults to `false`.\n"
                },
                "size": {
                    "type": "number",
                    "description": "Body text size. Value needs to be between `0` and `150`. Defaults to `87.5`.\n"
                }
            },
            "type": "object"
        },
        "auth0:index/BrandingThemeFontsSubtitle:BrandingThemeFontsSubtitle": {
            "properties": {
                "bold": {
                    "type": "boolean",
                    "description": "Body text bold. Defaults to `false`.\n"
                },
                "size": {
                    "type": "number",
                    "description": "Body text size. Value needs to be between `0` and `150`. Defaults to `87.5`.\n"
                }
            },
            "type": "object"
        },
        "auth0:index/BrandingThemeFontsTitle:BrandingThemeFontsTitle": {
            "properties": {
                "bold": {
                    "type": "boolean",
                    "description": "Body text bold. Defaults to `false`.\n"
                },
                "size": {
                    "type": "number",
                    "description": "Body text size. Value needs to be between `0` and `150`. Defaults to `87.5`.\n"
                }
            },
            "type": "object"
        },
        "auth0:index/BrandingThemePageBackground:BrandingThemePageBackground": {
            "properties": {
                "backgroundColor": {
                    "type": "string",
                    "description": "Background color. Defaults to `#000000`.\n"
                },
                "backgroundImageUrl": {
                    "type": "string",
                    "description": "Background image url. Defaults to an empty string.\n"
                },
                "pageLayout": {
                    "type": "string",
                    "description": "Page layout. Available options: `center`, `left`, `right`. Defaults to `center`.\n"
                }
            },
            "type": "object"
        },
        "auth0:index/BrandingThemeWidget:BrandingThemeWidget": {
            "properties": {
                "headerTextAlignment": {
                    "type": "string",
                    "description": "Header text alignment. Available options: `center`, `left`, `right`. Defaults to `center`.\n"
                },
                "logoHeight": {
                    "type": "number",
                    "description": "Logo height. Value needs to be between `1` and `100`. Defaults to `52.0`.\n"
                },
                "logoPosition": {
                    "type": "string",
                    "description": "Logo position. Available options: `center`, `left`, `right`, `none`. Defaults to `center`.\n"
                },
                "logoUrl": {
                    "type": "string",
                    "description": "Logo url. Defaults to an empty string.\n"
                },
                "socialButtonsLayout": {
                    "type": "string",
                    "description": "Social buttons layout. Available options: `bottom`, `top`. Defaults to `bottom`.\n"
                }
            },
            "type": "object"
        },
        "auth0:index/BrandingUniversalLogin:BrandingUniversalLogin": {
            "properties": {
                "body": {
                    "type": "string",
                    "description": "The html template for the New Universal Login Experience.\n"
                }
            },
            "type": "object",
            "required": [
                "body"
            ]
        },
        "auth0:index/ClientAddons:ClientAddons": {
            "properties": {
                "aws": {
                    "$ref": "#/types/auth0:index/ClientAddonsAws:ClientAddonsAws",
                    "description": "AWS Addon configuration.\n"
                },
                "azureBlob": {
                    "$ref": "#/types/auth0:index/ClientAddonsAzureBlob:ClientAddonsAzureBlob",
                    "description": "Azure Blob Storage Addon configuration.\n"
                },
                "azureSb": {
                    "$ref": "#/types/auth0:index/ClientAddonsAzureSb:ClientAddonsAzureSb",
                    "description": "Azure Storage Bus Addon configuration.\n"
                },
                "box": {
                    "$ref": "#/types/auth0:index/ClientAddonsBox:ClientAddonsBox",
                    "description": "Box SSO indicator (no configuration settings needed for Box SSO).\n"
                },
                "cloudbees": {
                    "$ref": "#/types/auth0:index/ClientAddonsCloudbees:ClientAddonsCloudbees",
                    "description": "CloudBees SSO indicator (no configuration settings needed for CloudBees SSO).\n"
                },
                "concur": {
                    "$ref": "#/types/auth0:index/ClientAddonsConcur:ClientAddonsConcur",
                    "description": "Concur SSO indicator (no configuration settings needed for Concur SSO).\n"
                },
                "dropbox": {
                    "$ref": "#/types/auth0:index/ClientAddonsDropbox:ClientAddonsDropbox",
                    "description": "Dropbox SSO indicator (no configuration settings needed for Dropbox SSO).\n"
                },
                "echosign": {
                    "$ref": "#/types/auth0:index/ClientAddonsEchosign:ClientAddonsEchosign",
                    "description": "Adobe EchoSign SSO configuration.\n"
                },
                "egnyte": {
                    "$ref": "#/types/auth0:index/ClientAddonsEgnyte:ClientAddonsEgnyte",
                    "description": "Egnyte SSO configuration.\n"
                },
                "firebase": {
                    "$ref": "#/types/auth0:index/ClientAddonsFirebase:ClientAddonsFirebase",
                    "description": "Google Firebase addon configuration.\n"
                },
                "layer": {
                    "$ref": "#/types/auth0:index/ClientAddonsLayer:ClientAddonsLayer",
                    "description": "Layer addon configuration.\n"
                },
                "mscrm": {
                    "$ref": "#/types/auth0:index/ClientAddonsMscrm:ClientAddonsMscrm",
                    "description": "Microsoft Dynamics CRM SSO configuration.\n"
                },
                "newrelic": {
                    "$ref": "#/types/auth0:index/ClientAddonsNewrelic:ClientAddonsNewrelic",
                    "description": "New Relic SSO configuration.\n"
                },
                "office365": {
                    "$ref": "#/types/auth0:index/ClientAddonsOffice365:ClientAddonsOffice365",
                    "description": "Microsoft Office 365 SSO configuration.\n"
                },
                "rms": {
                    "$ref": "#/types/auth0:index/ClientAddonsRms:ClientAddonsRms",
                    "description": "Active Directory Rights Management Service SSO configuration.\n"
                },
                "salesforce": {
                    "$ref": "#/types/auth0:index/ClientAddonsSalesforce:ClientAddonsSalesforce",
                    "description": "Salesforce SSO configuration.\n"
                },
                "salesforceApi": {
                    "$ref": "#/types/auth0:index/ClientAddonsSalesforceApi:ClientAddonsSalesforceApi",
                    "description": "Salesforce API addon configuration.\n"
                },
                "salesforceSandboxApi": {
                    "$ref": "#/types/auth0:index/ClientAddonsSalesforceSandboxApi:ClientAddonsSalesforceSandboxApi",
                    "description": "Salesforce Sandbox addon configuration.\n"
                },
                "samlp": {
                    "$ref": "#/types/auth0:index/ClientAddonsSamlp:ClientAddonsSamlp",
                    "description": "Configuration settings for a SAML add-on.\n"
                },
                "sapApi": {
                    "$ref": "#/types/auth0:index/ClientAddonsSapApi:ClientAddonsSapApi",
                    "description": "SAP API addon configuration.\n"
                },
                "sentry": {
                    "$ref": "#/types/auth0:index/ClientAddonsSentry:ClientAddonsSentry",
                    "description": "Sentry SSO configuration.\n"
                },
                "sharepoint": {
                    "$ref": "#/types/auth0:index/ClientAddonsSharepoint:ClientAddonsSharepoint",
                    "description": "SharePoint SSO configuration.\n"
                },
                "slack": {
                    "$ref": "#/types/auth0:index/ClientAddonsSlack:ClientAddonsSlack",
                    "description": "Slack team or workspace name usually first segment in your Slack URL, for example `https://acme-org.slack.com` would be `acme-org`.\n"
                },
                "springcm": {
                    "$ref": "#/types/auth0:index/ClientAddonsSpringcm:ClientAddonsSpringcm",
                    "description": "SpringCM SSO configuration.\n"
                },
                "ssoIntegration": {
                    "$ref": "#/types/auth0:index/ClientAddonsSsoIntegration:ClientAddonsSsoIntegration",
                    "description": "Generic SSO configuration.\n"
                },
                "wams": {
                    "$ref": "#/types/auth0:index/ClientAddonsWams:ClientAddonsWams",
                    "description": "Windows Azure Mobile Services addon configuration.\n"
                },
                "wsfed": {
                    "$ref": "#/types/auth0:index/ClientAddonsWsfed:ClientAddonsWsfed",
                    "description": "WS-Fed (WIF) addon indicator. Actual configuration is stored in `callback` and `client_aliases` properties on the client.\n"
                },
                "zendesk": {
                    "$ref": "#/types/auth0:index/ClientAddonsZendesk:ClientAddonsZendesk",
                    "description": "Zendesk SSO configuration.\n"
                },
                "zoom": {
                    "$ref": "#/types/auth0:index/ClientAddonsZoom:ClientAddonsZoom",
                    "description": "Zoom SSO configuration.\n"
                }
            },
            "type": "object"
        },
        "auth0:index/ClientAddonsAws:ClientAddonsAws": {
            "properties": {
                "lifetimeInSeconds": {
                    "type": "integer",
                    "description": "AWS token lifetime in seconds.\n"
                },
                "principal": {
                    "type": "string",
                    "description": "AWS principal ARN, for example `arn:aws:iam::010616021751:saml-provider/idpname`.\n"
                },
                "role": {
                    "type": "string",
                    "description": "AWS role ARN, for example `arn:aws:iam::010616021751:role/foo`.\n"
                }
            },
            "type": "object"
        },
        "auth0:index/ClientAddonsAzureBlob:ClientAddonsAzureBlob": {
            "properties": {
                "accountName": {
                    "type": "string",
                    "description": "Your Azure storage account name. Usually first segment in your Azure storage URL, for example `https://acme-org.blob.core.windows.net` would be the account name `acme-org`.\n"
                },
                "blobDelete": {
                    "type": "boolean",
                    "description": "Indicates if the issued token has permission to delete the blob.\n"
                },
                "blobName": {
                    "type": "string",
                    "description": "Entity to request a token for, such as `my-blob`. If blank the computed SAS will apply to the entire storage container.\n"
                },
                "blobRead": {
                    "type": "boolean",
                    "description": "Indicates if the issued token has permission to read the content, properties, metadata and block list. Use the blob as the source of a copy operation.\n"
                },
                "blobWrite": {
                    "type": "boolean",
                    "description": "Indicates if the issued token has permission to create or write content, properties, metadata, or block list. Snapshot or lease the blob. Resize the blob (page blob only). Use the blob as the destination of a copy operation within the same account.\n"
                },
                "containerDelete": {
                    "type": "boolean",
                    "description": "Indicates if issued token has permission to delete any blob in the container.\n"
                },
                "containerList": {
                    "type": "boolean",
                    "description": "Indicates if the issued token has permission to list blobs in the container.\n"
                },
                "containerName": {
                    "type": "string",
                    "description": "Container to request a token for, such as `my-container`.\n"
                },
                "containerRead": {
                    "type": "boolean",
                    "description": "Indicates if the issued token has permission to read the content, properties, metadata or block list of any blob in the container. Use any blob in the container as the source of a copy operation.\n"
                },
                "containerWrite": {
                    "type": "boolean",
                    "description": "Indicates that for any blob in the container if the issued token has permission to create or write content, properties, metadata, or block list. Snapshot or lease the blob. Resize the blob (page blob only). Use the blob as the destination of a copy operation within the same account.\n"
                },
                "expiration": {
                    "type": "integer",
                    "description": "Expiration in minutes for the generated token (default of 5 minutes).\n"
                },
                "signedIdentifier": {
                    "type": "string",
                    "description": "Shared access policy identifier defined in your storage account resource.\n"
                },
                "storageAccessKey": {
                    "type": "string",
                    "description": "Access key associated with this storage account.\n",
                    "secret": true
                }
            },
            "type": "object"
        },
        "auth0:index/ClientAddonsAzureSb:ClientAddonsAzureSb": {
            "properties": {
                "entityPath": {
                    "type": "string",
                    "description": "Entity you want to request a token for, such as `my-queue`.\n"
                },
                "expiration": {
                    "type": "integer",
                    "description": "Expiration in minutes for the generated token (default of 5 minutes).\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Your Azure Service Bus namespace. Usually the first segment of your Service Bus URL (for example `https://acme-org.servicebus.windows.net` would be `acme-org`).\n"
                },
                "sasKey": {
                    "type": "string",
                    "description": "Primary Key associated with your shared access policy.\n",
                    "secret": true
                },
                "sasKeyName": {
                    "type": "string",
                    "description": "Your shared access policy name defined in your Service Bus entity.\n"
                }
            },
            "type": "object"
        },
        "auth0:index/ClientAddonsBox:ClientAddonsBox": {
            "type": "object"
        },
        "auth0:index/ClientAddonsCloudbees:ClientAddonsCloudbees": {
            "type": "object"
        },
        "auth0:index/ClientAddonsConcur:ClientAddonsConcur": {
            "type": "object"
        },
        "auth0:index/ClientAddonsDropbox:ClientAddonsDropbox": {
            "type": "object"
        },
        "auth0:index/ClientAddonsEchosign:ClientAddonsEchosign": {
            "properties": {
                "domain": {
                    "type": "string",
                    "description": "Your custom domain found in your EchoSign URL, for example `https://acme-org.echosign.com` would be `acme-org`.\n"
                }
            },
            "type": "object"
        },
        "auth0:index/ClientAddonsEgnyte:ClientAddonsEgnyte": {
            "properties": {
                "domain": {
                    "type": "string",
                    "description": "Your custom domain found in your EchoSign URL, for example `https://acme-org.echosign.com` would be `acme-org`.\n"
                }
            },
            "type": "object"
        },
        "auth0:index/ClientAddonsFirebase:ClientAddonsFirebase": {
            "properties": {
                "clientEmail": {
                    "type": "string",
                    "description": "ID of the Service Account you have created (shown as `client_email` in the generated JSON file, SDK v3+ tokens only).\n"
                },
                "lifetimeInSeconds": {
                    "type": "integer",
                    "description": "AWS token lifetime in seconds.\n"
                },
                "privateKey": {
                    "type": "string",
                    "description": "Private Key for signing the token (SDK v3+ tokens only).\n",
                    "secret": true
                },
                "privateKeyId": {
                    "type": "string",
                    "description": "Optional ID of the private key to obtain the `kid` header claim from the issued token (SDK v3+ tokens only).\n",
                    "secret": true
                },
                "secret": {
                    "type": "string",
                    "description": "Google Firebase Secret. (SDK v2 only).\n",
                    "secret": true
                }
            },
            "type": "object"
        },
        "auth0:index/ClientAddonsLayer:ClientAddonsLayer": {
            "properties": {
                "expiration": {
                    "type": "integer",
                    "description": "Expiration in minutes for the generated token (default of 5 minutes).\n"
                },
                "keyId": {
                    "type": "string",
                    "description": "Authentication Key identifier used to sign the Layer token.\n",
                    "secret": true
                },
                "principal": {
                    "type": "string",
                    "description": "AWS principal ARN, for example `arn:aws:iam::010616021751:saml-provider/idpname`.\n"
                },
                "privateKey": {
                    "type": "string",
                    "description": "Private Key for signing the token (SDK v3+ tokens only).\n",
                    "secret": true
                },
                "providerId": {
                    "type": "string",
                    "description": "Provider ID of your Layer account.\n"
                }
            },
            "type": "object",
            "required": [
                "keyId",
                "privateKey",
                "providerId"
            ]
        },
        "auth0:index/ClientAddonsMscrm:ClientAddonsMscrm": {
            "properties": {
                "url": {
                    "type": "string",
                    "description": "Microsoft Dynamics CRM application URL.\n"
                }
            },
            "type": "object"
        },
        "auth0:index/ClientAddonsNewrelic:ClientAddonsNewrelic": {
            "properties": {
                "account": {
                    "type": "string",
                    "description": "Your New Relic Account ID found in your New Relic URL after the `/accounts/` path, for example `https://rpm.newrelic.com/accounts/123456/query` would be `123456`.\n"
                }
            },
            "type": "object"
        },
        "auth0:index/ClientAddonsOffice365:ClientAddonsOffice365": {
            "properties": {
                "connection": {
                    "type": "string",
                    "description": "Optional Auth0 database connection for testing an already-configured Office 365 tenant.\n"
                },
                "domain": {
                    "type": "string",
                    "description": "Your custom domain found in your EchoSign URL, for example `https://acme-org.echosign.com` would be `acme-org`.\n"
                }
            },
            "type": "object"
        },
        "auth0:index/ClientAddonsRms:ClientAddonsRms": {
            "properties": {
                "url": {
                    "type": "string",
                    "description": "Microsoft Dynamics CRM application URL.\n"
                }
            },
            "type": "object"
        },
        "auth0:index/ClientAddonsSalesforce:ClientAddonsSalesforce": {
            "properties": {
                "entityId": {
                    "type": "string",
                    "description": "Arbitrary logical URL that identifies the Saleforce resource, for example `https://acme-org.com`.\n"
                }
            },
            "type": "object"
        },
        "auth0:index/ClientAddonsSalesforceApi:ClientAddonsSalesforceApi": {
            "properties": {
                "clientId": {
                    "type": "string",
                    "description": "Consumer Key assigned by Salesforce to the Connected App.\n",
                    "secret": true
                },
                "communityName": {
                    "type": "string",
                    "description": "Community name.\n"
                },
                "communityUrlSection": {
                    "type": "string",
                    "description": "Community URL section.\n"
                },
                "principal": {
                    "type": "string",
                    "description": "AWS principal ARN, for example `arn:aws:iam::010616021751:saml-provider/idpname`.\n",
                    "secret": true
                }
            },
            "type": "object"
        },
        "auth0:index/ClientAddonsSalesforceSandboxApi:ClientAddonsSalesforceSandboxApi": {
            "properties": {
                "clientId": {
                    "type": "string",
                    "description": "Consumer Key assigned by Salesforce to the Connected App.\n",
                    "secret": true
                },
                "communityName": {
                    "type": "string",
                    "description": "Community name.\n"
                },
                "communityUrlSection": {
                    "type": "string",
                    "description": "Community URL section.\n"
                },
                "principal": {
                    "type": "string",
                    "description": "AWS principal ARN, for example `arn:aws:iam::010616021751:saml-provider/idpname`.\n",
                    "secret": true
                }
            },
            "type": "object"
        },
        "auth0:index/ClientAddonsSamlp:ClientAddonsSamlp": {
            "properties": {
                "audience": {
                    "type": "string",
                    "description": "Audience of the SAML Assertion. Default will be the Issuer on SAMLRequest.\n"
                },
                "authnContextClassRef": {
                    "type": "string",
                    "description": "Class reference of the authentication context.\n"
                },
                "binding": {
                    "type": "string",
                    "description": "Protocol binding used for SAML logout responses.\n"
                },
                "createUpnClaim": {
                    "type": "boolean",
                    "description": "Indicates whether a UPN claim should be created. Defaults to `true`.\n"
                },
                "destination": {
                    "type": "string",
                    "description": "Destination of the SAML Response. If not specified, it will be `AssertionConsumerUrl` of SAMLRequest or callback URL if there was no SAMLRequest.\n"
                },
                "digestAlgorithm": {
                    "type": "string",
                    "description": "Algorithm used to calculate the digest of the SAML Assertion or response. Options include `sha1` and `sha256`. Defaults to `sha1`.\n"
                },
                "includeAttributeNameFormat": {
                    "type": "boolean",
                    "description": "Indicates whether or not we should infer the NameFormat based on the attribute name. If set to `false`, the attribute NameFormat is not set in the assertion. Defaults to `true`.\n"
                },
                "issuer": {
                    "type": "string",
                    "description": "Issuer of the SAML Assertion.\n"
                },
                "lifetimeInSeconds": {
                    "type": "integer",
                    "description": "AWS token lifetime in seconds.\n"
                },
                "logout": {
                    "$ref": "#/types/auth0:index/ClientAddonsSamlpLogout:ClientAddonsSamlpLogout",
                    "description": "Configuration settings for logout.\n"
                },
                "mapIdentities": {
                    "type": "boolean",
                    "description": "Indicates whether or not to add additional identity information in the token, such as the provider used and the `access_token`, if available. Defaults to `true`.\n"
                },
                "mapUnknownClaimsAsIs": {
                    "type": "boolean",
                    "description": "Indicates whether to add a prefix of `http://schema.auth0.com` to any claims that are not mapped to the common profile when passed through in the output assertion. Defaults to `false`.\n"
                },
                "mappings": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Mappings between the Auth0 user profile property name (`name`) and the output attributes on the SAML attribute in the assertion (`value`).\n"
                },
                "nameIdentifierFormat": {
                    "type": "string",
                    "description": "Format of the name identifier. Defaults to `urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified`.\n"
                },
                "nameIdentifierProbes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Attributes that can be used for Subject/NameID. Auth0 will try each of the attributes of this array in order and use the first value it finds.\n"
                },
                "passthroughClaimsWithNoMapping": {
                    "type": "boolean",
                    "description": "Indicates whether or not to passthrough claims that are not mapped to the common profile in the output assertion. Defaults to `true`.\n"
                },
                "recipient": {
                    "type": "string",
                    "description": "Recipient of the SAML Assertion (SubjectConfirmationData). Default is `AssertionConsumerUrl` on SAMLRequest or callback URL if no SAMLRequest was sent.\n"
                },
                "signResponse": {
                    "type": "boolean",
                    "description": "Indicates whether or not the SAML Response should be signed instead of the SAML Assertion.\n"
                },
                "signatureAlgorithm": {
                    "type": "string",
                    "description": "Algorithm used to sign the SAML Assertion or response. Options include `rsa-sha1` and `rsa-sha256`. Defaults to `rsa-sha1`.\n"
                },
                "signingCert": {
                    "type": "string",
                    "description": "Optionally indicates the public key certificate used to validate SAML requests. If set, SAML requests will be required to be signed. A sample value would be `-----BEGIN PUBLIC KEY-----\\nMIGf...bpP/t3\\n+JGNGIRMj1hF1rnb6QIDAQAB\\n-----END PUBLIC KEY-----\\n`.\n"
                },
                "typedAttributes": {
                    "type": "boolean",
                    "description": "Indicates whether or not we should infer the `xs:type` of the element. Types include `xs:string`, `xs:boolean`, `xs:double`, and `xs:anyType`. When set to `false`, all `xs:type` are `xs:anyType`. Defaults to `true`.\n"
                }
            },
            "type": "object"
        },
        "auth0:index/ClientAddonsSamlpLogout:ClientAddonsSamlpLogout": {
            "properties": {
                "callback": {
                    "type": "string",
                    "description": "The service provider (client application)'s Single Logout Service URL, where Auth0 will send logout requests and responses.\n"
                },
                "sloEnabled": {
                    "type": "boolean",
                    "description": "Controls whether Auth0 should notify service providers of session termination.\n"
                }
            },
            "type": "object"
        },
        "auth0:index/ClientAddonsSapApi:ClientAddonsSapApi": {
            "properties": {
                "clientId": {
                    "type": "string",
                    "description": "Consumer Key assigned by Salesforce to the Connected App.\n"
                },
                "nameIdentifierFormat": {
                    "type": "string",
                    "description": "Format of the name identifier. Defaults to `urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified`.\n"
                },
                "scope": {
                    "type": "string",
                    "description": "Requested scope for SAP APIs.\n"
                },
                "servicePassword": {
                    "type": "string",
                    "description": "Service account password to use to authenticate API calls to the token endpoint.\n",
                    "secret": true
                },
                "tokenEndpointUrl": {
                    "type": "string",
                    "description": "The OAuth2 token endpoint URL of your SAP OData server.\n"
                },
                "usernameAttribute": {
                    "type": "string",
                    "description": "Name of the property in the user object that maps to a SAP username, for example `email`.\n"
                }
            },
            "type": "object"
        },
        "auth0:index/ClientAddonsSentry:ClientAddonsSentry": {
            "properties": {
                "baseUrl": {
                    "type": "string",
                    "description": "URL prefix only if running Sentry Community Edition, otherwise leave empty.\n"
                },
                "orgSlug": {
                    "type": "string",
                    "description": "Generated slug for your Sentry organization. Found in your Sentry URL, for example `https://sentry.acme.com/acme-org/` would be `acme-org`.\n"
                }
            },
            "type": "object"
        },
        "auth0:index/ClientAddonsSharepoint:ClientAddonsSharepoint": {
            "properties": {
                "externalUrls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "External SharePoint application URLs if exposed to the Internet.\n"
                },
                "url": {
                    "type": "string",
                    "description": "Microsoft Dynamics CRM application URL.\n"
                }
            },
            "type": "object"
        },
        "auth0:index/ClientAddonsSlack:ClientAddonsSlack": {
            "properties": {
                "team": {
                    "type": "string",
                    "description": "Slack team name.\n"
                }
            },
            "type": "object"
        },
        "auth0:index/ClientAddonsSpringcm:ClientAddonsSpringcm": {
            "properties": {
                "acsUrl": {
                    "type": "string",
                    "description": "SpringCM ACS URL, for example `https://na11.springcm.com/atlas/sso/SSOEndpoint.ashx`.\n"
                }
            },
            "type": "object"
        },
        "auth0:index/ClientAddonsSsoIntegration:ClientAddonsSsoIntegration": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "SSO integration name.\n"
                },
                "version": {
                    "type": "string",
                    "description": "SSO integration version installed.\n"
                }
            },
            "type": "object"
        },
        "auth0:index/ClientAddonsWams:ClientAddonsWams": {
            "properties": {
                "masterKey": {
                    "type": "string",
                    "description": "Your master key for Windows Azure Mobile Services.\n",
                    "secret": true
                }
            },
            "type": "object"
        },
        "auth0:index/ClientAddonsWsfed:ClientAddonsWsfed": {
            "type": "object"
        },
        "auth0:index/ClientAddonsZendesk:ClientAddonsZendesk": {
            "properties": {
                "accountName": {
                    "type": "string",
                    "description": "Your Azure storage account name. Usually first segment in your Azure storage URL, for example `https://acme-org.blob.core.windows.net` would be the account name `acme-org`.\n"
                }
            },
            "type": "object"
        },
        "auth0:index/ClientAddonsZoom:ClientAddonsZoom": {
            "properties": {
                "account": {
                    "type": "string",
                    "description": "Your New Relic Account ID found in your New Relic URL after the `/accounts/` path, for example `https://rpm.newrelic.com/accounts/123456/query` would be `123456`.\n"
                }
            },
            "type": "object"
        },
        "auth0:index/ClientCredentialsPrivateKeyJwt:ClientCredentialsPrivateKeyJwt": {
            "properties": {
                "credentials": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/auth0:index/ClientCredentialsPrivateKeyJwtCredential:ClientCredentialsPrivateKeyJwtCredential"
                    },
                    "description": "Client credentials available for use when Private Key JWT is in use as the client authentication method. A maximum of 2 client credentials can be set.\n"
                }
            },
            "type": "object",
            "required": [
                "credentials"
            ]
        },
        "auth0:index/ClientCredentialsPrivateKeyJwtCredential:ClientCredentialsPrivateKeyJwtCredential": {
            "properties": {
                "algorithm": {
                    "type": "string",
                    "description": "Algorithm which will be used with the credential. Can be one of `RS256`, `RS384`, `PS256`. If not specified, `RS256` will be used.\n",
                    "willReplaceOnChanges": true
                },
                "createdAt": {
                    "type": "string",
                    "description": "The ISO 8601 formatted date the credential was created.\n"
                },
                "credentialType": {
                    "type": "string",
                    "description": "Credential type. Supported types: `public_key`.\n",
                    "willReplaceOnChanges": true
                },
                "expiresAt": {
                    "type": "string",
                    "description": "The ISO 8601 formatted date representing the expiration of the credential. It is not possible to set this to never expire after it has been set. Recreate the certificate if needed.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the client credential.\n"
                },
                "keyId": {
                    "type": "string",
                    "description": "The key identifier of the credential, generated on creation.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Friendly name for a credential.\n",
                    "willReplaceOnChanges": true
                },
                "parseExpiryFromCert": {
                    "type": "boolean",
                    "description": "Parse expiry from x509 certificate. If true, attempts to parse the expiry date from the provided PEM. If also the `expires_at` is set the credential expiry will be set to the explicit `expires_at` value.\n",
                    "willReplaceOnChanges": true
                },
                "pem": {
                    "type": "string",
                    "description": "PEM-formatted public key (SPKI and PKCS1) or X509 certificate. Must be JSON escaped.\n",
                    "willReplaceOnChanges": true
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The ISO 8601 formatted date the credential was updated.\n"
                }
            },
            "type": "object",
            "required": [
                "credentialType",
                "pem"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "createdAt",
                        "credentialType",
                        "expiresAt",
                        "id",
                        "keyId",
                        "pem",
                        "updatedAt"
                    ]
                }
            }
        },
        "auth0:index/ClientJwtConfiguration:ClientJwtConfiguration": {
            "properties": {
                "alg": {
                    "type": "string",
                    "description": "Algorithm used to sign JWTs.\n"
                },
                "lifetimeInSeconds": {
                    "type": "integer",
                    "description": "Number of seconds during which the JWT will be valid.\n"
                },
                "scopes": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Permissions (scopes) included in JWTs.\n"
                },
                "secretEncoded": {
                    "type": "boolean",
                    "description": "Indicates whether the client secret is Base64-encoded.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "lifetimeInSeconds",
                        "secretEncoded"
                    ]
                }
            }
        },
        "auth0:index/ClientMobile:ClientMobile": {
            "properties": {
                "android": {
                    "$ref": "#/types/auth0:index/ClientMobileAndroid:ClientMobileAndroid",
                    "description": "Configuration settings for Android native apps.\n"
                },
                "ios": {
                    "$ref": "#/types/auth0:index/ClientMobileIos:ClientMobileIos",
                    "description": "Configuration settings for i0S native apps.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "android",
                        "ios"
                    ]
                }
            }
        },
        "auth0:index/ClientMobileAndroid:ClientMobileAndroid": {
            "properties": {
                "appPackageName": {
                    "type": "string"
                },
                "sha256CertFingerprints": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object"
        },
        "auth0:index/ClientMobileIos:ClientMobileIos": {
            "properties": {
                "appBundleIdentifier": {
                    "type": "string"
                },
                "teamId": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "auth0:index/ClientNativeSocialLogin:ClientNativeSocialLogin": {
            "properties": {
                "apple": {
                    "$ref": "#/types/auth0:index/ClientNativeSocialLoginApple:ClientNativeSocialLoginApple"
                },
                "facebook": {
                    "$ref": "#/types/auth0:index/ClientNativeSocialLoginFacebook:ClientNativeSocialLoginFacebook"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "apple",
                        "facebook"
                    ]
                }
            }
        },
        "auth0:index/ClientNativeSocialLoginApple:ClientNativeSocialLoginApple": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "auth0:index/ClientNativeSocialLoginFacebook:ClientNativeSocialLoginFacebook": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "auth0:index/ClientRefreshToken:ClientRefreshToken": {
            "properties": {
                "expirationType": {
                    "type": "string",
                    "description": "Options include `expiring`, `non-expiring`. Whether a refresh token will expire based on an absolute lifetime, after which the token can no longer be used. If rotation is `rotating`, this must be set to `expiring`.\n"
                },
                "idleTokenLifetime": {
                    "type": "integer",
                    "description": "The time in seconds after which inactive refresh tokens will expire.\n"
                },
                "infiniteIdleTokenLifetime": {
                    "type": "boolean",
                    "description": "Whether inactive refresh tokens should remain valid indefinitely.\n"
                },
                "infiniteTokenLifetime": {
                    "type": "boolean",
                    "description": "Whether refresh tokens should remain valid indefinitely. If false, `token_lifetime` should also be set.\n"
                },
                "leeway": {
                    "type": "integer",
                    "description": "The amount of time in seconds in which a refresh token may be reused without triggering reuse detection.\n"
                },
                "rotationType": {
                    "type": "string",
                    "description": "Options include `rotating`, `non-rotating`. When `rotating`, exchanging a refresh token will cause a new refresh token to be issued and the existing token will be invalidated. This allows for automatic detection of token reuse if the token is leaked.\n"
                },
                "tokenLifetime": {
                    "type": "integer",
                    "description": "The absolute lifetime of a refresh token in seconds.\n"
                }
            },
            "type": "object",
            "required": [
                "expirationType",
                "rotationType"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "expirationType",
                        "idleTokenLifetime",
                        "infiniteIdleTokenLifetime",
                        "infiniteTokenLifetime",
                        "leeway",
                        "rotationType",
                        "tokenLifetime"
                    ]
                }
            }
        },
        "auth0:index/ConnectionOptions:ConnectionOptions": {
            "properties": {
                "adfsServer": {
                    "type": "string",
                    "description": "ADFS URL where to fetch the metadata source.\n"
                },
                "allowedAudiences": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of allowed audiences.\n"
                },
                "apiEnableUsers": {
                    "type": "boolean",
                    "description": "Enable API Access to users.\n"
                },
                "appId": {
                    "type": "string",
                    "description": "App ID.\n"
                },
                "attributeMap": {
                    "$ref": "#/types/auth0:index/ConnectionOptionsAttributeMap:ConnectionOptionsAttributeMap",
                    "description": "OpenID Connect and Okta Workforce connections can automatically map claims received from the identity provider (IdP). You can configure this mapping through a library template provided by Auth0 or by entering your own template directly. Click [here](https://auth0.com/docs/authenticate/identity-providers/enterprise-identity-providers/configure-pkce-claim-mapping-for-oidc#map-claims-for-oidc-connections) for more info.\n"
                },
                "authParams": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Query string parameters to be included as part of the generated passwordless email link.\n"
                },
                "authorizationEndpoint": {
                    "type": "string",
                    "description": "Authorization endpoint.\n"
                },
                "bruteForceProtection": {
                    "type": "boolean",
                    "description": "Indicates whether to enable brute force protection, which will limit the number of signups and failed logins from a suspicious IP address.\n"
                },
                "clientId": {
                    "type": "string",
                    "description": "The strategy's client ID.\n"
                },
                "clientSecret": {
                    "type": "string",
                    "description": "The strategy's client secret.\n",
                    "secret": true
                },
                "communityBaseUrl": {
                    "type": "string",
                    "description": "Salesforce community base URL.\n"
                },
                "configuration": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "A case-sensitive map of key value pairs used as configuration variables for the `custom_script`.\n",
                    "secret": true
                },
                "connectionSettings": {
                    "$ref": "#/types/auth0:index/ConnectionOptionsConnectionSettings:ConnectionOptionsConnectionSettings",
                    "description": "Proof Key for Code Exchange (PKCE) configuration settings for an OIDC or Okta Workforce connection.\n"
                },
                "customScripts": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of scripts used to integrate with a custom database.\n"
                },
                "debug": {
                    "type": "boolean",
                    "description": "When enabled, additional debug information will be generated.\n"
                },
                "decryptionKey": {
                    "$ref": "#/types/auth0:index/ConnectionOptionsDecryptionKey:ConnectionOptionsDecryptionKey",
                    "description": "The key used to decrypt encrypted responses from the connection. Uses the `key` and `cert` properties to provide the private key and certificate respectively.\n"
                },
                "digestAlgorithm": {
                    "type": "string",
                    "description": "Sign Request Algorithm Digest.\n"
                },
                "disableCache": {
                    "type": "boolean",
                    "description": "Indicates whether to disable the cache or not.\n"
                },
                "disableSelfServiceChangePassword": {
                    "type": "boolean",
                    "description": "Indicates whether to remove the forgot password link within the New Universal Login.\n"
                },
                "disableSignOut": {
                    "type": "boolean",
                    "description": "When enabled, will disable sign out.\n"
                },
                "disableSignup": {
                    "type": "boolean",
                    "description": "Indicates whether to allow user sign-ups to your application.\n"
                },
                "discoveryUrl": {
                    "type": "string",
                    "description": "OpenID discovery URL, e.g. `https://auth.example.com/.well-known/openid-configuration`.\n"
                },
                "domain": {
                    "type": "string",
                    "description": "Domain name.\n"
                },
                "domainAliases": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of the domains that can be authenticated using the identity provider. Only needed for Identifier First authentication flows.\n"
                },
                "enableScriptContext": {
                    "type": "boolean",
                    "description": "Set to `true` to inject context into custom DB scripts (warning: cannot be disabled once enabled).\n"
                },
                "enabledDatabaseCustomization": {
                    "type": "boolean",
                    "description": "Set to `true` to use a legacy user store.\n"
                },
                "entityId": {
                    "type": "string",
                    "description": "Custom Entity ID for the connection.\n"
                },
                "fedMetadataXml": {
                    "type": "string",
                    "description": "Federation Metadata for the ADFS connection.\n"
                },
                "fieldsMap": {
                    "type": "string",
                    "description": "If you're configuring a SAML enterprise connection for a non-standard PingFederate Server, you must update the attribute mappings.\n"
                },
                "forwardRequestInfo": {
                    "type": "boolean",
                    "description": "Specifies whether or not request info should be forwarded to sms gateway.\n"
                },
                "from": {
                    "type": "string",
                    "description": "Address to use as the sender.\n"
                },
                "gatewayAuthentication": {
                    "$ref": "#/types/auth0:index/ConnectionOptionsGatewayAuthentication:ConnectionOptionsGatewayAuthentication",
                    "description": "Defines the parameters used to generate the auth token for the custom gateway.\n"
                },
                "gatewayUrl": {
                    "type": "string",
                    "description": "Defines a custom sms gateway to use instead of Twilio.\n"
                },
                "iconUrl": {
                    "type": "string",
                    "description": "Icon URL.\n"
                },
                "identityApi": {
                    "type": "string",
                    "description": "Azure AD Identity API. Available options are: `microsoft-identity-platform-v2.0` or `azure-active-directory-v1.0`.\n"
                },
                "idpInitiated": {
                    "$ref": "#/types/auth0:index/ConnectionOptionsIdpInitiated:ConnectionOptionsIdpInitiated",
                    "description": "Configuration options for IDP Initiated Authentication. This is an object with the properties: `client_id`, `client_protocol`, and `client_authorize_query`.\n"
                },
                "importMode": {
                    "type": "boolean",
                    "description": "Indicates whether you have a legacy user store and want to gradually migrate those users to the Auth0 user store.\n"
                },
                "ips": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of IPs.\n"
                },
                "issuer": {
                    "type": "string",
                    "description": "Issuer URL, e.g. `https://auth.example.com`.\n"
                },
                "jwksUri": {
                    "type": "string",
                    "description": "JWKS URI.\n"
                },
                "keyId": {
                    "type": "string",
                    "description": "Apple Key ID.\n"
                },
                "mapUserIdToId": {
                    "type": "boolean",
                    "description": "By default Auth0 maps `user_id` to `email`. Enabling this setting changes the behavior to map `user_id` to 'id' instead. This can only be defined on a new Google Workspace connection and can not be changed once set.\n"
                },
                "maxGroupsToRetrieve": {
                    "type": "string",
                    "description": "Maximum number of groups to retrieve.\n"
                },
                "messagingServiceSid": {
                    "type": "string",
                    "description": "SID for Copilot. Used when SMS Source is Copilot.\n"
                },
                "metadataUrl": {
                    "type": "string",
                    "description": "The URL of the SAML metadata document.\n"
                },
                "metadataXml": {
                    "type": "string",
                    "description": "The XML content for the SAML metadata document. Values within the xml will take precedence over other attributes set on the options block.\n"
                },
                "mfa": {
                    "$ref": "#/types/auth0:index/ConnectionOptionsMfa:ConnectionOptionsMfa",
                    "description": "Configuration options for multifactor authentication.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The public name of the email or SMS Connection. In most cases this is the same name as the connection name.\n"
                },
                "nonPersistentAttrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "If there are user fields that should not be stored in Auth0 databases due to privacy reasons, you can add them to the DenyList here.\n"
                },
                "passwordComplexityOptions": {
                    "$ref": "#/types/auth0:index/ConnectionOptionsPasswordComplexityOptions:ConnectionOptionsPasswordComplexityOptions",
                    "description": "Configuration settings for password complexity.\n"
                },
                "passwordDictionary": {
                    "$ref": "#/types/auth0:index/ConnectionOptionsPasswordDictionary:ConnectionOptionsPasswordDictionary",
                    "description": "Configuration settings for the password dictionary check, which does not allow passwords that are part of the password dictionary.\n"
                },
                "passwordHistories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/auth0:index/ConnectionOptionsPasswordHistory:ConnectionOptionsPasswordHistory"
                    },
                    "description": "Configuration settings for the password history that is maintained for each user to prevent the reuse of passwords.\n"
                },
                "passwordNoPersonalInfo": {
                    "$ref": "#/types/auth0:index/ConnectionOptionsPasswordNoPersonalInfo:ConnectionOptionsPasswordNoPersonalInfo",
                    "description": "Configuration settings for the password personal info check, which does not allow passwords that contain any part of the user's personal data, including user's `name`, `username`, `nickname`, `user_metadata.name`, `user_metadata.first`, `user_metadata.last`, user's `email`, or first part of the user's `email`.\n"
                },
                "passwordPolicy": {
                    "type": "string",
                    "description": "Indicates level of password strength to enforce during authentication. A strong password policy will make it difficult, if not improbable, for someone to guess a password through either manual or automated means. Options include `none`, `low`, `fair`, `good`, `excellent`.\n"
                },
                "pingFederateBaseUrl": {
                    "type": "string",
                    "description": "Ping Federate Server URL.\n"
                },
                "pkceEnabled": {
                    "type": "boolean",
                    "description": "Enables Proof Key for Code Exchange (PKCE) functionality for OAuth2 connections.\n"
                },
                "protocolBinding": {
                    "type": "string",
                    "description": "The SAML Response Binding: how the SAML token is received by Auth0 from the IdP.\n"
                },
                "provider": {
                    "type": "string",
                    "description": "Defines the custom `sms_gateway` provider.\n"
                },
                "requestTemplate": {
                    "type": "string",
                    "description": "Template that formats the SAML request.\n"
                },
                "requiresUsername": {
                    "type": "boolean",
                    "description": "Indicates whether the user is required to provide a username in addition to an email address.\n"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Permissions to grant to the connection. Within the Auth0 dashboard these appear under the \"Attributes\" and \"Extended Attributes\" sections. Some examples: `basic_profile`, `ext_profile`, `ext_nested_groups`, etc.\n"
                },
                "scripts": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of scripts used for an OAuth connection. Only accepts a `fetchUserProfile` script.\n"
                },
                "setUserRootAttributes": {
                    "type": "string",
                    "description": "Determines whether to sync user profile attributes (`name`, `given_name`, `family_name`, `nickname`, `picture`) at each login or only on the first login. Options include: `on_each_login`, `on_first_login`. Default value: `on_each_login`.\n"
                },
                "shouldTrustEmailVerifiedConnection": {
                    "type": "string",
                    "description": "Choose how Auth0 sets the email_verified field in the user profile.\n"
                },
                "signInEndpoint": {
                    "type": "string",
                    "description": "SAML single login URL for the connection.\n"
                },
                "signOutEndpoint": {
                    "type": "string",
                    "description": "SAML single logout URL for the connection.\n"
                },
                "signSamlRequest": {
                    "type": "boolean",
                    "description": "When enabled, the SAML authentication request will be signed.\n"
                },
                "signatureAlgorithm": {
                    "type": "string",
                    "description": "Sign Request Algorithm.\n"
                },
                "signingCert": {
                    "type": "string",
                    "description": "X.509 signing certificate (encoded in PEM or CER) you retrieved from the IdP, Base64-encoded.\n"
                },
                "signingKey": {
                    "$ref": "#/types/auth0:index/ConnectionOptionsSigningKey:ConnectionOptionsSigningKey",
                    "description": "The key used to sign requests in the connection. Uses the `key` and `cert` properties to provide the private key and certificate respectively.\n"
                },
                "strategyVersion": {
                    "type": "integer",
                    "description": "Version 1 is deprecated, use version 2.\n"
                },
                "subject": {
                    "type": "string",
                    "description": "Subject line of the email.\n"
                },
                "syntax": {
                    "type": "string",
                    "description": "Syntax of the template body.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "Apple Team ID.\n"
                },
                "template": {
                    "type": "string",
                    "description": "Body of the template.\n"
                },
                "tenantDomain": {
                    "type": "string",
                    "description": "Tenant domain name.\n"
                },
                "tokenEndpoint": {
                    "type": "string",
                    "description": "Token endpoint.\n"
                },
                "totp": {
                    "$ref": "#/types/auth0:index/ConnectionOptionsTotp:ConnectionOptionsTotp",
                    "description": "Configuration options for one-time passwords.\n"
                },
                "twilioSid": {
                    "type": "string",
                    "description": "SID for your Twilio account.\n"
                },
                "twilioToken": {
                    "type": "string",
                    "description": "AuthToken for your Twilio account.\n",
                    "secret": true
                },
                "type": {
                    "type": "string",
                    "description": "Value can be `back_channel` or `front_channel`. Front Channel will use OIDC protocol with `response_mode=form_post` and `response_type=id_token`. Back Channel will use `response_type=code`.\n"
                },
                "upstreamParams": {
                    "type": "string",
                    "description": "You can pass provider-specific parameters to an identity provider during authentication. The values can either be static per connection or dynamic per user.\n"
                },
                "useCertAuth": {
                    "type": "boolean",
                    "description": "Indicates whether to use cert auth or not.\n"
                },
                "useKerberos": {
                    "type": "boolean",
                    "description": "Indicates whether to use Kerberos or not.\n"
                },
                "useWsfed": {
                    "type": "boolean",
                    "description": "Whether to use WS-Fed.\n"
                },
                "userIdAttribute": {
                    "type": "string",
                    "description": "Attribute in the SAML token that will be mapped to the user_id property in Auth0.\n"
                },
                "userinfoEndpoint": {
                    "type": "string",
                    "description": "User info endpoint.\n"
                },
                "validation": {
                    "$ref": "#/types/auth0:index/ConnectionOptionsValidation:ConnectionOptionsValidation",
                    "description": "Validation of the minimum and maximum values allowed for a user to have as username.\n"
                },
                "waadCommonEndpoint": {
                    "type": "boolean",
                    "description": "Indicates whether to use the common endpoint rather than the default endpoint. Typically enabled if you're using this for a multi-tenant application in Azure AD.\n"
                },
                "waadProtocol": {
                    "type": "string",
                    "description": "Protocol to use.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "allowedAudiences",
                        "attributeMap",
                        "authorizationEndpoint",
                        "connectionSettings",
                        "domainAliases",
                        "ips",
                        "issuer",
                        "jwksUri",
                        "mapUserIdToId",
                        "mfa",
                        "nonPersistentAttrs",
                        "passwordComplexityOptions",
                        "passwordDictionary",
                        "passwordHistories",
                        "passwordNoPersonalInfo",
                        "passwordPolicy",
                        "scopes",
                        "signInEndpoint",
                        "signOutEndpoint",
                        "signingCert",
                        "strategyVersion",
                        "tokenEndpoint",
                        "userinfoEndpoint"
                    ]
                }
            }
        },
        "auth0:index/ConnectionOptionsAttributeMap:ConnectionOptionsAttributeMap": {
            "properties": {
                "attributes": {
                    "type": "string",
                    "description": "This property is an object containing mapping information that allows Auth0 to interpret incoming claims from the IdP. Mapping information must be provided as key/value pairs.\n"
                },
                "mappingMode": {
                    "type": "string",
                    "description": "Method used to map incoming claims. Possible values: `use_map` (Okta or OIDC), `bind_all` (OIDC) or `basic_profile` (Okta).\n"
                },
                "userinfoScope": {
                    "type": "string",
                    "description": "This property defines the scopes that Auth0 sends to the IdP’s UserInfo endpoint when requested.\n"
                }
            },
            "type": "object",
            "required": [
                "mappingMode"
            ]
        },
        "auth0:index/ConnectionOptionsConnectionSettings:ConnectionOptionsConnectionSettings": {
            "properties": {
                "pkce": {
                    "type": "string",
                    "description": "PKCE configuration. Possible values: `auto` (uses the strongest algorithm available), `S256` (uses the SHA-256 algorithm), `plain` (uses plaintext as described in the PKCE specification) or `disabled` (disables support for PKCE).\n"
                }
            },
            "type": "object",
            "required": [
                "pkce"
            ]
        },
        "auth0:index/ConnectionOptionsDecryptionKey:ConnectionOptionsDecryptionKey": {
            "properties": {
                "cert": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "cert",
                "key"
            ]
        },
        "auth0:index/ConnectionOptionsGatewayAuthentication:ConnectionOptionsGatewayAuthentication": {
            "properties": {
                "audience": {
                    "type": "string",
                    "description": "Audience claim for the HS256 token sent to `gateway_url`.\n"
                },
                "method": {
                    "type": "string",
                    "description": "Authentication method (default is `bearer` token).\n"
                },
                "secret": {
                    "type": "string",
                    "description": "Secret used to sign the HS256 token sent to `gateway_url`.\n",
                    "secret": true
                },
                "secretBase64Encoded": {
                    "type": "boolean",
                    "description": "Specifies whether or not the secret is Base64-encoded.\n"
                },
                "subject": {
                    "type": "string",
                    "description": "Subject claim for the HS256 token sent to `gateway_url`.\n"
                }
            },
            "type": "object"
        },
        "auth0:index/ConnectionOptionsIdpInitiated:ConnectionOptionsIdpInitiated": {
            "properties": {
                "clientAuthorizeQuery": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string",
                    "description": "The strategy's client ID.\n"
                },
                "clientProtocol": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "auth0:index/ConnectionOptionsMfa:ConnectionOptionsMfa": {
            "properties": {
                "active": {
                    "type": "boolean",
                    "description": "Indicates whether multifactor authentication is enabled for this connection.\n"
                },
                "returnEnrollSettings": {
                    "type": "boolean",
                    "description": "Indicates whether multifactor authentication enrollment settings will be returned.\n"
                }
            },
            "type": "object"
        },
        "auth0:index/ConnectionOptionsPasswordComplexityOptions:ConnectionOptionsPasswordComplexityOptions": {
            "properties": {
                "minLength": {
                    "type": "integer",
                    "description": "Minimum number of characters allowed in passwords.\n"
                }
            },
            "type": "object"
        },
        "auth0:index/ConnectionOptionsPasswordDictionary:ConnectionOptionsPasswordDictionary": {
            "properties": {
                "dictionaries": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Customized contents of the password dictionary. By default, the password dictionary contains a list of the [10,000 most common passwords](https://github.com/danielmiessler/SecLists/blob/master/Passwords/Common-Credentials/10k-most-common.txt); your customized content is used in addition to the default password dictionary. Matching is not case-sensitive.\n"
                },
                "enable": {
                    "type": "boolean",
                    "description": "Indicates whether the password dictionary check is enabled for this connection.\n"
                }
            },
            "type": "object"
        },
        "auth0:index/ConnectionOptionsPasswordHistory:ConnectionOptionsPasswordHistory": {
            "properties": {
                "enable": {
                    "type": "boolean",
                    "description": "Indicates whether the password dictionary check is enabled for this connection.\n"
                },
                "size": {
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "auth0:index/ConnectionOptionsPasswordNoPersonalInfo:ConnectionOptionsPasswordNoPersonalInfo": {
            "properties": {
                "enable": {
                    "type": "boolean",
                    "description": "Indicates whether the password dictionary check is enabled for this connection.\n"
                }
            },
            "type": "object"
        },
        "auth0:index/ConnectionOptionsSigningKey:ConnectionOptionsSigningKey": {
            "properties": {
                "cert": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "cert",
                "key"
            ]
        },
        "auth0:index/ConnectionOptionsTotp:ConnectionOptionsTotp": {
            "properties": {
                "length": {
                    "type": "integer",
                    "description": "Length of the one-time password.\n"
                },
                "timeStep": {
                    "type": "integer",
                    "description": "Seconds between allowed generation of new passwords.\n"
                }
            },
            "type": "object"
        },
        "auth0:index/ConnectionOptionsValidation:ConnectionOptionsValidation": {
            "properties": {
                "username": {
                    "$ref": "#/types/auth0:index/ConnectionOptionsValidationUsername:ConnectionOptionsValidationUsername",
                    "description": "Specifies the `min` and `max` values of username length.\n"
                }
            },
            "type": "object"
        },
        "auth0:index/ConnectionOptionsValidationUsername:ConnectionOptionsValidationUsername": {
            "properties": {
                "max": {
                    "type": "integer"
                },
                "min": {
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "auth0:index/CustomDomainVerification:CustomDomainVerification": {
            "properties": {
                "methods": {
                    "type": "array",
                    "items": {
                        "$ref": "pulumi.json#/Any"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "methods"
                    ]
                }
            }
        },
        "auth0:index/EmailProviderCredentials:EmailProviderCredentials": {
            "properties": {
                "accessKeyId": {
                    "type": "string",
                    "description": "AWS Access Key ID. Used only for AWS.\n",
                    "secret": true
                },
                "apiKey": {
                    "type": "string",
                    "description": "API Key for your email service. Will always be encrypted in our database.\n",
                    "secret": true
                },
                "azureCsConnectionString": {
                    "type": "string",
                    "description": "Azure Communication Services Connection String.\n",
                    "secret": true
                },
                "domain": {
                    "type": "string",
                    "description": "Domain name.\n"
                },
                "ms365ClientId": {
                    "type": "string",
                    "description": "Microsoft 365 Client ID.\n",
                    "secret": true
                },
                "ms365ClientSecret": {
                    "type": "string",
                    "description": "Microsoft 365 Client Secret.\n",
                    "secret": true
                },
                "ms365TenantId": {
                    "type": "string",
                    "description": "Microsoft 365 Tenant ID.\n",
                    "secret": true
                },
                "region": {
                    "type": "string",
                    "description": "Default region. Used only for AWS, Mailgun, and SparkPost.\n"
                },
                "secretAccessKey": {
                    "type": "string",
                    "description": "AWS Secret Key. Will always be encrypted in our database. Used only for AWS.\n",
                    "secret": true
                },
                "smtpHost": {
                    "type": "string",
                    "description": "Hostname or IP address of your SMTP server. Used only for SMTP.\n"
                },
                "smtpPass": {
                    "type": "string",
                    "description": "SMTP password. Used only for SMTP.\n",
                    "secret": true
                },
                "smtpPort": {
                    "type": "integer",
                    "description": "Port used by your SMTP server. Please avoid using port 25 if possible because many providers have limitations on this port. Used only for SMTP.\n"
                },
                "smtpUser": {
                    "type": "string",
                    "description": "SMTP username. Used only for SMTP.\n"
                }
            },
            "type": "object"
        },
        "auth0:index/EmailProviderSettings:EmailProviderSettings": {
            "properties": {
                "headers": {
                    "$ref": "#/types/auth0:index/EmailProviderSettingsHeaders:EmailProviderSettingsHeaders",
                    "description": "Headers settings for the `smtp` email provider.\n"
                },
                "message": {
                    "$ref": "#/types/auth0:index/EmailProviderSettingsMessage:EmailProviderSettingsMessage",
                    "description": "Message settings for the `mandrill` or `ses` email provider.\n"
                }
            },
            "type": "object"
        },
        "auth0:index/EmailProviderSettingsHeaders:EmailProviderSettingsHeaders": {
            "properties": {
                "xMcViewContentLink": {
                    "type": "string",
                    "description": "Disable or enable the default View Content Link for sensitive emails.\n"
                },
                "xSesConfigurationSet": {
                    "type": "string",
                    "description": "SES Configuration set to include when sending emails.\n"
                }
            },
            "type": "object"
        },
        "auth0:index/EmailProviderSettingsMessage:EmailProviderSettingsMessage": {
            "properties": {
                "configurationSetName": {
                    "type": "string",
                    "description": "Setting for the `ses` email provider. The name of the configuration set to apply to the sent emails.\n"
                },
                "viewContentLink": {
                    "type": "boolean",
                    "description": "Setting for the `mandrill` email provider. Set to `true` to see the content of individual emails sent to users.\n"
                }
            },
            "type": "object"
        },
        "auth0:index/GuardianDuo:GuardianDuo": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Indicates whether Duo MFA is enabled.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "Duo API Hostname, see the Duo documentation for more details on Duo setup.\n"
                },
                "integrationKey": {
                    "type": "string",
                    "description": "Duo client ID, see the Duo documentation for more details on Duo setup.\n"
                },
                "secretKey": {
                    "type": "string",
                    "description": "Duo client secret, see the Duo documentation for more details on Duo setup.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "auth0:index/GuardianPhone:GuardianPhone": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Indicates whether Phone MFA is enabled.\n"
                },
                "messageTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Message types to use, array of `sms` and/or `voice`. Adding both to the array should enable the user to choose.\n"
                },
                "options": {
                    "$ref": "#/types/auth0:index/GuardianPhoneOptions:GuardianPhoneOptions",
                    "description": "Options for the various providers.\n"
                },
                "provider": {
                    "type": "string",
                    "description": "Provider to use, one of `auth0`, `twilio` or `phone-message-hook`. Selecting `phone-message-hook` will require a Phone Message Action to be created before. [Learn how](https://auth0.com/docs/customize/actions/flows-and-triggers/send-phone-message-flow).\n"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled",
                        "options"
                    ]
                }
            }
        },
        "auth0:index/GuardianPhoneOptions:GuardianPhoneOptions": {
            "properties": {
                "authToken": {
                    "type": "string",
                    "description": "AuthToken for your Twilio account.\n",
                    "secret": true
                },
                "enrollmentMessage": {
                    "type": "string",
                    "description": "This message will be sent whenever a user enrolls a new device for the first time using MFA. Supports Liquid syntax, see [Auth0 docs](https://auth0.com/docs/customize/customize-sms-or-voice-messages).\n"
                },
                "from": {
                    "type": "string",
                    "description": "Phone number to use as the sender.\n"
                },
                "messagingServiceSid": {
                    "type": "string",
                    "description": "Messaging service SID.\n"
                },
                "sid": {
                    "type": "string",
                    "description": "SID for your Twilio account.\n"
                },
                "verificationMessage": {
                    "type": "string",
                    "description": "This message will be sent whenever a user logs in after the enrollment. Supports Liquid syntax, see [Auth0 docs](https://auth0.com/docs/customize/customize-sms-or-voice-messages).\n"
                }
            },
            "type": "object"
        },
        "auth0:index/GuardianPush:GuardianPush": {
            "properties": {
                "amazonSns": {
                    "$ref": "#/types/auth0:index/GuardianPushAmazonSns:GuardianPushAmazonSns",
                    "description": "Configuration for Amazon SNS.\n"
                },
                "customApp": {
                    "$ref": "#/types/auth0:index/GuardianPushCustomApp:GuardianPushCustomApp",
                    "description": "Configuration for the Guardian Custom App.\n"
                },
                "directApns": {
                    "$ref": "#/types/auth0:index/GuardianPushDirectApns:GuardianPushDirectApns",
                    "description": "Configuration for the Apple Push Notification service (APNs) settings.\n"
                },
                "directFcm": {
                    "$ref": "#/types/auth0:index/GuardianPushDirectFcm:GuardianPushDirectFcm",
                    "description": "Configuration for Firebase Cloud Messaging (FCM) settings.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Indicates whether Push MFA is enabled.\n"
                },
                "provider": {
                    "type": "string",
                    "description": "Provider to use, one of `direct`, `guardian`, `sns`.\n"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "amazonSns",
                        "customApp",
                        "directApns",
                        "directFcm",
                        "enabled"
                    ]
                }
            }
        },
        "auth0:index/GuardianPushAmazonSns:GuardianPushAmazonSns": {
            "properties": {
                "awsAccessKeyId": {
                    "type": "string",
                    "description": "Your AWS Access Key ID.\n"
                },
                "awsRegion": {
                    "type": "string",
                    "description": "Your AWS application's region.\n"
                },
                "awsSecretAccessKey": {
                    "type": "string",
                    "description": "Your AWS Secret Access Key.\n",
                    "secret": true
                },
                "snsApnsPlatformApplicationArn": {
                    "type": "string",
                    "description": "The Amazon Resource Name for your Apple Push Notification Service.\n"
                },
                "snsGcmPlatformApplicationArn": {
                    "type": "string",
                    "description": "The Amazon Resource Name for your Firebase Cloud Messaging Service.\n"
                }
            },
            "type": "object",
            "required": [
                "awsAccessKeyId",
                "awsRegion",
                "awsSecretAccessKey",
                "snsApnsPlatformApplicationArn",
                "snsGcmPlatformApplicationArn"
            ]
        },
        "auth0:index/GuardianPushCustomApp:GuardianPushCustomApp": {
            "properties": {
                "appName": {
                    "type": "string",
                    "description": "Custom Application Name.\n"
                },
                "appleAppLink": {
                    "type": "string",
                    "description": "Apple App Store URL. Must be HTTPS or an empty string.\n"
                },
                "googleAppLink": {
                    "type": "string",
                    "description": "Google Store URL. Must be HTTPS or an empty string.\n"
                }
            },
            "type": "object"
        },
        "auth0:index/GuardianPushDirectApns:GuardianPushDirectApns": {
            "properties": {
                "bundleId": {
                    "type": "string",
                    "description": "The Apple Push Notification service Bundle ID.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Indicates whether Duo MFA is enabled.\n"
                },
                "p12": {
                    "type": "string",
                    "description": "The base64 encoded certificate in P12 format.\n",
                    "secret": true
                },
                "sandbox": {
                    "type": "boolean",
                    "description": "Set to true to use the sandbox iOS app environment, otherwise set to false to use the production iOS app environment.\n"
                }
            },
            "type": "object",
            "required": [
                "bundleId",
                "p12",
                "sandbox"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bundleId",
                        "enabled",
                        "p12",
                        "sandbox"
                    ]
                }
            }
        },
        "auth0:index/GuardianPushDirectFcm:GuardianPushDirectFcm": {
            "properties": {
                "serverKey": {
                    "type": "string",
                    "description": "The Firebase Cloud Messaging Server Key. For security purposes, we don’t retrieve your existing FCM server key to check for drift.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "serverKey"
            ]
        },
        "auth0:index/GuardianWebauthnPlatform:GuardianWebauthnPlatform": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Indicates whether WebAuthn with FIDO Device Biometrics MFA is enabled.\n"
                },
                "overrideRelyingParty": {
                    "type": "boolean",
                    "description": "The Relying Party is the domain for which the WebAuthn keys will be issued, set to `true` if you are customizing the identifier.\n"
                },
                "relyingPartyIdentifier": {
                    "type": "string",
                    "description": "The Relying Party should be a suffix of the custom domain.\n"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled",
                        "overrideRelyingParty",
                        "relyingPartyIdentifier"
                    ]
                }
            }
        },
        "auth0:index/GuardianWebauthnRoaming:GuardianWebauthnRoaming": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Indicates whether WebAuthn with FIDO Security Keys MFA is enabled.\n"
                },
                "overrideRelyingParty": {
                    "type": "boolean",
                    "description": "The Relying Party is the domain for which the WebAuthn keys will be issued, set to `true` if you are customizing the identifier.\n"
                },
                "relyingPartyIdentifier": {
                    "type": "string",
                    "description": "The Relying Party should be a suffix of the custom domain.\n"
                },
                "userVerification": {
                    "type": "string",
                    "description": "User verification, one of `discouraged`, `preferred` or `required`.\n"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled",
                        "overrideRelyingParty",
                        "relyingPartyIdentifier",
                        "userVerification"
                    ]
                }
            }
        },
        "auth0:index/LogStreamSink:LogStreamSink": {
            "properties": {
                "awsAccountId": {
                    "type": "string",
                    "description": "The AWS Account ID.\n",
                    "willReplaceOnChanges": true
                },
                "awsPartnerEventSource": {
                    "type": "string",
                    "description": "Name of the Partner Event Source to be used with AWS. Generally generated by Auth0 and passed to AWS, so this should be an output attribute.\n"
                },
                "awsRegion": {
                    "type": "string",
                    "description": "The region in which the EventBridge event source will be created. Possible values: `ap-east-1`, `ap-northeast-1`, `ap-northeast-2`, `ap-northeast-3`, `ap-south-1`, `ap-southeast-1`, `ap-southeast-2`, `ca-central-1`, `cn-north-1`, `cn-northwest-1`, `eu-central-1`, `eu-north-1`, `eu-west-1`, `eu-west-2`, `eu-west-3`, `me-south-1`, `sa-east-1`, `us-gov-east-1`, `us-gov-west-1`, `us-east-1`, `us-east-2`, `us-west-1`, `us-west-2`.\n",
                    "willReplaceOnChanges": true
                },
                "azurePartnerTopic": {
                    "type": "string",
                    "description": "Name of the Partner Topic to be used with Azure. Generally should not be specified.\n"
                },
                "azureRegion": {
                    "type": "string",
                    "description": "The Azure region code. Possible values: `australiacentral`, `australiaeast`, `australiasoutheast`, `brazilsouth`, `canadacentral`, `canadaeast`, `centralindia`, `centralus`, `eastasia`, `eastus`, `eastus2`, `francecentral`, `germanywestcentral`, `japaneast`, `japanwest`, `koreacentral`, `koreasouth`, `northcentralus`, `northeurope`, `norwayeast`, `southafricanorth`, `southcentralus`, `southeastasia`, `southindia`, `switzerlandnorth`, `uaenorth`, `uksouth`, `ukwest`, `westcentralus`, `westeurope`, `westindia`, `westus`, `westus2`.\n",
                    "willReplaceOnChanges": true
                },
                "azureResourceGroup": {
                    "type": "string",
                    "description": "The Azure EventGrid resource group which allows you to manage all Azure assets within one subscription.\n",
                    "willReplaceOnChanges": true
                },
                "azureSubscriptionId": {
                    "type": "string",
                    "description": "The unique alphanumeric string that identifies your Azure subscription.\n",
                    "willReplaceOnChanges": true
                },
                "datadogApiKey": {
                    "type": "string",
                    "description": "The Datadog API key.\n",
                    "secret": true
                },
                "datadogRegion": {
                    "type": "string",
                    "description": "The Datadog region. Possible values: `us`, `eu`, `us3`, `us5`.\n"
                },
                "httpAuthorization": {
                    "type": "string",
                    "description": "Sent in the HTTP \"Authorization\" header with each request.\n",
                    "secret": true
                },
                "httpContentFormat": {
                    "type": "string",
                    "description": "The format of data sent over HTTP. Options are \"JSONLINES\", \"JSONARRAY\" or \"JSONOBJECT\"\n"
                },
                "httpContentType": {
                    "type": "string",
                    "description": "The \"Content-Type\" header to send over HTTP. Common value is \"application/json\".\n"
                },
                "httpCustomHeaders": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "description": "Additional HTTP headers to be included as part of the HTTP request.\n"
                },
                "httpEndpoint": {
                    "type": "string",
                    "description": "The HTTP endpoint to send streaming logs.\n"
                },
                "mixpanelProjectId": {
                    "type": "string",
                    "description": "The Mixpanel project ID, found on the Project Settings page.\n"
                },
                "mixpanelRegion": {
                    "type": "string",
                    "description": "The Mixpanel region. Options are [\"us\", \"eu\"]. EU is required for customers with EU data residency requirements.\n"
                },
                "mixpanelServiceAccountPassword": {
                    "type": "string",
                    "description": "The Mixpanel Service Account password.\n",
                    "secret": true
                },
                "mixpanelServiceAccountUsername": {
                    "type": "string",
                    "description": "The Mixpanel Service Account username. Services Accounts can be created in the Project Settings page.\n"
                },
                "segmentWriteKey": {
                    "type": "string",
                    "description": "The [Segment Write Key](https://segment.com/docs/connections/find-writekey/).\n",
                    "secret": true
                },
                "splunkDomain": {
                    "type": "string",
                    "description": "The Splunk domain name.\n"
                },
                "splunkPort": {
                    "type": "string",
                    "description": "The Splunk port.\n"
                },
                "splunkSecure": {
                    "type": "boolean",
                    "description": "This toggle should be turned off when using self-signed certificates.\n"
                },
                "splunkToken": {
                    "type": "string",
                    "description": "The Splunk access token.\n",
                    "secret": true
                },
                "sumoSourceAddress": {
                    "type": "string",
                    "description": "Generated URL for your defined HTTP source in Sumo Logic for collecting streaming data from Auth0.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "awsPartnerEventSource",
                        "azurePartnerTopic",
                        "httpContentFormat"
                    ]
                }
            }
        },
        "auth0:index/OrganizationBranding:OrganizationBranding": {
            "properties": {
                "colors": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Color scheme used to customize the login pages.\n"
                },
                "logoUrl": {
                    "type": "string",
                    "description": "URL of logo to display on login page.\n"
                }
            },
            "type": "object"
        },
        "auth0:index/OrganizationConnectionsEnabledConnection:OrganizationConnectionsEnabledConnection": {
            "properties": {
                "assignMembershipOnLogin": {
                    "type": "boolean",
                    "description": "When true, all users that log in with this connection will be automatically granted membership in the organization. When false, users must be granted membership in the organization before logging in with this connection.\n"
                },
                "connectionId": {
                    "type": "string",
                    "description": "The ID of the connection to enable for the organization.\n"
                }
            },
            "type": "object",
            "required": [
                "connectionId"
            ]
        },
        "auth0:index/PagesChangePassword:PagesChangePassword": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Indicates whether to use the custom Reset Password HTML (`true`) or the default Auth0 page (`false`).\n"
                },
                "html": {
                    "type": "string",
                    "description": "Customized content for the Reset Password page. HTML format with supported [Liquid syntax](https://github.com/Shopify/liquid/wiki/Liquid-for-Designers).\n"
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "html"
            ]
        },
        "auth0:index/PagesError:PagesError": {
            "properties": {
                "html": {
                    "type": "string",
                    "description": "Customized content for the Error page. HTML format with supported [Liquid syntax](https://github.com/Shopify/liquid/wiki/Liquid-for-Designers).\n"
                },
                "showLogLink": {
                    "type": "boolean",
                    "description": "Indicates whether to show the link to logs as part of the default error page.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL to redirect to when an error occurs, instead of showing the default error page.\n"
                }
            },
            "type": "object",
            "required": [
                "showLogLink"
            ]
        },
        "auth0:index/PagesGuardianMfa:PagesGuardianMfa": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Indicates whether to use the custom Guardian MFA HTML (`true`) or the default Auth0 page (`false`).\n"
                },
                "html": {
                    "type": "string",
                    "description": "Customized content for the Guardian MFA page. HTML format with supported [Liquid syntax](https://github.com/Shopify/liquid/wiki/Liquid-for-Designers).\n"
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "html"
            ]
        },
        "auth0:index/PagesLogin:PagesLogin": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Indicates whether to use the custom Login page HTML (`true`) or the default Auth0 page (`false`).\n"
                },
                "html": {
                    "type": "string",
                    "description": "Customized content for the Login page. HTML format with supported [Liquid syntax](https://github.com/Shopify/liquid/wiki/Liquid-for-Designers).\n"
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "html"
            ]
        },
        "auth0:index/ResourceServerScopesScope:ResourceServerScopesScope": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "User-friendly description of the scope (permission).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the scope (permission). Examples include `read:appointments` or `delete:appointments`.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "auth0:index/RolePermissionsPermission:RolePermissionsPermission": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the permission.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of permission.\n"
                },
                "resourceServerIdentifier": {
                    "type": "string",
                    "description": "Resource server identifier associated with the permission.\n"
                },
                "resourceServerName": {
                    "type": "string",
                    "description": "Name of resource server that the permission is associated with.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "resourceServerIdentifier"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "description",
                        "name",
                        "resourceServerIdentifier",
                        "resourceServerName"
                    ]
                }
            }
        },
        "auth0:index/TenantFlags:TenantFlags": {
            "properties": {
                "allowLegacyDelegationGrantTypes": {
                    "type": "boolean",
                    "description": "Whether the legacy delegation endpoint will be enabled for your account (true) or not available (false).\n"
                },
                "allowLegacyRoGrantTypes": {
                    "type": "boolean",
                    "description": "Whether the legacy `auth/ro` endpoint (used with resource owner password and passwordless features) will be enabled for your account (true) or not available (false).\n"
                },
                "allowLegacyTokeninfoEndpoint": {
                    "type": "boolean",
                    "description": "If enabled, customers can use Tokeninfo Endpoint, otherwise they can not use it.\n"
                },
                "dashboardInsightsView": {
                    "type": "boolean",
                    "description": "Enables new insights activity page view.\n"
                },
                "dashboardLogStreamsNext": {
                    "type": "boolean",
                    "description": "Enables beta access to log streaming changes.\n"
                },
                "disableClickjackProtectionHeaders": {
                    "type": "boolean",
                    "description": "Indicates whether classic Universal Login prompts include additional security headers to prevent clickjacking.\n"
                },
                "disableFieldsMapFix": {
                    "type": "boolean",
                    "description": "Disables SAML fields map fix for bad mappings with repeated attributes.\n"
                },
                "disableManagementApiSmsObfuscation": {
                    "type": "boolean",
                    "description": "If true, SMS phone numbers will not be obfuscated in Management API GET calls.\n"
                },
                "enableAdfsWaadEmailVerification": {
                    "type": "boolean",
                    "description": "If enabled, users will be presented with an email verification prompt during their first login when using Azure AD or ADFS connections.\n"
                },
                "enableApisSection": {
                    "type": "boolean",
                    "description": "Indicates whether the APIs section is enabled for the tenant.\n"
                },
                "enableClientConnections": {
                    "type": "boolean",
                    "description": "Indicates whether all current connections should be enabled when a new client is created.\n"
                },
                "enableCustomDomainInEmails": {
                    "type": "boolean",
                    "description": "Indicates whether the tenant allows custom domains in emails. Before enabling this flag, you must have a custom domain with status: `ready`.\n"
                },
                "enableDynamicClientRegistration": {
                    "type": "boolean",
                    "description": "Indicates whether the tenant allows dynamic client registration.\n"
                },
                "enableIdtokenApi2": {
                    "type": "boolean",
                    "description": "Whether ID tokens can be used to authorize some types of requests to API v2 (true) or not (false).\n"
                },
                "enableLegacyLogsSearchV2": {
                    "type": "boolean",
                    "description": "Indicates whether to use the older v2 legacy logs search.\n"
                },
                "enableLegacyProfile": {
                    "type": "boolean",
                    "description": "Whether ID tokens and the userinfo endpoint includes a complete user profile (true) or only OpenID Connect claims (false).\n"
                },
                "enablePipeline2": {
                    "type": "boolean",
                    "description": "Indicates whether advanced API Authorization scenarios are enabled.\n"
                },
                "enablePublicSignupUserExistsError": {
                    "type": "boolean",
                    "description": "Indicates whether the public sign up process shows a `user_exists` error if the user already exists.\n"
                },
                "mfaShowFactorListOnEnrollment": {
                    "type": "boolean",
                    "description": "Used to allow users to pick which factor to enroll with from the list of available MFA factors.\n"
                },
                "noDiscloseEnterpriseConnections": {
                    "type": "boolean",
                    "description": "Do not Publish Enterprise Connections Information with IdP domains on the lock configuration file.\n"
                },
                "requirePushedAuthorizationRequests": {
                    "type": "boolean",
                    "description": "Makes the use of Pushed Authorization Requests mandatory for all clients across the tenant. This feature currently needs to be enabled on the tenant in order to make use of it.\n"
                },
                "revokeRefreshTokenGrant": {
                    "type": "boolean",
                    "description": "Delete underlying grant when a refresh token is revoked via the Authentication API.\n"
                },
                "useScopeDescriptionsForConsent": {
                    "type": "boolean",
                    "description": "Indicates whether to use scope descriptions for consent.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "allowLegacyDelegationGrantTypes",
                        "allowLegacyRoGrantTypes",
                        "allowLegacyTokeninfoEndpoint",
                        "dashboardInsightsView",
                        "dashboardLogStreamsNext",
                        "disableClickjackProtectionHeaders",
                        "disableFieldsMapFix",
                        "disableManagementApiSmsObfuscation",
                        "enableAdfsWaadEmailVerification",
                        "enableApisSection",
                        "enableClientConnections",
                        "enableCustomDomainInEmails",
                        "enableDynamicClientRegistration",
                        "enableIdtokenApi2",
                        "enableLegacyLogsSearchV2",
                        "enableLegacyProfile",
                        "enablePipeline2",
                        "enablePublicSignupUserExistsError",
                        "mfaShowFactorListOnEnrollment",
                        "noDiscloseEnterpriseConnections",
                        "requirePushedAuthorizationRequests",
                        "revokeRefreshTokenGrant",
                        "useScopeDescriptionsForConsent"
                    ]
                }
            }
        },
        "auth0:index/TenantSessionCookie:TenantSessionCookie": {
            "properties": {
                "mode": {
                    "type": "string",
                    "description": "Behavior of tenant session cookie. Accepts either \"persistent\" or \"non-persistent\".\n"
                }
            },
            "type": "object"
        },
        "auth0:index/TenantSessions:TenantSessions": {
            "properties": {
                "oidcLogoutPromptEnabled": {
                    "type": "boolean",
                    "description": "When active, users will be presented with a consent prompt to confirm the logout request if the request is not trustworthy. Turn off the consent prompt to bypass user confirmation.\n"
                }
            },
            "type": "object",
            "required": [
                "oidcLogoutPromptEnabled"
            ]
        },
        "auth0:index/TriggerActionsAction:TriggerActionsAction": {
            "properties": {
                "displayName": {
                    "type": "string",
                    "description": "The display name of the action within the flow.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Action ID.\n"
                }
            },
            "type": "object",
            "required": [
                "displayName",
                "id"
            ]
        },
        "auth0:index/UserPermissionsPermission:UserPermissionsPermission": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the permission.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of permission.\n"
                },
                "resourceServerIdentifier": {
                    "type": "string",
                    "description": "Resource server identifier associated with the permission.\n"
                },
                "resourceServerName": {
                    "type": "string",
                    "description": "Name of resource server that the permission is associated with.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "resourceServerIdentifier"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "description",
                        "name",
                        "resourceServerIdentifier",
                        "resourceServerName"
                    ]
                }
            }
        },
        "auth0:index/getAttackProtectionBreachedPasswordDetection:getAttackProtectionBreachedPasswordDetection": {
            "properties": {
                "adminNotificationFrequencies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "enabled": {
                    "type": "boolean"
                },
                "method": {
                    "type": "string"
                },
                "preUserRegistrations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/auth0:index/getAttackProtectionBreachedPasswordDetectionPreUserRegistration:getAttackProtectionBreachedPasswordDetectionPreUserRegistration"
                    }
                },
                "shields": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "adminNotificationFrequencies",
                "enabled",
                "method",
                "preUserRegistrations",
                "shields"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getAttackProtectionBreachedPasswordDetectionPreUserRegistration:getAttackProtectionBreachedPasswordDetectionPreUserRegistration": {
            "properties": {
                "shields": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "shields"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getAttackProtectionBruteForceProtection:getAttackProtectionBruteForceProtection": {
            "properties": {
                "allowlists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "enabled": {
                    "type": "boolean"
                },
                "maxAttempts": {
                    "type": "integer"
                },
                "mode": {
                    "type": "string"
                },
                "shields": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "allowlists",
                "enabled",
                "maxAttempts",
                "mode",
                "shields"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getAttackProtectionSuspiciousIpThrottling:getAttackProtectionSuspiciousIpThrottling": {
            "properties": {
                "allowlists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "enabled": {
                    "type": "boolean"
                },
                "preLogins": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/auth0:index/getAttackProtectionSuspiciousIpThrottlingPreLogin:getAttackProtectionSuspiciousIpThrottlingPreLogin"
                    }
                },
                "preUserRegistrations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/auth0:index/getAttackProtectionSuspiciousIpThrottlingPreUserRegistration:getAttackProtectionSuspiciousIpThrottlingPreUserRegistration"
                    }
                },
                "shields": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "allowlists",
                "enabled",
                "preLogins",
                "preUserRegistrations",
                "shields"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getAttackProtectionSuspiciousIpThrottlingPreLogin:getAttackProtectionSuspiciousIpThrottlingPreLogin": {
            "properties": {
                "maxAttempts": {
                    "type": "integer"
                },
                "rate": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "maxAttempts",
                "rate"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getAttackProtectionSuspiciousIpThrottlingPreUserRegistration:getAttackProtectionSuspiciousIpThrottlingPreUserRegistration": {
            "properties": {
                "maxAttempts": {
                    "type": "integer"
                },
                "rate": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "maxAttempts",
                "rate"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getBrandingColor:getBrandingColor": {
            "properties": {
                "pageBackground": {
                    "type": "string"
                },
                "primary": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "pageBackground",
                "primary"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getBrandingFont:getBrandingFont": {
            "properties": {
                "url": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getBrandingThemeBorder:getBrandingThemeBorder": {
            "properties": {
                "buttonBorderRadius": {
                    "type": "number"
                },
                "buttonBorderWeight": {
                    "type": "number"
                },
                "buttonsStyle": {
                    "type": "string"
                },
                "inputBorderRadius": {
                    "type": "number"
                },
                "inputBorderWeight": {
                    "type": "number"
                },
                "inputsStyle": {
                    "type": "string"
                },
                "showWidgetShadow": {
                    "type": "boolean"
                },
                "widgetBorderWeight": {
                    "type": "number"
                },
                "widgetCornerRadius": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "buttonBorderRadius",
                "buttonBorderWeight",
                "buttonsStyle",
                "inputBorderRadius",
                "inputBorderWeight",
                "inputsStyle",
                "showWidgetShadow",
                "widgetBorderWeight",
                "widgetCornerRadius"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getBrandingThemeColor:getBrandingThemeColor": {
            "properties": {
                "baseFocusColor": {
                    "type": "string"
                },
                "baseHoverColor": {
                    "type": "string"
                },
                "bodyText": {
                    "type": "string"
                },
                "error": {
                    "type": "string"
                },
                "header": {
                    "type": "string"
                },
                "icons": {
                    "type": "string"
                },
                "inputBackground": {
                    "type": "string"
                },
                "inputBorder": {
                    "type": "string"
                },
                "inputFilledText": {
                    "type": "string"
                },
                "inputLabelsPlaceholders": {
                    "type": "string"
                },
                "linksFocusedComponents": {
                    "type": "string"
                },
                "primaryButton": {
                    "type": "string"
                },
                "primaryButtonLabel": {
                    "type": "string"
                },
                "secondaryButtonBorder": {
                    "type": "string"
                },
                "secondaryButtonLabel": {
                    "type": "string"
                },
                "success": {
                    "type": "string"
                },
                "widgetBackground": {
                    "type": "string"
                },
                "widgetBorder": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "baseFocusColor",
                "baseHoverColor",
                "bodyText",
                "error",
                "header",
                "icons",
                "inputBackground",
                "inputBorder",
                "inputFilledText",
                "inputLabelsPlaceholders",
                "linksFocusedComponents",
                "primaryButton",
                "primaryButtonLabel",
                "secondaryButtonBorder",
                "secondaryButtonLabel",
                "success",
                "widgetBackground",
                "widgetBorder"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getBrandingThemeFont:getBrandingThemeFont": {
            "properties": {
                "bodyTexts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/auth0:index/getBrandingThemeFontBodyText:getBrandingThemeFontBodyText"
                    }
                },
                "buttonsTexts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/auth0:index/getBrandingThemeFontButtonsText:getBrandingThemeFontButtonsText"
                    }
                },
                "fontUrl": {
                    "type": "string"
                },
                "inputLabels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/auth0:index/getBrandingThemeFontInputLabel:getBrandingThemeFontInputLabel"
                    }
                },
                "links": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/auth0:index/getBrandingThemeFontLink:getBrandingThemeFontLink"
                    }
                },
                "linksStyle": {
                    "type": "string"
                },
                "referenceTextSize": {
                    "type": "number"
                },
                "subtitles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/auth0:index/getBrandingThemeFontSubtitle:getBrandingThemeFontSubtitle"
                    }
                },
                "titles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/auth0:index/getBrandingThemeFontTitle:getBrandingThemeFontTitle"
                    }
                }
            },
            "type": "object",
            "required": [
                "bodyTexts",
                "buttonsTexts",
                "fontUrl",
                "inputLabels",
                "links",
                "linksStyle",
                "referenceTextSize",
                "subtitles",
                "titles"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getBrandingThemeFontBodyText:getBrandingThemeFontBodyText": {
            "properties": {
                "bold": {
                    "type": "boolean"
                },
                "size": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "bold",
                "size"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getBrandingThemeFontButtonsText:getBrandingThemeFontButtonsText": {
            "properties": {
                "bold": {
                    "type": "boolean"
                },
                "size": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "bold",
                "size"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getBrandingThemeFontInputLabel:getBrandingThemeFontInputLabel": {
            "properties": {
                "bold": {
                    "type": "boolean"
                },
                "size": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "bold",
                "size"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getBrandingThemeFontLink:getBrandingThemeFontLink": {
            "properties": {
                "bold": {
                    "type": "boolean"
                },
                "size": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "bold",
                "size"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getBrandingThemeFontSubtitle:getBrandingThemeFontSubtitle": {
            "properties": {
                "bold": {
                    "type": "boolean"
                },
                "size": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "bold",
                "size"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getBrandingThemeFontTitle:getBrandingThemeFontTitle": {
            "properties": {
                "bold": {
                    "type": "boolean"
                },
                "size": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "bold",
                "size"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getBrandingThemePageBackground:getBrandingThemePageBackground": {
            "properties": {
                "backgroundColor": {
                    "type": "string"
                },
                "backgroundImageUrl": {
                    "type": "string"
                },
                "pageLayout": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "backgroundColor",
                "backgroundImageUrl",
                "pageLayout"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getBrandingThemeWidget:getBrandingThemeWidget": {
            "properties": {
                "headerTextAlignment": {
                    "type": "string"
                },
                "logoHeight": {
                    "type": "number"
                },
                "logoPosition": {
                    "type": "string"
                },
                "logoUrl": {
                    "type": "string"
                },
                "socialButtonsLayout": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "headerTextAlignment",
                "logoHeight",
                "logoPosition",
                "logoUrl",
                "socialButtonsLayout"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getBrandingUniversalLogin:getBrandingUniversalLogin": {
            "properties": {
                "body": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "body"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getClientAddon:getClientAddon": {
            "properties": {
                "aws": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/auth0:index/getClientAddonAw:getClientAddonAw"
                    }
                },
                "azureBlobs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/auth0:index/getClientAddonAzureBlob:getClientAddonAzureBlob"
                    }
                },
                "azureSbs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/auth0:index/getClientAddonAzureSb:getClientAddonAzureSb"
                    }
                },
                "boxes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/auth0:index/getClientAddonBox:getClientAddonBox"
                    }
                },
                "cloudbees": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/auth0:index/getClientAddonCloudbee:getClientAddonCloudbee"
                    }
                },
                "concurs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/auth0:index/getClientAddonConcur:getClientAddonConcur"
                    }
                },
                "dropboxes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/auth0:index/getClientAddonDropbox:getClientAddonDropbox"
                    }
                },
                "echosigns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/auth0:index/getClientAddonEchosign:getClientAddonEchosign"
                    }
                },
                "egnytes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/auth0:index/getClientAddonEgnyte:getClientAddonEgnyte"
                    }
                },
                "firebases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/auth0:index/getClientAddonFirebase:getClientAddonFirebase"
                    }
                },
                "layers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/auth0:index/getClientAddonLayer:getClientAddonLayer"
                    }
                },
                "mscrms": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/auth0:index/getClientAddonMscrm:getClientAddonMscrm"
                    }
                },
                "newrelics": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/auth0:index/getClientAddonNewrelic:getClientAddonNewrelic"
                    }
                },
                "office365s": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/auth0:index/getClientAddonOffice365:getClientAddonOffice365"
                    }
                },
                "rms": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/auth0:index/getClientAddonRm:getClientAddonRm"
                    }
                },
                "salesforceApis": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/auth0:index/getClientAddonSalesforceApi:getClientAddonSalesforceApi"
                    }
                },
                "salesforceSandboxApis": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/auth0:index/getClientAddonSalesforceSandboxApi:getClientAddonSalesforceSandboxApi"
                    }
                },
                "salesforces": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/auth0:index/getClientAddonSalesforce:getClientAddonSalesforce"
                    }
                },
                "samlps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/auth0:index/getClientAddonSamlp:getClientAddonSamlp"
                    }
                },
                "sapApis": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/auth0:index/getClientAddonSapApi:getClientAddonSapApi"
                    }
                },
                "sentries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/auth0:index/getClientAddonSentry:getClientAddonSentry"
                    }
                },
                "sharepoints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/auth0:index/getClientAddonSharepoint:getClientAddonSharepoint"
                    }
                },
                "slacks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/auth0:index/getClientAddonSlack:getClientAddonSlack"
                    }
                },
                "springcms": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/auth0:index/getClientAddonSpringcm:getClientAddonSpringcm"
                    }
                },
                "ssoIntegrations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/auth0:index/getClientAddonSsoIntegration:getClientAddonSsoIntegration"
                    }
                },
                "wams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/auth0:index/getClientAddonWam:getClientAddonWam"
                    }
                },
                "wsfeds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/auth0:index/getClientAddonWsfed:getClientAddonWsfed"
                    }
                },
                "zendesks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/auth0:index/getClientAddonZendesk:getClientAddonZendesk"
                    }
                },
                "zooms": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/auth0:index/getClientAddonZoom:getClientAddonZoom"
                    }
                }
            },
            "type": "object",
            "required": [
                "aws",
                "azureBlobs",
                "azureSbs",
                "boxes",
                "cloudbees",
                "concurs",
                "dropboxes",
                "echosigns",
                "egnytes",
                "firebases",
                "layers",
                "mscrms",
                "newrelics",
                "office365s",
                "rms",
                "salesforces",
                "salesforceApis",
                "salesforceSandboxApis",
                "samlps",
                "sapApis",
                "sentries",
                "sharepoints",
                "slacks",
                "springcms",
                "ssoIntegrations",
                "wams",
                "wsfeds",
                "zendesks",
                "zooms"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getClientAddonAw:getClientAddonAw": {
            "properties": {
                "lifetimeInSeconds": {
                    "type": "integer"
                },
                "principal": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "lifetimeInSeconds",
                "principal",
                "role"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getClientAddonAzureBlob:getClientAddonAzureBlob": {
            "properties": {
                "accountName": {
                    "type": "string"
                },
                "blobDelete": {
                    "type": "boolean"
                },
                "blobName": {
                    "type": "string"
                },
                "blobRead": {
                    "type": "boolean"
                },
                "blobWrite": {
                    "type": "boolean"
                },
                "containerDelete": {
                    "type": "boolean"
                },
                "containerList": {
                    "type": "boolean"
                },
                "containerName": {
                    "type": "string"
                },
                "containerRead": {
                    "type": "boolean"
                },
                "containerWrite": {
                    "type": "boolean"
                },
                "expiration": {
                    "type": "integer"
                },
                "signedIdentifier": {
                    "type": "string"
                },
                "storageAccessKey": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accountName",
                "blobDelete",
                "blobName",
                "blobRead",
                "blobWrite",
                "containerDelete",
                "containerList",
                "containerName",
                "containerRead",
                "containerWrite",
                "expiration",
                "signedIdentifier",
                "storageAccessKey"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getClientAddonAzureSb:getClientAddonAzureSb": {
            "properties": {
                "entityPath": {
                    "type": "string"
                },
                "expiration": {
                    "type": "integer"
                },
                "namespace": {
                    "type": "string"
                },
                "sasKey": {
                    "type": "string"
                },
                "sasKeyName": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "entityPath",
                "expiration",
                "namespace",
                "sasKey",
                "sasKeyName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getClientAddonBox:getClientAddonBox": {
            "type": "object"
        },
        "auth0:index/getClientAddonCloudbee:getClientAddonCloudbee": {
            "type": "object"
        },
        "auth0:index/getClientAddonConcur:getClientAddonConcur": {
            "type": "object"
        },
        "auth0:index/getClientAddonDropbox:getClientAddonDropbox": {
            "type": "object"
        },
        "auth0:index/getClientAddonEchosign:getClientAddonEchosign": {
            "properties": {
                "domain": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "domain"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getClientAddonEgnyte:getClientAddonEgnyte": {
            "properties": {
                "domain": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "domain"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getClientAddonFirebase:getClientAddonFirebase": {
            "properties": {
                "clientEmail": {
                    "type": "string"
                },
                "lifetimeInSeconds": {
                    "type": "integer"
                },
                "privateKey": {
                    "type": "string"
                },
                "privateKeyId": {
                    "type": "string"
                },
                "secret": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "clientEmail",
                "lifetimeInSeconds",
                "privateKey",
                "privateKeyId",
                "secret"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getClientAddonLayer:getClientAddonLayer": {
            "properties": {
                "expiration": {
                    "type": "integer"
                },
                "keyId": {
                    "type": "string"
                },
                "principal": {
                    "type": "string"
                },
                "privateKey": {
                    "type": "string"
                },
                "providerId": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "expiration",
                "keyId",
                "principal",
                "privateKey",
                "providerId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getClientAddonMscrm:getClientAddonMscrm": {
            "properties": {
                "url": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getClientAddonNewrelic:getClientAddonNewrelic": {
            "properties": {
                "account": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "account"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getClientAddonOffice365:getClientAddonOffice365": {
            "properties": {
                "connection": {
                    "type": "string"
                },
                "domain": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "connection",
                "domain"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getClientAddonRm:getClientAddonRm": {
            "properties": {
                "url": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getClientAddonSalesforce:getClientAddonSalesforce": {
            "properties": {
                "entityId": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "entityId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getClientAddonSalesforceApi:getClientAddonSalesforceApi": {
            "properties": {
                "clientId": {
                    "type": "string"
                },
                "communityName": {
                    "type": "string"
                },
                "communityUrlSection": {
                    "type": "string"
                },
                "principal": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "clientId",
                "communityName",
                "communityUrlSection",
                "principal"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getClientAddonSalesforceSandboxApi:getClientAddonSalesforceSandboxApi": {
            "properties": {
                "clientId": {
                    "type": "string"
                },
                "communityName": {
                    "type": "string"
                },
                "communityUrlSection": {
                    "type": "string"
                },
                "principal": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "clientId",
                "communityName",
                "communityUrlSection",
                "principal"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getClientAddonSamlp:getClientAddonSamlp": {
            "properties": {
                "audience": {
                    "type": "string"
                },
                "authnContextClassRef": {
                    "type": "string"
                },
                "binding": {
                    "type": "string"
                },
                "createUpnClaim": {
                    "type": "boolean"
                },
                "destination": {
                    "type": "string"
                },
                "digestAlgorithm": {
                    "type": "string"
                },
                "includeAttributeNameFormat": {
                    "type": "boolean"
                },
                "issuer": {
                    "type": "string"
                },
                "lifetimeInSeconds": {
                    "type": "integer"
                },
                "logouts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/auth0:index/getClientAddonSamlpLogout:getClientAddonSamlpLogout"
                    }
                },
                "mapIdentities": {
                    "type": "boolean"
                },
                "mapUnknownClaimsAsIs": {
                    "type": "boolean"
                },
                "mappings": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    }
                },
                "nameIdentifierFormat": {
                    "type": "string"
                },
                "nameIdentifierProbes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "passthroughClaimsWithNoMapping": {
                    "type": "boolean"
                },
                "recipient": {
                    "type": "string"
                },
                "signResponse": {
                    "type": "boolean"
                },
                "signatureAlgorithm": {
                    "type": "string"
                },
                "signingCert": {
                    "type": "string"
                },
                "typedAttributes": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "audience",
                "authnContextClassRef",
                "binding",
                "createUpnClaim",
                "destination",
                "digestAlgorithm",
                "includeAttributeNameFormat",
                "issuer",
                "lifetimeInSeconds",
                "logouts",
                "mapIdentities",
                "mapUnknownClaimsAsIs",
                "mappings",
                "nameIdentifierFormat",
                "nameIdentifierProbes",
                "passthroughClaimsWithNoMapping",
                "recipient",
                "signResponse",
                "signatureAlgorithm",
                "signingCert",
                "typedAttributes"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getClientAddonSamlpLogout:getClientAddonSamlpLogout": {
            "properties": {
                "callback": {
                    "type": "string"
                },
                "sloEnabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "callback",
                "sloEnabled"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getClientAddonSapApi:getClientAddonSapApi": {
            "properties": {
                "clientId": {
                    "type": "string"
                },
                "nameIdentifierFormat": {
                    "type": "string"
                },
                "scope": {
                    "type": "string"
                },
                "servicePassword": {
                    "type": "string"
                },
                "tokenEndpointUrl": {
                    "type": "string"
                },
                "usernameAttribute": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "clientId",
                "nameIdentifierFormat",
                "scope",
                "servicePassword",
                "tokenEndpointUrl",
                "usernameAttribute"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getClientAddonSentry:getClientAddonSentry": {
            "properties": {
                "baseUrl": {
                    "type": "string"
                },
                "orgSlug": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "baseUrl",
                "orgSlug"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getClientAddonSharepoint:getClientAddonSharepoint": {
            "properties": {
                "externalUrls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "url": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "externalUrls",
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getClientAddonSlack:getClientAddonSlack": {
            "properties": {
                "team": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "team"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getClientAddonSpringcm:getClientAddonSpringcm": {
            "properties": {
                "acsUrl": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "acsUrl"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getClientAddonSsoIntegration:getClientAddonSsoIntegration": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "name",
                "version"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getClientAddonWam:getClientAddonWam": {
            "properties": {
                "masterKey": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "masterKey"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getClientAddonWsfed:getClientAddonWsfed": {
            "type": "object"
        },
        "auth0:index/getClientAddonZendesk:getClientAddonZendesk": {
            "properties": {
                "accountName": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accountName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getClientAddonZoom:getClientAddonZoom": {
            "properties": {
                "account": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "account"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getClientJwtConfiguration:getClientJwtConfiguration": {
            "properties": {
                "alg": {
                    "type": "string"
                },
                "lifetimeInSeconds": {
                    "type": "integer"
                },
                "scopes": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "secretEncoded": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "alg",
                "lifetimeInSeconds",
                "scopes",
                "secretEncoded"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getClientMobile:getClientMobile": {
            "properties": {
                "androids": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/auth0:index/getClientMobileAndroid:getClientMobileAndroid"
                    }
                },
                "ios": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/auth0:index/getClientMobileIo:getClientMobileIo"
                    }
                }
            },
            "type": "object",
            "required": [
                "androids",
                "ios"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getClientMobileAndroid:getClientMobileAndroid": {
            "properties": {
                "appPackageName": {
                    "type": "string"
                },
                "sha256CertFingerprints": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "appPackageName",
                "sha256CertFingerprints"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getClientMobileIo:getClientMobileIo": {
            "properties": {
                "appBundleIdentifier": {
                    "type": "string"
                },
                "teamId": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "appBundleIdentifier",
                "teamId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getClientNativeSocialLogin:getClientNativeSocialLogin": {
            "properties": {
                "apples": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/auth0:index/getClientNativeSocialLoginApple:getClientNativeSocialLoginApple"
                    }
                },
                "facebooks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/auth0:index/getClientNativeSocialLoginFacebook:getClientNativeSocialLoginFacebook"
                    }
                }
            },
            "type": "object",
            "required": [
                "apples",
                "facebooks"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getClientNativeSocialLoginApple:getClientNativeSocialLoginApple": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getClientNativeSocialLoginFacebook:getClientNativeSocialLoginFacebook": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getClientRefreshToken:getClientRefreshToken": {
            "properties": {
                "expirationType": {
                    "type": "string"
                },
                "idleTokenLifetime": {
                    "type": "integer"
                },
                "infiniteIdleTokenLifetime": {
                    "type": "boolean"
                },
                "infiniteTokenLifetime": {
                    "type": "boolean"
                },
                "leeway": {
                    "type": "integer"
                },
                "rotationType": {
                    "type": "string"
                },
                "tokenLifetime": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "expirationType",
                "idleTokenLifetime",
                "infiniteIdleTokenLifetime",
                "infiniteTokenLifetime",
                "leeway",
                "rotationType",
                "tokenLifetime"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getConnectionOption:getConnectionOption": {
            "properties": {
                "adfsServer": {
                    "type": "string"
                },
                "allowedAudiences": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "apiEnableUsers": {
                    "type": "boolean"
                },
                "appId": {
                    "type": "string"
                },
                "attributeMaps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/auth0:index/getConnectionOptionAttributeMap:getConnectionOptionAttributeMap"
                    }
                },
                "authParams": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "authorizationEndpoint": {
                    "type": "string"
                },
                "bruteForceProtection": {
                    "type": "boolean"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "communityBaseUrl": {
                    "type": "string"
                },
                "configuration": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    }
                },
                "connectionSettings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/auth0:index/getConnectionOptionConnectionSetting:getConnectionOptionConnectionSetting"
                    }
                },
                "customScripts": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "debug": {
                    "type": "boolean"
                },
                "decryptionKeys": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/auth0:index/getConnectionOptionDecryptionKey:getConnectionOptionDecryptionKey"
                    }
                },
                "digestAlgorithm": {
                    "type": "string"
                },
                "disableCache": {
                    "type": "boolean"
                },
                "disableSelfServiceChangePassword": {
                    "type": "boolean"
                },
                "disableSignOut": {
                    "type": "boolean"
                },
                "disableSignup": {
                    "type": "boolean"
                },
                "discoveryUrl": {
                    "type": "string"
                },
                "domain": {
                    "type": "string"
                },
                "domainAliases": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "enableScriptContext": {
                    "type": "boolean"
                },
                "enabledDatabaseCustomization": {
                    "type": "boolean"
                },
                "entityId": {
                    "type": "string"
                },
                "fedMetadataXml": {
                    "type": "string"
                },
                "fieldsMap": {
                    "type": "string"
                },
                "forwardRequestInfo": {
                    "type": "boolean"
                },
                "from": {
                    "type": "string"
                },
                "gatewayAuthentications": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/auth0:index/getConnectionOptionGatewayAuthentication:getConnectionOptionGatewayAuthentication"
                    }
                },
                "gatewayUrl": {
                    "type": "string"
                },
                "iconUrl": {
                    "type": "string"
                },
                "identityApi": {
                    "type": "string"
                },
                "idpInitiateds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/auth0:index/getConnectionOptionIdpInitiated:getConnectionOptionIdpInitiated"
                    }
                },
                "importMode": {
                    "type": "boolean"
                },
                "ips": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "issuer": {
                    "type": "string"
                },
                "jwksUri": {
                    "type": "string"
                },
                "keyId": {
                    "type": "string"
                },
                "mapUserIdToId": {
                    "type": "boolean"
                },
                "maxGroupsToRetrieve": {
                    "type": "string"
                },
                "messagingServiceSid": {
                    "type": "string"
                },
                "metadataUrl": {
                    "type": "string"
                },
                "metadataXml": {
                    "type": "string"
                },
                "mfas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/auth0:index/getConnectionOptionMfa:getConnectionOptionMfa"
                    }
                },
                "name": {
                    "type": "string"
                },
                "nonPersistentAttrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "passwordComplexityOptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/auth0:index/getConnectionOptionPasswordComplexityOption:getConnectionOptionPasswordComplexityOption"
                    }
                },
                "passwordDictionaries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/auth0:index/getConnectionOptionPasswordDictionary:getConnectionOptionPasswordDictionary"
                    }
                },
                "passwordHistories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/auth0:index/getConnectionOptionPasswordHistory:getConnectionOptionPasswordHistory"
                    }
                },
                "passwordNoPersonalInfos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/auth0:index/getConnectionOptionPasswordNoPersonalInfo:getConnectionOptionPasswordNoPersonalInfo"
                    }
                },
                "passwordPolicy": {
                    "type": "string"
                },
                "pingFederateBaseUrl": {
                    "type": "string"
                },
                "pkceEnabled": {
                    "type": "boolean"
                },
                "protocolBinding": {
                    "type": "string"
                },
                "provider": {
                    "type": "string"
                },
                "requestTemplate": {
                    "type": "string"
                },
                "requiresUsername": {
                    "type": "boolean"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "scripts": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "setUserRootAttributes": {
                    "type": "string"
                },
                "shouldTrustEmailVerifiedConnection": {
                    "type": "string"
                },
                "signInEndpoint": {
                    "type": "string"
                },
                "signOutEndpoint": {
                    "type": "string"
                },
                "signSamlRequest": {
                    "type": "boolean"
                },
                "signatureAlgorithm": {
                    "type": "string"
                },
                "signingCert": {
                    "type": "string"
                },
                "signingKeys": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/auth0:index/getConnectionOptionSigningKey:getConnectionOptionSigningKey"
                    }
                },
                "strategyVersion": {
                    "type": "integer"
                },
                "subject": {
                    "type": "string"
                },
                "syntax": {
                    "type": "string"
                },
                "teamId": {
                    "type": "string"
                },
                "template": {
                    "type": "string"
                },
                "tenantDomain": {
                    "type": "string"
                },
                "tokenEndpoint": {
                    "type": "string"
                },
                "totps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/auth0:index/getConnectionOptionTotp:getConnectionOptionTotp"
                    }
                },
                "twilioSid": {
                    "type": "string"
                },
                "twilioToken": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "upstreamParams": {
                    "type": "string"
                },
                "useCertAuth": {
                    "type": "boolean"
                },
                "useKerberos": {
                    "type": "boolean"
                },
                "useWsfed": {
                    "type": "boolean"
                },
                "userIdAttribute": {
                    "type": "string"
                },
                "userinfoEndpoint": {
                    "type": "string"
                },
                "validations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/auth0:index/getConnectionOptionValidation:getConnectionOptionValidation"
                    }
                },
                "waadCommonEndpoint": {
                    "type": "boolean"
                },
                "waadProtocol": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "adfsServer",
                "allowedAudiences",
                "apiEnableUsers",
                "appId",
                "attributeMaps",
                "authParams",
                "authorizationEndpoint",
                "bruteForceProtection",
                "clientId",
                "clientSecret",
                "communityBaseUrl",
                "configuration",
                "connectionSettings",
                "customScripts",
                "debug",
                "decryptionKeys",
                "digestAlgorithm",
                "disableCache",
                "disableSelfServiceChangePassword",
                "disableSignOut",
                "disableSignup",
                "discoveryUrl",
                "domain",
                "domainAliases",
                "enableScriptContext",
                "enabledDatabaseCustomization",
                "entityId",
                "fedMetadataXml",
                "fieldsMap",
                "forwardRequestInfo",
                "from",
                "gatewayAuthentications",
                "gatewayUrl",
                "iconUrl",
                "identityApi",
                "idpInitiateds",
                "importMode",
                "ips",
                "issuer",
                "jwksUri",
                "keyId",
                "mapUserIdToId",
                "maxGroupsToRetrieve",
                "messagingServiceSid",
                "metadataUrl",
                "metadataXml",
                "mfas",
                "name",
                "nonPersistentAttrs",
                "passwordComplexityOptions",
                "passwordDictionaries",
                "passwordHistories",
                "passwordNoPersonalInfos",
                "passwordPolicy",
                "pingFederateBaseUrl",
                "pkceEnabled",
                "protocolBinding",
                "provider",
                "requestTemplate",
                "requiresUsername",
                "scopes",
                "scripts",
                "setUserRootAttributes",
                "shouldTrustEmailVerifiedConnection",
                "signInEndpoint",
                "signOutEndpoint",
                "signSamlRequest",
                "signatureAlgorithm",
                "signingCert",
                "signingKeys",
                "strategyVersion",
                "subject",
                "syntax",
                "teamId",
                "template",
                "tenantDomain",
                "tokenEndpoint",
                "totps",
                "twilioSid",
                "twilioToken",
                "type",
                "upstreamParams",
                "useCertAuth",
                "useKerberos",
                "useWsfed",
                "userIdAttribute",
                "userinfoEndpoint",
                "validations",
                "waadCommonEndpoint",
                "waadProtocol"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getConnectionOptionAttributeMap:getConnectionOptionAttributeMap": {
            "properties": {
                "attributes": {
                    "type": "string"
                },
                "mappingMode": {
                    "type": "string"
                },
                "userinfoScope": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "attributes",
                "mappingMode",
                "userinfoScope"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getConnectionOptionConnectionSetting:getConnectionOptionConnectionSetting": {
            "properties": {
                "pkce": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "pkce"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getConnectionOptionDecryptionKey:getConnectionOptionDecryptionKey": {
            "properties": {
                "cert": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "cert",
                "key"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getConnectionOptionGatewayAuthentication:getConnectionOptionGatewayAuthentication": {
            "properties": {
                "audience": {
                    "type": "string"
                },
                "method": {
                    "type": "string"
                },
                "secret": {
                    "type": "string"
                },
                "secretBase64Encoded": {
                    "type": "boolean"
                },
                "subject": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "audience",
                "method",
                "secret",
                "secretBase64Encoded",
                "subject"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getConnectionOptionIdpInitiated:getConnectionOptionIdpInitiated": {
            "properties": {
                "clientAuthorizeQuery": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientProtocol": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "clientAuthorizeQuery",
                "clientId",
                "clientProtocol"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getConnectionOptionMfa:getConnectionOptionMfa": {
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "returnEnrollSettings": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "active",
                "returnEnrollSettings"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getConnectionOptionPasswordComplexityOption:getConnectionOptionPasswordComplexityOption": {
            "properties": {
                "minLength": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "minLength"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getConnectionOptionPasswordDictionary:getConnectionOptionPasswordDictionary": {
            "properties": {
                "dictionaries": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "enable": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "dictionaries",
                "enable"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getConnectionOptionPasswordHistory:getConnectionOptionPasswordHistory": {
            "properties": {
                "enable": {
                    "type": "boolean"
                },
                "size": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "enable",
                "size"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getConnectionOptionPasswordNoPersonalInfo:getConnectionOptionPasswordNoPersonalInfo": {
            "properties": {
                "enable": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "enable"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getConnectionOptionSigningKey:getConnectionOptionSigningKey": {
            "properties": {
                "cert": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "cert",
                "key"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getConnectionOptionTotp:getConnectionOptionTotp": {
            "properties": {
                "length": {
                    "type": "integer"
                },
                "timeStep": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "length",
                "timeStep"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getConnectionOptionValidation:getConnectionOptionValidation": {
            "properties": {
                "usernames": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/auth0:index/getConnectionOptionValidationUsername:getConnectionOptionValidationUsername"
                    }
                }
            },
            "type": "object",
            "required": [
                "usernames"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getConnectionOptionValidationUsername:getConnectionOptionValidationUsername": {
            "properties": {
                "max": {
                    "type": "integer"
                },
                "min": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "max",
                "min"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getCustomDomainVerification:getCustomDomainVerification": {
            "properties": {
                "methods": {
                    "type": "array",
                    "items": {
                        "$ref": "pulumi.json#/Any"
                    }
                }
            },
            "type": "object",
            "required": [
                "methods"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getOrganizationBranding:getOrganizationBranding": {
            "properties": {
                "colors": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "logoUrl": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "colors",
                "logoUrl"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getOrganizationConnection:getOrganizationConnection": {
            "properties": {
                "assignMembershipOnLogin": {
                    "type": "boolean"
                },
                "connectionId": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "assignMembershipOnLogin",
                "connectionId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getPagesChangePassword:getPagesChangePassword": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "html": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "html"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getPagesError:getPagesError": {
            "properties": {
                "html": {
                    "type": "string"
                },
                "showLogLink": {
                    "type": "boolean"
                },
                "url": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "html",
                "showLogLink",
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getPagesGuardianMfa:getPagesGuardianMfa": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "html": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "html"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getPagesLogin:getPagesLogin": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "html": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "html"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getResourceServerScope:getResourceServerScope": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "description",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getRolePermission:getRolePermission": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "resourceServerIdentifier": {
                    "type": "string"
                },
                "resourceServerName": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "description",
                "name",
                "resourceServerIdentifier",
                "resourceServerName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getSigningKeysSigningKey:getSigningKeysSigningKey": {
            "properties": {
                "cert": {
                    "type": "string"
                },
                "current": {
                    "type": "boolean"
                },
                "fingerprint": {
                    "type": "string"
                },
                "kid": {
                    "type": "string"
                },
                "next": {
                    "type": "boolean"
                },
                "pkcs7": {
                    "type": "string"
                },
                "previous": {
                    "type": "boolean"
                },
                "revoked": {
                    "type": "boolean"
                },
                "thumbprint": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "cert",
                "current",
                "fingerprint",
                "kid",
                "next",
                "pkcs7",
                "previous",
                "revoked",
                "thumbprint"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getTenantFlag:getTenantFlag": {
            "properties": {
                "allowLegacyDelegationGrantTypes": {
                    "type": "boolean"
                },
                "allowLegacyRoGrantTypes": {
                    "type": "boolean"
                },
                "allowLegacyTokeninfoEndpoint": {
                    "type": "boolean"
                },
                "dashboardInsightsView": {
                    "type": "boolean"
                },
                "dashboardLogStreamsNext": {
                    "type": "boolean"
                },
                "disableClickjackProtectionHeaders": {
                    "type": "boolean"
                },
                "disableFieldsMapFix": {
                    "type": "boolean"
                },
                "disableManagementApiSmsObfuscation": {
                    "type": "boolean"
                },
                "enableAdfsWaadEmailVerification": {
                    "type": "boolean"
                },
                "enableApisSection": {
                    "type": "boolean"
                },
                "enableClientConnections": {
                    "type": "boolean"
                },
                "enableCustomDomainInEmails": {
                    "type": "boolean"
                },
                "enableDynamicClientRegistration": {
                    "type": "boolean"
                },
                "enableIdtokenApi2": {
                    "type": "boolean"
                },
                "enableLegacyLogsSearchV2": {
                    "type": "boolean"
                },
                "enableLegacyProfile": {
                    "type": "boolean"
                },
                "enablePipeline2": {
                    "type": "boolean"
                },
                "enablePublicSignupUserExistsError": {
                    "type": "boolean"
                },
                "mfaShowFactorListOnEnrollment": {
                    "type": "boolean"
                },
                "noDiscloseEnterpriseConnections": {
                    "type": "boolean"
                },
                "requirePushedAuthorizationRequests": {
                    "type": "boolean"
                },
                "revokeRefreshTokenGrant": {
                    "type": "boolean"
                },
                "useScopeDescriptionsForConsent": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "allowLegacyDelegationGrantTypes",
                "allowLegacyRoGrantTypes",
                "allowLegacyTokeninfoEndpoint",
                "dashboardInsightsView",
                "dashboardLogStreamsNext",
                "disableClickjackProtectionHeaders",
                "disableFieldsMapFix",
                "disableManagementApiSmsObfuscation",
                "enableAdfsWaadEmailVerification",
                "enableApisSection",
                "enableClientConnections",
                "enableCustomDomainInEmails",
                "enableDynamicClientRegistration",
                "enableIdtokenApi2",
                "enableLegacyLogsSearchV2",
                "enableLegacyProfile",
                "enablePipeline2",
                "enablePublicSignupUserExistsError",
                "mfaShowFactorListOnEnrollment",
                "noDiscloseEnterpriseConnections",
                "requirePushedAuthorizationRequests",
                "revokeRefreshTokenGrant",
                "useScopeDescriptionsForConsent"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getTenantSession:getTenantSession": {
            "properties": {
                "oidcLogoutPromptEnabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "oidcLogoutPromptEnabled"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getTenantSessionCooky:getTenantSessionCooky": {
            "properties": {
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "mode"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "auth0:index/getUserPermission:getUserPermission": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "resourceServerIdentifier": {
                    "type": "string"
                },
                "resourceServerName": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "description",
                "name",
                "resourceServerIdentifier",
                "resourceServerName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the auth0 package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "apiToken": {
                "type": "string",
                "description": "Your Auth0 [management api access\ntoken](https://auth0.com/docs/security/tokens/access-tokens/management-api-access-tokens). It can also be sourced from\nthe `AUTH0_API_TOKEN` environment variable. It can be used instead of `client_id` + `client_secret`. If both are\nspecified, `api_token` will be used over `client_id` + `client_secret` fields.\n"
            },
            "audience": {
                "type": "string",
                "description": "Your Auth0 audience when using a custom domain. It can also be sourced from the `AUTH0_AUDIENCE` environment variable.\n"
            },
            "clientId": {
                "type": "string",
                "description": "Your Auth0 client ID. It can also be sourced from the `AUTH0_CLIENT_ID` environment variable.\n"
            },
            "clientSecret": {
                "type": "string",
                "description": "Your Auth0 client secret. It can also be sourced from the `AUTH0_CLIENT_SECRET` environment variable.\n"
            },
            "debug": {
                "type": "boolean",
                "description": "Indicates whether to turn on debug mode.\n"
            },
            "domain": {
                "type": "string",
                "description": "Your Auth0 domain name. It can also be sourced from the `AUTH0_DOMAIN` environment variable.\n"
            }
        },
        "inputProperties": {
            "apiToken": {
                "type": "string",
                "description": "Your Auth0 [management api access\ntoken](https://auth0.com/docs/security/tokens/access-tokens/management-api-access-tokens). It can also be sourced from\nthe `AUTH0_API_TOKEN` environment variable. It can be used instead of `client_id` + `client_secret`. If both are\nspecified, `api_token` will be used over `client_id` + `client_secret` fields.\n"
            },
            "audience": {
                "type": "string",
                "description": "Your Auth0 audience when using a custom domain. It can also be sourced from the `AUTH0_AUDIENCE` environment variable.\n"
            },
            "clientId": {
                "type": "string",
                "description": "Your Auth0 client ID. It can also be sourced from the `AUTH0_CLIENT_ID` environment variable.\n"
            },
            "clientSecret": {
                "type": "string",
                "description": "Your Auth0 client secret. It can also be sourced from the `AUTH0_CLIENT_SECRET` environment variable.\n"
            },
            "debug": {
                "type": "boolean",
                "description": "Indicates whether to turn on debug mode.\n",
                "defaultInfo": {
                    "environment": [
                        "AUTH0_DEBUG"
                    ]
                }
            },
            "domain": {
                "type": "string",
                "description": "Your Auth0 domain name. It can also be sourced from the `AUTH0_DOMAIN` environment variable.\n"
            }
        }
    },
    "resources": {
        "auth0:index/action:Action": {
            "description": "Actions are secure, tenant-specific, versioned functions written in Node.js that execute at certain points during the Auth0 runtime. Actions are used to customize and extend Auth0's capabilities with custom logic.\n\n\n## Import\n\nThis resource can be imported by specifying the action ID. # Example\n\n```sh\n $ pulumi import auth0:index/action:Action my_action \"12f4f21b-017a-319d-92e7-2291c1ca36c4\"\n```\n\n ~\u003e For security reasons importing `secrets` is not allowed. Therefore, it is advised to import the action without secrets and adding them back after the action has been imported. ",
            "properties": {
                "code": {
                    "type": "string",
                    "description": "The source code of the action.\n"
                },
                "dependencies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/auth0:index/ActionDependency:ActionDependency"
                    },
                    "description": "List of third party npm modules, and their versions, that this action depends on.\n"
                },
                "deploy": {
                    "type": "boolean",
                    "description": "Deploying an action will create a new immutable version of the action. If the action is currently bound to a trigger, then the system will begin executing the newly deployed version of the action immediately.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Dependency name, e.g. `lodash`.\n"
                },
                "runtime": {
                    "type": "string",
                    "description": "The Node runtime. Defaults to `node18`. Possible values are: `node16` (not recommended), or `node18` (recommended).\n"
                },
                "secrets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/auth0:index/ActionSecret:ActionSecret"
                    },
                    "description": "List of secrets that are included in an action or a version of an action. Partial management of secrets is not supported.\n"
                },
                "supportedTriggers": {
                    "$ref": "#/types/auth0:index/ActionSupportedTriggers:ActionSupportedTriggers",
                    "description": "List of triggers that this action supports. At this time, an action can only target a single trigger at a time. Read Retrieving the set of triggers available within actions to retrieve the latest trigger versions supported.\n"
                },
                "versionId": {
                    "type": "string",
                    "description": "Version ID of the action. This value is available if `deploy` is set to true.\n"
                }
            },
            "required": [
                "code",
                "name",
                "runtime",
                "supportedTriggers",
                "versionId"
            ],
            "inputProperties": {
                "code": {
                    "type": "string",
                    "description": "The source code of the action.\n"
                },
                "dependencies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/auth0:index/ActionDependency:ActionDependency"
                    },
                    "description": "List of third party npm modules, and their versions, that this action depends on.\n"
                },
                "deploy": {
                    "type": "boolean",
                    "description": "Deploying an action will create a new immutable version of the action. If the action is currently bound to a trigger, then the system will begin executing the newly deployed version of the action immediately.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Dependency name, e.g. `lodash`.\n"
                },
                "runtime": {
                    "type": "string",
                    "description": "The Node runtime. Defaults to `node18`. Possible values are: `node16` (not recommended), or `node18` (recommended).\n"
                },
                "secrets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/auth0:index/ActionSecret:ActionSecret"
                    },
                    "description": "List of secrets that are included in an action or a version of an action. Partial management of secrets is not supported.\n"
                },
                "supportedTriggers": {
                    "$ref": "#/types/auth0:index/ActionSupportedTriggers:ActionSupportedTriggers",
                    "description": "List of triggers that this action supports. At this time, an action can only target a single trigger at a time. Read Retrieving the set of triggers available within actions to retrieve the latest trigger versions supported.\n"
                }
            },
            "requiredInputs": [
                "code",
                "supportedTriggers"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Action resources.\n",
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "The source code of the action.\n"
                    },
                    "dependencies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/auth0:index/ActionDependency:ActionDependency"
                        },
                        "description": "List of third party npm modules, and their versions, that this action depends on.\n"
                    },
                    "deploy": {
                        "type": "boolean",
                        "description": "Deploying an action will create a new immutable version of the action. If the action is currently bound to a trigger, then the system will begin executing the newly deployed version of the action immediately.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Dependency name, e.g. `lodash`.\n"
                    },
                    "runtime": {
                        "type": "string",
                        "description": "The Node runtime. Defaults to `node18`. Possible values are: `node16` (not recommended), or `node18` (recommended).\n"
                    },
                    "secrets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/auth0:index/ActionSecret:ActionSecret"
                        },
                        "description": "List of secrets that are included in an action or a version of an action. Partial management of secrets is not supported.\n"
                    },
                    "supportedTriggers": {
                        "$ref": "#/types/auth0:index/ActionSupportedTriggers:ActionSupportedTriggers",
                        "description": "List of triggers that this action supports. At this time, an action can only target a single trigger at a time. Read Retrieving the set of triggers available within actions to retrieve the latest trigger versions supported.\n"
                    },
                    "versionId": {
                        "type": "string",
                        "description": "Version ID of the action. This value is available if `deploy` is set to true.\n"
                    }
                },
                "type": "object"
            }
        },
        "auth0:index/attackProtection:AttackProtection": {
            "description": "Auth0 can detect attacks and stop malicious attempts to access your application such as blocking traffic from certain IPs and displaying CAPTCHAs.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as auth0 from \"@pulumi/auth0\";\n\nconst myProtection = new auth0.AttackProtection(\"myProtection\", {\n    breachedPasswordDetection: {\n        adminNotificationFrequencies: [\"daily\"],\n        enabled: true,\n        method: \"standard\",\n        preUserRegistration: {\n            shields: [\"block\"],\n        },\n        shields: [\n            \"admin_notification\",\n            \"block\",\n        ],\n    },\n    bruteForceProtection: {\n        allowlists: [\"127.0.0.1\"],\n        enabled: true,\n        maxAttempts: 5,\n        mode: \"count_per_identifier_and_ip\",\n        shields: [\n            \"block\",\n            \"user_notification\",\n        ],\n    },\n    suspiciousIpThrottling: {\n        allowlists: [\"192.168.1.1\"],\n        enabled: true,\n        preLogin: {\n            maxAttempts: 100,\n            rate: 864000,\n        },\n        preUserRegistration: {\n            maxAttempts: 50,\n            rate: 1200,\n        },\n        shields: [\n            \"admin_notification\",\n            \"block\",\n        ],\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_auth0 as auth0\n\nmy_protection = auth0.AttackProtection(\"myProtection\",\n    breached_password_detection=auth0.AttackProtectionBreachedPasswordDetectionArgs(\n        admin_notification_frequencies=[\"daily\"],\n        enabled=True,\n        method=\"standard\",\n        pre_user_registration=auth0.AttackProtectionBreachedPasswordDetectionPreUserRegistrationArgs(\n            shields=[\"block\"],\n        ),\n        shields=[\n            \"admin_notification\",\n            \"block\",\n        ],\n    ),\n    brute_force_protection=auth0.AttackProtectionBruteForceProtectionArgs(\n        allowlists=[\"127.0.0.1\"],\n        enabled=True,\n        max_attempts=5,\n        mode=\"count_per_identifier_and_ip\",\n        shields=[\n            \"block\",\n            \"user_notification\",\n        ],\n    ),\n    suspicious_ip_throttling=auth0.AttackProtectionSuspiciousIpThrottlingArgs(\n        allowlists=[\"192.168.1.1\"],\n        enabled=True,\n        pre_login=auth0.AttackProtectionSuspiciousIpThrottlingPreLoginArgs(\n            max_attempts=100,\n            rate=864000,\n        ),\n        pre_user_registration=auth0.AttackProtectionSuspiciousIpThrottlingPreUserRegistrationArgs(\n            max_attempts=50,\n            rate=1200,\n        ),\n        shields=[\n            \"admin_notification\",\n            \"block\",\n        ],\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Auth0 = Pulumi.Auth0;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myProtection = new Auth0.AttackProtection(\"myProtection\", new()\n    {\n        BreachedPasswordDetection = new Auth0.Inputs.AttackProtectionBreachedPasswordDetectionArgs\n        {\n            AdminNotificationFrequencies = new[]\n            {\n                \"daily\",\n            },\n            Enabled = true,\n            Method = \"standard\",\n            PreUserRegistration = new Auth0.Inputs.AttackProtectionBreachedPasswordDetectionPreUserRegistrationArgs\n            {\n                Shields = new[]\n                {\n                    \"block\",\n                },\n            },\n            Shields = new[]\n            {\n                \"admin_notification\",\n                \"block\",\n            },\n        },\n        BruteForceProtection = new Auth0.Inputs.AttackProtectionBruteForceProtectionArgs\n        {\n            Allowlists = new[]\n            {\n                \"127.0.0.1\",\n            },\n            Enabled = true,\n            MaxAttempts = 5,\n            Mode = \"count_per_identifier_and_ip\",\n            Shields = new[]\n            {\n                \"block\",\n                \"user_notification\",\n            },\n        },\n        SuspiciousIpThrottling = new Auth0.Inputs.AttackProtectionSuspiciousIpThrottlingArgs\n        {\n            Allowlists = new[]\n            {\n                \"192.168.1.1\",\n            },\n            Enabled = true,\n            PreLogin = new Auth0.Inputs.AttackProtectionSuspiciousIpThrottlingPreLoginArgs\n            {\n                MaxAttempts = 100,\n                Rate = 864000,\n            },\n            PreUserRegistration = new Auth0.Inputs.AttackProtectionSuspiciousIpThrottlingPreUserRegistrationArgs\n            {\n                MaxAttempts = 50,\n                Rate = 1200,\n            },\n            Shields = new[]\n            {\n                \"admin_notification\",\n                \"block\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-auth0/sdk/v3/go/auth0\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := auth0.NewAttackProtection(ctx, \"myProtection\", \u0026auth0.AttackProtectionArgs{\n\t\t\tBreachedPasswordDetection: \u0026auth0.AttackProtectionBreachedPasswordDetectionArgs{\n\t\t\t\tAdminNotificationFrequencies: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"daily\"),\n\t\t\t\t},\n\t\t\t\tEnabled: pulumi.Bool(true),\n\t\t\t\tMethod:  pulumi.String(\"standard\"),\n\t\t\t\tPreUserRegistration: \u0026auth0.AttackProtectionBreachedPasswordDetectionPreUserRegistrationArgs{\n\t\t\t\t\tShields: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"block\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tShields: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"admin_notification\"),\n\t\t\t\t\tpulumi.String(\"block\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tBruteForceProtection: \u0026auth0.AttackProtectionBruteForceProtectionArgs{\n\t\t\t\tAllowlists: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"127.0.0.1\"),\n\t\t\t\t},\n\t\t\t\tEnabled:     pulumi.Bool(true),\n\t\t\t\tMaxAttempts: pulumi.Int(5),\n\t\t\t\tMode:        pulumi.String(\"count_per_identifier_and_ip\"),\n\t\t\t\tShields: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"block\"),\n\t\t\t\t\tpulumi.String(\"user_notification\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tSuspiciousIpThrottling: \u0026auth0.AttackProtectionSuspiciousIpThrottlingArgs{\n\t\t\t\tAllowlists: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"192.168.1.1\"),\n\t\t\t\t},\n\t\t\t\tEnabled: pulumi.Bool(true),\n\t\t\t\tPreLogin: \u0026auth0.AttackProtectionSuspiciousIpThrottlingPreLoginArgs{\n\t\t\t\t\tMaxAttempts: pulumi.Int(100),\n\t\t\t\t\tRate:        pulumi.Int(864000),\n\t\t\t\t},\n\t\t\t\tPreUserRegistration: \u0026auth0.AttackProtectionSuspiciousIpThrottlingPreUserRegistrationArgs{\n\t\t\t\t\tMaxAttempts: pulumi.Int(50),\n\t\t\t\t\tRate:        pulumi.Int(1200),\n\t\t\t\t},\n\t\t\t\tShields: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"admin_notification\"),\n\t\t\t\t\tpulumi.String(\"block\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.auth0.AttackProtection;\nimport com.pulumi.auth0.AttackProtectionArgs;\nimport com.pulumi.auth0.inputs.AttackProtectionBreachedPasswordDetectionArgs;\nimport com.pulumi.auth0.inputs.AttackProtectionBreachedPasswordDetectionPreUserRegistrationArgs;\nimport com.pulumi.auth0.inputs.AttackProtectionBruteForceProtectionArgs;\nimport com.pulumi.auth0.inputs.AttackProtectionSuspiciousIpThrottlingArgs;\nimport com.pulumi.auth0.inputs.AttackProtectionSuspiciousIpThrottlingPreLoginArgs;\nimport com.pulumi.auth0.inputs.AttackProtectionSuspiciousIpThrottlingPreUserRegistrationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myProtection = new AttackProtection(\"myProtection\", AttackProtectionArgs.builder()        \n            .breachedPasswordDetection(AttackProtectionBreachedPasswordDetectionArgs.builder()\n                .adminNotificationFrequencies(\"daily\")\n                .enabled(true)\n                .method(\"standard\")\n                .preUserRegistration(AttackProtectionBreachedPasswordDetectionPreUserRegistrationArgs.builder()\n                    .shields(\"block\")\n                    .build())\n                .shields(                \n                    \"admin_notification\",\n                    \"block\")\n                .build())\n            .bruteForceProtection(AttackProtectionBruteForceProtectionArgs.builder()\n                .allowlists(\"127.0.0.1\")\n                .enabled(true)\n                .maxAttempts(5)\n                .mode(\"count_per_identifier_and_ip\")\n                .shields(                \n                    \"block\",\n                    \"user_notification\")\n                .build())\n            .suspiciousIpThrottling(AttackProtectionSuspiciousIpThrottlingArgs.builder()\n                .allowlists(\"192.168.1.1\")\n                .enabled(true)\n                .preLogin(AttackProtectionSuspiciousIpThrottlingPreLoginArgs.builder()\n                    .maxAttempts(100)\n                    .rate(864000)\n                    .build())\n                .preUserRegistration(AttackProtectionSuspiciousIpThrottlingPreUserRegistrationArgs.builder()\n                    .maxAttempts(50)\n                    .rate(1200)\n                    .build())\n                .shields(                \n                    \"admin_notification\",\n                    \"block\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myProtection:\n    type: auth0:AttackProtection\n    properties:\n      breachedPasswordDetection:\n        adminNotificationFrequencies:\n          - daily\n        enabled: true\n        method: standard\n        preUserRegistration:\n          shields:\n            - block\n        shields:\n          - admin_notification\n          - block\n      bruteForceProtection:\n        allowlists:\n          - 127.0.0.1\n        enabled: true\n        maxAttempts: 5\n        mode: count_per_identifier_and_ip\n        shields:\n          - block\n          - user_notification\n      suspiciousIpThrottling:\n        allowlists:\n          - 192.168.1.1\n        enabled: true\n        preLogin:\n          maxAttempts: 100\n          rate: 864000\n        preUserRegistration:\n          maxAttempts: 50\n          rate: 1200\n        shields:\n          - admin_notification\n          - block\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nAs this is not a resource identifiable by an ID within the Auth0 Management API, attack_protection can be imported using a random string. # We recommend [Version 4 UUID](https://www.uuidgenerator.net/version4) # Example\n\n```sh\n $ pulumi import auth0:index/attackProtection:AttackProtection my_protection \"24940d4b-4bd4-44e7-894e-f92e4de36a40\"\n```\n\n ",
            "properties": {
                "breachedPasswordDetection": {
                    "$ref": "#/types/auth0:index/AttackProtectionBreachedPasswordDetection:AttackProtectionBreachedPasswordDetection",
                    "description": "Breached password detection protects your applications from bad actors logging in with stolen credentials.\n"
                },
                "bruteForceProtection": {
                    "$ref": "#/types/auth0:index/AttackProtectionBruteForceProtection:AttackProtectionBruteForceProtection",
                    "description": "Brute-force protection safeguards against a single IP address attacking a single user account.\n"
                },
                "suspiciousIpThrottling": {
                    "$ref": "#/types/auth0:index/AttackProtectionSuspiciousIpThrottling:AttackProtectionSuspiciousIpThrottling",
                    "description": "Suspicious IP throttling blocks traffic from any IP address that rapidly attempts too many logins or signups.\n"
                }
            },
            "required": [
                "breachedPasswordDetection",
                "bruteForceProtection",
                "suspiciousIpThrottling"
            ],
            "inputProperties": {
                "breachedPasswordDetection": {
                    "$ref": "#/types/auth0:index/AttackProtectionBreachedPasswordDetection:AttackProtectionBreachedPasswordDetection",
                    "description": "Breached password detection protects your applications from bad actors logging in with stolen credentials.\n"
                },
                "bruteForceProtection": {
                    "$ref": "#/types/auth0:index/AttackProtectionBruteForceProtection:AttackProtectionBruteForceProtection",
                    "description": "Brute-force protection safeguards against a single IP address attacking a single user account.\n"
                },
                "suspiciousIpThrottling": {
                    "$ref": "#/types/auth0:index/AttackProtectionSuspiciousIpThrottling:AttackProtectionSuspiciousIpThrottling",
                    "description": "Suspicious IP throttling blocks traffic from any IP address that rapidly attempts too many logins or signups.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AttackProtection resources.\n",
                "properties": {
                    "breachedPasswordDetection": {
                        "$ref": "#/types/auth0:index/AttackProtectionBreachedPasswordDetection:AttackProtectionBreachedPasswordDetection",
                        "description": "Breached password detection protects your applications from bad actors logging in with stolen credentials.\n"
                    },
                    "bruteForceProtection": {
                        "$ref": "#/types/auth0:index/AttackProtectionBruteForceProtection:AttackProtectionBruteForceProtection",
                        "description": "Brute-force protection safeguards against a single IP address attacking a single user account.\n"
                    },
                    "suspiciousIpThrottling": {
                        "$ref": "#/types/auth0:index/AttackProtectionSuspiciousIpThrottling:AttackProtectionSuspiciousIpThrottling",
                        "description": "Suspicious IP throttling blocks traffic from any IP address that rapidly attempts too many logins or signups.\n"
                    }
                },
                "type": "object"
            }
        },
        "auth0:index/branding:Branding": {
            "description": "This resource allows you to manage branding within your Auth0 tenant. Auth0 can be customized with a look and feel that aligns with your organization's brand requirements and user expectations.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as auth0 from \"@pulumi/auth0\";\nimport * as fs from \"fs\";\n\nconst myBrand = new auth0.Branding(\"myBrand\", {\n    logoUrl: \"https://mycompany.org/logo.png\",\n    colors: {\n        primary: \"#0059d6\",\n        pageBackground: \"#000000\",\n    },\n    universalLogin: {\n        body: fs.readFileSync(\"universal_login_body.html\", \"utf8\"),\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_auth0 as auth0\n\nmy_brand = auth0.Branding(\"myBrand\",\n    logo_url=\"https://mycompany.org/logo.png\",\n    colors=auth0.BrandingColorsArgs(\n        primary=\"#0059d6\",\n        page_background=\"#000000\",\n    ),\n    universal_login=auth0.BrandingUniversalLoginArgs(\n        body=(lambda path: open(path).read())(\"universal_login_body.html\"),\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing Pulumi;\nusing Auth0 = Pulumi.Auth0;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myBrand = new Auth0.Branding(\"myBrand\", new()\n    {\n        LogoUrl = \"https://mycompany.org/logo.png\",\n        Colors = new Auth0.Inputs.BrandingColorsArgs\n        {\n            Primary = \"#0059d6\",\n            PageBackground = \"#000000\",\n        },\n        UniversalLogin = new Auth0.Inputs.BrandingUniversalLoginArgs\n        {\n            Body = File.ReadAllText(\"universal_login_body.html\"),\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"os\"\n\n\t\"github.com/pulumi/pulumi-auth0/sdk/v3/go/auth0\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc readFileOrPanic(path string) pulumi.StringPtrInput {\n\tdata, err := os.ReadFile(path)\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\treturn pulumi.String(string(data))\n}\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := auth0.NewBranding(ctx, \"myBrand\", \u0026auth0.BrandingArgs{\n\t\t\tLogoUrl: pulumi.String(\"https://mycompany.org/logo.png\"),\n\t\t\tColors: \u0026auth0.BrandingColorsArgs{\n\t\t\t\tPrimary:        pulumi.String(\"#0059d6\"),\n\t\t\t\tPageBackground: pulumi.String(\"#000000\"),\n\t\t\t},\n\t\t\tUniversalLogin: \u0026auth0.BrandingUniversalLoginArgs{\n\t\t\t\tBody: readFileOrPanic(\"universal_login_body.html\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.auth0.Branding;\nimport com.pulumi.auth0.BrandingArgs;\nimport com.pulumi.auth0.inputs.BrandingColorsArgs;\nimport com.pulumi.auth0.inputs.BrandingUniversalLoginArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myBrand = new Branding(\"myBrand\", BrandingArgs.builder()        \n            .logoUrl(\"https://mycompany.org/logo.png\")\n            .colors(BrandingColorsArgs.builder()\n                .primary(\"#0059d6\")\n                .pageBackground(\"#000000\")\n                .build())\n            .universalLogin(BrandingUniversalLoginArgs.builder()\n                .body(Files.readString(Paths.get(\"universal_login_body.html\")))\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myBrand:\n    type: auth0:Branding\n    properties:\n      logoUrl: https://mycompany.org/logo.png\n      colors:\n        primary: '#0059d6'\n        pageBackground: '#000000'\n      universalLogin:\n        body:\n          fn::readFile: universal_login_body.html\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nAs this is not a resource identifiable by an ID within the Auth0 Management API, branding can be imported using a random string. # We recommend [Version 4 UUID](https://www.uuidgenerator.net/version4) # Example\n\n```sh\n $ pulumi import auth0:index/branding:Branding my_brand \"22f4f21b-017a-319d-92e7-2291c1ca36c4\"\n```\n\n ",
            "properties": {
                "colors": {
                    "$ref": "#/types/auth0:index/BrandingColors:BrandingColors",
                    "description": "Configuration settings for colors for branding.\n"
                },
                "faviconUrl": {
                    "type": "string",
                    "description": "URL for the favicon.\n"
                },
                "font": {
                    "$ref": "#/types/auth0:index/BrandingFont:BrandingFont",
                    "description": "Configuration settings to customize the font.\n"
                },
                "logoUrl": {
                    "type": "string",
                    "description": "URL of logo for branding.\n"
                },
                "universalLogin": {
                    "$ref": "#/types/auth0:index/BrandingUniversalLogin:BrandingUniversalLogin",
                    "description": "Configuration settings for Universal Login.\n"
                }
            },
            "required": [
                "colors",
                "faviconUrl",
                "font",
                "logoUrl"
            ],
            "inputProperties": {
                "colors": {
                    "$ref": "#/types/auth0:index/BrandingColors:BrandingColors",
                    "description": "Configuration settings for colors for branding.\n"
                },
                "faviconUrl": {
                    "type": "string",
                    "description": "URL for the favicon.\n"
                },
                "font": {
                    "$ref": "#/types/auth0:index/BrandingFont:BrandingFont",
                    "description": "Configuration settings to customize the font.\n"
                },
                "logoUrl": {
                    "type": "string",
                    "description": "URL of logo for branding.\n"
                },
                "universalLogin": {
                    "$ref": "#/types/auth0:index/BrandingUniversalLogin:BrandingUniversalLogin",
                    "description": "Configuration settings for Universal Login.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Branding resources.\n",
                "properties": {
                    "colors": {
                        "$ref": "#/types/auth0:index/BrandingColors:BrandingColors",
                        "description": "Configuration settings for colors for branding.\n"
                    },
                    "faviconUrl": {
                        "type": "string",
                        "description": "URL for the favicon.\n"
                    },
                    "font": {
                        "$ref": "#/types/auth0:index/BrandingFont:BrandingFont",
                        "description": "Configuration settings to customize the font.\n"
                    },
                    "logoUrl": {
                        "type": "string",
                        "description": "URL of logo for branding.\n"
                    },
                    "universalLogin": {
                        "$ref": "#/types/auth0:index/BrandingUniversalLogin:BrandingUniversalLogin",
                        "description": "Configuration settings for Universal Login.\n"
                    }
                },
                "type": "object"
            }
        },
        "auth0:index/brandingTheme:BrandingTheme": {
            "description": "This resource allows you to manage branding themes for your Universal Login page within your Auth0 tenant.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as auth0 from \"@pulumi/auth0\";\n\n// An example of a fully configured auth0_branding_theme.\nconst myTheme = new auth0.BrandingTheme(\"myTheme\", {\n    borders: {\n        buttonBorderRadius: 1,\n        buttonBorderWeight: 1,\n        buttonsStyle: \"pill\",\n        inputBorderRadius: 3,\n        inputBorderWeight: 1,\n        inputsStyle: \"pill\",\n        showWidgetShadow: false,\n        widgetBorderWeight: 1,\n        widgetCornerRadius: 3,\n    },\n    colors: {\n        bodyText: \"#FF00CC\",\n        error: \"#FF00CC\",\n        header: \"#FF00CC\",\n        icons: \"#FF00CC\",\n        inputBackground: \"#FF00CC\",\n        inputBorder: \"#FF00CC\",\n        inputFilledText: \"#FF00CC\",\n        inputLabelsPlaceholders: \"#FF00CC\",\n        linksFocusedComponents: \"#FF00CC\",\n        primaryButton: \"#FF00CC\",\n        primaryButtonLabel: \"#FF00CC\",\n        secondaryButtonBorder: \"#FF00CC\",\n        secondaryButtonLabel: \"#FF00CC\",\n        success: \"#FF00CC\",\n        widgetBackground: \"#FF00CC\",\n        widgetBorder: \"#FF00CC\",\n    },\n    fonts: {\n        bodyText: {\n            bold: false,\n            size: 100,\n        },\n        buttonsText: {\n            bold: false,\n            size: 100,\n        },\n        fontUrl: \"https://google.com/font.woff\",\n        inputLabels: {\n            bold: false,\n            size: 100,\n        },\n        links: {\n            bold: false,\n            size: 100,\n        },\n        linksStyle: \"normal\",\n        referenceTextSize: 12,\n        subtitle: {\n            bold: false,\n            size: 100,\n        },\n        title: {\n            bold: false,\n            size: 100,\n        },\n    },\n    pageBackground: {\n        backgroundColor: \"#000000\",\n        backgroundImageUrl: \"https://google.com/background.png\",\n        pageLayout: \"center\",\n    },\n    widget: {\n        headerTextAlignment: \"center\",\n        logoHeight: 55,\n        logoPosition: \"center\",\n        logoUrl: \"https://google.com/logo.png\",\n        socialButtonsLayout: \"top\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_auth0 as auth0\n\n# An example of a fully configured auth0_branding_theme.\nmy_theme = auth0.BrandingTheme(\"myTheme\",\n    borders=auth0.BrandingThemeBordersArgs(\n        button_border_radius=1,\n        button_border_weight=1,\n        buttons_style=\"pill\",\n        input_border_radius=3,\n        input_border_weight=1,\n        inputs_style=\"pill\",\n        show_widget_shadow=False,\n        widget_border_weight=1,\n        widget_corner_radius=3,\n    ),\n    colors=auth0.BrandingThemeColorsArgs(\n        body_text=\"#FF00CC\",\n        error=\"#FF00CC\",\n        header=\"#FF00CC\",\n        icons=\"#FF00CC\",\n        input_background=\"#FF00CC\",\n        input_border=\"#FF00CC\",\n        input_filled_text=\"#FF00CC\",\n        input_labels_placeholders=\"#FF00CC\",\n        links_focused_components=\"#FF00CC\",\n        primary_button=\"#FF00CC\",\n        primary_button_label=\"#FF00CC\",\n        secondary_button_border=\"#FF00CC\",\n        secondary_button_label=\"#FF00CC\",\n        success=\"#FF00CC\",\n        widget_background=\"#FF00CC\",\n        widget_border=\"#FF00CC\",\n    ),\n    fonts=auth0.BrandingThemeFontsArgs(\n        body_text=auth0.BrandingThemeFontsBodyTextArgs(\n            bold=False,\n            size=100,\n        ),\n        buttons_text=auth0.BrandingThemeFontsButtonsTextArgs(\n            bold=False,\n            size=100,\n        ),\n        font_url=\"https://google.com/font.woff\",\n        input_labels=auth0.BrandingThemeFontsInputLabelsArgs(\n            bold=False,\n            size=100,\n        ),\n        links=auth0.BrandingThemeFontsLinksArgs(\n            bold=False,\n            size=100,\n        ),\n        links_style=\"normal\",\n        reference_text_size=12,\n        subtitle=auth0.BrandingThemeFontsSubtitleArgs(\n            bold=False,\n            size=100,\n        ),\n        title=auth0.BrandingThemeFontsTitleArgs(\n            bold=False,\n            size=100,\n        ),\n    ),\n    page_background=auth0.BrandingThemePageBackgroundArgs(\n        background_color=\"#000000\",\n        background_image_url=\"https://google.com/background.png\",\n        page_layout=\"center\",\n    ),\n    widget=auth0.BrandingThemeWidgetArgs(\n        header_text_alignment=\"center\",\n        logo_height=55,\n        logo_position=\"center\",\n        logo_url=\"https://google.com/logo.png\",\n        social_buttons_layout=\"top\",\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Auth0 = Pulumi.Auth0;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // An example of a fully configured auth0_branding_theme.\n    var myTheme = new Auth0.BrandingTheme(\"myTheme\", new()\n    {\n        Borders = new Auth0.Inputs.BrandingThemeBordersArgs\n        {\n            ButtonBorderRadius = 1,\n            ButtonBorderWeight = 1,\n            ButtonsStyle = \"pill\",\n            InputBorderRadius = 3,\n            InputBorderWeight = 1,\n            InputsStyle = \"pill\",\n            ShowWidgetShadow = false,\n            WidgetBorderWeight = 1,\n            WidgetCornerRadius = 3,\n        },\n        Colors = new Auth0.Inputs.BrandingThemeColorsArgs\n        {\n            BodyText = \"#FF00CC\",\n            Error = \"#FF00CC\",\n            Header = \"#FF00CC\",\n            Icons = \"#FF00CC\",\n            InputBackground = \"#FF00CC\",\n            InputBorder = \"#FF00CC\",\n            InputFilledText = \"#FF00CC\",\n            InputLabelsPlaceholders = \"#FF00CC\",\n            LinksFocusedComponents = \"#FF00CC\",\n            PrimaryButton = \"#FF00CC\",\n            PrimaryButtonLabel = \"#FF00CC\",\n            SecondaryButtonBorder = \"#FF00CC\",\n            SecondaryButtonLabel = \"#FF00CC\",\n            Success = \"#FF00CC\",\n            WidgetBackground = \"#FF00CC\",\n            WidgetBorder = \"#FF00CC\",\n        },\n        Fonts = new Auth0.Inputs.BrandingThemeFontsArgs\n        {\n            BodyText = new Auth0.Inputs.BrandingThemeFontsBodyTextArgs\n            {\n                Bold = false,\n                Size = 100,\n            },\n            ButtonsText = new Auth0.Inputs.BrandingThemeFontsButtonsTextArgs\n            {\n                Bold = false,\n                Size = 100,\n            },\n            FontUrl = \"https://google.com/font.woff\",\n            InputLabels = new Auth0.Inputs.BrandingThemeFontsInputLabelsArgs\n            {\n                Bold = false,\n                Size = 100,\n            },\n            Links = new Auth0.Inputs.BrandingThemeFontsLinksArgs\n            {\n                Bold = false,\n                Size = 100,\n            },\n            LinksStyle = \"normal\",\n            ReferenceTextSize = 12,\n            Subtitle = new Auth0.Inputs.BrandingThemeFontsSubtitleArgs\n            {\n                Bold = false,\n                Size = 100,\n            },\n            Title = new Auth0.Inputs.BrandingThemeFontsTitleArgs\n            {\n                Bold = false,\n                Size = 100,\n            },\n        },\n        PageBackground = new Auth0.Inputs.BrandingThemePageBackgroundArgs\n        {\n            BackgroundColor = \"#000000\",\n            BackgroundImageUrl = \"https://google.com/background.png\",\n            PageLayout = \"center\",\n        },\n        Widget = new Auth0.Inputs.BrandingThemeWidgetArgs\n        {\n            HeaderTextAlignment = \"center\",\n            LogoHeight = 55,\n            LogoPosition = \"center\",\n            LogoUrl = \"https://google.com/logo.png\",\n            SocialButtonsLayout = \"top\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-auth0/sdk/v3/go/auth0\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := auth0.NewBrandingTheme(ctx, \"myTheme\", \u0026auth0.BrandingThemeArgs{\n\t\t\tBorders: \u0026auth0.BrandingThemeBordersArgs{\n\t\t\t\tButtonBorderRadius: pulumi.Float64(1),\n\t\t\t\tButtonBorderWeight: pulumi.Float64(1),\n\t\t\t\tButtonsStyle:       pulumi.String(\"pill\"),\n\t\t\t\tInputBorderRadius:  pulumi.Float64(3),\n\t\t\t\tInputBorderWeight:  pulumi.Float64(1),\n\t\t\t\tInputsStyle:        pulumi.String(\"pill\"),\n\t\t\t\tShowWidgetShadow:   pulumi.Bool(false),\n\t\t\t\tWidgetBorderWeight: pulumi.Float64(1),\n\t\t\t\tWidgetCornerRadius: pulumi.Float64(3),\n\t\t\t},\n\t\t\tColors: \u0026auth0.BrandingThemeColorsArgs{\n\t\t\t\tBodyText:                pulumi.String(\"#FF00CC\"),\n\t\t\t\tError:                   pulumi.String(\"#FF00CC\"),\n\t\t\t\tHeader:                  pulumi.String(\"#FF00CC\"),\n\t\t\t\tIcons:                   pulumi.String(\"#FF00CC\"),\n\t\t\t\tInputBackground:         pulumi.String(\"#FF00CC\"),\n\t\t\t\tInputBorder:             pulumi.String(\"#FF00CC\"),\n\t\t\t\tInputFilledText:         pulumi.String(\"#FF00CC\"),\n\t\t\t\tInputLabelsPlaceholders: pulumi.String(\"#FF00CC\"),\n\t\t\t\tLinksFocusedComponents:  pulumi.String(\"#FF00CC\"),\n\t\t\t\tPrimaryButton:           pulumi.String(\"#FF00CC\"),\n\t\t\t\tPrimaryButtonLabel:      pulumi.String(\"#FF00CC\"),\n\t\t\t\tSecondaryButtonBorder:   pulumi.String(\"#FF00CC\"),\n\t\t\t\tSecondaryButtonLabel:    pulumi.String(\"#FF00CC\"),\n\t\t\t\tSuccess:                 pulumi.String(\"#FF00CC\"),\n\t\t\t\tWidgetBackground:        pulumi.String(\"#FF00CC\"),\n\t\t\t\tWidgetBorder:            pulumi.String(\"#FF00CC\"),\n\t\t\t},\n\t\t\tFonts: \u0026auth0.BrandingThemeFontsArgs{\n\t\t\t\tBodyText: \u0026auth0.BrandingThemeFontsBodyTextArgs{\n\t\t\t\t\tBold: pulumi.Bool(false),\n\t\t\t\t\tSize: pulumi.Float64(100),\n\t\t\t\t},\n\t\t\t\tButtonsText: \u0026auth0.BrandingThemeFontsButtonsTextArgs{\n\t\t\t\t\tBold: pulumi.Bool(false),\n\t\t\t\t\tSize: pulumi.Float64(100),\n\t\t\t\t},\n\t\t\t\tFontUrl: pulumi.String(\"https://google.com/font.woff\"),\n\t\t\t\tInputLabels: \u0026auth0.BrandingThemeFontsInputLabelsArgs{\n\t\t\t\t\tBold: pulumi.Bool(false),\n\t\t\t\t\tSize: pulumi.Float64(100),\n\t\t\t\t},\n\t\t\t\tLinks: \u0026auth0.BrandingThemeFontsLinksArgs{\n\t\t\t\t\tBold: pulumi.Bool(false),\n\t\t\t\t\tSize: pulumi.Float64(100),\n\t\t\t\t},\n\t\t\t\tLinksStyle:        pulumi.String(\"normal\"),\n\t\t\t\tReferenceTextSize: pulumi.Float64(12),\n\t\t\t\tSubtitle: \u0026auth0.BrandingThemeFontsSubtitleArgs{\n\t\t\t\t\tBold: pulumi.Bool(false),\n\t\t\t\t\tSize: pulumi.Float64(100),\n\t\t\t\t},\n\t\t\t\tTitle: \u0026auth0.BrandingThemeFontsTitleArgs{\n\t\t\t\t\tBold: pulumi.Bool(false),\n\t\t\t\t\tSize: pulumi.Float64(100),\n\t\t\t\t},\n\t\t\t},\n\t\t\tPageBackground: \u0026auth0.BrandingThemePageBackgroundArgs{\n\t\t\t\tBackgroundColor:    pulumi.String(\"#000000\"),\n\t\t\t\tBackgroundImageUrl: pulumi.String(\"https://google.com/background.png\"),\n\t\t\t\tPageLayout:         pulumi.String(\"center\"),\n\t\t\t},\n\t\t\tWidget: \u0026auth0.BrandingThemeWidgetArgs{\n\t\t\t\tHeaderTextAlignment: pulumi.String(\"center\"),\n\t\t\t\tLogoHeight:          pulumi.Float64(55),\n\t\t\t\tLogoPosition:        pulumi.String(\"center\"),\n\t\t\t\tLogoUrl:             pulumi.String(\"https://google.com/logo.png\"),\n\t\t\t\tSocialButtonsLayout: pulumi.String(\"top\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.auth0.BrandingTheme;\nimport com.pulumi.auth0.BrandingThemeArgs;\nimport com.pulumi.auth0.inputs.BrandingThemeBordersArgs;\nimport com.pulumi.auth0.inputs.BrandingThemeColorsArgs;\nimport com.pulumi.auth0.inputs.BrandingThemeFontsArgs;\nimport com.pulumi.auth0.inputs.BrandingThemeFontsBodyTextArgs;\nimport com.pulumi.auth0.inputs.BrandingThemeFontsButtonsTextArgs;\nimport com.pulumi.auth0.inputs.BrandingThemeFontsInputLabelsArgs;\nimport com.pulumi.auth0.inputs.BrandingThemeFontsLinksArgs;\nimport com.pulumi.auth0.inputs.BrandingThemeFontsSubtitleArgs;\nimport com.pulumi.auth0.inputs.BrandingThemeFontsTitleArgs;\nimport com.pulumi.auth0.inputs.BrandingThemePageBackgroundArgs;\nimport com.pulumi.auth0.inputs.BrandingThemeWidgetArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myTheme = new BrandingTheme(\"myTheme\", BrandingThemeArgs.builder()        \n            .borders(BrandingThemeBordersArgs.builder()\n                .buttonBorderRadius(1)\n                .buttonBorderWeight(1)\n                .buttonsStyle(\"pill\")\n                .inputBorderRadius(3)\n                .inputBorderWeight(1)\n                .inputsStyle(\"pill\")\n                .showWidgetShadow(false)\n                .widgetBorderWeight(1)\n                .widgetCornerRadius(3)\n                .build())\n            .colors(BrandingThemeColorsArgs.builder()\n                .bodyText(\"#FF00CC\")\n                .error(\"#FF00CC\")\n                .header(\"#FF00CC\")\n                .icons(\"#FF00CC\")\n                .inputBackground(\"#FF00CC\")\n                .inputBorder(\"#FF00CC\")\n                .inputFilledText(\"#FF00CC\")\n                .inputLabelsPlaceholders(\"#FF00CC\")\n                .linksFocusedComponents(\"#FF00CC\")\n                .primaryButton(\"#FF00CC\")\n                .primaryButtonLabel(\"#FF00CC\")\n                .secondaryButtonBorder(\"#FF00CC\")\n                .secondaryButtonLabel(\"#FF00CC\")\n                .success(\"#FF00CC\")\n                .widgetBackground(\"#FF00CC\")\n                .widgetBorder(\"#FF00CC\")\n                .build())\n            .fonts(BrandingThemeFontsArgs.builder()\n                .bodyText(BrandingThemeFontsBodyTextArgs.builder()\n                    .bold(false)\n                    .size(100)\n                    .build())\n                .buttonsText(BrandingThemeFontsButtonsTextArgs.builder()\n                    .bold(false)\n                    .size(100)\n                    .build())\n                .fontUrl(\"https://google.com/font.woff\")\n                .inputLabels(BrandingThemeFontsInputLabelsArgs.builder()\n                    .bold(false)\n                    .size(100)\n                    .build())\n                .links(BrandingThemeFontsLinksArgs.builder()\n                    .bold(false)\n                    .size(100)\n                    .build())\n                .linksStyle(\"normal\")\n                .referenceTextSize(12)\n                .subtitle(BrandingThemeFontsSubtitleArgs.builder()\n                    .bold(false)\n                    .size(100)\n                    .build())\n                .title(BrandingThemeFontsTitleArgs.builder()\n                    .bold(false)\n                    .size(100)\n                    .build())\n                .build())\n            .pageBackground(BrandingThemePageBackgroundArgs.builder()\n                .backgroundColor(\"#000000\")\n                .backgroundImageUrl(\"https://google.com/background.png\")\n                .pageLayout(\"center\")\n                .build())\n            .widget(BrandingThemeWidgetArgs.builder()\n                .headerTextAlignment(\"center\")\n                .logoHeight(55)\n                .logoPosition(\"center\")\n                .logoUrl(\"https://google.com/logo.png\")\n                .socialButtonsLayout(\"top\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # An example of a fully configured auth0_branding_theme.\n  myTheme:\n    type: auth0:BrandingTheme\n    properties:\n      borders:\n        buttonBorderRadius: 1\n        buttonBorderWeight: 1\n        buttonsStyle: pill\n        inputBorderRadius: 3\n        inputBorderWeight: 1\n        inputsStyle: pill\n        showWidgetShadow: false\n        widgetBorderWeight: 1\n        widgetCornerRadius: 3\n      colors:\n        bodyText: '#FF00CC'\n        error: '#FF00CC'\n        header: '#FF00CC'\n        icons: '#FF00CC'\n        inputBackground: '#FF00CC'\n        inputBorder: '#FF00CC'\n        inputFilledText: '#FF00CC'\n        inputLabelsPlaceholders: '#FF00CC'\n        linksFocusedComponents: '#FF00CC'\n        primaryButton: '#FF00CC'\n        primaryButtonLabel: '#FF00CC'\n        secondaryButtonBorder: '#FF00CC'\n        secondaryButtonLabel: '#FF00CC'\n        success: '#FF00CC'\n        widgetBackground: '#FF00CC'\n        widgetBorder: '#FF00CC'\n      fonts:\n        bodyText:\n          bold: false\n          size: 100\n        buttonsText:\n          bold: false\n          size: 100\n        fontUrl: https://google.com/font.woff\n        inputLabels:\n          bold: false\n          size: 100\n        links:\n          bold: false\n          size: 100\n        linksStyle: normal\n        referenceTextSize: 12\n        subtitle:\n          bold: false\n          size: 100\n        title:\n          bold: false\n          size: 100\n      pageBackground:\n        backgroundColor: '#000000'\n        backgroundImageUrl: https://google.com/background.png\n        pageLayout: center\n      widget:\n        headerTextAlignment: center\n        logoHeight: 55\n        logoPosition: center\n        logoUrl: https://google.com/logo.png\n        socialButtonsLayout: top\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThis resource can be imported by specifying the Branding Theme ID. # Example\n\n```sh\n $ pulumi import auth0:index/brandingTheme:BrandingTheme my_theme \"XXXXXXXXXXXXXXXXXXXX\"\n```\n\n ",
            "properties": {
                "borders": {
                    "$ref": "#/types/auth0:index/BrandingThemeBorders:BrandingThemeBorders"
                },
                "colors": {
                    "$ref": "#/types/auth0:index/BrandingThemeColors:BrandingThemeColors"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name for the branding theme.\n"
                },
                "fonts": {
                    "$ref": "#/types/auth0:index/BrandingThemeFonts:BrandingThemeFonts"
                },
                "pageBackground": {
                    "$ref": "#/types/auth0:index/BrandingThemePageBackground:BrandingThemePageBackground"
                },
                "widget": {
                    "$ref": "#/types/auth0:index/BrandingThemeWidget:BrandingThemeWidget"
                }
            },
            "required": [
                "borders",
                "colors",
                "fonts",
                "pageBackground",
                "widget"
            ],
            "inputProperties": {
                "borders": {
                    "$ref": "#/types/auth0:index/BrandingThemeBorders:BrandingThemeBorders"
                },
                "colors": {
                    "$ref": "#/types/auth0:index/BrandingThemeColors:BrandingThemeColors"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name for the branding theme.\n"
                },
                "fonts": {
                    "$ref": "#/types/auth0:index/BrandingThemeFonts:BrandingThemeFonts"
                },
                "pageBackground": {
                    "$ref": "#/types/auth0:index/BrandingThemePageBackground:BrandingThemePageBackground"
                },
                "widget": {
                    "$ref": "#/types/auth0:index/BrandingThemeWidget:BrandingThemeWidget"
                }
            },
            "requiredInputs": [
                "borders",
                "colors",
                "fonts",
                "pageBackground",
                "widget"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BrandingTheme resources.\n",
                "properties": {
                    "borders": {
                        "$ref": "#/types/auth0:index/BrandingThemeBorders:BrandingThemeBorders"
                    },
                    "colors": {
                        "$ref": "#/types/auth0:index/BrandingThemeColors:BrandingThemeColors"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The display name for the branding theme.\n"
                    },
                    "fonts": {
                        "$ref": "#/types/auth0:index/BrandingThemeFonts:BrandingThemeFonts"
                    },
                    "pageBackground": {
                        "$ref": "#/types/auth0:index/BrandingThemePageBackground:BrandingThemePageBackground"
                    },
                    "widget": {
                        "$ref": "#/types/auth0:index/BrandingThemeWidget:BrandingThemeWidget"
                    }
                },
                "type": "object"
            }
        },
        "auth0:index/client:Client": {
            "description": "With this resource, you can set up applications that use Auth0 for authentication and configure allowed callback URLs and secrets for these applications.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as auth0 from \"@pulumi/auth0\";\n\nconst myClient = new auth0.Client(\"myClient\", {\n    addons: {\n        samlp: {\n            audience: \"https://example.com/saml\",\n            createUpnClaim: false,\n            issuer: \"https://example.com\",\n            mapIdentities: false,\n            mapUnknownClaimsAsIs: false,\n            mappings: {\n                email: \"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress\",\n                name: \"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name\",\n            },\n            nameIdentifierFormat: \"urn:oasis:names:tc:SAML:2.0:nameid-format:persistent\",\n            nameIdentifierProbes: [\"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress\"],\n            passthroughClaimsWithNoMapping: false,\n            signingCert: `-----BEGIN PUBLIC KEY-----\nMIGf...bpP/t3\n+JGNGIRMj1hF1rnb6QIDAQAB\n-----END PUBLIC KEY-----\n\n`,\n        },\n    },\n    allowedLogoutUrls: [\"https://example.com\"],\n    allowedOrigins: [\"https://example.com\"],\n    appType: \"non_interactive\",\n    callbacks: [\"https://example.com/callback\"],\n    clientMetadata: {\n        foo: \"zoo\",\n    },\n    customLoginPageOn: true,\n    description: \"Test Applications Long Description\",\n    grantTypes: [\n        \"authorization_code\",\n        \"http://auth0.com/oauth/grant-type/password-realm\",\n        \"implicit\",\n        \"password\",\n        \"refresh_token\",\n    ],\n    isFirstParty: true,\n    isTokenEndpointIpHeaderTrusted: true,\n    jwtConfiguration: {\n        alg: \"RS256\",\n        lifetimeInSeconds: 300,\n        scopes: {\n            foo: \"bar\",\n        },\n        secretEncoded: true,\n    },\n    mobile: {\n        ios: {\n            appBundleIdentifier: \"com.my.bundle.id\",\n            teamId: \"9JA89QQLNQ\",\n        },\n    },\n    oidcConformant: false,\n    refreshToken: {\n        expirationType: \"expiring\",\n        leeway: 0,\n        rotationType: \"rotating\",\n        tokenLifetime: 2592000,\n    },\n    webOrigins: [\"https://example.com\"],\n});\n```\n```python\nimport pulumi\nimport pulumi_auth0 as auth0\n\nmy_client = auth0.Client(\"myClient\",\n    addons=auth0.ClientAddonsArgs(\n        samlp=auth0.ClientAddonsSamlpArgs(\n            audience=\"https://example.com/saml\",\n            create_upn_claim=False,\n            issuer=\"https://example.com\",\n            map_identities=False,\n            map_unknown_claims_as_is=False,\n            mappings={\n                \"email\": \"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress\",\n                \"name\": \"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name\",\n            },\n            name_identifier_format=\"urn:oasis:names:tc:SAML:2.0:nameid-format:persistent\",\n            name_identifier_probes=[\"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress\"],\n            passthrough_claims_with_no_mapping=False,\n            signing_cert=\"\"\"-----BEGIN PUBLIC KEY-----\nMIGf...bpP/t3\n+JGNGIRMj1hF1rnb6QIDAQAB\n-----END PUBLIC KEY-----\n\n\"\"\",\n        ),\n    ),\n    allowed_logout_urls=[\"https://example.com\"],\n    allowed_origins=[\"https://example.com\"],\n    app_type=\"non_interactive\",\n    callbacks=[\"https://example.com/callback\"],\n    client_metadata={\n        \"foo\": \"zoo\",\n    },\n    custom_login_page_on=True,\n    description=\"Test Applications Long Description\",\n    grant_types=[\n        \"authorization_code\",\n        \"http://auth0.com/oauth/grant-type/password-realm\",\n        \"implicit\",\n        \"password\",\n        \"refresh_token\",\n    ],\n    is_first_party=True,\n    is_token_endpoint_ip_header_trusted=True,\n    jwt_configuration=auth0.ClientJwtConfigurationArgs(\n        alg=\"RS256\",\n        lifetime_in_seconds=300,\n        scopes={\n            \"foo\": \"bar\",\n        },\n        secret_encoded=True,\n    ),\n    mobile=auth0.ClientMobileArgs(\n        ios=auth0.ClientMobileIosArgs(\n            app_bundle_identifier=\"com.my.bundle.id\",\n            team_id=\"9JA89QQLNQ\",\n        ),\n    ),\n    oidc_conformant=False,\n    refresh_token=auth0.ClientRefreshTokenArgs(\n        expiration_type=\"expiring\",\n        leeway=0,\n        rotation_type=\"rotating\",\n        token_lifetime=2592000,\n    ),\n    web_origins=[\"https://example.com\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Auth0 = Pulumi.Auth0;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myClient = new Auth0.Client(\"myClient\", new()\n    {\n        Addons = new Auth0.Inputs.ClientAddonsArgs\n        {\n            Samlp = new Auth0.Inputs.ClientAddonsSamlpArgs\n            {\n                Audience = \"https://example.com/saml\",\n                CreateUpnClaim = false,\n                Issuer = \"https://example.com\",\n                MapIdentities = false,\n                MapUnknownClaimsAsIs = false,\n                Mappings = \n                {\n                    { \"email\", \"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress\" },\n                    { \"name\", \"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name\" },\n                },\n                NameIdentifierFormat = \"urn:oasis:names:tc:SAML:2.0:nameid-format:persistent\",\n                NameIdentifierProbes = new[]\n                {\n                    \"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress\",\n                },\n                PassthroughClaimsWithNoMapping = false,\n                SigningCert = @\"-----BEGIN PUBLIC KEY-----\nMIGf...bpP/t3\n+JGNGIRMj1hF1rnb6QIDAQAB\n-----END PUBLIC KEY-----\n\n\",\n            },\n        },\n        AllowedLogoutUrls = new[]\n        {\n            \"https://example.com\",\n        },\n        AllowedOrigins = new[]\n        {\n            \"https://example.com\",\n        },\n        AppType = \"non_interactive\",\n        Callbacks = new[]\n        {\n            \"https://example.com/callback\",\n        },\n        ClientMetadata = \n        {\n            { \"foo\", \"zoo\" },\n        },\n        CustomLoginPageOn = true,\n        Description = \"Test Applications Long Description\",\n        GrantTypes = new[]\n        {\n            \"authorization_code\",\n            \"http://auth0.com/oauth/grant-type/password-realm\",\n            \"implicit\",\n            \"password\",\n            \"refresh_token\",\n        },\n        IsFirstParty = true,\n        IsTokenEndpointIpHeaderTrusted = true,\n        JwtConfiguration = new Auth0.Inputs.ClientJwtConfigurationArgs\n        {\n            Alg = \"RS256\",\n            LifetimeInSeconds = 300,\n            Scopes = \n            {\n                { \"foo\", \"bar\" },\n            },\n            SecretEncoded = true,\n        },\n        Mobile = new Auth0.Inputs.ClientMobileArgs\n        {\n            Ios = new Auth0.Inputs.ClientMobileIosArgs\n            {\n                AppBundleIdentifier = \"com.my.bundle.id\",\n                TeamId = \"9JA89QQLNQ\",\n            },\n        },\n        OidcConformant = false,\n        RefreshToken = new Auth0.Inputs.ClientRefreshTokenArgs\n        {\n            ExpirationType = \"expiring\",\n            Leeway = 0,\n            RotationType = \"rotating\",\n            TokenLifetime = 2592000,\n        },\n        WebOrigins = new[]\n        {\n            \"https://example.com\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-auth0/sdk/v3/go/auth0\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := auth0.NewClient(ctx, \"myClient\", \u0026auth0.ClientArgs{\n\t\t\tAddons: \u0026auth0.ClientAddonsArgs{\n\t\t\t\tSamlp: \u0026auth0.ClientAddonsSamlpArgs{\n\t\t\t\t\tAudience:             pulumi.String(\"https://example.com/saml\"),\n\t\t\t\t\tCreateUpnClaim:       pulumi.Bool(false),\n\t\t\t\t\tIssuer:               pulumi.String(\"https://example.com\"),\n\t\t\t\t\tMapIdentities:        pulumi.Bool(false),\n\t\t\t\t\tMapUnknownClaimsAsIs: pulumi.Bool(false),\n\t\t\t\t\tMappings: pulumi.Map{\n\t\t\t\t\t\t\"email\": pulumi.Any(\"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress\"),\n\t\t\t\t\t\t\"name\":  pulumi.Any(\"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name\"),\n\t\t\t\t\t},\n\t\t\t\t\tNameIdentifierFormat: pulumi.String(\"urn:oasis:names:tc:SAML:2.0:nameid-format:persistent\"),\n\t\t\t\t\tNameIdentifierProbes: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress\"),\n\t\t\t\t\t},\n\t\t\t\t\tPassthroughClaimsWithNoMapping: pulumi.Bool(false),\n\t\t\t\t\tSigningCert: pulumi.String(`-----BEGIN PUBLIC KEY-----\nMIGf...bpP/t3\n+JGNGIRMj1hF1rnb6QIDAQAB\n-----END PUBLIC KEY-----\n\n`),\n\t\t\t\t},\n\t\t\t},\n\t\t\tAllowedLogoutUrls: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"https://example.com\"),\n\t\t\t},\n\t\t\tAllowedOrigins: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"https://example.com\"),\n\t\t\t},\n\t\t\tAppType: pulumi.String(\"non_interactive\"),\n\t\t\tCallbacks: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"https://example.com/callback\"),\n\t\t\t},\n\t\t\tClientMetadata: pulumi.Map{\n\t\t\t\t\"foo\": pulumi.Any(\"zoo\"),\n\t\t\t},\n\t\t\tCustomLoginPageOn: pulumi.Bool(true),\n\t\t\tDescription:       pulumi.String(\"Test Applications Long Description\"),\n\t\t\tGrantTypes: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"authorization_code\"),\n\t\t\t\tpulumi.String(\"http://auth0.com/oauth/grant-type/password-realm\"),\n\t\t\t\tpulumi.String(\"implicit\"),\n\t\t\t\tpulumi.String(\"password\"),\n\t\t\t\tpulumi.String(\"refresh_token\"),\n\t\t\t},\n\t\t\tIsFirstParty:                   pulumi.Bool(true),\n\t\t\tIsTokenEndpointIpHeaderTrusted: pulumi.Bool(true),\n\t\t\tJwtConfiguration: \u0026auth0.ClientJwtConfigurationArgs{\n\t\t\t\tAlg:               pulumi.String(\"RS256\"),\n\t\t\t\tLifetimeInSeconds: pulumi.Int(300),\n\t\t\t\tScopes: pulumi.StringMap{\n\t\t\t\t\t\"foo\": pulumi.String(\"bar\"),\n\t\t\t\t},\n\t\t\t\tSecretEncoded: pulumi.Bool(true),\n\t\t\t},\n\t\t\tMobile: \u0026auth0.ClientMobileArgs{\n\t\t\t\tIos: \u0026auth0.ClientMobileIosArgs{\n\t\t\t\t\tAppBundleIdentifier: pulumi.String(\"com.my.bundle.id\"),\n\t\t\t\t\tTeamId:              pulumi.String(\"9JA89QQLNQ\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tOidcConformant: pulumi.Bool(false),\n\t\t\tRefreshToken: \u0026auth0.ClientRefreshTokenArgs{\n\t\t\t\tExpirationType: pulumi.String(\"expiring\"),\n\t\t\t\tLeeway:         pulumi.Int(0),\n\t\t\t\tRotationType:   pulumi.String(\"rotating\"),\n\t\t\t\tTokenLifetime:  pulumi.Int(2592000),\n\t\t\t},\n\t\t\tWebOrigins: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"https://example.com\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.auth0.Client;\nimport com.pulumi.auth0.ClientArgs;\nimport com.pulumi.auth0.inputs.ClientAddonsArgs;\nimport com.pulumi.auth0.inputs.ClientAddonsSamlpArgs;\nimport com.pulumi.auth0.inputs.ClientJwtConfigurationArgs;\nimport com.pulumi.auth0.inputs.ClientMobileArgs;\nimport com.pulumi.auth0.inputs.ClientMobileIosArgs;\nimport com.pulumi.auth0.inputs.ClientRefreshTokenArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myClient = new Client(\"myClient\", ClientArgs.builder()        \n            .addons(ClientAddonsArgs.builder()\n                .samlp(ClientAddonsSamlpArgs.builder()\n                    .audience(\"https://example.com/saml\")\n                    .createUpnClaim(false)\n                    .issuer(\"https://example.com\")\n                    .mapIdentities(false)\n                    .mapUnknownClaimsAsIs(false)\n                    .mappings(Map.ofEntries(\n                        Map.entry(\"email\", \"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress\"),\n                        Map.entry(\"name\", \"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name\")\n                    ))\n                    .nameIdentifierFormat(\"urn:oasis:names:tc:SAML:2.0:nameid-format:persistent\")\n                    .nameIdentifierProbes(\"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress\")\n                    .passthroughClaimsWithNoMapping(false)\n                    .signingCert(\"\"\"\n-----BEGIN PUBLIC KEY-----\nMIGf...bpP/t3\n+JGNGIRMj1hF1rnb6QIDAQAB\n-----END PUBLIC KEY-----\n\n                    \"\"\")\n                    .build())\n                .build())\n            .allowedLogoutUrls(\"https://example.com\")\n            .allowedOrigins(\"https://example.com\")\n            .appType(\"non_interactive\")\n            .callbacks(\"https://example.com/callback\")\n            .clientMetadata(Map.of(\"foo\", \"zoo\"))\n            .customLoginPageOn(true)\n            .description(\"Test Applications Long Description\")\n            .grantTypes(            \n                \"authorization_code\",\n                \"http://auth0.com/oauth/grant-type/password-realm\",\n                \"implicit\",\n                \"password\",\n                \"refresh_token\")\n            .isFirstParty(true)\n            .isTokenEndpointIpHeaderTrusted(true)\n            .jwtConfiguration(ClientJwtConfigurationArgs.builder()\n                .alg(\"RS256\")\n                .lifetimeInSeconds(300)\n                .scopes(Map.of(\"foo\", \"bar\"))\n                .secretEncoded(true)\n                .build())\n            .mobile(ClientMobileArgs.builder()\n                .ios(ClientMobileIosArgs.builder()\n                    .appBundleIdentifier(\"com.my.bundle.id\")\n                    .teamId(\"9JA89QQLNQ\")\n                    .build())\n                .build())\n            .oidcConformant(false)\n            .refreshToken(ClientRefreshTokenArgs.builder()\n                .expirationType(\"expiring\")\n                .leeway(0)\n                .rotationType(\"rotating\")\n                .tokenLifetime(2592000)\n                .build())\n            .webOrigins(\"https://example.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myClient:\n    type: auth0:Client\n    properties:\n      addons:\n        samlp:\n          audience: https://example.com/saml\n          createUpnClaim: false\n          issuer: https://example.com\n          mapIdentities: false\n          mapUnknownClaimsAsIs: false\n          mappings:\n            email: http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress\n            name: http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name\n          nameIdentifierFormat: urn:oasis:names:tc:SAML:2.0:nameid-format:persistent\n          nameIdentifierProbes:\n            - http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress\n          passthroughClaimsWithNoMapping: false\n          signingCert: |+\n            -----BEGIN PUBLIC KEY-----\n            MIGf...bpP/t3\n            +JGNGIRMj1hF1rnb6QIDAQAB\n            -----END PUBLIC KEY-----\n\n      allowedLogoutUrls:\n        - https://example.com\n      allowedOrigins:\n        - https://example.com\n      appType: non_interactive\n      callbacks:\n        - https://example.com/callback\n      clientMetadata:\n        foo: zoo\n      customLoginPageOn: true\n      description: Test Applications Long Description\n      grantTypes:\n        - authorization_code\n        - http://auth0.com/oauth/grant-type/password-realm\n        - implicit\n        - password\n        - refresh_token\n      isFirstParty: true\n      isTokenEndpointIpHeaderTrusted: true\n      jwtConfiguration:\n        alg: RS256\n        lifetimeInSeconds: 300\n        scopes:\n          foo: bar\n        secretEncoded: true\n      mobile:\n        ios:\n          appBundleIdentifier: com.my.bundle.id\n          teamId: 9JA89QQLNQ\n      oidcConformant: false\n      refreshToken:\n        expirationType: expiring\n        leeway: 0\n        rotationType: rotating\n        tokenLifetime: 2.592e+06\n      webOrigins:\n        - https://example.com\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThis resource can be imported by specifying the client ID. # Example\n\n```sh\n $ pulumi import auth0:index/client:Client my_client \"AaiyAPdpYdesoKnqjj8HJqRn4T5titww\"\n```\n\n ",
            "properties": {
                "addons": {
                    "$ref": "#/types/auth0:index/ClientAddons:ClientAddons",
                    "description": "Addons enabled for this client and their associated configurations.\n"
                },
                "allowedClients": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of applications ID's that will be allowed to make delegation request. By default, all applications will be allowed.\n"
                },
                "allowedLogoutUrls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "URLs that Auth0 may redirect to after logout.\n"
                },
                "allowedOrigins": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "URLs that represent valid origins for cross-origin resource sharing. By default, all your callback URLs will be allowed.\n"
                },
                "appType": {
                    "type": "string",
                    "description": "Type of application the client represents. Possible values are: `native`, `spa`, `regular_web`, `non_interactive`, `sso_integration`. Specific SSO integrations types accepted as well are: `rms`, `box`, `cloudbees`, `concur`, `dropbox`, `mscrm`, `echosign`, `egnyte`, `newrelic`, `office365`, `salesforce`, `sentry`, `sharepoint`, `slack`, `springcm`, `zendesk`, `zoom`.\n"
                },
                "callbacks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "URLs that Auth0 may call back to after a user authenticates for the client. Make sure to specify the protocol (https://) otherwise the callback may fail in some cases. With the exception of custom URI schemes for native clients, all callbacks should use protocol https://.\n"
                },
                "clientAliases": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of audiences/realms for SAML protocol. Used by the wsfed addon.\n"
                },
                "clientId": {
                    "type": "string",
                    "description": "Consumer Key assigned by Salesforce to the Connected App.\n"
                },
                "clientMetadata": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Metadata associated with the client, in the form of an object with string values (max 255 chars). Maximum of 10 metadata properties allowed. Field names (max 255 chars) are alphanumeric and may only include the following special characters: `:,-+=_*?\"/\\()\u003c\u003e@ [Tab] [Space]`.\n"
                },
                "crossOriginAuth": {
                    "type": "boolean",
                    "description": "Whether this client can be used to make cross-origin authentication requests (`true`) or it is not allowed to make such requests (`false`).\n"
                },
                "crossOriginLoc": {
                    "type": "string",
                    "description": "URL of the location in your site where the cross-origin verification takes place for the cross-origin auth flow when performing authentication in your own domain instead of Auth0 Universal Login page.\n"
                },
                "customLoginPage": {
                    "type": "string",
                    "description": "The content (HTML, CSS, JS) of the custom login page.\n"
                },
                "customLoginPageOn": {
                    "type": "boolean",
                    "description": "Indicates whether a custom login page is to be used.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the purpose of the client.\n",
                    "default": "Managed by Pulumi"
                },
                "encryptionKey": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Encryption used for WS-Fed responses with this client.\n"
                },
                "formTemplate": {
                    "type": "string",
                    "description": "HTML form template to be used for WS-Federation.\n"
                },
                "grantTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Types of grants that this client is authorized to use.\n"
                },
                "initiateLoginUri": {
                    "type": "string",
                    "description": "Initiate login URI. Must be HTTPS or an empty string.\n"
                },
                "isFirstParty": {
                    "type": "boolean",
                    "description": "Indicates whether this client is a first-party client.\n"
                },
                "isTokenEndpointIpHeaderTrusted": {
                    "type": "boolean",
                    "description": "Indicates whether the token endpoint IP header is trusted. Requires the authentication method to be set to `client_secret_post` or `client_secret_basic`. Setting this property when creating the resource, will default the authentication method to `client_secret_post`. To change the authentication method to `client_secret_basic` use the `auth0.ClientCredentials` resource.\n"
                },
                "jwtConfiguration": {
                    "$ref": "#/types/auth0:index/ClientJwtConfiguration:ClientJwtConfiguration",
                    "description": "Configuration settings for the JWTs issued for this client.\n"
                },
                "logoUri": {
                    "type": "string",
                    "description": "URL of the logo for the client. Recommended size is 150px x 150px. If none is set, the default badge for the application type will be shown.\n"
                },
                "mobile": {
                    "$ref": "#/types/auth0:index/ClientMobile:ClientMobile",
                    "description": "Additional configuration for native mobile apps.\n"
                },
                "name": {
                    "type": "string",
                    "description": "SSO integration name.\n"
                },
                "nativeSocialLogin": {
                    "$ref": "#/types/auth0:index/ClientNativeSocialLogin:ClientNativeSocialLogin",
                    "description": "Configuration settings to toggle native social login for mobile native applications. Once this is set it must stay set, with both resources set to `false` in order to change the `app_type`.\n"
                },
                "oidcBackchannelLogoutUrls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of URLs that are valid to call back from Auth0 for OIDC backchannel logout. Currently only one URL is allowed.\n"
                },
                "oidcConformant": {
                    "type": "boolean",
                    "description": "Indicates whether this client will conform to strict OIDC specifications.\n"
                },
                "organizationRequireBehavior": {
                    "type": "string",
                    "description": "Defines how to proceed during an authentication transaction when `organization_usage = \"require\"`. Can be `no_prompt` (default), `pre_login_prompt` or  `post_login_prompt`.\n"
                },
                "organizationUsage": {
                    "type": "string",
                    "description": "Defines how to proceed during an authentication transaction with regards to an organization. Can be `deny` (default), `allow` or `require`.\n"
                },
                "refreshToken": {
                    "$ref": "#/types/auth0:index/ClientRefreshToken:ClientRefreshToken",
                    "description": "Configuration settings for the refresh tokens issued for this client.\n"
                },
                "requirePushedAuthorizationRequests": {
                    "type": "boolean",
                    "description": "Makes the use of Pushed Authorization Requests mandatory for this client. This feature currently needs to be enabled on the tenant in order to make use of it.\n"
                },
                "signingKeys": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "description": "List containing a map of the public cert of the signing key and the public cert of the signing key in PKCS7.\n",
                    "secret": true
                },
                "sso": {
                    "type": "boolean",
                    "description": "Applies only to SSO clients and determines whether Auth0 will handle Single Sign-On (true) or whether the identity provider will (false).\n"
                },
                "ssoDisabled": {
                    "type": "boolean",
                    "description": "Indicates whether or not SSO is disabled.\n"
                },
                "webOrigins": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "URLs that represent valid web origins for use with web message response mode.\n"
                }
            },
            "required": [
                "clientId",
                "customLoginPageOn",
                "description",
                "grantTypes",
                "isFirstParty",
                "isTokenEndpointIpHeaderTrusted",
                "jwtConfiguration",
                "mobile",
                "name",
                "nativeSocialLogin",
                "oidcConformant",
                "refreshToken",
                "signingKeys"
            ],
            "inputProperties": {
                "addons": {
                    "$ref": "#/types/auth0:index/ClientAddons:ClientAddons",
                    "description": "Addons enabled for this client and their associated configurations.\n"
                },
                "allowedClients": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of applications ID's that will be allowed to make delegation request. By default, all applications will be allowed.\n"
                },
                "allowedLogoutUrls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "URLs that Auth0 may redirect to after logout.\n"
                },
                "allowedOrigins": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "URLs that represent valid origins for cross-origin resource sharing. By default, all your callback URLs will be allowed.\n"
                },
                "appType": {
                    "type": "string",
                    "description": "Type of application the client represents. Possible values are: `native`, `spa`, `regular_web`, `non_interactive`, `sso_integration`. Specific SSO integrations types accepted as well are: `rms`, `box`, `cloudbees`, `concur`, `dropbox`, `mscrm`, `echosign`, `egnyte`, `newrelic`, `office365`, `salesforce`, `sentry`, `sharepoint`, `slack`, `springcm`, `zendesk`, `zoom`.\n"
                },
                "callbacks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "URLs that Auth0 may call back to after a user authenticates for the client. Make sure to specify the protocol (https://) otherwise the callback may fail in some cases. With the exception of custom URI schemes for native clients, all callbacks should use protocol https://.\n"
                },
                "clientAliases": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of audiences/realms for SAML protocol. Used by the wsfed addon.\n"
                },
                "clientMetadata": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Metadata associated with the client, in the form of an object with string values (max 255 chars). Maximum of 10 metadata properties allowed. Field names (max 255 chars) are alphanumeric and may only include the following special characters: `:,-+=_*?\"/\\()\u003c\u003e@ [Tab] [Space]`.\n"
                },
                "crossOriginAuth": {
                    "type": "boolean",
                    "description": "Whether this client can be used to make cross-origin authentication requests (`true`) or it is not allowed to make such requests (`false`).\n"
                },
                "crossOriginLoc": {
                    "type": "string",
                    "description": "URL of the location in your site where the cross-origin verification takes place for the cross-origin auth flow when performing authentication in your own domain instead of Auth0 Universal Login page.\n"
                },
                "customLoginPage": {
                    "type": "string",
                    "description": "The content (HTML, CSS, JS) of the custom login page.\n"
                },
                "customLoginPageOn": {
                    "type": "boolean",
                    "description": "Indicates whether a custom login page is to be used.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the purpose of the client.\n",
                    "default": "Managed by Pulumi"
                },
                "encryptionKey": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Encryption used for WS-Fed responses with this client.\n"
                },
                "formTemplate": {
                    "type": "string",
                    "description": "HTML form template to be used for WS-Federation.\n"
                },
                "grantTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Types of grants that this client is authorized to use.\n"
                },
                "initiateLoginUri": {
                    "type": "string",
                    "description": "Initiate login URI. Must be HTTPS or an empty string.\n"
                },
                "isFirstParty": {
                    "type": "boolean",
                    "description": "Indicates whether this client is a first-party client.\n"
                },
                "isTokenEndpointIpHeaderTrusted": {
                    "type": "boolean",
                    "description": "Indicates whether the token endpoint IP header is trusted. Requires the authentication method to be set to `client_secret_post` or `client_secret_basic`. Setting this property when creating the resource, will default the authentication method to `client_secret_post`. To change the authentication method to `client_secret_basic` use the `auth0.ClientCredentials` resource.\n"
                },
                "jwtConfiguration": {
                    "$ref": "#/types/auth0:index/ClientJwtConfiguration:ClientJwtConfiguration",
                    "description": "Configuration settings for the JWTs issued for this client.\n"
                },
                "logoUri": {
                    "type": "string",
                    "description": "URL of the logo for the client. Recommended size is 150px x 150px. If none is set, the default badge for the application type will be shown.\n"
                },
                "mobile": {
                    "$ref": "#/types/auth0:index/ClientMobile:ClientMobile",
                    "description": "Additional configuration for native mobile apps.\n"
                },
                "name": {
                    "type": "string",
                    "description": "SSO integration name.\n"
                },
                "nativeSocialLogin": {
                    "$ref": "#/types/auth0:index/ClientNativeSocialLogin:ClientNativeSocialLogin",
                    "description": "Configuration settings to toggle native social login for mobile native applications. Once this is set it must stay set, with both resources set to `false` in order to change the `app_type`.\n"
                },
                "oidcBackchannelLogoutUrls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of URLs that are valid to call back from Auth0 for OIDC backchannel logout. Currently only one URL is allowed.\n"
                },
                "oidcConformant": {
                    "type": "boolean",
                    "description": "Indicates whether this client will conform to strict OIDC specifications.\n"
                },
                "organizationRequireBehavior": {
                    "type": "string",
                    "description": "Defines how to proceed during an authentication transaction when `organization_usage = \"require\"`. Can be `no_prompt` (default), `pre_login_prompt` or  `post_login_prompt`.\n"
                },
                "organizationUsage": {
                    "type": "string",
                    "description": "Defines how to proceed during an authentication transaction with regards to an organization. Can be `deny` (default), `allow` or `require`.\n"
                },
                "refreshToken": {
                    "$ref": "#/types/auth0:index/ClientRefreshToken:ClientRefreshToken",
                    "description": "Configuration settings for the refresh tokens issued for this client.\n"
                },
                "requirePushedAuthorizationRequests": {
                    "type": "boolean",
                    "description": "Makes the use of Pushed Authorization Requests mandatory for this client. This feature currently needs to be enabled on the tenant in order to make use of it.\n"
                },
                "sso": {
                    "type": "boolean",
                    "description": "Applies only to SSO clients and determines whether Auth0 will handle Single Sign-On (true) or whether the identity provider will (false).\n"
                },
                "ssoDisabled": {
                    "type": "boolean",
                    "description": "Indicates whether or not SSO is disabled.\n"
                },
                "webOrigins": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "URLs that represent valid web origins for use with web message response mode.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Client resources.\n",
                "properties": {
                    "addons": {
                        "$ref": "#/types/auth0:index/ClientAddons:ClientAddons",
                        "description": "Addons enabled for this client and their associated configurations.\n"
                    },
                    "allowedClients": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of applications ID's that will be allowed to make delegation request. By default, all applications will be allowed.\n"
                    },
                    "allowedLogoutUrls": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "URLs that Auth0 may redirect to after logout.\n"
                    },
                    "allowedOrigins": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "URLs that represent valid origins for cross-origin resource sharing. By default, all your callback URLs will be allowed.\n"
                    },
                    "appType": {
                        "type": "string",
                        "description": "Type of application the client represents. Possible values are: `native`, `spa`, `regular_web`, `non_interactive`, `sso_integration`. Specific SSO integrations types accepted as well are: `rms`, `box`, `cloudbees`, `concur`, `dropbox`, `mscrm`, `echosign`, `egnyte`, `newrelic`, `office365`, `salesforce`, `sentry`, `sharepoint`, `slack`, `springcm`, `zendesk`, `zoom`.\n"
                    },
                    "callbacks": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "URLs that Auth0 may call back to after a user authenticates for the client. Make sure to specify the protocol (https://) otherwise the callback may fail in some cases. With the exception of custom URI schemes for native clients, all callbacks should use protocol https://.\n"
                    },
                    "clientAliases": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of audiences/realms for SAML protocol. Used by the wsfed addon.\n"
                    },
                    "clientId": {
                        "type": "string",
                        "description": "Consumer Key assigned by Salesforce to the Connected App.\n"
                    },
                    "clientMetadata": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Metadata associated with the client, in the form of an object with string values (max 255 chars). Maximum of 10 metadata properties allowed. Field names (max 255 chars) are alphanumeric and may only include the following special characters: `:,-+=_*?\"/\\()\u003c\u003e@ [Tab] [Space]`.\n"
                    },
                    "crossOriginAuth": {
                        "type": "boolean",
                        "description": "Whether this client can be used to make cross-origin authentication requests (`true`) or it is not allowed to make such requests (`false`).\n"
                    },
                    "crossOriginLoc": {
                        "type": "string",
                        "description": "URL of the location in your site where the cross-origin verification takes place for the cross-origin auth flow when performing authentication in your own domain instead of Auth0 Universal Login page.\n"
                    },
                    "customLoginPage": {
                        "type": "string",
                        "description": "The content (HTML, CSS, JS) of the custom login page.\n"
                    },
                    "customLoginPageOn": {
                        "type": "boolean",
                        "description": "Indicates whether a custom login page is to be used.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the purpose of the client.\n",
                        "default": "Managed by Pulumi"
                    },
                    "encryptionKey": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Encryption used for WS-Fed responses with this client.\n"
                    },
                    "formTemplate": {
                        "type": "string",
                        "description": "HTML form template to be used for WS-Federation.\n"
                    },
                    "grantTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Types of grants that this client is authorized to use.\n"
                    },
                    "initiateLoginUri": {
                        "type": "string",
                        "description": "Initiate login URI. Must be HTTPS or an empty string.\n"
                    },
                    "isFirstParty": {
                        "type": "boolean",
                        "description": "Indicates whether this client is a first-party client.\n"
                    },
                    "isTokenEndpointIpHeaderTrusted": {
                        "type": "boolean",
                        "description": "Indicates whether the token endpoint IP header is trusted. Requires the authentication method to be set to `client_secret_post` or `client_secret_basic`. Setting this property when creating the resource, will default the authentication method to `client_secret_post`. To change the authentication method to `client_secret_basic` use the `auth0.ClientCredentials` resource.\n"
                    },
                    "jwtConfiguration": {
                        "$ref": "#/types/auth0:index/ClientJwtConfiguration:ClientJwtConfiguration",
                        "description": "Configuration settings for the JWTs issued for this client.\n"
                    },
                    "logoUri": {
                        "type": "string",
                        "description": "URL of the logo for the client. Recommended size is 150px x 150px. If none is set, the default badge for the application type will be shown.\n"
                    },
                    "mobile": {
                        "$ref": "#/types/auth0:index/ClientMobile:ClientMobile",
                        "description": "Additional configuration for native mobile apps.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "SSO integration name.\n"
                    },
                    "nativeSocialLogin": {
                        "$ref": "#/types/auth0:index/ClientNativeSocialLogin:ClientNativeSocialLogin",
                        "description": "Configuration settings to toggle native social login for mobile native applications. Once this is set it must stay set, with both resources set to `false` in order to change the `app_type`.\n"
                    },
                    "oidcBackchannelLogoutUrls": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Set of URLs that are valid to call back from Auth0 for OIDC backchannel logout. Currently only one URL is allowed.\n"
                    },
                    "oidcConformant": {
                        "type": "boolean",
                        "description": "Indicates whether this client will conform to strict OIDC specifications.\n"
                    },
                    "organizationRequireBehavior": {
                        "type": "string",
                        "description": "Defines how to proceed during an authentication transaction when `organization_usage = \"require\"`. Can be `no_prompt` (default), `pre_login_prompt` or  `post_login_prompt`.\n"
                    },
                    "organizationUsage": {
                        "type": "string",
                        "description": "Defines how to proceed during an authentication transaction with regards to an organization. Can be `deny` (default), `allow` or `require`.\n"
                    },
                    "refreshToken": {
                        "$ref": "#/types/auth0:index/ClientRefreshToken:ClientRefreshToken",
                        "description": "Configuration settings for the refresh tokens issued for this client.\n"
                    },
                    "requirePushedAuthorizationRequests": {
                        "type": "boolean",
                        "description": "Makes the use of Pushed Authorization Requests mandatory for this client. This feature currently needs to be enabled on the tenant in order to make use of it.\n"
                    },
                    "signingKeys": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "additionalProperties": {
                                "$ref": "pulumi.json#/Any"
                            }
                        },
                        "description": "List containing a map of the public cert of the signing key and the public cert of the signing key in PKCS7.\n",
                        "secret": true
                    },
                    "sso": {
                        "type": "boolean",
                        "description": "Applies only to SSO clients and determines whether Auth0 will handle Single Sign-On (true) or whether the identity provider will (false).\n"
                    },
                    "ssoDisabled": {
                        "type": "boolean",
                        "description": "Indicates whether or not SSO is disabled.\n"
                    },
                    "webOrigins": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "URLs that represent valid web origins for use with web message response mode.\n"
                    }
                },
                "type": "object"
            }
        },
        "auth0:index/clientCredentials:ClientCredentials": {
            "description": "With this resource, you can configure the method to use when making requests to any endpoint that requires this client to authenticate.\n\n\u003e Refer to the client secret rotation guide\nfor instructions on how to rotate client secrets with zero downtime.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as auth0 from \"@pulumi/auth0\";\n\nconst myClient = new auth0.Client(\"myClient\", {\n    appType: \"non_interactive\",\n    jwtConfiguration: {\n        alg: \"RS256\",\n    },\n});\n// Configuring client_secret_post as an authentication method.\nconst testClientCredentials = new auth0.ClientCredentials(\"testClientCredentials\", {\n    clientId: myClient.id,\n    authenticationMethod: \"client_secret_post\",\n});\n// Configuring client_secret_basic as an authentication method.\nconst testIndex_clientCredentialsClientCredentials = new auth0.ClientCredentials(\"testIndex/clientCredentialsClientCredentials\", {\n    clientId: myClient.id,\n    authenticationMethod: \"client_secret_basic\",\n});\n// Configuring none as an authentication method.\nconst testAuth0Index_clientCredentialsClientCredentials = new auth0.ClientCredentials(\"testAuth0Index/clientCredentialsClientCredentials\", {\n    clientId: myClient.id,\n    authenticationMethod: \"none\",\n});\n// Configuring private_key_jwt as an authentication method.\nconst testAuth0Index_clientCredentialsClientCredentials1 = new auth0.ClientCredentials(\"testAuth0Index/clientCredentialsClientCredentials1\", {\n    clientId: myClient.id,\n    authenticationMethod: \"private_key_jwt\",\n    privateKeyJwt: {\n        credentials: [{\n            name: \"Testing Credentials 1\",\n            credentialType: \"public_key\",\n            algorithm: \"RS256\",\n            parseExpiryFromCert: true,\n            pem: `-----BEGIN CERTIFICATE-----\nMIIFWDCCA0ACCQDXqpBo3R...G9w0BAQsFADBuMQswCQYDVQQGEwJl\n-----END CERTIFICATE-----\n`,\n        }],\n    },\n});\n// Configuring the client_secret.\nconst testAuth0Index_clientCredentialsClientCredentials2 = new auth0.ClientCredentials(\"testAuth0Index/clientCredentialsClientCredentials2\", {\n    clientId: myClient.id,\n    authenticationMethod: \"client_secret_basic\",\n    clientSecret: \"LUFqPx+sRLjbL7peYRPFmFu-bbvE7u7og4YUNe_C345=683341\",\n});\n```\n```python\nimport pulumi\nimport pulumi_auth0 as auth0\n\nmy_client = auth0.Client(\"myClient\",\n    app_type=\"non_interactive\",\n    jwt_configuration=auth0.ClientJwtConfigurationArgs(\n        alg=\"RS256\",\n    ))\n# Configuring client_secret_post as an authentication method.\ntest_client_credentials = auth0.ClientCredentials(\"testClientCredentials\",\n    client_id=my_client.id,\n    authentication_method=\"client_secret_post\")\n# Configuring client_secret_basic as an authentication method.\ntest_index_client_credentials_client_credentials = auth0.ClientCredentials(\"testIndex/clientCredentialsClientCredentials\",\n    client_id=my_client.id,\n    authentication_method=\"client_secret_basic\")\n# Configuring none as an authentication method.\ntest_auth0_index_client_credentials_client_credentials = auth0.ClientCredentials(\"testAuth0Index/clientCredentialsClientCredentials\",\n    client_id=my_client.id,\n    authentication_method=\"none\")\n# Configuring private_key_jwt as an authentication method.\ntest_auth0_index_client_credentials_client_credentials1 = auth0.ClientCredentials(\"testAuth0Index/clientCredentialsClientCredentials1\",\n    client_id=my_client.id,\n    authentication_method=\"private_key_jwt\",\n    private_key_jwt=auth0.ClientCredentialsPrivateKeyJwtArgs(\n        credentials=[auth0.ClientCredentialsPrivateKeyJwtCredentialArgs(\n            name=\"Testing Credentials 1\",\n            credential_type=\"public_key\",\n            algorithm=\"RS256\",\n            parse_expiry_from_cert=True,\n            pem=\"\"\"-----BEGIN CERTIFICATE-----\nMIIFWDCCA0ACCQDXqpBo3R...G9w0BAQsFADBuMQswCQYDVQQGEwJl\n-----END CERTIFICATE-----\n\"\"\",\n        )],\n    ))\n# Configuring the client_secret.\ntest_auth0_index_client_credentials_client_credentials2 = auth0.ClientCredentials(\"testAuth0Index/clientCredentialsClientCredentials2\",\n    client_id=my_client.id,\n    authentication_method=\"client_secret_basic\",\n    client_secret=\"LUFqPx+sRLjbL7peYRPFmFu-bbvE7u7og4YUNe_C345=683341\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Auth0 = Pulumi.Auth0;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myClient = new Auth0.Client(\"myClient\", new()\n    {\n        AppType = \"non_interactive\",\n        JwtConfiguration = new Auth0.Inputs.ClientJwtConfigurationArgs\n        {\n            Alg = \"RS256\",\n        },\n    });\n\n    // Configuring client_secret_post as an authentication method.\n    var testClientCredentials = new Auth0.ClientCredentials(\"testClientCredentials\", new()\n    {\n        ClientId = myClient.Id,\n        AuthenticationMethod = \"client_secret_post\",\n    });\n\n    // Configuring client_secret_basic as an authentication method.\n    var testIndex_clientCredentialsClientCredentials = new Auth0.ClientCredentials(\"testIndex/clientCredentialsClientCredentials\", new()\n    {\n        ClientId = myClient.Id,\n        AuthenticationMethod = \"client_secret_basic\",\n    });\n\n    // Configuring none as an authentication method.\n    var testAuth0Index_clientCredentialsClientCredentials = new Auth0.ClientCredentials(\"testAuth0Index/clientCredentialsClientCredentials\", new()\n    {\n        ClientId = myClient.Id,\n        AuthenticationMethod = \"none\",\n    });\n\n    // Configuring private_key_jwt as an authentication method.\n    var testAuth0Index_clientCredentialsClientCredentials1 = new Auth0.ClientCredentials(\"testAuth0Index/clientCredentialsClientCredentials1\", new()\n    {\n        ClientId = myClient.Id,\n        AuthenticationMethod = \"private_key_jwt\",\n        PrivateKeyJwt = new Auth0.Inputs.ClientCredentialsPrivateKeyJwtArgs\n        {\n            Credentials = new[]\n            {\n                new Auth0.Inputs.ClientCredentialsPrivateKeyJwtCredentialArgs\n                {\n                    Name = \"Testing Credentials 1\",\n                    CredentialType = \"public_key\",\n                    Algorithm = \"RS256\",\n                    ParseExpiryFromCert = true,\n                    Pem = @\"-----BEGIN CERTIFICATE-----\nMIIFWDCCA0ACCQDXqpBo3R...G9w0BAQsFADBuMQswCQYDVQQGEwJl\n-----END CERTIFICATE-----\n\",\n                },\n            },\n        },\n    });\n\n    // Configuring the client_secret.\n    var testAuth0Index_clientCredentialsClientCredentials2 = new Auth0.ClientCredentials(\"testAuth0Index/clientCredentialsClientCredentials2\", new()\n    {\n        ClientId = myClient.Id,\n        AuthenticationMethod = \"client_secret_basic\",\n        ClientSecret = \"LUFqPx+sRLjbL7peYRPFmFu-bbvE7u7og4YUNe_C345=683341\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-auth0/sdk/v3/go/auth0\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyClient, err := auth0.NewClient(ctx, \"myClient\", \u0026auth0.ClientArgs{\n\t\t\tAppType: pulumi.String(\"non_interactive\"),\n\t\t\tJwtConfiguration: \u0026auth0.ClientJwtConfigurationArgs{\n\t\t\t\tAlg: pulumi.String(\"RS256\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = auth0.NewClientCredentials(ctx, \"testClientCredentials\", \u0026auth0.ClientCredentialsArgs{\n\t\t\tClientId:             myClient.ID(),\n\t\t\tAuthenticationMethod: pulumi.String(\"client_secret_post\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = auth0.NewClientCredentials(ctx, \"testIndex/clientCredentialsClientCredentials\", \u0026auth0.ClientCredentialsArgs{\n\t\t\tClientId:             myClient.ID(),\n\t\t\tAuthenticationMethod: pulumi.String(\"client_secret_basic\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = auth0.NewClientCredentials(ctx, \"testAuth0Index/clientCredentialsClientCredentials\", \u0026auth0.ClientCredentialsArgs{\n\t\t\tClientId:             myClient.ID(),\n\t\t\tAuthenticationMethod: pulumi.String(\"none\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = auth0.NewClientCredentials(ctx, \"testAuth0Index/clientCredentialsClientCredentials1\", \u0026auth0.ClientCredentialsArgs{\n\t\t\tClientId:             myClient.ID(),\n\t\t\tAuthenticationMethod: pulumi.String(\"private_key_jwt\"),\n\t\t\tPrivateKeyJwt: \u0026auth0.ClientCredentialsPrivateKeyJwtArgs{\n\t\t\t\tCredentials: auth0.ClientCredentialsPrivateKeyJwtCredentialArray{\n\t\t\t\t\t\u0026auth0.ClientCredentialsPrivateKeyJwtCredentialArgs{\n\t\t\t\t\t\tName:                pulumi.String(\"Testing Credentials 1\"),\n\t\t\t\t\t\tCredentialType:      pulumi.String(\"public_key\"),\n\t\t\t\t\t\tAlgorithm:           pulumi.String(\"RS256\"),\n\t\t\t\t\t\tParseExpiryFromCert: pulumi.Bool(true),\n\t\t\t\t\t\tPem:                 pulumi.String(\"-----BEGIN CERTIFICATE-----\\nMIIFWDCCA0ACCQDXqpBo3R...G9w0BAQsFADBuMQswCQYDVQQGEwJl\\n-----END CERTIFICATE-----\\n\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = auth0.NewClientCredentials(ctx, \"testAuth0Index/clientCredentialsClientCredentials2\", \u0026auth0.ClientCredentialsArgs{\n\t\t\tClientId:             myClient.ID(),\n\t\t\tAuthenticationMethod: pulumi.String(\"client_secret_basic\"),\n\t\t\tClientSecret:         pulumi.String(\"LUFqPx+sRLjbL7peYRPFmFu-bbvE7u7og4YUNe_C345=683341\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.auth0.Client;\nimport com.pulumi.auth0.ClientArgs;\nimport com.pulumi.auth0.inputs.ClientJwtConfigurationArgs;\nimport com.pulumi.auth0.ClientCredentials;\nimport com.pulumi.auth0.ClientCredentialsArgs;\nimport com.pulumi.auth0.inputs.ClientCredentialsPrivateKeyJwtArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myClient = new Client(\"myClient\", ClientArgs.builder()        \n            .appType(\"non_interactive\")\n            .jwtConfiguration(ClientJwtConfigurationArgs.builder()\n                .alg(\"RS256\")\n                .build())\n            .build());\n\n        var testClientCredentials = new ClientCredentials(\"testClientCredentials\", ClientCredentialsArgs.builder()        \n            .clientId(myClient.id())\n            .authenticationMethod(\"client_secret_post\")\n            .build());\n\n        var testIndex_clientCredentialsClientCredentials = new ClientCredentials(\"testIndex/clientCredentialsClientCredentials\", ClientCredentialsArgs.builder()        \n            .clientId(myClient.id())\n            .authenticationMethod(\"client_secret_basic\")\n            .build());\n\n        var testAuth0Index_clientCredentialsClientCredentials = new ClientCredentials(\"testAuth0Index/clientCredentialsClientCredentials\", ClientCredentialsArgs.builder()        \n            .clientId(myClient.id())\n            .authenticationMethod(\"none\")\n            .build());\n\n        var testAuth0Index_clientCredentialsClientCredentials1 = new ClientCredentials(\"testAuth0Index/clientCredentialsClientCredentials1\", ClientCredentialsArgs.builder()        \n            .clientId(myClient.id())\n            .authenticationMethod(\"private_key_jwt\")\n            .privateKeyJwt(ClientCredentialsPrivateKeyJwtArgs.builder()\n                .credentials(ClientCredentialsPrivateKeyJwtCredentialArgs.builder()\n                    .name(\"Testing Credentials 1\")\n                    .credentialType(\"public_key\")\n                    .algorithm(\"RS256\")\n                    .parseExpiryFromCert(true)\n                    .pem(\"\"\"\n-----BEGIN CERTIFICATE-----\nMIIFWDCCA0ACCQDXqpBo3R...G9w0BAQsFADBuMQswCQYDVQQGEwJl\n-----END CERTIFICATE-----\n                    \"\"\")\n                    .build())\n                .build())\n            .build());\n\n        var testAuth0Index_clientCredentialsClientCredentials2 = new ClientCredentials(\"testAuth0Index/clientCredentialsClientCredentials2\", ClientCredentialsArgs.builder()        \n            .clientId(myClient.id())\n            .authenticationMethod(\"client_secret_basic\")\n            .clientSecret(\"LUFqPx+sRLjbL7peYRPFmFu-bbvE7u7og4YUNe_C345=683341\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myClient:\n    type: auth0:Client\n    properties:\n      appType: non_interactive\n      jwtConfiguration:\n        alg: RS256\n  # Configuring client_secret_post as an authentication method.\n  testClientCredentials:\n    type: auth0:ClientCredentials\n    properties:\n      clientId: ${myClient.id}\n      authenticationMethod: client_secret_post\n  # Configuring client_secret_basic as an authentication method.\n  testIndex/clientCredentialsClientCredentials:\n    type: auth0:ClientCredentials\n    properties:\n      clientId: ${myClient.id}\n      authenticationMethod: client_secret_basic\n  # Configuring none as an authentication method.\n  testAuth0Index/clientCredentialsClientCredentials:\n    type: auth0:ClientCredentials\n    properties:\n      clientId: ${myClient.id}\n      authenticationMethod: none\n  # Configuring private_key_jwt as an authentication method.\n  testAuth0Index/clientCredentialsClientCredentials1:\n    type: auth0:ClientCredentials\n    properties:\n      clientId: ${myClient.id}\n      authenticationMethod: private_key_jwt\n      privateKeyJwt:\n        credentials:\n          - name: Testing Credentials 1\n            credentialType: public_key\n            algorithm: RS256\n            parseExpiryFromCert: true\n            pem: |\n              -----BEGIN CERTIFICATE-----\n              MIIFWDCCA0ACCQDXqpBo3R...G9w0BAQsFADBuMQswCQYDVQQGEwJl\n              -----END CERTIFICATE-----\n  # Configuring the client_secret.\n  testAuth0Index/clientCredentialsClientCredentials2:\n    type: auth0:ClientCredentials\n    properties:\n      clientId: ${myClient.id}\n      authenticationMethod: client_secret_basic\n      clientSecret: LUFqPx+sRLjbL7peYRPFmFu-bbvE7u7og4YUNe_C345=683341\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThis resource can be imported by specifying the client ID. # Example\n\n```sh\n $ pulumi import auth0:index/clientCredentials:ClientCredentials my_creds \"AaiyAPdpYdesoKnqjj8HJqRn4T5titww\"\n```\n\n ~\u003e Importing this resource when the `authentication_method` is set to `private_key_jwt` will force the resource to be recreated. This is to be expected, because the pem file can't be checked for differences. ",
            "properties": {
                "authenticationMethod": {
                    "type": "string",
                    "description": "Configure the method to use when making requests to any endpoint that requires this client to authenticate. Options include `none` (public client without a client secret), `client_secret_post` (confidential client using HTTP POST parameters), `client_secret_basic` (confidential client using HTTP Basic), `private_key_jwt` (confidential client using a Private Key JWT).\n"
                },
                "clientId": {
                    "type": "string",
                    "description": "The ID of the client for which to configure the authentication method.\n"
                },
                "clientSecret": {
                    "type": "string",
                    "description": "Secret for the client when using `client_secret_post` or `client_secret_basic` authentication method. Keep this private.\nTo access this attribute you need to add the `read:client_keys` scope to the Terraform client. Otherwise, the attribute\nwill contain an empty string. The attribute will also be an empty string in case `private_key_jwt` is selected as an\nauthentication method.\n",
                    "secret": true
                },
                "privateKeyJwt": {
                    "$ref": "#/types/auth0:index/ClientCredentialsPrivateKeyJwt:ClientCredentialsPrivateKeyJwt",
                    "description": "Defines `private_key_jwt` client authentication method.\n"
                }
            },
            "required": [
                "authenticationMethod",
                "clientId",
                "clientSecret"
            ],
            "inputProperties": {
                "authenticationMethod": {
                    "type": "string",
                    "description": "Configure the method to use when making requests to any endpoint that requires this client to authenticate. Options include `none` (public client without a client secret), `client_secret_post` (confidential client using HTTP POST parameters), `client_secret_basic` (confidential client using HTTP Basic), `private_key_jwt` (confidential client using a Private Key JWT).\n"
                },
                "clientId": {
                    "type": "string",
                    "description": "The ID of the client for which to configure the authentication method.\n",
                    "willReplaceOnChanges": true
                },
                "clientSecret": {
                    "type": "string",
                    "description": "Secret for the client when using `client_secret_post` or `client_secret_basic` authentication method. Keep this private.\nTo access this attribute you need to add the `read:client_keys` scope to the Terraform client. Otherwise, the attribute\nwill contain an empty string. The attribute will also be an empty string in case `private_key_jwt` is selected as an\nauthentication method.\n",
                    "secret": true
                },
                "privateKeyJwt": {
                    "$ref": "#/types/auth0:index/ClientCredentialsPrivateKeyJwt:ClientCredentialsPrivateKeyJwt",
                    "description": "Defines `private_key_jwt` client authentication method.\n"
                }
            },
            "requiredInputs": [
                "authenticationMethod",
                "clientId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ClientCredentials resources.\n",
                "properties": {
                    "authenticationMethod": {
                        "type": "string",
                        "description": "Configure the method to use when making requests to any endpoint that requires this client to authenticate. Options include `none` (public client without a client secret), `client_secret_post` (confidential client using HTTP POST parameters), `client_secret_basic` (confidential client using HTTP Basic), `private_key_jwt` (confidential client using a Private Key JWT).\n"
                    },
                    "clientId": {
                        "type": "string",
                        "description": "The ID of the client for which to configure the authentication method.\n",
                        "willReplaceOnChanges": true
                    },
                    "clientSecret": {
                        "type": "string",
                        "description": "Secret for the client when using `client_secret_post` or `client_secret_basic` authentication method. Keep this private.\nTo access this attribute you need to add the `read:client_keys` scope to the Terraform client. Otherwise, the attribute\nwill contain an empty string. The attribute will also be an empty string in case `private_key_jwt` is selected as an\nauthentication method.\n",
                        "secret": true
                    },
                    "privateKeyJwt": {
                        "$ref": "#/types/auth0:index/ClientCredentialsPrivateKeyJwt:ClientCredentialsPrivateKeyJwt",
                        "description": "Defines `private_key_jwt` client authentication method.\n"
                    }
                },
                "type": "object"
            }
        },
        "auth0:index/clientGrant:ClientGrant": {
            "description": "Auth0 uses various grant types, or methods by which you grant limited access to your resources to another entity without exposing credentials. The OAuth 2.0 protocol supports several types of grants, which allow different types of access. This resource allows you to create and manage client grants used with configured Auth0 clients.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.auth0.Client;\nimport com.pulumi.auth0.ResourceServer;\nimport com.pulumi.auth0.ResourceServerArgs;\nimport com.pulumi.auth0.ClientGrant;\nimport com.pulumi.auth0.ClientGrantArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myClient = new Client(\"myClient\");\n\n        var myResourceServer = new ResourceServer(\"myResourceServer\", ResourceServerArgs.builder()        \n            .identifier(\"https://api.example.com/client-grant\")\n            .scopes(            \n                %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference),\n                %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n            .build());\n\n        var myClientGrant = new ClientGrant(\"myClientGrant\", ClientGrantArgs.builder()        \n            .clientId(myClient.id())\n            .audience(myResourceServer.identifier())\n            .scopes(            \n                \"create:foo\",\n                \"create:bar\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # The following example grants a client the \"create:foo\" and \"create:bar\" permissions (scopes).\n  myClient:\n    type: auth0:Client\n  myResourceServer:\n    type: auth0:ResourceServer\n    properties:\n      identifier: https://api.example.com/client-grant\n      scopes:\n        - value: create:foo\n          description: Create foos\n        - value: create:bar\n          description: Create bars\n  myClientGrant:\n    type: auth0:ClientGrant\n    properties:\n      clientId: ${myClient.id}\n      audience: ${myResourceServer.identifier}\n      scopes:\n        - create:foo\n        - create:bar\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThis resource can be imported by specifying the client grant ID. You can find this within the Management Dashboard in Application -\u003e APIs -\u003e Expand the required API. # Example\n\n```sh\n $ pulumi import auth0:index/clientGrant:ClientGrant my_client_grant \"cgr_XXXXXXXXXXXXXXXX\"\n```\n\n ",
            "properties": {
                "audience": {
                    "type": "string",
                    "description": "Audience or API Identifier for this grant.\n"
                },
                "clientId": {
                    "type": "string",
                    "description": "ID of the client for this grant.\n"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Permissions (scopes) included in this grant.\n"
                }
            },
            "required": [
                "audience",
                "clientId",
                "scopes"
            ],
            "inputProperties": {
                "audience": {
                    "type": "string",
                    "description": "Audience or API Identifier for this grant.\n",
                    "willReplaceOnChanges": true
                },
                "clientId": {
                    "type": "string",
                    "description": "ID of the client for this grant.\n",
                    "willReplaceOnChanges": true
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Permissions (scopes) included in this grant.\n"
                }
            },
            "requiredInputs": [
                "audience",
                "clientId",
                "scopes"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ClientGrant resources.\n",
                "properties": {
                    "audience": {
                        "type": "string",
                        "description": "Audience or API Identifier for this grant.\n",
                        "willReplaceOnChanges": true
                    },
                    "clientId": {
                        "type": "string",
                        "description": "ID of the client for this grant.\n",
                        "willReplaceOnChanges": true
                    },
                    "scopes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Permissions (scopes) included in this grant.\n"
                    }
                },
                "type": "object"
            }
        },
        "auth0:index/connection:Connection": {
            "description": "With Auth0, you can define sources of users, otherwise known as connections, which may include identity providers (such as Google or LinkedIn), databases, or passwordless authentication methods. This resource allows you to configure and manage connections to be used with your clients and users.\n\n\u003e The Auth0 dashboard displays only one connection per social provider. Although the Auth0 Management API allows the\ncreation of multiple connections per strategy, the additional connections may not be visible in the Auth0 dashboard.\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### Google OAuth2 Connection\n\n\u003e Your Auth0 account may be pre-configured with a `google-oauth2` connection.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as auth0 from \"@pulumi/auth0\";\n\nconst googleOauth2 = new auth0.Connection(\"googleOauth2\", {\n    options: {\n        allowedAudiences: [\n            \"example.com\",\n            \"api.example.com\",\n        ],\n        clientId: \"\u003cclient-id\u003e\",\n        clientSecret: \"\u003cclient-secret\u003e\",\n        nonPersistentAttrs: [\n            \"ethnicity\",\n            \"gender\",\n        ],\n        scopes: [\n            \"email\",\n            \"profile\",\n            \"gmail\",\n            \"youtube\",\n        ],\n        setUserRootAttributes: \"on_each_login\",\n    },\n    strategy: \"google-oauth2\",\n});\n```\n```python\nimport pulumi\nimport pulumi_auth0 as auth0\n\ngoogle_oauth2 = auth0.Connection(\"googleOauth2\",\n    options=auth0.ConnectionOptionsArgs(\n        allowed_audiences=[\n            \"example.com\",\n            \"api.example.com\",\n        ],\n        client_id=\"\u003cclient-id\u003e\",\n        client_secret=\"\u003cclient-secret\u003e\",\n        non_persistent_attrs=[\n            \"ethnicity\",\n            \"gender\",\n        ],\n        scopes=[\n            \"email\",\n            \"profile\",\n            \"gmail\",\n            \"youtube\",\n        ],\n        set_user_root_attributes=\"on_each_login\",\n    ),\n    strategy=\"google-oauth2\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Auth0 = Pulumi.Auth0;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var googleOauth2 = new Auth0.Connection(\"googleOauth2\", new()\n    {\n        Options = new Auth0.Inputs.ConnectionOptionsArgs\n        {\n            AllowedAudiences = new[]\n            {\n                \"example.com\",\n                \"api.example.com\",\n            },\n            ClientId = \"\u003cclient-id\u003e\",\n            ClientSecret = \"\u003cclient-secret\u003e\",\n            NonPersistentAttrs = new[]\n            {\n                \"ethnicity\",\n                \"gender\",\n            },\n            Scopes = new[]\n            {\n                \"email\",\n                \"profile\",\n                \"gmail\",\n                \"youtube\",\n            },\n            SetUserRootAttributes = \"on_each_login\",\n        },\n        Strategy = \"google-oauth2\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-auth0/sdk/v3/go/auth0\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := auth0.NewConnection(ctx, \"googleOauth2\", \u0026auth0.ConnectionArgs{\n\t\t\tOptions: \u0026auth0.ConnectionOptionsArgs{\n\t\t\t\tAllowedAudiences: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"example.com\"),\n\t\t\t\t\tpulumi.String(\"api.example.com\"),\n\t\t\t\t},\n\t\t\t\tClientId:     pulumi.String(\"\u003cclient-id\u003e\"),\n\t\t\t\tClientSecret: pulumi.String(\"\u003cclient-secret\u003e\"),\n\t\t\t\tNonPersistentAttrs: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"ethnicity\"),\n\t\t\t\t\tpulumi.String(\"gender\"),\n\t\t\t\t},\n\t\t\t\tScopes: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"email\"),\n\t\t\t\t\tpulumi.String(\"profile\"),\n\t\t\t\t\tpulumi.String(\"gmail\"),\n\t\t\t\t\tpulumi.String(\"youtube\"),\n\t\t\t\t},\n\t\t\t\tSetUserRootAttributes: pulumi.String(\"on_each_login\"),\n\t\t\t},\n\t\t\tStrategy: pulumi.String(\"google-oauth2\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.auth0.Connection;\nimport com.pulumi.auth0.ConnectionArgs;\nimport com.pulumi.auth0.inputs.ConnectionOptionsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var googleOauth2 = new Connection(\"googleOauth2\", ConnectionArgs.builder()        \n            .options(ConnectionOptionsArgs.builder()\n                .allowedAudiences(                \n                    \"example.com\",\n                    \"api.example.com\")\n                .clientId(\"\u003cclient-id\u003e\")\n                .clientSecret(\"\u003cclient-secret\u003e\")\n                .nonPersistentAttrs(                \n                    \"ethnicity\",\n                    \"gender\")\n                .scopes(                \n                    \"email\",\n                    \"profile\",\n                    \"gmail\",\n                    \"youtube\")\n                .setUserRootAttributes(\"on_each_login\")\n                .build())\n            .strategy(\"google-oauth2\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  googleOauth2:\n    type: auth0:Connection\n    properties:\n      options:\n        allowedAudiences:\n          - example.com\n          - api.example.com\n        clientId: \u003cclient-id\u003e\n        clientSecret: \u003cclient-secret\u003e\n        nonPersistentAttrs:\n          - ethnicity\n          - gender\n        scopes:\n          - email\n          - profile\n          - gmail\n          - youtube\n        setUserRootAttributes: on_each_login\n      strategy: google-oauth2\n```\n{{% /example %}}\n{{% example %}}\n### Facebook Connection\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as auth0 from \"@pulumi/auth0\";\n\nconst facebook = new auth0.Connection(\"facebook\", {\n    options: {\n        clientId: \"\u003cclient-id\u003e\",\n        clientSecret: \"\u003cclient-secret\u003e\",\n        nonPersistentAttrs: [\n            \"ethnicity\",\n            \"gender\",\n        ],\n        scopes: [\n            \"public_profile\",\n            \"email\",\n            \"groups_access_member_info\",\n            \"user_birthday\",\n        ],\n        setUserRootAttributes: \"on_each_login\",\n    },\n    strategy: \"facebook\",\n});\n```\n```python\nimport pulumi\nimport pulumi_auth0 as auth0\n\nfacebook = auth0.Connection(\"facebook\",\n    options=auth0.ConnectionOptionsArgs(\n        client_id=\"\u003cclient-id\u003e\",\n        client_secret=\"\u003cclient-secret\u003e\",\n        non_persistent_attrs=[\n            \"ethnicity\",\n            \"gender\",\n        ],\n        scopes=[\n            \"public_profile\",\n            \"email\",\n            \"groups_access_member_info\",\n            \"user_birthday\",\n        ],\n        set_user_root_attributes=\"on_each_login\",\n    ),\n    strategy=\"facebook\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Auth0 = Pulumi.Auth0;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var facebook = new Auth0.Connection(\"facebook\", new()\n    {\n        Options = new Auth0.Inputs.ConnectionOptionsArgs\n        {\n            ClientId = \"\u003cclient-id\u003e\",\n            ClientSecret = \"\u003cclient-secret\u003e\",\n            NonPersistentAttrs = new[]\n            {\n                \"ethnicity\",\n                \"gender\",\n            },\n            Scopes = new[]\n            {\n                \"public_profile\",\n                \"email\",\n                \"groups_access_member_info\",\n                \"user_birthday\",\n            },\n            SetUserRootAttributes = \"on_each_login\",\n        },\n        Strategy = \"facebook\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-auth0/sdk/v3/go/auth0\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := auth0.NewConnection(ctx, \"facebook\", \u0026auth0.ConnectionArgs{\n\t\t\tOptions: \u0026auth0.ConnectionOptionsArgs{\n\t\t\t\tClientId:     pulumi.String(\"\u003cclient-id\u003e\"),\n\t\t\t\tClientSecret: pulumi.String(\"\u003cclient-secret\u003e\"),\n\t\t\t\tNonPersistentAttrs: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"ethnicity\"),\n\t\t\t\t\tpulumi.String(\"gender\"),\n\t\t\t\t},\n\t\t\t\tScopes: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"public_profile\"),\n\t\t\t\t\tpulumi.String(\"email\"),\n\t\t\t\t\tpulumi.String(\"groups_access_member_info\"),\n\t\t\t\t\tpulumi.String(\"user_birthday\"),\n\t\t\t\t},\n\t\t\t\tSetUserRootAttributes: pulumi.String(\"on_each_login\"),\n\t\t\t},\n\t\t\tStrategy: pulumi.String(\"facebook\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.auth0.Connection;\nimport com.pulumi.auth0.ConnectionArgs;\nimport com.pulumi.auth0.inputs.ConnectionOptionsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var facebook = new Connection(\"facebook\", ConnectionArgs.builder()        \n            .options(ConnectionOptionsArgs.builder()\n                .clientId(\"\u003cclient-id\u003e\")\n                .clientSecret(\"\u003cclient-secret\u003e\")\n                .nonPersistentAttrs(                \n                    \"ethnicity\",\n                    \"gender\")\n                .scopes(                \n                    \"public_profile\",\n                    \"email\",\n                    \"groups_access_member_info\",\n                    \"user_birthday\")\n                .setUserRootAttributes(\"on_each_login\")\n                .build())\n            .strategy(\"facebook\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  facebook:\n    type: auth0:Connection\n    properties:\n      options:\n        clientId: \u003cclient-id\u003e\n        clientSecret: \u003cclient-secret\u003e\n        nonPersistentAttrs:\n          - ethnicity\n          - gender\n        scopes:\n          - public_profile\n          - email\n          - groups_access_member_info\n          - user_birthday\n        setUserRootAttributes: on_each_login\n      strategy: facebook\n```\n{{% /example %}}\n{{% example %}}\n### Apple Connection\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as auth0 from \"@pulumi/auth0\";\n\nconst apple = new auth0.Connection(\"apple\", {\n    options: {\n        clientId: \"\u003cclient-id\u003e\",\n        clientSecret: `-----BEGIN PRIVATE KEY-----\nMIHBAgEAMA0GCSqGSIb3DQEBAQUABIGsMIGpAgEAA\n-----END PRIVATE KEY-----\n`,\n        keyId: \"\u003ckey-id\u003e\",\n        nonPersistentAttrs: [\n            \"ethnicity\",\n            \"gender\",\n        ],\n        scopes: [\n            \"email\",\n            \"name\",\n        ],\n        setUserRootAttributes: \"on_first_login\",\n        teamId: \"\u003cteam-id\u003e\",\n    },\n    strategy: \"apple\",\n});\n```\n```python\nimport pulumi\nimport pulumi_auth0 as auth0\n\napple = auth0.Connection(\"apple\",\n    options=auth0.ConnectionOptionsArgs(\n        client_id=\"\u003cclient-id\u003e\",\n        client_secret=\"\"\"-----BEGIN PRIVATE KEY-----\nMIHBAgEAMA0GCSqGSIb3DQEBAQUABIGsMIGpAgEAA\n-----END PRIVATE KEY-----\n\"\"\",\n        key_id=\"\u003ckey-id\u003e\",\n        non_persistent_attrs=[\n            \"ethnicity\",\n            \"gender\",\n        ],\n        scopes=[\n            \"email\",\n            \"name\",\n        ],\n        set_user_root_attributes=\"on_first_login\",\n        team_id=\"\u003cteam-id\u003e\",\n    ),\n    strategy=\"apple\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Auth0 = Pulumi.Auth0;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var apple = new Auth0.Connection(\"apple\", new()\n    {\n        Options = new Auth0.Inputs.ConnectionOptionsArgs\n        {\n            ClientId = \"\u003cclient-id\u003e\",\n            ClientSecret = @\"-----BEGIN PRIVATE KEY-----\nMIHBAgEAMA0GCSqGSIb3DQEBAQUABIGsMIGpAgEAA\n-----END PRIVATE KEY-----\n\",\n            KeyId = \"\u003ckey-id\u003e\",\n            NonPersistentAttrs = new[]\n            {\n                \"ethnicity\",\n                \"gender\",\n            },\n            Scopes = new[]\n            {\n                \"email\",\n                \"name\",\n            },\n            SetUserRootAttributes = \"on_first_login\",\n            TeamId = \"\u003cteam-id\u003e\",\n        },\n        Strategy = \"apple\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-auth0/sdk/v3/go/auth0\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := auth0.NewConnection(ctx, \"apple\", \u0026auth0.ConnectionArgs{\n\t\t\tOptions: \u0026auth0.ConnectionOptionsArgs{\n\t\t\t\tClientId:     pulumi.String(\"\u003cclient-id\u003e\"),\n\t\t\t\tClientSecret: pulumi.String(\"-----BEGIN PRIVATE KEY-----\\nMIHBAgEAMA0GCSqGSIb3DQEBAQUABIGsMIGpAgEAA\\n-----END PRIVATE KEY-----\\n\"),\n\t\t\t\tKeyId:        pulumi.String(\"\u003ckey-id\u003e\"),\n\t\t\t\tNonPersistentAttrs: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"ethnicity\"),\n\t\t\t\t\tpulumi.String(\"gender\"),\n\t\t\t\t},\n\t\t\t\tScopes: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"email\"),\n\t\t\t\t\tpulumi.String(\"name\"),\n\t\t\t\t},\n\t\t\t\tSetUserRootAttributes: pulumi.String(\"on_first_login\"),\n\t\t\t\tTeamId:                pulumi.String(\"\u003cteam-id\u003e\"),\n\t\t\t},\n\t\t\tStrategy: pulumi.String(\"apple\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.auth0.Connection;\nimport com.pulumi.auth0.ConnectionArgs;\nimport com.pulumi.auth0.inputs.ConnectionOptionsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var apple = new Connection(\"apple\", ConnectionArgs.builder()        \n            .options(ConnectionOptionsArgs.builder()\n                .clientId(\"\u003cclient-id\u003e\")\n                .clientSecret(\"\"\"\n-----BEGIN PRIVATE KEY-----\nMIHBAgEAMA0GCSqGSIb3DQEBAQUABIGsMIGpAgEAA\n-----END PRIVATE KEY-----\n                \"\"\")\n                .keyId(\"\u003ckey-id\u003e\")\n                .nonPersistentAttrs(                \n                    \"ethnicity\",\n                    \"gender\")\n                .scopes(                \n                    \"email\",\n                    \"name\")\n                .setUserRootAttributes(\"on_first_login\")\n                .teamId(\"\u003cteam-id\u003e\")\n                .build())\n            .strategy(\"apple\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  apple:\n    type: auth0:Connection\n    properties:\n      options:\n        clientId: \u003cclient-id\u003e\n        clientSecret: |\n          -----BEGIN PRIVATE KEY-----\n          MIHBAgEAMA0GCSqGSIb3DQEBAQUABIGsMIGpAgEAA\n          -----END PRIVATE KEY-----\n        keyId: \u003ckey-id\u003e\n        nonPersistentAttrs:\n          - ethnicity\n          - gender\n        scopes:\n          - email\n          - name\n        setUserRootAttributes: on_first_login\n        teamId: \u003cteam-id\u003e\n      strategy: apple\n```\n{{% /example %}}\n{{% example %}}\n### LinkedIn Connection\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as auth0 from \"@pulumi/auth0\";\n\nconst linkedin = new auth0.Connection(\"linkedin\", {\n    options: {\n        clientId: \"\u003cclient-id\u003e\",\n        clientSecret: \"\u003cclient-secret\u003e\",\n        nonPersistentAttrs: [\n            \"ethnicity\",\n            \"gender\",\n        ],\n        scopes: [\n            \"basic_profile\",\n            \"profile\",\n            \"email\",\n        ],\n        setUserRootAttributes: \"on_each_login\",\n        strategyVersion: 2,\n    },\n    strategy: \"linkedin\",\n});\n```\n```python\nimport pulumi\nimport pulumi_auth0 as auth0\n\nlinkedin = auth0.Connection(\"linkedin\",\n    options=auth0.ConnectionOptionsArgs(\n        client_id=\"\u003cclient-id\u003e\",\n        client_secret=\"\u003cclient-secret\u003e\",\n        non_persistent_attrs=[\n            \"ethnicity\",\n            \"gender\",\n        ],\n        scopes=[\n            \"basic_profile\",\n            \"profile\",\n            \"email\",\n        ],\n        set_user_root_attributes=\"on_each_login\",\n        strategy_version=2,\n    ),\n    strategy=\"linkedin\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Auth0 = Pulumi.Auth0;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var linkedin = new Auth0.Connection(\"linkedin\", new()\n    {\n        Options = new Auth0.Inputs.ConnectionOptionsArgs\n        {\n            ClientId = \"\u003cclient-id\u003e\",\n            ClientSecret = \"\u003cclient-secret\u003e\",\n            NonPersistentAttrs = new[]\n            {\n                \"ethnicity\",\n                \"gender\",\n            },\n            Scopes = new[]\n            {\n                \"basic_profile\",\n                \"profile\",\n                \"email\",\n            },\n            SetUserRootAttributes = \"on_each_login\",\n            StrategyVersion = 2,\n        },\n        Strategy = \"linkedin\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-auth0/sdk/v3/go/auth0\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := auth0.NewConnection(ctx, \"linkedin\", \u0026auth0.ConnectionArgs{\n\t\t\tOptions: \u0026auth0.ConnectionOptionsArgs{\n\t\t\t\tClientId:     pulumi.String(\"\u003cclient-id\u003e\"),\n\t\t\t\tClientSecret: pulumi.String(\"\u003cclient-secret\u003e\"),\n\t\t\t\tNonPersistentAttrs: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"ethnicity\"),\n\t\t\t\t\tpulumi.String(\"gender\"),\n\t\t\t\t},\n\t\t\t\tScopes: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"basic_profile\"),\n\t\t\t\t\tpulumi.String(\"profile\"),\n\t\t\t\t\tpulumi.String(\"email\"),\n\t\t\t\t},\n\t\t\t\tSetUserRootAttributes: pulumi.String(\"on_each_login\"),\n\t\t\t\tStrategyVersion:       pulumi.Int(2),\n\t\t\t},\n\t\t\tStrategy: pulumi.String(\"linkedin\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.auth0.Connection;\nimport com.pulumi.auth0.ConnectionArgs;\nimport com.pulumi.auth0.inputs.ConnectionOptionsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var linkedin = new Connection(\"linkedin\", ConnectionArgs.builder()        \n            .options(ConnectionOptionsArgs.builder()\n                .clientId(\"\u003cclient-id\u003e\")\n                .clientSecret(\"\u003cclient-secret\u003e\")\n                .nonPersistentAttrs(                \n                    \"ethnicity\",\n                    \"gender\")\n                .scopes(                \n                    \"basic_profile\",\n                    \"profile\",\n                    \"email\")\n                .setUserRootAttributes(\"on_each_login\")\n                .strategyVersion(2)\n                .build())\n            .strategy(\"linkedin\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  linkedin:\n    type: auth0:Connection\n    properties:\n      options:\n        clientId: \u003cclient-id\u003e\n        clientSecret: \u003cclient-secret\u003e\n        nonPersistentAttrs:\n          - ethnicity\n          - gender\n        scopes:\n          - basic_profile\n          - profile\n          - email\n        setUserRootAttributes: on_each_login\n        strategyVersion: 2\n      strategy: linkedin\n```\n{{% /example %}}\n{{% example %}}\n### GitHub Connection\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as auth0 from \"@pulumi/auth0\";\n\nconst github = new auth0.Connection(\"github\", {\n    options: {\n        clientId: \"\u003cclient-id\u003e\",\n        clientSecret: \"\u003cclient-secret\u003e\",\n        nonPersistentAttrs: [\n            \"ethnicity\",\n            \"gender\",\n        ],\n        scopes: [\n            \"email\",\n            \"profile\",\n            \"public_repo\",\n            \"repo\",\n        ],\n        setUserRootAttributes: \"on_each_login\",\n    },\n    strategy: \"github\",\n});\n```\n```python\nimport pulumi\nimport pulumi_auth0 as auth0\n\ngithub = auth0.Connection(\"github\",\n    options=auth0.ConnectionOptionsArgs(\n        client_id=\"\u003cclient-id\u003e\",\n        client_secret=\"\u003cclient-secret\u003e\",\n        non_persistent_attrs=[\n            \"ethnicity\",\n            \"gender\",\n        ],\n        scopes=[\n            \"email\",\n            \"profile\",\n            \"public_repo\",\n            \"repo\",\n        ],\n        set_user_root_attributes=\"on_each_login\",\n    ),\n    strategy=\"github\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Auth0 = Pulumi.Auth0;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var github = new Auth0.Connection(\"github\", new()\n    {\n        Options = new Auth0.Inputs.ConnectionOptionsArgs\n        {\n            ClientId = \"\u003cclient-id\u003e\",\n            ClientSecret = \"\u003cclient-secret\u003e\",\n            NonPersistentAttrs = new[]\n            {\n                \"ethnicity\",\n                \"gender\",\n            },\n            Scopes = new[]\n            {\n                \"email\",\n                \"profile\",\n                \"public_repo\",\n                \"repo\",\n            },\n            SetUserRootAttributes = \"on_each_login\",\n        },\n        Strategy = \"github\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-auth0/sdk/v3/go/auth0\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := auth0.NewConnection(ctx, \"github\", \u0026auth0.ConnectionArgs{\n\t\t\tOptions: \u0026auth0.ConnectionOptionsArgs{\n\t\t\t\tClientId:     pulumi.String(\"\u003cclient-id\u003e\"),\n\t\t\t\tClientSecret: pulumi.String(\"\u003cclient-secret\u003e\"),\n\t\t\t\tNonPersistentAttrs: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"ethnicity\"),\n\t\t\t\t\tpulumi.String(\"gender\"),\n\t\t\t\t},\n\t\t\t\tScopes: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"email\"),\n\t\t\t\t\tpulumi.String(\"profile\"),\n\t\t\t\t\tpulumi.String(\"public_repo\"),\n\t\t\t\t\tpulumi.String(\"repo\"),\n\t\t\t\t},\n\t\t\t\tSetUserRootAttributes: pulumi.String(\"on_each_login\"),\n\t\t\t},\n\t\t\tStrategy: pulumi.String(\"github\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.auth0.Connection;\nimport com.pulumi.auth0.ConnectionArgs;\nimport com.pulumi.auth0.inputs.ConnectionOptionsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var github = new Connection(\"github\", ConnectionArgs.builder()        \n            .options(ConnectionOptionsArgs.builder()\n                .clientId(\"\u003cclient-id\u003e\")\n                .clientSecret(\"\u003cclient-secret\u003e\")\n                .nonPersistentAttrs(                \n                    \"ethnicity\",\n                    \"gender\")\n                .scopes(                \n                    \"email\",\n                    \"profile\",\n                    \"public_repo\",\n                    \"repo\")\n                .setUserRootAttributes(\"on_each_login\")\n                .build())\n            .strategy(\"github\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  github:\n    type: auth0:Connection\n    properties:\n      options:\n        clientId: \u003cclient-id\u003e\n        clientSecret: \u003cclient-secret\u003e\n        nonPersistentAttrs:\n          - ethnicity\n          - gender\n        scopes:\n          - email\n          - profile\n          - public_repo\n          - repo\n        setUserRootAttributes: on_each_login\n      strategy: github\n```\n{{% /example %}}\n{{% example %}}\n### SalesForce Connection\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as auth0 from \"@pulumi/auth0\";\n\nconst salesforce = new auth0.Connection(\"salesforce\", {\n    options: {\n        clientId: \"\u003cclient-id\u003e\",\n        clientSecret: \"\u003cclient-secret\u003e\",\n        communityBaseUrl: \"https://salesforce.example.com\",\n        nonPersistentAttrs: [\n            \"ethnicity\",\n            \"gender\",\n        ],\n        scopes: [\n            \"openid\",\n            \"email\",\n        ],\n        setUserRootAttributes: \"on_first_login\",\n    },\n    strategy: \"salesforce\",\n});\n```\n```python\nimport pulumi\nimport pulumi_auth0 as auth0\n\nsalesforce = auth0.Connection(\"salesforce\",\n    options=auth0.ConnectionOptionsArgs(\n        client_id=\"\u003cclient-id\u003e\",\n        client_secret=\"\u003cclient-secret\u003e\",\n        community_base_url=\"https://salesforce.example.com\",\n        non_persistent_attrs=[\n            \"ethnicity\",\n            \"gender\",\n        ],\n        scopes=[\n            \"openid\",\n            \"email\",\n        ],\n        set_user_root_attributes=\"on_first_login\",\n    ),\n    strategy=\"salesforce\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Auth0 = Pulumi.Auth0;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var salesforce = new Auth0.Connection(\"salesforce\", new()\n    {\n        Options = new Auth0.Inputs.ConnectionOptionsArgs\n        {\n            ClientId = \"\u003cclient-id\u003e\",\n            ClientSecret = \"\u003cclient-secret\u003e\",\n            CommunityBaseUrl = \"https://salesforce.example.com\",\n            NonPersistentAttrs = new[]\n            {\n                \"ethnicity\",\n                \"gender\",\n            },\n            Scopes = new[]\n            {\n                \"openid\",\n                \"email\",\n            },\n            SetUserRootAttributes = \"on_first_login\",\n        },\n        Strategy = \"salesforce\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-auth0/sdk/v3/go/auth0\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := auth0.NewConnection(ctx, \"salesforce\", \u0026auth0.ConnectionArgs{\n\t\t\tOptions: \u0026auth0.ConnectionOptionsArgs{\n\t\t\t\tClientId:         pulumi.String(\"\u003cclient-id\u003e\"),\n\t\t\t\tClientSecret:     pulumi.String(\"\u003cclient-secret\u003e\"),\n\t\t\t\tCommunityBaseUrl: pulumi.String(\"https://salesforce.example.com\"),\n\t\t\t\tNonPersistentAttrs: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"ethnicity\"),\n\t\t\t\t\tpulumi.String(\"gender\"),\n\t\t\t\t},\n\t\t\t\tScopes: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"openid\"),\n\t\t\t\t\tpulumi.String(\"email\"),\n\t\t\t\t},\n\t\t\t\tSetUserRootAttributes: pulumi.String(\"on_first_login\"),\n\t\t\t},\n\t\t\tStrategy: pulumi.String(\"salesforce\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.auth0.Connection;\nimport com.pulumi.auth0.ConnectionArgs;\nimport com.pulumi.auth0.inputs.ConnectionOptionsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var salesforce = new Connection(\"salesforce\", ConnectionArgs.builder()        \n            .options(ConnectionOptionsArgs.builder()\n                .clientId(\"\u003cclient-id\u003e\")\n                .clientSecret(\"\u003cclient-secret\u003e\")\n                .communityBaseUrl(\"https://salesforce.example.com\")\n                .nonPersistentAttrs(                \n                    \"ethnicity\",\n                    \"gender\")\n                .scopes(                \n                    \"openid\",\n                    \"email\")\n                .setUserRootAttributes(\"on_first_login\")\n                .build())\n            .strategy(\"salesforce\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  salesforce:\n    type: auth0:Connection\n    properties:\n      options:\n        clientId: \u003cclient-id\u003e\n        clientSecret: \u003cclient-secret\u003e\n        communityBaseUrl: https://salesforce.example.com\n        nonPersistentAttrs:\n          - ethnicity\n          - gender\n        scopes:\n          - openid\n          - email\n        setUserRootAttributes: on_first_login\n      strategy: salesforce\n```\n{{% /example %}}\n{{% example %}}\n### OAuth2 Connection\n\nAlso applies to following connection strategies: `dropbox`, `bitbucket`, `paypal`, `twitter`, `amazon`, `yahoo`, `box`, `wordpress`, `shopify`, `custom`\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as auth0 from \"@pulumi/auth0\";\n\nconst oauth2 = new auth0.Connection(\"oauth2\", {\n    options: {\n        authorizationEndpoint: \"https://auth.example.com/oauth2/authorize\",\n        clientId: \"\u003cclient-id\u003e\",\n        clientSecret: \"\u003cclient-secret\u003e\",\n        iconUrl: \"https://auth.example.com/assets/logo.png\",\n        nonPersistentAttrs: [\n            \"ethnicity\",\n            \"gender\",\n        ],\n        pkceEnabled: true,\n        scopes: [\n            \"basic_profile\",\n            \"profile\",\n            \"email\",\n        ],\n        scripts: {\n            fetchUserProfile: `        function fetchUserProfile(accessToken, context, callback) {\n          return callback(new Error(\"Whoops!\"));\n        }\n      \n`,\n        },\n        setUserRootAttributes: \"on_each_login\",\n        tokenEndpoint: \"https://auth.example.com/oauth2/token\",\n    },\n    strategy: \"oauth2\",\n});\n```\n```python\nimport pulumi\nimport pulumi_auth0 as auth0\n\noauth2 = auth0.Connection(\"oauth2\",\n    options=auth0.ConnectionOptionsArgs(\n        authorization_endpoint=\"https://auth.example.com/oauth2/authorize\",\n        client_id=\"\u003cclient-id\u003e\",\n        client_secret=\"\u003cclient-secret\u003e\",\n        icon_url=\"https://auth.example.com/assets/logo.png\",\n        non_persistent_attrs=[\n            \"ethnicity\",\n            \"gender\",\n        ],\n        pkce_enabled=True,\n        scopes=[\n            \"basic_profile\",\n            \"profile\",\n            \"email\",\n        ],\n        scripts={\n            \"fetchUserProfile\": \"\"\"        function fetchUserProfile(accessToken, context, callback) {\n          return callback(new Error(\"Whoops!\"));\n        }\n      \n\"\"\",\n        },\n        set_user_root_attributes=\"on_each_login\",\n        token_endpoint=\"https://auth.example.com/oauth2/token\",\n    ),\n    strategy=\"oauth2\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Auth0 = Pulumi.Auth0;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var oauth2 = new Auth0.Connection(\"oauth2\", new()\n    {\n        Options = new Auth0.Inputs.ConnectionOptionsArgs\n        {\n            AuthorizationEndpoint = \"https://auth.example.com/oauth2/authorize\",\n            ClientId = \"\u003cclient-id\u003e\",\n            ClientSecret = \"\u003cclient-secret\u003e\",\n            IconUrl = \"https://auth.example.com/assets/logo.png\",\n            NonPersistentAttrs = new[]\n            {\n                \"ethnicity\",\n                \"gender\",\n            },\n            PkceEnabled = true,\n            Scopes = new[]\n            {\n                \"basic_profile\",\n                \"profile\",\n                \"email\",\n            },\n            Scripts = \n            {\n                { \"fetchUserProfile\", @\"        function fetchUserProfile(accessToken, context, callback) {\n          return callback(new Error(\"\"Whoops!\"\"));\n        }\n      \n\" },\n            },\n            SetUserRootAttributes = \"on_each_login\",\n            TokenEndpoint = \"https://auth.example.com/oauth2/token\",\n        },\n        Strategy = \"oauth2\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-auth0/sdk/v3/go/auth0\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := auth0.NewConnection(ctx, \"oauth2\", \u0026auth0.ConnectionArgs{\n\t\t\tOptions: \u0026auth0.ConnectionOptionsArgs{\n\t\t\t\tAuthorizationEndpoint: pulumi.String(\"https://auth.example.com/oauth2/authorize\"),\n\t\t\t\tClientId:              pulumi.String(\"\u003cclient-id\u003e\"),\n\t\t\t\tClientSecret:          pulumi.String(\"\u003cclient-secret\u003e\"),\n\t\t\t\tIconUrl:               pulumi.String(\"https://auth.example.com/assets/logo.png\"),\n\t\t\t\tNonPersistentAttrs: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"ethnicity\"),\n\t\t\t\t\tpulumi.String(\"gender\"),\n\t\t\t\t},\n\t\t\t\tPkceEnabled: pulumi.Bool(true),\n\t\t\t\tScopes: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"basic_profile\"),\n\t\t\t\t\tpulumi.String(\"profile\"),\n\t\t\t\t\tpulumi.String(\"email\"),\n\t\t\t\t},\n\t\t\t\tScripts: pulumi.StringMap{\n\t\t\t\t\t\"fetchUserProfile\": pulumi.String(\"        function fetchUserProfile(accessToken, context, callback) {\\n          return callback(new Error(\\\"Whoops!\\\"));\\n        }\\n      \\n\"),\n\t\t\t\t},\n\t\t\t\tSetUserRootAttributes: pulumi.String(\"on_each_login\"),\n\t\t\t\tTokenEndpoint:         pulumi.String(\"https://auth.example.com/oauth2/token\"),\n\t\t\t},\n\t\t\tStrategy: pulumi.String(\"oauth2\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.auth0.Connection;\nimport com.pulumi.auth0.ConnectionArgs;\nimport com.pulumi.auth0.inputs.ConnectionOptionsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var oauth2 = new Connection(\"oauth2\", ConnectionArgs.builder()        \n            .options(ConnectionOptionsArgs.builder()\n                .authorizationEndpoint(\"https://auth.example.com/oauth2/authorize\")\n                .clientId(\"\u003cclient-id\u003e\")\n                .clientSecret(\"\u003cclient-secret\u003e\")\n                .iconUrl(\"https://auth.example.com/assets/logo.png\")\n                .nonPersistentAttrs(                \n                    \"ethnicity\",\n                    \"gender\")\n                .pkceEnabled(true)\n                .scopes(                \n                    \"basic_profile\",\n                    \"profile\",\n                    \"email\")\n                .scripts(Map.of(\"fetchUserProfile\", \"\"\"\n        function fetchUserProfile(accessToken, context, callback) {\n          return callback(new Error(\"Whoops!\"));\n        }\n      \n                \"\"\"))\n                .setUserRootAttributes(\"on_each_login\")\n                .tokenEndpoint(\"https://auth.example.com/oauth2/token\")\n                .build())\n            .strategy(\"oauth2\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  oauth2:\n    type: auth0:Connection\n    properties:\n      options:\n        authorizationEndpoint: https://auth.example.com/oauth2/authorize\n        clientId: \u003cclient-id\u003e\n        clientSecret: \u003cclient-secret\u003e\n        iconUrl: https://auth.example.com/assets/logo.png\n        nonPersistentAttrs:\n          - ethnicity\n          - gender\n        pkceEnabled: true\n        scopes:\n          - basic_profile\n          - profile\n          - email\n        scripts:\n          fetchUserProfile: \"        function fetchUserProfile(accessToken, context, callback) {\\n          return callback(new Error(\\\"Whoops!\\\"));\\n        }\\n      \\n\"\n        setUserRootAttributes: on_each_login\n        tokenEndpoint: https://auth.example.com/oauth2/token\n      strategy: oauth2\n```\n{{% /example %}}\n{{% example %}}\n### SMS Connection\n\n\u003e To be able to see this in the management dashboard as well, the name of the connection must be set to \"sms\".\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as auth0 from \"@pulumi/auth0\";\n\nconst sms = new auth0.Connection(\"sms\", {\n    isDomainConnection: false,\n    options: {\n        bruteForceProtection: true,\n        disableSignup: false,\n        forwardRequestInfo: true,\n        from: \"+15555555555\",\n        gatewayAuthentication: {\n            audience: \"https://somewhere.com/sms-gateway\",\n            method: \"bearer\",\n            secret: \"4e2680bb74ec2ae24736476dd37ed6c2\",\n            secretBase64Encoded: false,\n            subject: \"test.us.auth0.com:sms\",\n        },\n        gatewayUrl: \"https://somewhere.com/sms-gateway\",\n        name: \"sms\",\n        provider: \"sms_gateway\",\n        syntax: \"md_with_macros\",\n        template: \"@@password@@\",\n        totp: {\n            length: 6,\n            timeStep: 300,\n        },\n    },\n    strategy: \"sms\",\n});\n```\n```python\nimport pulumi\nimport pulumi_auth0 as auth0\n\nsms = auth0.Connection(\"sms\",\n    is_domain_connection=False,\n    options=auth0.ConnectionOptionsArgs(\n        brute_force_protection=True,\n        disable_signup=False,\n        forward_request_info=True,\n        from_=\"+15555555555\",\n        gateway_authentication=auth0.ConnectionOptionsGatewayAuthenticationArgs(\n            audience=\"https://somewhere.com/sms-gateway\",\n            method=\"bearer\",\n            secret=\"4e2680bb74ec2ae24736476dd37ed6c2\",\n            secret_base64_encoded=False,\n            subject=\"test.us.auth0.com:sms\",\n        ),\n        gateway_url=\"https://somewhere.com/sms-gateway\",\n        name=\"sms\",\n        provider=\"sms_gateway\",\n        syntax=\"md_with_macros\",\n        template=\"@@password@@\",\n        totp=auth0.ConnectionOptionsTotpArgs(\n            length=6,\n            time_step=300,\n        ),\n    ),\n    strategy=\"sms\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Auth0 = Pulumi.Auth0;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var sms = new Auth0.Connection(\"sms\", new()\n    {\n        IsDomainConnection = false,\n        Options = new Auth0.Inputs.ConnectionOptionsArgs\n        {\n            BruteForceProtection = true,\n            DisableSignup = false,\n            ForwardRequestInfo = true,\n            From = \"+15555555555\",\n            GatewayAuthentication = new Auth0.Inputs.ConnectionOptionsGatewayAuthenticationArgs\n            {\n                Audience = \"https://somewhere.com/sms-gateway\",\n                Method = \"bearer\",\n                Secret = \"4e2680bb74ec2ae24736476dd37ed6c2\",\n                SecretBase64Encoded = false,\n                Subject = \"test.us.auth0.com:sms\",\n            },\n            GatewayUrl = \"https://somewhere.com/sms-gateway\",\n            Name = \"sms\",\n            Provider = \"sms_gateway\",\n            Syntax = \"md_with_macros\",\n            Template = \"@@password@@\",\n            Totp = new Auth0.Inputs.ConnectionOptionsTotpArgs\n            {\n                Length = 6,\n                TimeStep = 300,\n            },\n        },\n        Strategy = \"sms\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-auth0/sdk/v3/go/auth0\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := auth0.NewConnection(ctx, \"sms\", \u0026auth0.ConnectionArgs{\n\t\t\tIsDomainConnection: pulumi.Bool(false),\n\t\t\tOptions: \u0026auth0.ConnectionOptionsArgs{\n\t\t\t\tBruteForceProtection: pulumi.Bool(true),\n\t\t\t\tDisableSignup:        pulumi.Bool(false),\n\t\t\t\tForwardRequestInfo:   pulumi.Bool(true),\n\t\t\t\tFrom:                 pulumi.String(\"+15555555555\"),\n\t\t\t\tGatewayAuthentication: \u0026auth0.ConnectionOptionsGatewayAuthenticationArgs{\n\t\t\t\t\tAudience:            pulumi.String(\"https://somewhere.com/sms-gateway\"),\n\t\t\t\t\tMethod:              pulumi.String(\"bearer\"),\n\t\t\t\t\tSecret:              pulumi.String(\"4e2680bb74ec2ae24736476dd37ed6c2\"),\n\t\t\t\t\tSecretBase64Encoded: pulumi.Bool(false),\n\t\t\t\t\tSubject:             pulumi.String(\"test.us.auth0.com:sms\"),\n\t\t\t\t},\n\t\t\t\tGatewayUrl: pulumi.String(\"https://somewhere.com/sms-gateway\"),\n\t\t\t\tName:       pulumi.String(\"sms\"),\n\t\t\t\tProvider:   pulumi.String(\"sms_gateway\"),\n\t\t\t\tSyntax:     pulumi.String(\"md_with_macros\"),\n\t\t\t\tTemplate:   pulumi.String(\"@@password@@\"),\n\t\t\t\tTotp: \u0026auth0.ConnectionOptionsTotpArgs{\n\t\t\t\t\tLength:   pulumi.Int(6),\n\t\t\t\t\tTimeStep: pulumi.Int(300),\n\t\t\t\t},\n\t\t\t},\n\t\t\tStrategy: pulumi.String(\"sms\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.auth0.Connection;\nimport com.pulumi.auth0.ConnectionArgs;\nimport com.pulumi.auth0.inputs.ConnectionOptionsArgs;\nimport com.pulumi.auth0.inputs.ConnectionOptionsGatewayAuthenticationArgs;\nimport com.pulumi.auth0.inputs.ConnectionOptionsTotpArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var sms = new Connection(\"sms\", ConnectionArgs.builder()        \n            .isDomainConnection(false)\n            .options(ConnectionOptionsArgs.builder()\n                .bruteForceProtection(true)\n                .disableSignup(false)\n                .forwardRequestInfo(true)\n                .from(\"+15555555555\")\n                .gatewayAuthentication(ConnectionOptionsGatewayAuthenticationArgs.builder()\n                    .audience(\"https://somewhere.com/sms-gateway\")\n                    .method(\"bearer\")\n                    .secret(\"4e2680bb74ec2ae24736476dd37ed6c2\")\n                    .secretBase64Encoded(false)\n                    .subject(\"test.us.auth0.com:sms\")\n                    .build())\n                .gatewayUrl(\"https://somewhere.com/sms-gateway\")\n                .name(\"sms\")\n                .provider(\"sms_gateway\")\n                .syntax(\"md_with_macros\")\n                .template(\"@@password@@\")\n                .totp(ConnectionOptionsTotpArgs.builder()\n                    .length(6)\n                    .timeStep(300)\n                    .build())\n                .build())\n            .strategy(\"sms\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  sms:\n    type: auth0:Connection\n    properties:\n      isDomainConnection: false\n      options:\n        bruteForceProtection: true\n        disableSignup: false\n        forwardRequestInfo: true\n        from: '+15555555555'\n        gatewayAuthentication:\n          audience: https://somewhere.com/sms-gateway\n          method: bearer\n          secret: 4e2680bb74ec2ae24736476dd37ed6c2\n          secretBase64Encoded: false\n          subject: test.us.auth0.com:sms\n        gatewayUrl: https://somewhere.com/sms-gateway\n        name: sms\n        provider: sms_gateway\n        syntax: md_with_macros\n        template: '@@password@@'\n        totp:\n          length: 6\n          timeStep: 300\n      strategy: sms\n```\n{{% /example %}}\n{{% example %}}\n### Email Connection\n\n\u003e To be able to see this in the management dashboard as well, the name of the connection must be set to \"email\".\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as auth0 from \"@pulumi/auth0\";\n\nconst passwordlessEmail = new auth0.Connection(\"passwordlessEmail\", {\n    options: {\n        authParams: {\n            responseType: \"code\",\n            scope: \"openid email profile offline_access\",\n        },\n        bruteForceProtection: true,\n        disableSignup: false,\n        from: \"{{ application.name }} \u003croot@auth0.com\u003e\",\n        name: \"email\",\n        nonPersistentAttrs: [],\n        setUserRootAttributes: \"on_each_login\",\n        subject: \"Welcome to {{ application.name }}\",\n        syntax: \"liquid\",\n        template: \"\u003chtml\u003eThis is the body of the email\u003c/html\u003e\",\n        totp: {\n            length: 6,\n            timeStep: 300,\n        },\n    },\n    strategy: \"email\",\n});\n```\n```python\nimport pulumi\nimport pulumi_auth0 as auth0\n\npasswordless_email = auth0.Connection(\"passwordlessEmail\",\n    options=auth0.ConnectionOptionsArgs(\n        auth_params={\n            \"responseType\": \"code\",\n            \"scope\": \"openid email profile offline_access\",\n        },\n        brute_force_protection=True,\n        disable_signup=False,\n        from_=\"{{ application.name }} \u003croot@auth0.com\u003e\",\n        name=\"email\",\n        non_persistent_attrs=[],\n        set_user_root_attributes=\"on_each_login\",\n        subject=\"Welcome to {{ application.name }}\",\n        syntax=\"liquid\",\n        template=\"\u003chtml\u003eThis is the body of the email\u003c/html\u003e\",\n        totp=auth0.ConnectionOptionsTotpArgs(\n            length=6,\n            time_step=300,\n        ),\n    ),\n    strategy=\"email\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Auth0 = Pulumi.Auth0;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var passwordlessEmail = new Auth0.Connection(\"passwordlessEmail\", new()\n    {\n        Options = new Auth0.Inputs.ConnectionOptionsArgs\n        {\n            AuthParams = \n            {\n                { \"responseType\", \"code\" },\n                { \"scope\", \"openid email profile offline_access\" },\n            },\n            BruteForceProtection = true,\n            DisableSignup = false,\n            From = \"{{ application.name }} \u003croot@auth0.com\u003e\",\n            Name = \"email\",\n            NonPersistentAttrs = new() { },\n            SetUserRootAttributes = \"on_each_login\",\n            Subject = \"Welcome to {{ application.name }}\",\n            Syntax = \"liquid\",\n            Template = \"\u003chtml\u003eThis is the body of the email\u003c/html\u003e\",\n            Totp = new Auth0.Inputs.ConnectionOptionsTotpArgs\n            {\n                Length = 6,\n                TimeStep = 300,\n            },\n        },\n        Strategy = \"email\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-auth0/sdk/v3/go/auth0\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := auth0.NewConnection(ctx, \"passwordlessEmail\", \u0026auth0.ConnectionArgs{\n\t\t\tOptions: \u0026auth0.ConnectionOptionsArgs{\n\t\t\t\tAuthParams: pulumi.StringMap{\n\t\t\t\t\t\"responseType\": pulumi.String(\"code\"),\n\t\t\t\t\t\"scope\":        pulumi.String(\"openid email profile offline_access\"),\n\t\t\t\t},\n\t\t\t\tBruteForceProtection:  pulumi.Bool(true),\n\t\t\t\tDisableSignup:         pulumi.Bool(false),\n\t\t\t\tFrom:                  pulumi.String(\"{{ application.name }} \u003croot@auth0.com\u003e\"),\n\t\t\t\tName:                  pulumi.String(\"email\"),\n\t\t\t\tNonPersistentAttrs:    pulumi.StringArray{},\n\t\t\t\tSetUserRootAttributes: pulumi.String(\"on_each_login\"),\n\t\t\t\tSubject:               pulumi.String(\"Welcome to {{ application.name }}\"),\n\t\t\t\tSyntax:                pulumi.String(\"liquid\"),\n\t\t\t\tTemplate:              pulumi.String(\"\u003chtml\u003eThis is the body of the email\u003c/html\u003e\"),\n\t\t\t\tTotp: \u0026auth0.ConnectionOptionsTotpArgs{\n\t\t\t\t\tLength:   pulumi.Int(6),\n\t\t\t\t\tTimeStep: pulumi.Int(300),\n\t\t\t\t},\n\t\t\t},\n\t\t\tStrategy: pulumi.String(\"email\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.auth0.Connection;\nimport com.pulumi.auth0.ConnectionArgs;\nimport com.pulumi.auth0.inputs.ConnectionOptionsArgs;\nimport com.pulumi.auth0.inputs.ConnectionOptionsTotpArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var passwordlessEmail = new Connection(\"passwordlessEmail\", ConnectionArgs.builder()        \n            .options(ConnectionOptionsArgs.builder()\n                .authParams(Map.ofEntries(\n                    Map.entry(\"responseType\", \"code\"),\n                    Map.entry(\"scope\", \"openid email profile offline_access\")\n                ))\n                .bruteForceProtection(true)\n                .disableSignup(false)\n                .from(\"{{ application.name }} \u003croot@auth0.com\u003e\")\n                .name(\"email\")\n                .nonPersistentAttrs()\n                .setUserRootAttributes(\"on_each_login\")\n                .subject(\"Welcome to {{ application.name }}\")\n                .syntax(\"liquid\")\n                .template(\"\u003chtml\u003eThis is the body of the email\u003c/html\u003e\")\n                .totp(ConnectionOptionsTotpArgs.builder()\n                    .length(6)\n                    .timeStep(300)\n                    .build())\n                .build())\n            .strategy(\"email\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  passwordlessEmail:\n    type: auth0:Connection\n    properties:\n      options:\n        authParams:\n          responseType: code\n          scope: openid email profile offline_access\n        bruteForceProtection: true\n        disableSignup: false\n        from: '{{ application.name }} \u003croot@auth0.com\u003e'\n        name: email\n        nonPersistentAttrs: []\n        setUserRootAttributes: on_each_login\n        subject: Welcome to {{ application.name }}\n        syntax: liquid\n        template: \u003chtml\u003eThis is the body of the email\u003c/html\u003e\n        totp:\n          length: 6\n          timeStep: 300\n      strategy: email\n```\n{{% /example %}}\n{{% example %}}\n### WindowsLive Connection\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as auth0 from \"@pulumi/auth0\";\n\nconst windowslive = new auth0.Connection(\"windowslive\", {\n    options: {\n        clientId: \"\u003cclient-id\u003e\",\n        clientSecret: \"\u003cclient-secret\u003e\",\n        nonPersistentAttrs: [\n            \"ethnicity\",\n            \"gender\",\n        ],\n        scopes: [\n            \"signin\",\n            \"graph_user\",\n        ],\n        setUserRootAttributes: \"on_first_login\",\n        strategyVersion: 2,\n    },\n    strategy: \"windowslive\",\n});\n```\n```python\nimport pulumi\nimport pulumi_auth0 as auth0\n\nwindowslive = auth0.Connection(\"windowslive\",\n    options=auth0.ConnectionOptionsArgs(\n        client_id=\"\u003cclient-id\u003e\",\n        client_secret=\"\u003cclient-secret\u003e\",\n        non_persistent_attrs=[\n            \"ethnicity\",\n            \"gender\",\n        ],\n        scopes=[\n            \"signin\",\n            \"graph_user\",\n        ],\n        set_user_root_attributes=\"on_first_login\",\n        strategy_version=2,\n    ),\n    strategy=\"windowslive\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Auth0 = Pulumi.Auth0;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var windowslive = new Auth0.Connection(\"windowslive\", new()\n    {\n        Options = new Auth0.Inputs.ConnectionOptionsArgs\n        {\n            ClientId = \"\u003cclient-id\u003e\",\n            ClientSecret = \"\u003cclient-secret\u003e\",\n            NonPersistentAttrs = new[]\n            {\n                \"ethnicity\",\n                \"gender\",\n            },\n            Scopes = new[]\n            {\n                \"signin\",\n                \"graph_user\",\n            },\n            SetUserRootAttributes = \"on_first_login\",\n            StrategyVersion = 2,\n        },\n        Strategy = \"windowslive\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-auth0/sdk/v3/go/auth0\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := auth0.NewConnection(ctx, \"windowslive\", \u0026auth0.ConnectionArgs{\n\t\t\tOptions: \u0026auth0.ConnectionOptionsArgs{\n\t\t\t\tClientId:     pulumi.String(\"\u003cclient-id\u003e\"),\n\t\t\t\tClientSecret: pulumi.String(\"\u003cclient-secret\u003e\"),\n\t\t\t\tNonPersistentAttrs: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"ethnicity\"),\n\t\t\t\t\tpulumi.String(\"gender\"),\n\t\t\t\t},\n\t\t\t\tScopes: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"signin\"),\n\t\t\t\t\tpulumi.String(\"graph_user\"),\n\t\t\t\t},\n\t\t\t\tSetUserRootAttributes: pulumi.String(\"on_first_login\"),\n\t\t\t\tStrategyVersion:       pulumi.Int(2),\n\t\t\t},\n\t\t\tStrategy: pulumi.String(\"windowslive\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.auth0.Connection;\nimport com.pulumi.auth0.ConnectionArgs;\nimport com.pulumi.auth0.inputs.ConnectionOptionsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var windowslive = new Connection(\"windowslive\", ConnectionArgs.builder()        \n            .options(ConnectionOptionsArgs.builder()\n                .clientId(\"\u003cclient-id\u003e\")\n                .clientSecret(\"\u003cclient-secret\u003e\")\n                .nonPersistentAttrs(                \n                    \"ethnicity\",\n                    \"gender\")\n                .scopes(                \n                    \"signin\",\n                    \"graph_user\")\n                .setUserRootAttributes(\"on_first_login\")\n                .strategyVersion(2)\n                .build())\n            .strategy(\"windowslive\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  windowslive:\n    type: auth0:Connection\n    properties:\n      options:\n        clientId: \u003cclient-id\u003e\n        clientSecret: \u003cclient-secret\u003e\n        nonPersistentAttrs:\n          - ethnicity\n          - gender\n        scopes:\n          - signin\n          - graph_user\n        setUserRootAttributes: on_first_login\n        strategyVersion: 2\n      strategy: windowslive\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThis resource can be imported by specifying the connection ID. # Example\n\n```sh\n $ pulumi import auth0:index/connection:Connection google \"con_a17f21fdb24d48a0\"\n```\n\n ",
            "properties": {
                "displayName": {
                    "type": "string",
                    "description": "Name used in login screen.\n"
                },
                "isDomainConnection": {
                    "type": "boolean",
                    "description": "Indicates whether the connection is domain level.\n"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Metadata associated with the connection, in the form of a map of string values (max 255 chars).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The public name of the email or SMS Connection. In most cases this is the same name as the connection name.\n"
                },
                "options": {
                    "$ref": "#/types/auth0:index/ConnectionOptions:ConnectionOptions",
                    "description": "Configuration settings for connection options.\n"
                },
                "realms": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Defines the realms for which the connection will be used (e.g., email domains). If not specified, the connection name is added as the realm.\n"
                },
                "showAsButton": {
                    "type": "boolean",
                    "description": "Display connection as a button. Only available on enterprise connections.\n"
                },
                "strategy": {
                    "type": "string",
                    "description": "Type of the connection, which indicates the identity provider.\n"
                }
            },
            "required": [
                "isDomainConnection",
                "name",
                "options",
                "realms",
                "strategy"
            ],
            "inputProperties": {
                "displayName": {
                    "type": "string",
                    "description": "Name used in login screen.\n"
                },
                "isDomainConnection": {
                    "type": "boolean",
                    "description": "Indicates whether the connection is domain level.\n"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Metadata associated with the connection, in the form of a map of string values (max 255 chars).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The public name of the email or SMS Connection. In most cases this is the same name as the connection name.\n",
                    "willReplaceOnChanges": true
                },
                "options": {
                    "$ref": "#/types/auth0:index/ConnectionOptions:ConnectionOptions",
                    "description": "Configuration settings for connection options.\n"
                },
                "realms": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Defines the realms for which the connection will be used (e.g., email domains). If not specified, the connection name is added as the realm.\n"
                },
                "showAsButton": {
                    "type": "boolean",
                    "description": "Display connection as a button. Only available on enterprise connections.\n"
                },
                "strategy": {
                    "type": "string",
                    "description": "Type of the connection, which indicates the identity provider.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "strategy"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Connection resources.\n",
                "properties": {
                    "displayName": {
                        "type": "string",
                        "description": "Name used in login screen.\n"
                    },
                    "isDomainConnection": {
                        "type": "boolean",
                        "description": "Indicates whether the connection is domain level.\n"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Metadata associated with the connection, in the form of a map of string values (max 255 chars).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The public name of the email or SMS Connection. In most cases this is the same name as the connection name.\n",
                        "willReplaceOnChanges": true
                    },
                    "options": {
                        "$ref": "#/types/auth0:index/ConnectionOptions:ConnectionOptions",
                        "description": "Configuration settings for connection options.\n"
                    },
                    "realms": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Defines the realms for which the connection will be used (e.g., email domains). If not specified, the connection name is added as the realm.\n"
                    },
                    "showAsButton": {
                        "type": "boolean",
                        "description": "Display connection as a button. Only available on enterprise connections.\n"
                    },
                    "strategy": {
                        "type": "string",
                        "description": "Type of the connection, which indicates the identity provider.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "auth0:index/connectionClient:ConnectionClient": {
            "description": "With this resource, you can enable a single client on a connection.\n\n!\u003e This resource appends an enabled client to a connection. In contrast, the `auth0.ConnectionClients` resource\nmanages all the clients enabled for a connection. To avoid potential issues, it is recommended not to use this\nresource in conjunction with the `auth0.ConnectionClients` resource when managing enabled clients for the\nsame connection id.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as auth0 from \"@pulumi/auth0\";\n\nconst myConn = new auth0.Connection(\"myConn\", {strategy: \"auth0\"});\nconst myClient = new auth0.Client(\"myClient\", {});\n// One connection to one client association.\n// To prevent issues, avoid using this resource together with the `auth0_connection_clients` resource.\nconst myConnClientAssoc = new auth0.ConnectionClient(\"myConnClientAssoc\", {\n    connectionId: myConn.id,\n    clientId: myClient.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_auth0 as auth0\n\nmy_conn = auth0.Connection(\"myConn\", strategy=\"auth0\")\nmy_client = auth0.Client(\"myClient\")\n# One connection to one client association.\n# To prevent issues, avoid using this resource together with the `auth0_connection_clients` resource.\nmy_conn_client_assoc = auth0.ConnectionClient(\"myConnClientAssoc\",\n    connection_id=my_conn.id,\n    client_id=my_client.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Auth0 = Pulumi.Auth0;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myConn = new Auth0.Connection(\"myConn\", new()\n    {\n        Strategy = \"auth0\",\n    });\n\n    var myClient = new Auth0.Client(\"myClient\");\n\n    // One connection to one client association.\n    // To prevent issues, avoid using this resource together with the `auth0_connection_clients` resource.\n    var myConnClientAssoc = new Auth0.ConnectionClient(\"myConnClientAssoc\", new()\n    {\n        ConnectionId = myConn.Id,\n        ClientId = myClient.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-auth0/sdk/v3/go/auth0\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyConn, err := auth0.NewConnection(ctx, \"myConn\", \u0026auth0.ConnectionArgs{\n\t\t\tStrategy: pulumi.String(\"auth0\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmyClient, err := auth0.NewClient(ctx, \"myClient\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = auth0.NewConnectionClient(ctx, \"myConnClientAssoc\", \u0026auth0.ConnectionClientArgs{\n\t\t\tConnectionId: myConn.ID(),\n\t\t\tClientId:     myClient.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.auth0.Connection;\nimport com.pulumi.auth0.ConnectionArgs;\nimport com.pulumi.auth0.Client;\nimport com.pulumi.auth0.ConnectionClient;\nimport com.pulumi.auth0.ConnectionClientArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myConn = new Connection(\"myConn\", ConnectionArgs.builder()        \n            .strategy(\"auth0\")\n            .build());\n\n        var myClient = new Client(\"myClient\");\n\n        var myConnClientAssoc = new ConnectionClient(\"myConnClientAssoc\", ConnectionClientArgs.builder()        \n            .connectionId(myConn.id())\n            .clientId(myClient.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myConn:\n    type: auth0:Connection\n    properties:\n      strategy: auth0\n  myClient:\n    type: auth0:Client\n  # One connection to one client association.\n  # To prevent issues, avoid using this resource together with the `auth0_connection_clients` resource.\n  myConnClientAssoc:\n    type: auth0:ConnectionClient\n    properties:\n      connectionId: ${myConn.id}\n      clientId: ${myClient.id}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThis resource can be imported by specifying the connection ID and client ID separated by \"::\" (note the double colon) \u003cconnectionID\u003e::\u003cclientID\u003e # Example\n\n```sh\n $ pulumi import auth0:index/connectionClient:ConnectionClient my_conn_client_assoc \"con_XXXXX::XXXXXXXX\"\n```\n\n ",
            "properties": {
                "clientId": {
                    "type": "string",
                    "description": "ID of the client for which the connection is enabled.\n"
                },
                "connectionId": {
                    "type": "string",
                    "description": "ID of the connection on which to enable the client.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the connection on which to enable the client.\n"
                },
                "strategy": {
                    "type": "string",
                    "description": "The strategy of the connection on which to enable the client.\n"
                }
            },
            "required": [
                "clientId",
                "connectionId",
                "name",
                "strategy"
            ],
            "inputProperties": {
                "clientId": {
                    "type": "string",
                    "description": "ID of the client for which the connection is enabled.\n",
                    "willReplaceOnChanges": true
                },
                "connectionId": {
                    "type": "string",
                    "description": "ID of the connection on which to enable the client.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "clientId",
                "connectionId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ConnectionClient resources.\n",
                "properties": {
                    "clientId": {
                        "type": "string",
                        "description": "ID of the client for which the connection is enabled.\n",
                        "willReplaceOnChanges": true
                    },
                    "connectionId": {
                        "type": "string",
                        "description": "ID of the connection on which to enable the client.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the connection on which to enable the client.\n"
                    },
                    "strategy": {
                        "type": "string",
                        "description": "The strategy of the connection on which to enable the client.\n"
                    }
                },
                "type": "object"
            }
        },
        "auth0:index/connectionClients:ConnectionClients": {
            "description": "With this resource, you can manage all of the enabled clients on a connection.\n\n!\u003e This resource manages all the enabled clients for a connection. In contrast, the `auth0.ConnectionClient` resource\nappends an enabled client to a connection. To avoid potential issues, it is recommended not to use this\nresource in conjunction with the `auth0.ConnectionClient` resource when managing enabled clients for the same\nconnection id.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as auth0 from \"@pulumi/auth0\";\n\nconst myConn = new auth0.Connection(\"myConn\", {strategy: \"auth0\"});\nconst myFirstClient = new auth0.Client(\"myFirstClient\", {});\nconst mySecondClient = new auth0.Client(\"mySecondClient\", {});\n// One connection to many clients association.\n// To prevent issues, avoid using this resource together with the `auth0_connection_client` resource.\nconst myConnClientsAssoc = new auth0.ConnectionClients(\"myConnClientsAssoc\", {\n    connectionId: myConn.id,\n    enabledClients: [\n        myFirstClient.id,\n        mySecondClient.id,\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_auth0 as auth0\n\nmy_conn = auth0.Connection(\"myConn\", strategy=\"auth0\")\nmy_first_client = auth0.Client(\"myFirstClient\")\nmy_second_client = auth0.Client(\"mySecondClient\")\n# One connection to many clients association.\n# To prevent issues, avoid using this resource together with the `auth0_connection_client` resource.\nmy_conn_clients_assoc = auth0.ConnectionClients(\"myConnClientsAssoc\",\n    connection_id=my_conn.id,\n    enabled_clients=[\n        my_first_client.id,\n        my_second_client.id,\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Auth0 = Pulumi.Auth0;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myConn = new Auth0.Connection(\"myConn\", new()\n    {\n        Strategy = \"auth0\",\n    });\n\n    var myFirstClient = new Auth0.Client(\"myFirstClient\");\n\n    var mySecondClient = new Auth0.Client(\"mySecondClient\");\n\n    // One connection to many clients association.\n    // To prevent issues, avoid using this resource together with the `auth0_connection_client` resource.\n    var myConnClientsAssoc = new Auth0.ConnectionClients(\"myConnClientsAssoc\", new()\n    {\n        ConnectionId = myConn.Id,\n        EnabledClients = new[]\n        {\n            myFirstClient.Id,\n            mySecondClient.Id,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-auth0/sdk/v3/go/auth0\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyConn, err := auth0.NewConnection(ctx, \"myConn\", \u0026auth0.ConnectionArgs{\n\t\t\tStrategy: pulumi.String(\"auth0\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmyFirstClient, err := auth0.NewClient(ctx, \"myFirstClient\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmySecondClient, err := auth0.NewClient(ctx, \"mySecondClient\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = auth0.NewConnectionClients(ctx, \"myConnClientsAssoc\", \u0026auth0.ConnectionClientsArgs{\n\t\t\tConnectionId: myConn.ID(),\n\t\t\tEnabledClients: pulumi.StringArray{\n\t\t\t\tmyFirstClient.ID(),\n\t\t\t\tmySecondClient.ID(),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.auth0.Connection;\nimport com.pulumi.auth0.ConnectionArgs;\nimport com.pulumi.auth0.Client;\nimport com.pulumi.auth0.ConnectionClients;\nimport com.pulumi.auth0.ConnectionClientsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myConn = new Connection(\"myConn\", ConnectionArgs.builder()        \n            .strategy(\"auth0\")\n            .build());\n\n        var myFirstClient = new Client(\"myFirstClient\");\n\n        var mySecondClient = new Client(\"mySecondClient\");\n\n        var myConnClientsAssoc = new ConnectionClients(\"myConnClientsAssoc\", ConnectionClientsArgs.builder()        \n            .connectionId(myConn.id())\n            .enabledClients(            \n                myFirstClient.id(),\n                mySecondClient.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myConn:\n    type: auth0:Connection\n    properties:\n      strategy: auth0\n  myFirstClient:\n    type: auth0:Client\n  mySecondClient:\n    type: auth0:Client\n  # One connection to many clients association.\n  # To prevent issues, avoid using this resource together with the `auth0_connection_client` resource.\n  myConnClientsAssoc:\n    type: auth0:ConnectionClients\n    properties:\n      connectionId: ${myConn.id}\n      enabledClients:\n        - ${myFirstClient.id}\n        - ${mySecondClient.id}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThis resource can be imported by specifying the Connection ID. # Example\n\n```sh\n $ pulumi import auth0:index/connectionClients:ConnectionClients my_conn_clients_assoc \"con_XXXXX\"\n```\n\n ",
            "properties": {
                "connectionId": {
                    "type": "string",
                    "description": "ID of the connection on which to enable the client.\n"
                },
                "enabledClients": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "IDs of the clients for which the connection is enabled.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the connection on which to enable the client.\n"
                },
                "strategy": {
                    "type": "string",
                    "description": "The strategy of the connection on which to enable the client.\n"
                }
            },
            "required": [
                "connectionId",
                "enabledClients",
                "name",
                "strategy"
            ],
            "inputProperties": {
                "connectionId": {
                    "type": "string",
                    "description": "ID of the connection on which to enable the client.\n",
                    "willReplaceOnChanges": true
                },
                "enabledClients": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "IDs of the clients for which the connection is enabled.\n"
                }
            },
            "requiredInputs": [
                "connectionId",
                "enabledClients"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ConnectionClients resources.\n",
                "properties": {
                    "connectionId": {
                        "type": "string",
                        "description": "ID of the connection on which to enable the client.\n",
                        "willReplaceOnChanges": true
                    },
                    "enabledClients": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "IDs of the clients for which the connection is enabled.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the connection on which to enable the client.\n"
                    },
                    "strategy": {
                        "type": "string",
                        "description": "The strategy of the connection on which to enable the client.\n"
                    }
                },
                "type": "object"
            }
        },
        "auth0:index/customDomain:CustomDomain": {
            "description": "With Auth0, you can use a custom domain to maintain a consistent user experience. This resource allows you to create and manage a custom domain within your Auth0 tenant.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as auth0 from \"@pulumi/auth0\";\n\nconst myCustomDomain = new auth0.CustomDomain(\"myCustomDomain\", {\n    domain: \"auth.example.com\",\n    type: \"auth0_managed_certs\",\n});\n```\n```python\nimport pulumi\nimport pulumi_auth0 as auth0\n\nmy_custom_domain = auth0.CustomDomain(\"myCustomDomain\",\n    domain=\"auth.example.com\",\n    type=\"auth0_managed_certs\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Auth0 = Pulumi.Auth0;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myCustomDomain = new Auth0.CustomDomain(\"myCustomDomain\", new()\n    {\n        Domain = \"auth.example.com\",\n        Type = \"auth0_managed_certs\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-auth0/sdk/v3/go/auth0\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := auth0.NewCustomDomain(ctx, \"myCustomDomain\", \u0026auth0.CustomDomainArgs{\n\t\t\tDomain: pulumi.String(\"auth.example.com\"),\n\t\t\tType:   pulumi.String(\"auth0_managed_certs\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.auth0.CustomDomain;\nimport com.pulumi.auth0.CustomDomainArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myCustomDomain = new CustomDomain(\"myCustomDomain\", CustomDomainArgs.builder()        \n            .domain(\"auth.example.com\")\n            .type(\"auth0_managed_certs\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myCustomDomain:\n    type: auth0:CustomDomain\n    properties:\n      domain: auth.example.com\n      type: auth0_managed_certs\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nCustom domains can be imported using their ID. # You can find existing custom domain IDs using the Auth0 Management API. https://auth0.com/docs/api/management/v2#!/Custom_Domains/get_custom_domains # Example\n\n```sh\n $ pulumi import auth0:index/customDomain:CustomDomain my_custom_domain \"cd_XXXXXXXXXXXXXXXX\"\n```\n\n ",
            "properties": {
                "customClientIpHeader": {
                    "type": "string",
                    "description": "The HTTP header to fetch the client's IP address. Cannot be set on auth0_managed domains.\n"
                },
                "domain": {
                    "type": "string",
                    "description": "Name of the custom domain.\n"
                },
                "originDomainName": {
                    "type": "string",
                    "description": "Once the configuration status is `ready`, the DNS name of the Auth0 origin server that handles traffic for the custom domain.\n"
                },
                "primary": {
                    "type": "boolean",
                    "description": "Indicates whether this is a primary domain.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Configuration status for the custom domain. Options include `disabled`, `pending`, `pending_verification`, and `ready`.\n"
                },
                "tlsPolicy": {
                    "type": "string",
                    "description": "TLS policy for the custom domain. Available options are: `compatible` or `recommended`. Compatible includes TLS 1.0, 1.1, 1.2, and recommended only includes TLS 1.2. Cannot be set on self_managed domains.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Provisioning type for the custom domain. Options include `auth0_managed_certs` and `self_managed_certs`.\n"
                },
                "verifications": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/auth0:index/CustomDomainVerification:CustomDomainVerification"
                    },
                    "description": "Configuration settings for verification.\n"
                }
            },
            "required": [
                "domain",
                "originDomainName",
                "primary",
                "status",
                "tlsPolicy",
                "type",
                "verifications"
            ],
            "inputProperties": {
                "customClientIpHeader": {
                    "type": "string",
                    "description": "The HTTP header to fetch the client's IP address. Cannot be set on auth0_managed domains.\n"
                },
                "domain": {
                    "type": "string",
                    "description": "Name of the custom domain.\n",
                    "willReplaceOnChanges": true
                },
                "tlsPolicy": {
                    "type": "string",
                    "description": "TLS policy for the custom domain. Available options are: `compatible` or `recommended`. Compatible includes TLS 1.0, 1.1, 1.2, and recommended only includes TLS 1.2. Cannot be set on self_managed domains.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Provisioning type for the custom domain. Options include `auth0_managed_certs` and `self_managed_certs`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "domain",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CustomDomain resources.\n",
                "properties": {
                    "customClientIpHeader": {
                        "type": "string",
                        "description": "The HTTP header to fetch the client's IP address. Cannot be set on auth0_managed domains.\n"
                    },
                    "domain": {
                        "type": "string",
                        "description": "Name of the custom domain.\n",
                        "willReplaceOnChanges": true
                    },
                    "originDomainName": {
                        "type": "string",
                        "description": "Once the configuration status is `ready`, the DNS name of the Auth0 origin server that handles traffic for the custom domain.\n"
                    },
                    "primary": {
                        "type": "boolean",
                        "description": "Indicates whether this is a primary domain.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Configuration status for the custom domain. Options include `disabled`, `pending`, `pending_verification`, and `ready`.\n"
                    },
                    "tlsPolicy": {
                        "type": "string",
                        "description": "TLS policy for the custom domain. Available options are: `compatible` or `recommended`. Compatible includes TLS 1.0, 1.1, 1.2, and recommended only includes TLS 1.2. Cannot be set on self_managed domains.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Provisioning type for the custom domain. Options include `auth0_managed_certs` and `self_managed_certs`.\n",
                        "willReplaceOnChanges": true
                    },
                    "verifications": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/auth0:index/CustomDomainVerification:CustomDomainVerification"
                        },
                        "description": "Configuration settings for verification.\n"
                    }
                },
                "type": "object"
            }
        },
        "auth0:index/customDomainVerification:CustomDomainVerification": {
            "description": "With Auth0, you can use a custom domain to maintain a consistent user experience. This is a three-step process; you must configure the custom domain in Auth0, then create a DNS record for the domain, then verify the DNS record in Auth0. This resource allows for automating the verification part of the process.\n\n\n## Import\n\nYou can import this resource using the custom domain ID. # Example\n\n```sh\n $ pulumi import auth0:index/customDomainVerification:CustomDomainVerification my_custom_domain_verification \"cd_XXXXXXXXXXXXXXXX\"\n```\n\n ",
            "properties": {
                "cnameApiKey": {
                    "type": "string",
                    "description": "The value of the `cname-api-key` header to send when forwarding requests. Only present if the type of the custom domain\nis `self_managed_certs` and Terraform originally managed the domain's verification.\n",
                    "secret": true
                },
                "customDomainId": {
                    "type": "string",
                    "description": "ID of the custom domain resource.\n"
                },
                "originDomainName": {
                    "type": "string",
                    "description": "The DNS name of the Auth0 origin server that handles traffic for the custom domain.\n"
                }
            },
            "required": [
                "cnameApiKey",
                "customDomainId",
                "originDomainName"
            ],
            "inputProperties": {
                "customDomainId": {
                    "type": "string",
                    "description": "ID of the custom domain resource.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "customDomainId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CustomDomainVerification resources.\n",
                "properties": {
                    "cnameApiKey": {
                        "type": "string",
                        "description": "The value of the `cname-api-key` header to send when forwarding requests. Only present if the type of the custom domain\nis `self_managed_certs` and Terraform originally managed the domain's verification.\n",
                        "secret": true
                    },
                    "customDomainId": {
                        "type": "string",
                        "description": "ID of the custom domain resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "originDomainName": {
                        "type": "string",
                        "description": "The DNS name of the Auth0 origin server that handles traffic for the custom domain.\n"
                    }
                },
                "type": "object"
            }
        },
        "auth0:index/emailProvider:EmailProvider": {
            "description": "With Auth0, you can have standard welcome, password reset, and account verification email-based workflows built right into Auth0. This resource allows you to configure email providers, so you can route all emails that are part of Auth0's authentication workflows through the supported high-volume email service of your choice.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as auth0 from \"@pulumi/auth0\";\n\n// This is an example on how to set up the email provider with Amazon SES.\nconst amazonSesEmailProvider = new auth0.EmailProvider(\"amazonSesEmailProvider\", {\n    credentials: {\n        accessKeyId: \"AKIAXXXXXXXXXXXXXXXX\",\n        region: \"us-east-1\",\n        secretAccessKey: \"7e8c2148xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n    },\n    defaultFromAddress: \"accounts@example.com\",\n    enabled: true,\n});\n// This is an example on how to set up the email provider with Sendgrid.\nconst sendgridEmailProvider = new auth0.EmailProvider(\"sendgridEmailProvider\", {\n    credentials: {\n        apiKey: \"secretAPIKey\",\n    },\n    defaultFromAddress: \"accounts@example.com\",\n    enabled: true,\n});\n// This is an example on how to set up the email provider with MS365.\nconst smtpEmailProvider = new auth0.EmailProvider(\"smtpEmailProvider\", {\n    credentials: {\n        ms365ClientId: \"ms365_client_id\",\n        ms365ClientSecret: \"ms365_client_secret\",\n        ms365TenantId: \"ms365_tenant_id\",\n    },\n    defaultFromAddress: \"accounts@example.com\",\n    enabled: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_auth0 as auth0\n\n# This is an example on how to set up the email provider with Amazon SES.\namazon_ses_email_provider = auth0.EmailProvider(\"amazonSesEmailProvider\",\n    credentials=auth0.EmailProviderCredentialsArgs(\n        access_key_id=\"AKIAXXXXXXXXXXXXXXXX\",\n        region=\"us-east-1\",\n        secret_access_key=\"7e8c2148xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n    ),\n    default_from_address=\"accounts@example.com\",\n    enabled=True)\n# This is an example on how to set up the email provider with Sendgrid.\nsendgrid_email_provider = auth0.EmailProvider(\"sendgridEmailProvider\",\n    credentials=auth0.EmailProviderCredentialsArgs(\n        api_key=\"secretAPIKey\",\n    ),\n    default_from_address=\"accounts@example.com\",\n    enabled=True)\n# This is an example on how to set up the email provider with MS365.\nsmtp_email_provider = auth0.EmailProvider(\"smtpEmailProvider\",\n    credentials=auth0.EmailProviderCredentialsArgs(\n        ms365_client_id=\"ms365_client_id\",\n        ms365_client_secret=\"ms365_client_secret\",\n        ms365_tenant_id=\"ms365_tenant_id\",\n    ),\n    default_from_address=\"accounts@example.com\",\n    enabled=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Auth0 = Pulumi.Auth0;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // This is an example on how to set up the email provider with Amazon SES.\n    var amazonSesEmailProvider = new Auth0.EmailProvider(\"amazonSesEmailProvider\", new()\n    {\n        Credentials = new Auth0.Inputs.EmailProviderCredentialsArgs\n        {\n            AccessKeyId = \"AKIAXXXXXXXXXXXXXXXX\",\n            Region = \"us-east-1\",\n            SecretAccessKey = \"7e8c2148xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n        },\n        DefaultFromAddress = \"accounts@example.com\",\n        Enabled = true,\n    });\n\n    // This is an example on how to set up the email provider with Sendgrid.\n    var sendgridEmailProvider = new Auth0.EmailProvider(\"sendgridEmailProvider\", new()\n    {\n        Credentials = new Auth0.Inputs.EmailProviderCredentialsArgs\n        {\n            ApiKey = \"secretAPIKey\",\n        },\n        DefaultFromAddress = \"accounts@example.com\",\n        Enabled = true,\n    });\n\n    // This is an example on how to set up the email provider with MS365.\n    var smtpEmailProvider = new Auth0.EmailProvider(\"smtpEmailProvider\", new()\n    {\n        Credentials = new Auth0.Inputs.EmailProviderCredentialsArgs\n        {\n            Ms365ClientId = \"ms365_client_id\",\n            Ms365ClientSecret = \"ms365_client_secret\",\n            Ms365TenantId = \"ms365_tenant_id\",\n        },\n        DefaultFromAddress = \"accounts@example.com\",\n        Enabled = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-auth0/sdk/v3/go/auth0\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := auth0.NewEmailProvider(ctx, \"amazonSesEmailProvider\", \u0026auth0.EmailProviderArgs{\n\t\t\tCredentials: \u0026auth0.EmailProviderCredentialsArgs{\n\t\t\t\tAccessKeyId:     pulumi.String(\"AKIAXXXXXXXXXXXXXXXX\"),\n\t\t\t\tRegion:          pulumi.String(\"us-east-1\"),\n\t\t\t\tSecretAccessKey: pulumi.String(\"7e8c2148xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"),\n\t\t\t},\n\t\t\tDefaultFromAddress: pulumi.String(\"accounts@example.com\"),\n\t\t\tEnabled:            pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = auth0.NewEmailProvider(ctx, \"sendgridEmailProvider\", \u0026auth0.EmailProviderArgs{\n\t\t\tCredentials: \u0026auth0.EmailProviderCredentialsArgs{\n\t\t\t\tApiKey: pulumi.String(\"secretAPIKey\"),\n\t\t\t},\n\t\t\tDefaultFromAddress: pulumi.String(\"accounts@example.com\"),\n\t\t\tEnabled:            pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = auth0.NewEmailProvider(ctx, \"smtpEmailProvider\", \u0026auth0.EmailProviderArgs{\n\t\t\tCredentials: \u0026auth0.EmailProviderCredentialsArgs{\n\t\t\t\tMs365ClientId:     pulumi.String(\"ms365_client_id\"),\n\t\t\t\tMs365ClientSecret: pulumi.String(\"ms365_client_secret\"),\n\t\t\t\tMs365TenantId:     pulumi.String(\"ms365_tenant_id\"),\n\t\t\t},\n\t\t\tDefaultFromAddress: pulumi.String(\"accounts@example.com\"),\n\t\t\tEnabled:            pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.auth0.EmailProvider;\nimport com.pulumi.auth0.EmailProviderArgs;\nimport com.pulumi.auth0.inputs.EmailProviderCredentialsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var amazonSesEmailProvider = new EmailProvider(\"amazonSesEmailProvider\", EmailProviderArgs.builder()        \n            .credentials(EmailProviderCredentialsArgs.builder()\n                .accessKeyId(\"AKIAXXXXXXXXXXXXXXXX\")\n                .region(\"us-east-1\")\n                .secretAccessKey(\"7e8c2148xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\")\n                .build())\n            .defaultFromAddress(\"accounts@example.com\")\n            .enabled(true)\n            .build());\n\n        var sendgridEmailProvider = new EmailProvider(\"sendgridEmailProvider\", EmailProviderArgs.builder()        \n            .credentials(EmailProviderCredentialsArgs.builder()\n                .apiKey(\"secretAPIKey\")\n                .build())\n            .defaultFromAddress(\"accounts@example.com\")\n            .enabled(true)\n            .build());\n\n        var smtpEmailProvider = new EmailProvider(\"smtpEmailProvider\", EmailProviderArgs.builder()        \n            .credentials(EmailProviderCredentialsArgs.builder()\n                .ms365ClientId(\"ms365_client_id\")\n                .ms365ClientSecret(\"ms365_client_secret\")\n                .ms365TenantId(\"ms365_tenant_id\")\n                .build())\n            .defaultFromAddress(\"accounts@example.com\")\n            .enabled(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # This is an example on how to set up the email provider with Amazon SES.\n  amazonSesEmailProvider:\n    type: auth0:EmailProvider\n    properties:\n      credentials:\n        accessKeyId: AKIAXXXXXXXXXXXXXXXX\n        region: us-east-1\n        secretAccessKey: 7e8c2148xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n      defaultFromAddress: accounts@example.com\n      enabled: true\n  # This is an example on how to set up the email provider with Sendgrid.\n  sendgridEmailProvider:\n    type: auth0:EmailProvider\n    properties:\n      credentials:\n        apiKey: secretAPIKey\n      defaultFromAddress: accounts@example.com\n      enabled: true\n  # This is an example on how to set up the email provider with MS365.\n  smtpEmailProvider:\n    type: auth0:EmailProvider\n    properties:\n      credentials:\n        ms365ClientId: ms365_client_id\n        ms365ClientSecret: ms365_client_secret\n        ms365TenantId: ms365_tenant_id\n      defaultFromAddress: accounts@example.com\n      enabled: true\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nAs this is not a resource identifiable by an ID within the Auth0 Management API, email can be imported using a random string. # We recommend [Version 4 UUID](https://www.uuidgenerator.net/version4) # Example\n\n```sh\n $ pulumi import auth0:index/emailProvider:EmailProvider my_email_provider \"b4213dc2-2eed-42c3-9516-c6131a9ce0b0\"\n```\n\n ",
            "properties": {
                "credentials": {
                    "$ref": "#/types/auth0:index/EmailProviderCredentials:EmailProviderCredentials",
                    "description": "Configuration settings for the credentials for the email provider.\n"
                },
                "defaultFromAddress": {
                    "type": "string",
                    "description": "Email address to use as the sender when no other \"from\" address is specified.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Indicates whether the email provider is enabled.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the email provider. Options include `azure_cs`, `mailgun`, `mandrill`, `ms365`, `sendgrid`, `ses`, `smtp` and `sparkpost`.\n"
                },
                "settings": {
                    "$ref": "#/types/auth0:index/EmailProviderSettings:EmailProviderSettings",
                    "description": "Specific email provider settings.\n"
                }
            },
            "required": [
                "credentials",
                "defaultFromAddress",
                "name",
                "settings"
            ],
            "inputProperties": {
                "credentials": {
                    "$ref": "#/types/auth0:index/EmailProviderCredentials:EmailProviderCredentials",
                    "description": "Configuration settings for the credentials for the email provider.\n"
                },
                "defaultFromAddress": {
                    "type": "string",
                    "description": "Email address to use as the sender when no other \"from\" address is specified.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Indicates whether the email provider is enabled.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the email provider. Options include `azure_cs`, `mailgun`, `mandrill`, `ms365`, `sendgrid`, `ses`, `smtp` and `sparkpost`.\n"
                },
                "settings": {
                    "$ref": "#/types/auth0:index/EmailProviderSettings:EmailProviderSettings",
                    "description": "Specific email provider settings.\n"
                }
            },
            "requiredInputs": [
                "credentials",
                "defaultFromAddress"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering EmailProvider resources.\n",
                "properties": {
                    "credentials": {
                        "$ref": "#/types/auth0:index/EmailProviderCredentials:EmailProviderCredentials",
                        "description": "Configuration settings for the credentials for the email provider.\n"
                    },
                    "defaultFromAddress": {
                        "type": "string",
                        "description": "Email address to use as the sender when no other \"from\" address is specified.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Indicates whether the email provider is enabled.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the email provider. Options include `azure_cs`, `mailgun`, `mandrill`, `ms365`, `sendgrid`, `ses`, `smtp` and `sparkpost`.\n"
                    },
                    "settings": {
                        "$ref": "#/types/auth0:index/EmailProviderSettings:EmailProviderSettings",
                        "description": "Specific email provider settings.\n"
                    }
                },
                "type": "object"
            }
        },
        "auth0:index/emailTemplate:EmailTemplate": {
            "description": "With Auth0, you can have standard welcome, password reset, and account verification email-based workflows built right into Auth0. This resource allows you to configure email templates to customize the look, feel, and sender identities of emails sent by Auth0. Used in conjunction with configured email providers.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as auth0 from \"@pulumi/auth0\";\n\nconst myEmailProvider = new auth0.EmailProvider(\"myEmailProvider\", {\n    enabled: true,\n    defaultFromAddress: \"accounts@example.com\",\n    credentials: {\n        accessKeyId: \"AKIAXXXXXXXXXXXXXXXX\",\n        secretAccessKey: \"7e8c2148xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n        region: \"us-east-1\",\n    },\n});\nconst myEmailTemplate = new auth0.EmailTemplate(\"myEmailTemplate\", {\n    template: \"welcome_email\",\n    body: \"\u003chtml\u003e\u003cbody\u003e\u003ch1\u003eWelcome!\u003c/h1\u003e\u003c/body\u003e\u003c/html\u003e\",\n    from: \"welcome@example.com\",\n    resultUrl: \"https://example.com/welcome\",\n    subject: \"Welcome\",\n    syntax: \"liquid\",\n    urlLifetimeInSeconds: 3600,\n    enabled: true,\n}, {\n    dependsOn: [myEmailProvider],\n});\n```\n```python\nimport pulumi\nimport pulumi_auth0 as auth0\n\nmy_email_provider = auth0.EmailProvider(\"myEmailProvider\",\n    enabled=True,\n    default_from_address=\"accounts@example.com\",\n    credentials=auth0.EmailProviderCredentialsArgs(\n        access_key_id=\"AKIAXXXXXXXXXXXXXXXX\",\n        secret_access_key=\"7e8c2148xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n        region=\"us-east-1\",\n    ))\nmy_email_template = auth0.EmailTemplate(\"myEmailTemplate\",\n    template=\"welcome_email\",\n    body=\"\u003chtml\u003e\u003cbody\u003e\u003ch1\u003eWelcome!\u003c/h1\u003e\u003c/body\u003e\u003c/html\u003e\",\n    from_=\"welcome@example.com\",\n    result_url=\"https://example.com/welcome\",\n    subject=\"Welcome\",\n    syntax=\"liquid\",\n    url_lifetime_in_seconds=3600,\n    enabled=True,\n    opts=pulumi.ResourceOptions(depends_on=[my_email_provider]))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Auth0 = Pulumi.Auth0;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myEmailProvider = new Auth0.EmailProvider(\"myEmailProvider\", new()\n    {\n        Enabled = true,\n        DefaultFromAddress = \"accounts@example.com\",\n        Credentials = new Auth0.Inputs.EmailProviderCredentialsArgs\n        {\n            AccessKeyId = \"AKIAXXXXXXXXXXXXXXXX\",\n            SecretAccessKey = \"7e8c2148xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n            Region = \"us-east-1\",\n        },\n    });\n\n    var myEmailTemplate = new Auth0.EmailTemplate(\"myEmailTemplate\", new()\n    {\n        Template = \"welcome_email\",\n        Body = \"\u003chtml\u003e\u003cbody\u003e\u003ch1\u003eWelcome!\u003c/h1\u003e\u003c/body\u003e\u003c/html\u003e\",\n        From = \"welcome@example.com\",\n        ResultUrl = \"https://example.com/welcome\",\n        Subject = \"Welcome\",\n        Syntax = \"liquid\",\n        UrlLifetimeInSeconds = 3600,\n        Enabled = true,\n    }, new CustomResourceOptions\n    {\n        DependsOn = new[]\n        {\n            myEmailProvider,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-auth0/sdk/v3/go/auth0\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyEmailProvider, err := auth0.NewEmailProvider(ctx, \"myEmailProvider\", \u0026auth0.EmailProviderArgs{\n\t\t\tEnabled:            pulumi.Bool(true),\n\t\t\tDefaultFromAddress: pulumi.String(\"accounts@example.com\"),\n\t\t\tCredentials: \u0026auth0.EmailProviderCredentialsArgs{\n\t\t\t\tAccessKeyId:     pulumi.String(\"AKIAXXXXXXXXXXXXXXXX\"),\n\t\t\t\tSecretAccessKey: pulumi.String(\"7e8c2148xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"),\n\t\t\t\tRegion:          pulumi.String(\"us-east-1\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = auth0.NewEmailTemplate(ctx, \"myEmailTemplate\", \u0026auth0.EmailTemplateArgs{\n\t\t\tTemplate:             pulumi.String(\"welcome_email\"),\n\t\t\tBody:                 pulumi.String(\"\u003chtml\u003e\u003cbody\u003e\u003ch1\u003eWelcome!\u003c/h1\u003e\u003c/body\u003e\u003c/html\u003e\"),\n\t\t\tFrom:                 pulumi.String(\"welcome@example.com\"),\n\t\t\tResultUrl:            pulumi.String(\"https://example.com/welcome\"),\n\t\t\tSubject:              pulumi.String(\"Welcome\"),\n\t\t\tSyntax:               pulumi.String(\"liquid\"),\n\t\t\tUrlLifetimeInSeconds: pulumi.Int(3600),\n\t\t\tEnabled:              pulumi.Bool(true),\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\tmyEmailProvider,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.auth0.EmailProvider;\nimport com.pulumi.auth0.EmailProviderArgs;\nimport com.pulumi.auth0.inputs.EmailProviderCredentialsArgs;\nimport com.pulumi.auth0.EmailTemplate;\nimport com.pulumi.auth0.EmailTemplateArgs;\nimport com.pulumi.resources.CustomResourceOptions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myEmailProvider = new EmailProvider(\"myEmailProvider\", EmailProviderArgs.builder()        \n            .enabled(true)\n            .defaultFromAddress(\"accounts@example.com\")\n            .credentials(EmailProviderCredentialsArgs.builder()\n                .accessKeyId(\"AKIAXXXXXXXXXXXXXXXX\")\n                .secretAccessKey(\"7e8c2148xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\")\n                .region(\"us-east-1\")\n                .build())\n            .build());\n\n        var myEmailTemplate = new EmailTemplate(\"myEmailTemplate\", EmailTemplateArgs.builder()        \n            .template(\"welcome_email\")\n            .body(\"\u003chtml\u003e\u003cbody\u003e\u003ch1\u003eWelcome!\u003c/h1\u003e\u003c/body\u003e\u003c/html\u003e\")\n            .from(\"welcome@example.com\")\n            .resultUrl(\"https://example.com/welcome\")\n            .subject(\"Welcome\")\n            .syntax(\"liquid\")\n            .urlLifetimeInSeconds(3600)\n            .enabled(true)\n            .build(), CustomResourceOptions.builder()\n                .dependsOn(myEmailProvider)\n                .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myEmailProvider:\n    type: auth0:EmailProvider\n    properties:\n      enabled: true\n      defaultFromAddress: accounts@example.com\n      credentials:\n        accessKeyId: AKIAXXXXXXXXXXXXXXXX\n        secretAccessKey: 7e8c2148xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n        region: us-east-1\n  myEmailTemplate:\n    type: auth0:EmailTemplate\n    properties:\n      template: welcome_email\n      body: \u003chtml\u003e\u003cbody\u003e\u003ch1\u003eWelcome!\u003c/h1\u003e\u003c/body\u003e\u003c/html\u003e\n      from: welcome@example.com\n      resultUrl: https://example.com/welcome\n      subject: Welcome\n      syntax: liquid\n      urlLifetimeInSeconds: 3600\n      enabled: true\n    options:\n      dependson:\n        - ${myEmailProvider}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThis resource can be imported using the pre-defined template name. # These names are `verify_email`, `verify_email_by_code`, `reset_email`, `welcome_email`, `blocked_account`, `stolen_credentials`, `enrollment_email`, `mfa_oob_code`, and `user_invitation`. # The names `change_password`, and `password_reset` are also supported for legacy scenarios. # Example\n\n```sh\n $ pulumi import auth0:index/emailTemplate:EmailTemplate my_email_template \"welcome_email\"\n```\n\n ",
            "properties": {
                "body": {
                    "type": "string",
                    "description": "Body of the email template. You can include [common variables](https://auth0.com/docs/customize/email/email-templates#common-variables).\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Indicates whether the template is enabled.\n"
                },
                "from": {
                    "type": "string",
                    "description": "Email address to use as the sender. You can include [common variables](https://auth0.com/docs/customize/email/email-templates#common-variables).\n"
                },
                "includeEmailInRedirect": {
                    "type": "boolean",
                    "description": "Whether the `reset_email` and `verify_email` templates should include the user's email address as the email parameter in the `returnUrl` (true) or whether no email address should be included in the redirect (false). Defaults to `true`.\n"
                },
                "resultUrl": {
                    "type": "string",
                    "description": "URL to redirect the user to after a successful action. [Learn more](https://auth0.com/docs/customize/email/email-templates#configure-template-fields).\n"
                },
                "subject": {
                    "type": "string",
                    "description": "Subject line of the email. You can include [common variables](https://auth0.com/docs/customize/email/email-templates#common-variables).\n"
                },
                "syntax": {
                    "type": "string",
                    "description": "Syntax of the template body. You can use either text or HTML with Liquid syntax.\n"
                },
                "template": {
                    "type": "string",
                    "description": "Template name. Options include `verify_email`, `verify_email_by_code`, `reset_email`, `welcome_email`, `blocked_account`, `stolen_credentials`, `enrollment_email`, `mfa_oob_code`, `user_invitation`, `change_password` (legacy), or `password_reset` (legacy).\n"
                },
                "urlLifetimeInSeconds": {
                    "type": "integer",
                    "description": "Number of seconds during which the link within the email will be valid.\n"
                }
            },
            "required": [
                "body",
                "enabled",
                "from",
                "includeEmailInRedirect",
                "subject",
                "syntax",
                "template"
            ],
            "inputProperties": {
                "body": {
                    "type": "string",
                    "description": "Body of the email template. You can include [common variables](https://auth0.com/docs/customize/email/email-templates#common-variables).\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Indicates whether the template is enabled.\n"
                },
                "from": {
                    "type": "string",
                    "description": "Email address to use as the sender. You can include [common variables](https://auth0.com/docs/customize/email/email-templates#common-variables).\n"
                },
                "includeEmailInRedirect": {
                    "type": "boolean",
                    "description": "Whether the `reset_email` and `verify_email` templates should include the user's email address as the email parameter in the `returnUrl` (true) or whether no email address should be included in the redirect (false). Defaults to `true`.\n"
                },
                "resultUrl": {
                    "type": "string",
                    "description": "URL to redirect the user to after a successful action. [Learn more](https://auth0.com/docs/customize/email/email-templates#configure-template-fields).\n"
                },
                "subject": {
                    "type": "string",
                    "description": "Subject line of the email. You can include [common variables](https://auth0.com/docs/customize/email/email-templates#common-variables).\n"
                },
                "syntax": {
                    "type": "string",
                    "description": "Syntax of the template body. You can use either text or HTML with Liquid syntax.\n"
                },
                "template": {
                    "type": "string",
                    "description": "Template name. Options include `verify_email`, `verify_email_by_code`, `reset_email`, `welcome_email`, `blocked_account`, `stolen_credentials`, `enrollment_email`, `mfa_oob_code`, `user_invitation`, `change_password` (legacy), or `password_reset` (legacy).\n"
                },
                "urlLifetimeInSeconds": {
                    "type": "integer",
                    "description": "Number of seconds during which the link within the email will be valid.\n"
                }
            },
            "requiredInputs": [
                "body",
                "enabled",
                "from",
                "subject",
                "syntax",
                "template"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering EmailTemplate resources.\n",
                "properties": {
                    "body": {
                        "type": "string",
                        "description": "Body of the email template. You can include [common variables](https://auth0.com/docs/customize/email/email-templates#common-variables).\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Indicates whether the template is enabled.\n"
                    },
                    "from": {
                        "type": "string",
                        "description": "Email address to use as the sender. You can include [common variables](https://auth0.com/docs/customize/email/email-templates#common-variables).\n"
                    },
                    "includeEmailInRedirect": {
                        "type": "boolean",
                        "description": "Whether the `reset_email` and `verify_email` templates should include the user's email address as the email parameter in the `returnUrl` (true) or whether no email address should be included in the redirect (false). Defaults to `true`.\n"
                    },
                    "resultUrl": {
                        "type": "string",
                        "description": "URL to redirect the user to after a successful action. [Learn more](https://auth0.com/docs/customize/email/email-templates#configure-template-fields).\n"
                    },
                    "subject": {
                        "type": "string",
                        "description": "Subject line of the email. You can include [common variables](https://auth0.com/docs/customize/email/email-templates#common-variables).\n"
                    },
                    "syntax": {
                        "type": "string",
                        "description": "Syntax of the template body. You can use either text or HTML with Liquid syntax.\n"
                    },
                    "template": {
                        "type": "string",
                        "description": "Template name. Options include `verify_email`, `verify_email_by_code`, `reset_email`, `welcome_email`, `blocked_account`, `stolen_credentials`, `enrollment_email`, `mfa_oob_code`, `user_invitation`, `change_password` (legacy), or `password_reset` (legacy).\n"
                    },
                    "urlLifetimeInSeconds": {
                        "type": "integer",
                        "description": "Number of seconds during which the link within the email will be valid.\n"
                    }
                },
                "type": "object"
            }
        },
        "auth0:index/guardian:Guardian": {
            "description": "Multi-Factor Authentication works by requiring additional factors during the login process to prevent unauthorized access. With this resource you can configure some options available for MFA.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as auth0 from \"@pulumi/auth0\";\n\nconst myGuardian = new auth0.Guardian(\"myGuardian\", {\n    duo: {\n        enabled: true,\n        hostname: \"api-hostname\",\n        integrationKey: \"someKey\",\n        secretKey: \"someSecret\",\n    },\n    email: true,\n    otp: true,\n    phone: {\n        enabled: true,\n        messageTypes: [\n            \"sms\",\n            \"voice\",\n        ],\n        options: {\n            enrollmentMessage: \"{{code}} is your verification code for {{tenant.friendly_name}}. Please enter this code to verify your enrollment.\",\n            verificationMessage: \"{{code}} is your verification code for {{tenant.friendly_name}}.\",\n        },\n        provider: \"auth0\",\n    },\n    policy: \"all-applications\",\n    push: {\n        amazonSns: {\n            awsAccessKeyId: \"test1\",\n            awsRegion: \"us-west-1\",\n            awsSecretAccessKey: \"secretKey\",\n            snsApnsPlatformApplicationArn: \"test_arn\",\n            snsGcmPlatformApplicationArn: \"test_arn\",\n        },\n        customApp: {\n            appName: \"CustomApp\",\n            appleAppLink: \"https://itunes.apple.com/us/app/my-app/id123121\",\n            googleAppLink: \"https://play.google.com/store/apps/details?id=com.my.app\",\n        },\n        enabled: true,\n        provider: \"sns\",\n    },\n    recoveryCode: true,\n    webauthnPlatform: {\n        enabled: true,\n    },\n    webauthnRoaming: {\n        enabled: true,\n        userVerification: \"required\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_auth0 as auth0\n\nmy_guardian = auth0.Guardian(\"myGuardian\",\n    duo=auth0.GuardianDuoArgs(\n        enabled=True,\n        hostname=\"api-hostname\",\n        integration_key=\"someKey\",\n        secret_key=\"someSecret\",\n    ),\n    email=True,\n    otp=True,\n    phone=auth0.GuardianPhoneArgs(\n        enabled=True,\n        message_types=[\n            \"sms\",\n            \"voice\",\n        ],\n        options=auth0.GuardianPhoneOptionsArgs(\n            enrollment_message=\"{{code}} is your verification code for {{tenant.friendly_name}}. Please enter this code to verify your enrollment.\",\n            verification_message=\"{{code}} is your verification code for {{tenant.friendly_name}}.\",\n        ),\n        provider=\"auth0\",\n    ),\n    policy=\"all-applications\",\n    push=auth0.GuardianPushArgs(\n        amazon_sns=auth0.GuardianPushAmazonSnsArgs(\n            aws_access_key_id=\"test1\",\n            aws_region=\"us-west-1\",\n            aws_secret_access_key=\"secretKey\",\n            sns_apns_platform_application_arn=\"test_arn\",\n            sns_gcm_platform_application_arn=\"test_arn\",\n        ),\n        custom_app=auth0.GuardianPushCustomAppArgs(\n            app_name=\"CustomApp\",\n            apple_app_link=\"https://itunes.apple.com/us/app/my-app/id123121\",\n            google_app_link=\"https://play.google.com/store/apps/details?id=com.my.app\",\n        ),\n        enabled=True,\n        provider=\"sns\",\n    ),\n    recovery_code=True,\n    webauthn_platform=auth0.GuardianWebauthnPlatformArgs(\n        enabled=True,\n    ),\n    webauthn_roaming=auth0.GuardianWebauthnRoamingArgs(\n        enabled=True,\n        user_verification=\"required\",\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Auth0 = Pulumi.Auth0;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myGuardian = new Auth0.Guardian(\"myGuardian\", new()\n    {\n        Duo = new Auth0.Inputs.GuardianDuoArgs\n        {\n            Enabled = true,\n            Hostname = \"api-hostname\",\n            IntegrationKey = \"someKey\",\n            SecretKey = \"someSecret\",\n        },\n        Email = true,\n        Otp = true,\n        Phone = new Auth0.Inputs.GuardianPhoneArgs\n        {\n            Enabled = true,\n            MessageTypes = new[]\n            {\n                \"sms\",\n                \"voice\",\n            },\n            Options = new Auth0.Inputs.GuardianPhoneOptionsArgs\n            {\n                EnrollmentMessage = \"{{code}} is your verification code for {{tenant.friendly_name}}. Please enter this code to verify your enrollment.\",\n                VerificationMessage = \"{{code}} is your verification code for {{tenant.friendly_name}}.\",\n            },\n            Provider = \"auth0\",\n        },\n        Policy = \"all-applications\",\n        Push = new Auth0.Inputs.GuardianPushArgs\n        {\n            AmazonSns = new Auth0.Inputs.GuardianPushAmazonSnsArgs\n            {\n                AwsAccessKeyId = \"test1\",\n                AwsRegion = \"us-west-1\",\n                AwsSecretAccessKey = \"secretKey\",\n                SnsApnsPlatformApplicationArn = \"test_arn\",\n                SnsGcmPlatformApplicationArn = \"test_arn\",\n            },\n            CustomApp = new Auth0.Inputs.GuardianPushCustomAppArgs\n            {\n                AppName = \"CustomApp\",\n                AppleAppLink = \"https://itunes.apple.com/us/app/my-app/id123121\",\n                GoogleAppLink = \"https://play.google.com/store/apps/details?id=com.my.app\",\n            },\n            Enabled = true,\n            Provider = \"sns\",\n        },\n        RecoveryCode = true,\n        WebauthnPlatform = new Auth0.Inputs.GuardianWebauthnPlatformArgs\n        {\n            Enabled = true,\n        },\n        WebauthnRoaming = new Auth0.Inputs.GuardianWebauthnRoamingArgs\n        {\n            Enabled = true,\n            UserVerification = \"required\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-auth0/sdk/v3/go/auth0\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := auth0.NewGuardian(ctx, \"myGuardian\", \u0026auth0.GuardianArgs{\n\t\t\tDuo: \u0026auth0.GuardianDuoArgs{\n\t\t\t\tEnabled:        pulumi.Bool(true),\n\t\t\t\tHostname:       pulumi.String(\"api-hostname\"),\n\t\t\t\tIntegrationKey: pulumi.String(\"someKey\"),\n\t\t\t\tSecretKey:      pulumi.String(\"someSecret\"),\n\t\t\t},\n\t\t\tEmail: pulumi.Bool(true),\n\t\t\tOtp:   pulumi.Bool(true),\n\t\t\tPhone: \u0026auth0.GuardianPhoneArgs{\n\t\t\t\tEnabled: pulumi.Bool(true),\n\t\t\t\tMessageTypes: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"sms\"),\n\t\t\t\t\tpulumi.String(\"voice\"),\n\t\t\t\t},\n\t\t\t\tOptions: \u0026auth0.GuardianPhoneOptionsArgs{\n\t\t\t\t\tEnrollmentMessage:   pulumi.String(\"{{code}} is your verification code for {{tenant.friendly_name}}. Please enter this code to verify your enrollment.\"),\n\t\t\t\t\tVerificationMessage: pulumi.String(\"{{code}} is your verification code for {{tenant.friendly_name}}.\"),\n\t\t\t\t},\n\t\t\t\tProvider: pulumi.String(\"auth0\"),\n\t\t\t},\n\t\t\tPolicy: pulumi.String(\"all-applications\"),\n\t\t\tPush: \u0026auth0.GuardianPushArgs{\n\t\t\t\tAmazonSns: \u0026auth0.GuardianPushAmazonSnsArgs{\n\t\t\t\t\tAwsAccessKeyId:                pulumi.String(\"test1\"),\n\t\t\t\t\tAwsRegion:                     pulumi.String(\"us-west-1\"),\n\t\t\t\t\tAwsSecretAccessKey:            pulumi.String(\"secretKey\"),\n\t\t\t\t\tSnsApnsPlatformApplicationArn: pulumi.String(\"test_arn\"),\n\t\t\t\t\tSnsGcmPlatformApplicationArn:  pulumi.String(\"test_arn\"),\n\t\t\t\t},\n\t\t\t\tCustomApp: \u0026auth0.GuardianPushCustomAppArgs{\n\t\t\t\t\tAppName:       pulumi.String(\"CustomApp\"),\n\t\t\t\t\tAppleAppLink:  pulumi.String(\"https://itunes.apple.com/us/app/my-app/id123121\"),\n\t\t\t\t\tGoogleAppLink: pulumi.String(\"https://play.google.com/store/apps/details?id=com.my.app\"),\n\t\t\t\t},\n\t\t\t\tEnabled:  pulumi.Bool(true),\n\t\t\t\tProvider: pulumi.String(\"sns\"),\n\t\t\t},\n\t\t\tRecoveryCode: pulumi.Bool(true),\n\t\t\tWebauthnPlatform: \u0026auth0.GuardianWebauthnPlatformArgs{\n\t\t\t\tEnabled: pulumi.Bool(true),\n\t\t\t},\n\t\t\tWebauthnRoaming: \u0026auth0.GuardianWebauthnRoamingArgs{\n\t\t\t\tEnabled:          pulumi.Bool(true),\n\t\t\t\tUserVerification: pulumi.String(\"required\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.auth0.Guardian;\nimport com.pulumi.auth0.GuardianArgs;\nimport com.pulumi.auth0.inputs.GuardianDuoArgs;\nimport com.pulumi.auth0.inputs.GuardianPhoneArgs;\nimport com.pulumi.auth0.inputs.GuardianPhoneOptionsArgs;\nimport com.pulumi.auth0.inputs.GuardianPushArgs;\nimport com.pulumi.auth0.inputs.GuardianPushAmazonSnsArgs;\nimport com.pulumi.auth0.inputs.GuardianPushCustomAppArgs;\nimport com.pulumi.auth0.inputs.GuardianWebauthnPlatformArgs;\nimport com.pulumi.auth0.inputs.GuardianWebauthnRoamingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myGuardian = new Guardian(\"myGuardian\", GuardianArgs.builder()        \n            .duo(GuardianDuoArgs.builder()\n                .enabled(true)\n                .hostname(\"api-hostname\")\n                .integrationKey(\"someKey\")\n                .secretKey(\"someSecret\")\n                .build())\n            .email(true)\n            .otp(true)\n            .phone(GuardianPhoneArgs.builder()\n                .enabled(true)\n                .messageTypes(                \n                    \"sms\",\n                    \"voice\")\n                .options(GuardianPhoneOptionsArgs.builder()\n                    .enrollmentMessage(\"{{code}} is your verification code for {{tenant.friendly_name}}. Please enter this code to verify your enrollment.\")\n                    .verificationMessage(\"{{code}} is your verification code for {{tenant.friendly_name}}.\")\n                    .build())\n                .provider(\"auth0\")\n                .build())\n            .policy(\"all-applications\")\n            .push(GuardianPushArgs.builder()\n                .amazonSns(GuardianPushAmazonSnsArgs.builder()\n                    .awsAccessKeyId(\"test1\")\n                    .awsRegion(\"us-west-1\")\n                    .awsSecretAccessKey(\"secretKey\")\n                    .snsApnsPlatformApplicationArn(\"test_arn\")\n                    .snsGcmPlatformApplicationArn(\"test_arn\")\n                    .build())\n                .customApp(GuardianPushCustomAppArgs.builder()\n                    .appName(\"CustomApp\")\n                    .appleAppLink(\"https://itunes.apple.com/us/app/my-app/id123121\")\n                    .googleAppLink(\"https://play.google.com/store/apps/details?id=com.my.app\")\n                    .build())\n                .enabled(true)\n                .provider(\"sns\")\n                .build())\n            .recoveryCode(true)\n            .webauthnPlatform(GuardianWebauthnPlatformArgs.builder()\n                .enabled(true)\n                .build())\n            .webauthnRoaming(GuardianWebauthnRoamingArgs.builder()\n                .enabled(true)\n                .userVerification(\"required\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myGuardian:\n    type: auth0:Guardian\n    properties:\n      duo:\n        enabled: true\n        hostname: api-hostname\n        integrationKey: someKey\n        secretKey: someSecret\n      email: true\n      otp: true\n      phone:\n        enabled: true\n        messageTypes:\n          - sms\n          - voice\n        options:\n          enrollmentMessage: '{{code}} is your verification code for {{tenant.friendly_name}}. Please enter this code to verify your enrollment.'\n          verificationMessage: '{{code}} is your verification code for {{tenant.friendly_name}}.'\n        provider: auth0\n      policy: all-applications\n      push:\n        amazonSns:\n          awsAccessKeyId: test1\n          awsRegion: us-west-1\n          awsSecretAccessKey: secretKey\n          snsApnsPlatformApplicationArn: test_arn\n          snsGcmPlatformApplicationArn: test_arn\n        customApp:\n          appName: CustomApp\n          appleAppLink: https://itunes.apple.com/us/app/my-app/id123121\n          googleAppLink: https://play.google.com/store/apps/details?id=com.my.app\n        enabled: true\n        provider: sns\n      recoveryCode: true\n      webauthnPlatform:\n        enabled: true\n      webauthnRoaming:\n        enabled: true\n        userVerification: required\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nAs this is not a resource identifiable by an ID within the Auth0 Management API, guardian can be imported using a random string. # We recommend [Version 4 UUID](https://www.uuidgenerator.net/version4) # Example\n\n```sh\n $ pulumi import auth0:index/guardian:Guardian my_guardian \"24940d4b-4bd4-44e7-894e-f92e4de36a40\"\n```\n\n ",
            "properties": {
                "duo": {
                    "$ref": "#/types/auth0:index/GuardianDuo:GuardianDuo",
                    "description": "Configuration settings for the Duo MFA. If this block is present, Duo MFA will be enabled, and disabled otherwise.\n"
                },
                "email": {
                    "type": "boolean",
                    "description": "Indicates whether email MFA is enabled.\n"
                },
                "otp": {
                    "type": "boolean",
                    "description": "Indicates whether one time password MFA is enabled.\n"
                },
                "phone": {
                    "$ref": "#/types/auth0:index/GuardianPhone:GuardianPhone",
                    "description": "Configuration settings for the phone MFA. If this block is present, Phone MFA will be enabled, and disabled otherwise.\n"
                },
                "policy": {
                    "type": "string",
                    "description": "Policy to use. Available options are `never`, `all-applications` and `confidence-score`.\n"
                },
                "push": {
                    "$ref": "#/types/auth0:index/GuardianPush:GuardianPush",
                    "description": "Configuration settings for the Push MFA. If this block is present, Push MFA will be enabled, and disabled otherwise.\n"
                },
                "recoveryCode": {
                    "type": "boolean",
                    "description": "Indicates whether recovery code MFA is enabled.\n"
                },
                "webauthnPlatform": {
                    "$ref": "#/types/auth0:index/GuardianWebauthnPlatform:GuardianWebauthnPlatform",
                    "description": "Configuration settings for the WebAuthn with FIDO Device Biometrics MFA. If this block is present, WebAuthn with FIDO Device Biometrics MFA will be enabled, and disabled otherwise.\n"
                },
                "webauthnRoaming": {
                    "$ref": "#/types/auth0:index/GuardianWebauthnRoaming:GuardianWebauthnRoaming",
                    "description": "Configuration settings for the WebAuthn with FIDO Security Keys MFA. If this block is present, WebAuthn with FIDO Security Keys MFA will be enabled, and disabled otherwise.\n"
                }
            },
            "required": [
                "duo",
                "phone",
                "policy",
                "push",
                "webauthnPlatform",
                "webauthnRoaming"
            ],
            "inputProperties": {
                "duo": {
                    "$ref": "#/types/auth0:index/GuardianDuo:GuardianDuo",
                    "description": "Configuration settings for the Duo MFA. If this block is present, Duo MFA will be enabled, and disabled otherwise.\n"
                },
                "email": {
                    "type": "boolean",
                    "description": "Indicates whether email MFA is enabled.\n"
                },
                "otp": {
                    "type": "boolean",
                    "description": "Indicates whether one time password MFA is enabled.\n"
                },
                "phone": {
                    "$ref": "#/types/auth0:index/GuardianPhone:GuardianPhone",
                    "description": "Configuration settings for the phone MFA. If this block is present, Phone MFA will be enabled, and disabled otherwise.\n"
                },
                "policy": {
                    "type": "string",
                    "description": "Policy to use. Available options are `never`, `all-applications` and `confidence-score`.\n"
                },
                "push": {
                    "$ref": "#/types/auth0:index/GuardianPush:GuardianPush",
                    "description": "Configuration settings for the Push MFA. If this block is present, Push MFA will be enabled, and disabled otherwise.\n"
                },
                "recoveryCode": {
                    "type": "boolean",
                    "description": "Indicates whether recovery code MFA is enabled.\n"
                },
                "webauthnPlatform": {
                    "$ref": "#/types/auth0:index/GuardianWebauthnPlatform:GuardianWebauthnPlatform",
                    "description": "Configuration settings for the WebAuthn with FIDO Device Biometrics MFA. If this block is present, WebAuthn with FIDO Device Biometrics MFA will be enabled, and disabled otherwise.\n"
                },
                "webauthnRoaming": {
                    "$ref": "#/types/auth0:index/GuardianWebauthnRoaming:GuardianWebauthnRoaming",
                    "description": "Configuration settings for the WebAuthn with FIDO Security Keys MFA. If this block is present, WebAuthn with FIDO Security Keys MFA will be enabled, and disabled otherwise.\n"
                }
            },
            "requiredInputs": [
                "policy"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Guardian resources.\n",
                "properties": {
                    "duo": {
                        "$ref": "#/types/auth0:index/GuardianDuo:GuardianDuo",
                        "description": "Configuration settings for the Duo MFA. If this block is present, Duo MFA will be enabled, and disabled otherwise.\n"
                    },
                    "email": {
                        "type": "boolean",
                        "description": "Indicates whether email MFA is enabled.\n"
                    },
                    "otp": {
                        "type": "boolean",
                        "description": "Indicates whether one time password MFA is enabled.\n"
                    },
                    "phone": {
                        "$ref": "#/types/auth0:index/GuardianPhone:GuardianPhone",
                        "description": "Configuration settings for the phone MFA. If this block is present, Phone MFA will be enabled, and disabled otherwise.\n"
                    },
                    "policy": {
                        "type": "string",
                        "description": "Policy to use. Available options are `never`, `all-applications` and `confidence-score`.\n"
                    },
                    "push": {
                        "$ref": "#/types/auth0:index/GuardianPush:GuardianPush",
                        "description": "Configuration settings for the Push MFA. If this block is present, Push MFA will be enabled, and disabled otherwise.\n"
                    },
                    "recoveryCode": {
                        "type": "boolean",
                        "description": "Indicates whether recovery code MFA is enabled.\n"
                    },
                    "webauthnPlatform": {
                        "$ref": "#/types/auth0:index/GuardianWebauthnPlatform:GuardianWebauthnPlatform",
                        "description": "Configuration settings for the WebAuthn with FIDO Device Biometrics MFA. If this block is present, WebAuthn with FIDO Device Biometrics MFA will be enabled, and disabled otherwise.\n"
                    },
                    "webauthnRoaming": {
                        "$ref": "#/types/auth0:index/GuardianWebauthnRoaming:GuardianWebauthnRoaming",
                        "description": "Configuration settings for the WebAuthn with FIDO Security Keys MFA. If this block is present, WebAuthn with FIDO Security Keys MFA will be enabled, and disabled otherwise.\n"
                    }
                },
                "type": "object"
            }
        },
        "auth0:index/hook:Hook": {
            "description": "Hooks are secure, self-contained functions that allow you to customize the behavior of Auth0 when executed for selected extensibility points of the Auth0 platform. Auth0 invokes Hooks during runtime to execute your custom Node.js code. Depending on the extensibility point, you can use hooks with Database Connections and/or Passwordless Connections.\n\n!\u003e This resource is deprecated. Refer to the [guide on how to migrate from hooks to actions](https://auth0.com/docs/customize/actions/migrate/migrate-from-hooks-to-actions) and manage your actions using the `auth0.Action` resource.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as auth0 from \"@pulumi/auth0\";\n\nconst myHook = new auth0.Hook(\"myHook\", {\n    dependencies: {\n        auth0: \"2.30.0\",\n    },\n    enabled: true,\n    script: `    function (user, context, callback) {\n      callback(null, { user });\n    }\n  \n`,\n    secrets: {\n        foo: \"bar\",\n    },\n    triggerId: \"pre-user-registration\",\n});\n```\n```python\nimport pulumi\nimport pulumi_auth0 as auth0\n\nmy_hook = auth0.Hook(\"myHook\",\n    dependencies={\n        \"auth0\": \"2.30.0\",\n    },\n    enabled=True,\n    script=\"\"\"    function (user, context, callback) {\n      callback(null, { user });\n    }\n  \n\"\"\",\n    secrets={\n        \"foo\": \"bar\",\n    },\n    trigger_id=\"pre-user-registration\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Auth0 = Pulumi.Auth0;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myHook = new Auth0.Hook(\"myHook\", new()\n    {\n        Dependencies = \n        {\n            { \"auth0\", \"2.30.0\" },\n        },\n        Enabled = true,\n        Script = @\"    function (user, context, callback) {\n      callback(null, { user });\n    }\n  \n\",\n        Secrets = \n        {\n            { \"foo\", \"bar\" },\n        },\n        TriggerId = \"pre-user-registration\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-auth0/sdk/v3/go/auth0\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := auth0.NewHook(ctx, \"myHook\", \u0026auth0.HookArgs{\n\t\t\tDependencies: pulumi.Map{\n\t\t\t\t\"auth0\": pulumi.Any(\"2.30.0\"),\n\t\t\t},\n\t\t\tEnabled: pulumi.Bool(true),\n\t\t\tScript:  pulumi.String(\"    function (user, context, callback) {\\n      callback(null, { user });\\n    }\\n  \\n\"),\n\t\t\tSecrets: pulumi.Map{\n\t\t\t\t\"foo\": pulumi.Any(\"bar\"),\n\t\t\t},\n\t\t\tTriggerId: pulumi.String(\"pre-user-registration\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.auth0.Hook;\nimport com.pulumi.auth0.HookArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myHook = new Hook(\"myHook\", HookArgs.builder()        \n            .dependencies(Map.of(\"auth0\", \"2.30.0\"))\n            .enabled(true)\n            .script(\"\"\"\n    function (user, context, callback) {\n      callback(null, { user });\n    }\n  \n            \"\"\")\n            .secrets(Map.of(\"foo\", \"bar\"))\n            .triggerId(\"pre-user-registration\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myHook:\n    type: auth0:Hook\n    properties:\n      dependencies:\n        auth0: 2.30.0\n      enabled: true\n      script: \"    function (user, context, callback) {\\n      callback(null, { user });\\n    }\\n  \\n\"\n      secrets:\n        foo: bar\n      triggerId: pre-user-registration\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThis resource can be imported by specifying the hook ID. # Example\n\n```sh\n $ pulumi import auth0:index/hook:Hook my_hook \"00001\"\n```\n\n ",
            "properties": {
                "dependencies": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Dependencies of this hook used by the WebTask server.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the hook is enabled, or disabled.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of this hook.\n"
                },
                "script": {
                    "type": "string",
                    "description": "Code to be executed when this hook runs.\n"
                },
                "secrets": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "The secrets associated with the hook.\n",
                    "secret": true
                },
                "triggerId": {
                    "type": "string",
                    "description": "Execution stage of this rule. Can be credentials-exchange, pre-user-registration, post-user-registration, post-change-password, or send-phone-message.\n"
                }
            },
            "required": [
                "enabled",
                "name",
                "script",
                "triggerId"
            ],
            "inputProperties": {
                "dependencies": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Dependencies of this hook used by the WebTask server.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the hook is enabled, or disabled.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of this hook.\n"
                },
                "script": {
                    "type": "string",
                    "description": "Code to be executed when this hook runs.\n"
                },
                "secrets": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "The secrets associated with the hook.\n",
                    "secret": true
                },
                "triggerId": {
                    "type": "string",
                    "description": "Execution stage of this rule. Can be credentials-exchange, pre-user-registration, post-user-registration, post-change-password, or send-phone-message.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "script",
                "triggerId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Hook resources.\n",
                "properties": {
                    "dependencies": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Dependencies of this hook used by the WebTask server.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether the hook is enabled, or disabled.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of this hook.\n"
                    },
                    "script": {
                        "type": "string",
                        "description": "Code to be executed when this hook runs.\n"
                    },
                    "secrets": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "The secrets associated with the hook.\n",
                        "secret": true
                    },
                    "triggerId": {
                        "type": "string",
                        "description": "Execution stage of this rule. Can be credentials-exchange, pre-user-registration, post-user-registration, post-change-password, or send-phone-message.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "auth0:index/logStream:LogStream": {
            "description": "With this resource, you can manage your Auth0 log streams.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as auth0 from \"@pulumi/auth0\";\n\n// This is an example of an http log stream.\nconst myWebhook = new auth0.LogStream(\"myWebhook\", {\n    filters: [\n        {\n            name: \"auth.login.fail\",\n            type: \"category\",\n        },\n        {\n            name: \"auth.signup.fail\",\n            type: \"category\",\n        },\n    ],\n    sink: {\n        httpAuthorization: \"AKIAXXXXXXXXXXXXXXXX\",\n        httpContentFormat: \"JSONOBJECT\",\n        httpContentType: \"application/json\",\n        httpCustomHeaders: [{\n            header: \"foo\",\n            value: \"bar\",\n        }],\n        httpEndpoint: \"https://example.com/logs\",\n    },\n    type: \"http\",\n});\n// This is an example of an Amazon EventBridge log stream.\nconst exampleAws = new auth0.LogStream(\"exampleAws\", {\n    sink: {\n        awsAccountId: \"my_account_id\",\n        awsRegion: \"us-east-2\",\n    },\n    status: \"active\",\n    type: \"eventbridge\",\n});\n```\n```python\nimport pulumi\nimport pulumi_auth0 as auth0\n\n# This is an example of an http log stream.\nmy_webhook = auth0.LogStream(\"myWebhook\",\n    filters=[\n        {\n            \"name\": \"auth.login.fail\",\n            \"type\": \"category\",\n        },\n        {\n            \"name\": \"auth.signup.fail\",\n            \"type\": \"category\",\n        },\n    ],\n    sink=auth0.LogStreamSinkArgs(\n        http_authorization=\"AKIAXXXXXXXXXXXXXXXX\",\n        http_content_format=\"JSONOBJECT\",\n        http_content_type=\"application/json\",\n        http_custom_headers=[{\n            \"header\": \"foo\",\n            \"value\": \"bar\",\n        }],\n        http_endpoint=\"https://example.com/logs\",\n    ),\n    type=\"http\")\n# This is an example of an Amazon EventBridge log stream.\nexample_aws = auth0.LogStream(\"exampleAws\",\n    sink=auth0.LogStreamSinkArgs(\n        aws_account_id=\"my_account_id\",\n        aws_region=\"us-east-2\",\n    ),\n    status=\"active\",\n    type=\"eventbridge\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Auth0 = Pulumi.Auth0;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // This is an example of an http log stream.\n    var myWebhook = new Auth0.LogStream(\"myWebhook\", new()\n    {\n        Filters = new[]\n        {\n            \n            {\n                { \"name\", \"auth.login.fail\" },\n                { \"type\", \"category\" },\n            },\n            \n            {\n                { \"name\", \"auth.signup.fail\" },\n                { \"type\", \"category\" },\n            },\n        },\n        Sink = new Auth0.Inputs.LogStreamSinkArgs\n        {\n            HttpAuthorization = \"AKIAXXXXXXXXXXXXXXXX\",\n            HttpContentFormat = \"JSONOBJECT\",\n            HttpContentType = \"application/json\",\n            HttpCustomHeaders = new[]\n            {\n                \n                {\n                    { \"header\", \"foo\" },\n                    { \"value\", \"bar\" },\n                },\n            },\n            HttpEndpoint = \"https://example.com/logs\",\n        },\n        Type = \"http\",\n    });\n\n    // This is an example of an Amazon EventBridge log stream.\n    var exampleAws = new Auth0.LogStream(\"exampleAws\", new()\n    {\n        Sink = new Auth0.Inputs.LogStreamSinkArgs\n        {\n            AwsAccountId = \"my_account_id\",\n            AwsRegion = \"us-east-2\",\n        },\n        Status = \"active\",\n        Type = \"eventbridge\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-auth0/sdk/v3/go/auth0\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := auth0.NewLogStream(ctx, \"myWebhook\", \u0026auth0.LogStreamArgs{\n\t\t\tFilters: pulumi.StringMapArray{\n\t\t\t\tpulumi.StringMap{\n\t\t\t\t\t\"name\": pulumi.String(\"auth.login.fail\"),\n\t\t\t\t\t\"type\": pulumi.String(\"category\"),\n\t\t\t\t},\n\t\t\t\tpulumi.StringMap{\n\t\t\t\t\t\"name\": pulumi.String(\"auth.signup.fail\"),\n\t\t\t\t\t\"type\": pulumi.String(\"category\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tSink: \u0026auth0.LogStreamSinkArgs{\n\t\t\t\tHttpAuthorization: pulumi.String(\"AKIAXXXXXXXXXXXXXXXX\"),\n\t\t\t\tHttpContentFormat: pulumi.String(\"JSONOBJECT\"),\n\t\t\t\tHttpContentType:   pulumi.String(\"application/json\"),\n\t\t\t\tHttpCustomHeaders: pulumi.StringMapArray{\n\t\t\t\t\tpulumi.StringMap{\n\t\t\t\t\t\t\"header\": pulumi.String(\"foo\"),\n\t\t\t\t\t\t\"value\":  pulumi.String(\"bar\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tHttpEndpoint: pulumi.String(\"https://example.com/logs\"),\n\t\t\t},\n\t\t\tType: pulumi.String(\"http\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = auth0.NewLogStream(ctx, \"exampleAws\", \u0026auth0.LogStreamArgs{\n\t\t\tSink: \u0026auth0.LogStreamSinkArgs{\n\t\t\t\tAwsAccountId: pulumi.String(\"my_account_id\"),\n\t\t\t\tAwsRegion:    pulumi.String(\"us-east-2\"),\n\t\t\t},\n\t\t\tStatus: pulumi.String(\"active\"),\n\t\t\tType:   pulumi.String(\"eventbridge\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.auth0.LogStream;\nimport com.pulumi.auth0.LogStreamArgs;\nimport com.pulumi.auth0.inputs.LogStreamSinkArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myWebhook = new LogStream(\"myWebhook\", LogStreamArgs.builder()        \n            .filters(            \n                Map.ofEntries(\n                    Map.entry(\"name\", \"auth.login.fail\"),\n                    Map.entry(\"type\", \"category\")\n                ),\n                Map.ofEntries(\n                    Map.entry(\"name\", \"auth.signup.fail\"),\n                    Map.entry(\"type\", \"category\")\n                ))\n            .sink(LogStreamSinkArgs.builder()\n                .httpAuthorization(\"AKIAXXXXXXXXXXXXXXXX\")\n                .httpContentFormat(\"JSONOBJECT\")\n                .httpContentType(\"application/json\")\n                .httpCustomHeaders(Map.ofEntries(\n                    Map.entry(\"header\", \"foo\"),\n                    Map.entry(\"value\", \"bar\")\n                ))\n                .httpEndpoint(\"https://example.com/logs\")\n                .build())\n            .type(\"http\")\n            .build());\n\n        var exampleAws = new LogStream(\"exampleAws\", LogStreamArgs.builder()        \n            .sink(LogStreamSinkArgs.builder()\n                .awsAccountId(\"my_account_id\")\n                .awsRegion(\"us-east-2\")\n                .build())\n            .status(\"active\")\n            .type(\"eventbridge\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # This is an example of an http log stream.\n  myWebhook:\n    type: auth0:LogStream\n    properties:\n      filters:\n        - name: auth.login.fail\n          type: category\n        - name: auth.signup.fail\n          type: category\n      sink:\n        httpAuthorization: AKIAXXXXXXXXXXXXXXXX\n        httpContentFormat: JSONOBJECT\n        httpContentType: application/json\n        httpCustomHeaders:\n          - header: foo\n            value: bar\n        httpEndpoint: https://example.com/logs\n      type: http\n  # This is an example of an Amazon EventBridge log stream.\n  exampleAws:\n    type: auth0:LogStream\n    properties:\n      sink:\n        awsAccountId: my_account_id\n        awsRegion: us-east-2\n      status: active\n      type: eventbridge\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThis resource can be imported by specifying the log stream ID. # Example\n\n```sh\n $ pulumi import auth0:index/logStream:LogStream example \"lst_XXXXXXXXXXXXXXXX\"\n```\n\n ",
            "properties": {
                "filters": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "description": "Only logs events matching these filters will be delivered by the stream. If omitted or empty, all events will be delivered. Filters available: `auth.ancillary.fail`, `auth.ancillary.success`, `auth.login.fail`, `auth.login.notification`, `auth.login.success`, `auth.logout.fail`, `auth.logout.success`, `auth.signup.fail`, `auth.signup.success`, `auth.silent_auth.fail`, `auth.silent_auth.success`, `auth.token_exchange.fail`, `auth.token_exchange.success`, `management.fail`, `management.success`, `system.notification`, `user.fail`, `user.notification`, `user.success`, `other`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the log stream.\n"
                },
                "sink": {
                    "$ref": "#/types/auth0:index/LogStreamSink:LogStreamSink",
                    "description": "The sink configuration for the log stream.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The current status of the log stream. Options are \"active\", \"paused\", \"suspended\".\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the log stream, which indicates the sink provider. Options include: `eventbridge`, `eventgrid`, `http`, `datadog`, `splunk`, `sumo`, `mixpanel`, `segment`.\n"
                }
            },
            "required": [
                "name",
                "sink",
                "status",
                "type"
            ],
            "inputProperties": {
                "filters": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "description": "Only logs events matching these filters will be delivered by the stream. If omitted or empty, all events will be delivered. Filters available: `auth.ancillary.fail`, `auth.ancillary.success`, `auth.login.fail`, `auth.login.notification`, `auth.login.success`, `auth.logout.fail`, `auth.logout.success`, `auth.signup.fail`, `auth.signup.success`, `auth.silent_auth.fail`, `auth.silent_auth.success`, `auth.token_exchange.fail`, `auth.token_exchange.success`, `management.fail`, `management.success`, `system.notification`, `user.fail`, `user.notification`, `user.success`, `other`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the log stream.\n"
                },
                "sink": {
                    "$ref": "#/types/auth0:index/LogStreamSink:LogStreamSink",
                    "description": "The sink configuration for the log stream.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The current status of the log stream. Options are \"active\", \"paused\", \"suspended\".\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the log stream, which indicates the sink provider. Options include: `eventbridge`, `eventgrid`, `http`, `datadog`, `splunk`, `sumo`, `mixpanel`, `segment`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "sink",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LogStream resources.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        },
                        "description": "Only logs events matching these filters will be delivered by the stream. If omitted or empty, all events will be delivered. Filters available: `auth.ancillary.fail`, `auth.ancillary.success`, `auth.login.fail`, `auth.login.notification`, `auth.login.success`, `auth.logout.fail`, `auth.logout.success`, `auth.signup.fail`, `auth.signup.success`, `auth.silent_auth.fail`, `auth.silent_auth.success`, `auth.token_exchange.fail`, `auth.token_exchange.success`, `management.fail`, `management.success`, `system.notification`, `user.fail`, `user.notification`, `user.success`, `other`.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the log stream.\n"
                    },
                    "sink": {
                        "$ref": "#/types/auth0:index/LogStreamSink:LogStreamSink",
                        "description": "The sink configuration for the log stream.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The current status of the log stream. Options are \"active\", \"paused\", \"suspended\".\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the log stream, which indicates the sink provider. Options include: `eventbridge`, `eventgrid`, `http`, `datadog`, `splunk`, `sumo`, `mixpanel`, `segment`.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "auth0:index/organization:Organization": {
            "description": "The Organizations feature represents a broad update to the Auth0 platform that allows our business-to-business (B2B) customers to better manage their partners and customers, and to customize the ways that end-users access their applications. Auth0 customers can use Organizations to:\n\n  - Represent their business customers and partners in Auth0 and manage their\n    membership.\n  - Configure branded, federated login flows for each business.\n  - Build administration capabilities into their products, using Organizations\n    APIs, so that those businesses can manage their own organizations.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as auth0 from \"@pulumi/auth0\";\n\nconst myOrganization = new auth0.Organization(\"myOrganization\", {\n    branding: {\n        colors: {\n            pageBackground: \"#e1e1e1\",\n            primary: \"#f2f2f2\",\n        },\n        logoUrl: \"https://example.com/assets/icons/icon.png\",\n    },\n    displayName: \"Auth0 Inc.\",\n});\n```\n```python\nimport pulumi\nimport pulumi_auth0 as auth0\n\nmy_organization = auth0.Organization(\"myOrganization\",\n    branding=auth0.OrganizationBrandingArgs(\n        colors={\n            \"pageBackground\": \"#e1e1e1\",\n            \"primary\": \"#f2f2f2\",\n        },\n        logo_url=\"https://example.com/assets/icons/icon.png\",\n    ),\n    display_name=\"Auth0 Inc.\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Auth0 = Pulumi.Auth0;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myOrganization = new Auth0.Organization(\"myOrganization\", new()\n    {\n        Branding = new Auth0.Inputs.OrganizationBrandingArgs\n        {\n            Colors = \n            {\n                { \"pageBackground\", \"#e1e1e1\" },\n                { \"primary\", \"#f2f2f2\" },\n            },\n            LogoUrl = \"https://example.com/assets/icons/icon.png\",\n        },\n        DisplayName = \"Auth0 Inc.\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-auth0/sdk/v3/go/auth0\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := auth0.NewOrganization(ctx, \"myOrganization\", \u0026auth0.OrganizationArgs{\n\t\t\tBranding: \u0026auth0.OrganizationBrandingArgs{\n\t\t\t\tColors: pulumi.StringMap{\n\t\t\t\t\t\"pageBackground\": pulumi.String(\"#e1e1e1\"),\n\t\t\t\t\t\"primary\":        pulumi.String(\"#f2f2f2\"),\n\t\t\t\t},\n\t\t\t\tLogoUrl: pulumi.String(\"https://example.com/assets/icons/icon.png\"),\n\t\t\t},\n\t\t\tDisplayName: pulumi.String(\"Auth0 Inc.\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.auth0.Organization;\nimport com.pulumi.auth0.OrganizationArgs;\nimport com.pulumi.auth0.inputs.OrganizationBrandingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myOrganization = new Organization(\"myOrganization\", OrganizationArgs.builder()        \n            .branding(OrganizationBrandingArgs.builder()\n                .colors(Map.ofEntries(\n                    Map.entry(\"pageBackground\", \"#e1e1e1\"),\n                    Map.entry(\"primary\", \"#f2f2f2\")\n                ))\n                .logoUrl(\"https://example.com/assets/icons/icon.png\")\n                .build())\n            .displayName(\"Auth0 Inc.\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myOrganization:\n    type: auth0:Organization\n    properties:\n      branding:\n        colors:\n          pageBackground: '#e1e1e1'\n          primary: '#f2f2f2'\n        logoUrl: https://example.com/assets/icons/icon.png\n      displayName: Auth0 Inc.\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThis resource can be imported by specifying the organization ID. # Example\n\n```sh\n $ pulumi import auth0:index/organization:Organization my_organization \"org_XXXXXXXXXXXXXX\"\n```\n\n ",
            "properties": {
                "branding": {
                    "$ref": "#/types/auth0:index/OrganizationBranding:OrganizationBranding",
                    "description": "Defines how to style the login pages.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Friendly name of this organization.\n"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Metadata associated with the organization. Maximum of 10 metadata properties allowed.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of this organization.\n"
                }
            },
            "required": [
                "branding",
                "name"
            ],
            "inputProperties": {
                "branding": {
                    "$ref": "#/types/auth0:index/OrganizationBranding:OrganizationBranding",
                    "description": "Defines how to style the login pages.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Friendly name of this organization.\n"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Metadata associated with the organization. Maximum of 10 metadata properties allowed.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of this organization.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Organization resources.\n",
                "properties": {
                    "branding": {
                        "$ref": "#/types/auth0:index/OrganizationBranding:OrganizationBranding",
                        "description": "Defines how to style the login pages.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Friendly name of this organization.\n"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Metadata associated with the organization. Maximum of 10 metadata properties allowed.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of this organization.\n"
                    }
                },
                "type": "object"
            }
        },
        "auth0:index/organizationConnection:OrganizationConnection": {
            "description": "With this resource, you can manage enabled connections on an organization.\n\n!\u003e This resource appends a connection to an organization. In contrast, the `auth0.OrganizationConnections` resource\nmanages all the connections enabled for an organization. To avoid potential issues, it is recommended not to use this\nresource in conjunction with the `auth0.OrganizationConnections` resource when managing enabled connections for the\nsame organization id.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as auth0 from \"@pulumi/auth0\";\n\nconst myConnection = new auth0.Connection(\"myConnection\", {strategy: \"auth0\"});\nconst myOrganization = new auth0.Organization(\"myOrganization\", {displayName: \"My Organization\"});\nconst myOrgConn = new auth0.OrganizationConnection(\"myOrgConn\", {\n    organizationId: myOrganization.id,\n    connectionId: myConnection.id,\n    assignMembershipOnLogin: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_auth0 as auth0\n\nmy_connection = auth0.Connection(\"myConnection\", strategy=\"auth0\")\nmy_organization = auth0.Organization(\"myOrganization\", display_name=\"My Organization\")\nmy_org_conn = auth0.OrganizationConnection(\"myOrgConn\",\n    organization_id=my_organization.id,\n    connection_id=my_connection.id,\n    assign_membership_on_login=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Auth0 = Pulumi.Auth0;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myConnection = new Auth0.Connection(\"myConnection\", new()\n    {\n        Strategy = \"auth0\",\n    });\n\n    var myOrganization = new Auth0.Organization(\"myOrganization\", new()\n    {\n        DisplayName = \"My Organization\",\n    });\n\n    var myOrgConn = new Auth0.OrganizationConnection(\"myOrgConn\", new()\n    {\n        OrganizationId = myOrganization.Id,\n        ConnectionId = myConnection.Id,\n        AssignMembershipOnLogin = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-auth0/sdk/v3/go/auth0\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyConnection, err := auth0.NewConnection(ctx, \"myConnection\", \u0026auth0.ConnectionArgs{\n\t\t\tStrategy: pulumi.String(\"auth0\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmyOrganization, err := auth0.NewOrganization(ctx, \"myOrganization\", \u0026auth0.OrganizationArgs{\n\t\t\tDisplayName: pulumi.String(\"My Organization\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = auth0.NewOrganizationConnection(ctx, \"myOrgConn\", \u0026auth0.OrganizationConnectionArgs{\n\t\t\tOrganizationId:          myOrganization.ID(),\n\t\t\tConnectionId:            myConnection.ID(),\n\t\t\tAssignMembershipOnLogin: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.auth0.Connection;\nimport com.pulumi.auth0.ConnectionArgs;\nimport com.pulumi.auth0.Organization;\nimport com.pulumi.auth0.OrganizationArgs;\nimport com.pulumi.auth0.OrganizationConnection;\nimport com.pulumi.auth0.OrganizationConnectionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myConnection = new Connection(\"myConnection\", ConnectionArgs.builder()        \n            .strategy(\"auth0\")\n            .build());\n\n        var myOrganization = new Organization(\"myOrganization\", OrganizationArgs.builder()        \n            .displayName(\"My Organization\")\n            .build());\n\n        var myOrgConn = new OrganizationConnection(\"myOrgConn\", OrganizationConnectionArgs.builder()        \n            .organizationId(myOrganization.id())\n            .connectionId(myConnection.id())\n            .assignMembershipOnLogin(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myConnection:\n    type: auth0:Connection\n    properties:\n      strategy: auth0\n  myOrganization:\n    type: auth0:Organization\n    properties:\n      displayName: My Organization\n  myOrgConn:\n    type: auth0:OrganizationConnection\n    properties:\n      organizationId: ${myOrganization.id}\n      connectionId: ${myConnection.id}\n      assignMembershipOnLogin: true\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThis resource can be imported by specifying the organization ID and connection ID separated by \"::\" (note the double colon) \u003corganizationID\u003e::\u003cconnectionID\u003e # Example\n\n```sh\n $ pulumi import auth0:index/organizationConnection:OrganizationConnection my_org_conn \"org_XXXXX::con_XXXXX\"\n```\n\n ",
            "properties": {
                "assignMembershipOnLogin": {
                    "type": "boolean",
                    "description": "When true, all users that log in with this connection will be automatically granted membership in the organization. When false, users must be granted membership in the organization before logging in with this connection.\n"
                },
                "connectionId": {
                    "type": "string",
                    "description": "The ID of the connection to enable for the organization.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the enabled connection.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The ID of the organization to enable the connection for.\n"
                },
                "strategy": {
                    "type": "string",
                    "description": "The strategy of the enabled connection.\n"
                }
            },
            "required": [
                "connectionId",
                "name",
                "organizationId",
                "strategy"
            ],
            "inputProperties": {
                "assignMembershipOnLogin": {
                    "type": "boolean",
                    "description": "When true, all users that log in with this connection will be automatically granted membership in the organization. When false, users must be granted membership in the organization before logging in with this connection.\n"
                },
                "connectionId": {
                    "type": "string",
                    "description": "The ID of the connection to enable for the organization.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The ID of the organization to enable the connection for.\n"
                }
            },
            "requiredInputs": [
                "connectionId",
                "organizationId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering OrganizationConnection resources.\n",
                "properties": {
                    "assignMembershipOnLogin": {
                        "type": "boolean",
                        "description": "When true, all users that log in with this connection will be automatically granted membership in the organization. When false, users must be granted membership in the organization before logging in with this connection.\n"
                    },
                    "connectionId": {
                        "type": "string",
                        "description": "The ID of the connection to enable for the organization.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the enabled connection.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The ID of the organization to enable the connection for.\n"
                    },
                    "strategy": {
                        "type": "string",
                        "description": "The strategy of the enabled connection.\n"
                    }
                },
                "type": "object"
            }
        },
        "auth0:index/organizationConnections:OrganizationConnections": {
            "description": "With this resource, you can manage enabled connections on an organization.\n\n!\u003e This resource manages all the connections enabled for an organization. In contrast, the `auth0.OrganizationConnection`\nresource appends a connection to an organization. To avoid potential issues, it is recommended not to use this\nresource in conjunction with the `auth0.OrganizationConnection` resource when managing connections for the same\norganization id.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as auth0 from \"@pulumi/auth0\";\n\nconst myConnection_1 = new auth0.Connection(\"myConnection-1\", {strategy: \"auth0\"});\nconst myConnection_2 = new auth0.Connection(\"myConnection-2\", {strategy: \"auth0\"});\nconst myOrganization = new auth0.Organization(\"myOrganization\", {displayName: \"My Organization\"});\nconst one_to_many = new auth0.OrganizationConnections(\"one-to-many\", {\n    organizationId: myOrganization.id,\n    enabledConnections: [\n        {\n            connectionId: myConnection_1.id,\n            assignMembershipOnLogin: true,\n        },\n        {\n            connectionId: myConnection_2.id,\n            assignMembershipOnLogin: true,\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_auth0 as auth0\n\nmy_connection_1 = auth0.Connection(\"myConnection-1\", strategy=\"auth0\")\nmy_connection_2 = auth0.Connection(\"myConnection-2\", strategy=\"auth0\")\nmy_organization = auth0.Organization(\"myOrganization\", display_name=\"My Organization\")\none_to_many = auth0.OrganizationConnections(\"one-to-many\",\n    organization_id=my_organization.id,\n    enabled_connections=[\n        auth0.OrganizationConnectionsEnabledConnectionArgs(\n            connection_id=my_connection_1.id,\n            assign_membership_on_login=True,\n        ),\n        auth0.OrganizationConnectionsEnabledConnectionArgs(\n            connection_id=my_connection_2.id,\n            assign_membership_on_login=True,\n        ),\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Auth0 = Pulumi.Auth0;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myConnection_1 = new Auth0.Connection(\"myConnection-1\", new()\n    {\n        Strategy = \"auth0\",\n    });\n\n    var myConnection_2 = new Auth0.Connection(\"myConnection-2\", new()\n    {\n        Strategy = \"auth0\",\n    });\n\n    var myOrganization = new Auth0.Organization(\"myOrganization\", new()\n    {\n        DisplayName = \"My Organization\",\n    });\n\n    var one_to_many = new Auth0.OrganizationConnections(\"one-to-many\", new()\n    {\n        OrganizationId = myOrganization.Id,\n        EnabledConnections = new[]\n        {\n            new Auth0.Inputs.OrganizationConnectionsEnabledConnectionArgs\n            {\n                ConnectionId = myConnection_1.Id,\n                AssignMembershipOnLogin = true,\n            },\n            new Auth0.Inputs.OrganizationConnectionsEnabledConnectionArgs\n            {\n                ConnectionId = myConnection_2.Id,\n                AssignMembershipOnLogin = true,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-auth0/sdk/v3/go/auth0\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := auth0.NewConnection(ctx, \"myConnection-1\", \u0026auth0.ConnectionArgs{\n\t\t\tStrategy: pulumi.String(\"auth0\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = auth0.NewConnection(ctx, \"myConnection-2\", \u0026auth0.ConnectionArgs{\n\t\t\tStrategy: pulumi.String(\"auth0\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmyOrganization, err := auth0.NewOrganization(ctx, \"myOrganization\", \u0026auth0.OrganizationArgs{\n\t\t\tDisplayName: pulumi.String(\"My Organization\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = auth0.NewOrganizationConnections(ctx, \"one-to-many\", \u0026auth0.OrganizationConnectionsArgs{\n\t\t\tOrganizationId: myOrganization.ID(),\n\t\t\tEnabledConnections: auth0.OrganizationConnectionsEnabledConnectionArray{\n\t\t\t\t\u0026auth0.OrganizationConnectionsEnabledConnectionArgs{\n\t\t\t\t\tConnectionId:            myConnection_1.ID(),\n\t\t\t\t\tAssignMembershipOnLogin: pulumi.Bool(true),\n\t\t\t\t},\n\t\t\t\t\u0026auth0.OrganizationConnectionsEnabledConnectionArgs{\n\t\t\t\t\tConnectionId:            myConnection_2.ID(),\n\t\t\t\t\tAssignMembershipOnLogin: pulumi.Bool(true),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.auth0.Connection;\nimport com.pulumi.auth0.ConnectionArgs;\nimport com.pulumi.auth0.Organization;\nimport com.pulumi.auth0.OrganizationArgs;\nimport com.pulumi.auth0.OrganizationConnections;\nimport com.pulumi.auth0.OrganizationConnectionsArgs;\nimport com.pulumi.auth0.inputs.OrganizationConnectionsEnabledConnectionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myConnection_1 = new Connection(\"myConnection-1\", ConnectionArgs.builder()        \n            .strategy(\"auth0\")\n            .build());\n\n        var myConnection_2 = new Connection(\"myConnection-2\", ConnectionArgs.builder()        \n            .strategy(\"auth0\")\n            .build());\n\n        var myOrganization = new Organization(\"myOrganization\", OrganizationArgs.builder()        \n            .displayName(\"My Organization\")\n            .build());\n\n        var one_to_many = new OrganizationConnections(\"one-to-many\", OrganizationConnectionsArgs.builder()        \n            .organizationId(myOrganization.id())\n            .enabledConnections(            \n                OrganizationConnectionsEnabledConnectionArgs.builder()\n                    .connectionId(myConnection_1.id())\n                    .assignMembershipOnLogin(true)\n                    .build(),\n                OrganizationConnectionsEnabledConnectionArgs.builder()\n                    .connectionId(myConnection_2.id())\n                    .assignMembershipOnLogin(true)\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myConnection-1:\n    type: auth0:Connection\n    properties:\n      strategy: auth0\n  myConnection-2:\n    type: auth0:Connection\n    properties:\n      strategy: auth0\n  myOrganization:\n    type: auth0:Organization\n    properties:\n      displayName: My Organization\n  one-to-many:\n    type: auth0:OrganizationConnections\n    properties:\n      organizationId: ${myOrganization.id}\n      enabledConnections:\n        - connectionId: ${[\"myConnection-1\"].id}\n          assignMembershipOnLogin: true\n        - connectionId: ${[\"myConnection-2\"].id}\n          assignMembershipOnLogin: true\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThis resource can be imported by specifying the organization ID. # Example\n\n```sh\n $ pulumi import auth0:index/organizationConnections:OrganizationConnections my_org_conns \"org_XXXXX\"\n```\n\n ",
            "properties": {
                "enabledConnections": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/auth0:index/OrganizationConnectionsEnabledConnection:OrganizationConnectionsEnabledConnection"
                    },
                    "description": "Connections that are enabled for the organization.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "ID of the organization on which to enable the connections.\n"
                }
            },
            "required": [
                "enabledConnections",
                "organizationId"
            ],
            "inputProperties": {
                "enabledConnections": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/auth0:index/OrganizationConnectionsEnabledConnection:OrganizationConnectionsEnabledConnection"
                    },
                    "description": "Connections that are enabled for the organization.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "ID of the organization on which to enable the connections.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "enabledConnections",
                "organizationId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering OrganizationConnections resources.\n",
                "properties": {
                    "enabledConnections": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/auth0:index/OrganizationConnectionsEnabledConnection:OrganizationConnectionsEnabledConnection"
                        },
                        "description": "Connections that are enabled for the organization.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "ID of the organization on which to enable the connections.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "auth0:index/organizationMember:OrganizationMember": {
            "description": "This resource is used to manage the assignment of members and their roles within an organization.\n\n!\u003e This resource appends a member to an organization. In contrast, the `auth0.OrganizationMembers` resource manages\nall the members assigned to an organization. To avoid potential issues, it is recommended not to use this resource in\nconjunction with the `auth0.OrganizationMembers` resource when managing members for the same organization id.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as auth0 from \"@pulumi/auth0\";\n\nconst user = new auth0.User(\"user\", {\n    email: \"test-user@auth0.com\",\n    connectionName: \"Username-Password-Authentication\",\n    emailVerified: true,\n    password: \"MyPass123$\",\n});\nconst myOrg = new auth0.Organization(\"myOrg\", {displayName: \"Admin\"});\nconst myOrgMember = new auth0.OrganizationMember(\"myOrgMember\", {\n    organizationId: myOrg.id,\n    userId: user.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_auth0 as auth0\n\nuser = auth0.User(\"user\",\n    email=\"test-user@auth0.com\",\n    connection_name=\"Username-Password-Authentication\",\n    email_verified=True,\n    password=\"MyPass123$\")\nmy_org = auth0.Organization(\"myOrg\", display_name=\"Admin\")\nmy_org_member = auth0.OrganizationMember(\"myOrgMember\",\n    organization_id=my_org.id,\n    user_id=user.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Auth0 = Pulumi.Auth0;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var user = new Auth0.User(\"user\", new()\n    {\n        Email = \"test-user@auth0.com\",\n        ConnectionName = \"Username-Password-Authentication\",\n        EmailVerified = true,\n        Password = \"MyPass123$\",\n    });\n\n    var myOrg = new Auth0.Organization(\"myOrg\", new()\n    {\n        DisplayName = \"Admin\",\n    });\n\n    var myOrgMember = new Auth0.OrganizationMember(\"myOrgMember\", new()\n    {\n        OrganizationId = myOrg.Id,\n        UserId = user.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-auth0/sdk/v3/go/auth0\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tuser, err := auth0.NewUser(ctx, \"user\", \u0026auth0.UserArgs{\n\t\t\tEmail:          pulumi.String(\"test-user@auth0.com\"),\n\t\t\tConnectionName: pulumi.String(\"Username-Password-Authentication\"),\n\t\t\tEmailVerified:  pulumi.Bool(true),\n\t\t\tPassword:       pulumi.String(\"MyPass123$\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmyOrg, err := auth0.NewOrganization(ctx, \"myOrg\", \u0026auth0.OrganizationArgs{\n\t\t\tDisplayName: pulumi.String(\"Admin\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = auth0.NewOrganizationMember(ctx, \"myOrgMember\", \u0026auth0.OrganizationMemberArgs{\n\t\t\tOrganizationId: myOrg.ID(),\n\t\t\tUserId:         user.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.auth0.User;\nimport com.pulumi.auth0.UserArgs;\nimport com.pulumi.auth0.Organization;\nimport com.pulumi.auth0.OrganizationArgs;\nimport com.pulumi.auth0.OrganizationMember;\nimport com.pulumi.auth0.OrganizationMemberArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var user = new User(\"user\", UserArgs.builder()        \n            .email(\"test-user@auth0.com\")\n            .connectionName(\"Username-Password-Authentication\")\n            .emailVerified(true)\n            .password(\"MyPass123$\")\n            .build());\n\n        var myOrg = new Organization(\"myOrg\", OrganizationArgs.builder()        \n            .displayName(\"Admin\")\n            .build());\n\n        var myOrgMember = new OrganizationMember(\"myOrgMember\", OrganizationMemberArgs.builder()        \n            .organizationId(myOrg.id())\n            .userId(user.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  user:\n    type: auth0:User\n    properties:\n      email: test-user@auth0.com\n      connectionName: Username-Password-Authentication\n      emailVerified: true\n      password: MyPass123$\n  myOrg:\n    type: auth0:Organization\n    properties:\n      displayName: Admin\n  myOrgMember:\n    type: auth0:OrganizationMember\n    properties:\n      organizationId: ${myOrg.id}\n      userId: ${user.id}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThis resource can be imported by specifying the organization ID and user ID separated by \"::\" (note the double colon) \u003corganizationID\u003e::\u003cuserID\u003e # Example\n\n```sh\n $ pulumi import auth0:index/organizationMember:OrganizationMember my_org_member \"org_XXXXX::auth0|XXXXX\"\n```\n\n ",
            "properties": {
                "organizationId": {
                    "type": "string",
                    "description": "The ID of the organization to assign the member to.\n"
                },
                "userId": {
                    "type": "string",
                    "description": "ID of the user to add as an organization member.\n"
                }
            },
            "required": [
                "organizationId",
                "userId"
            ],
            "inputProperties": {
                "organizationId": {
                    "type": "string",
                    "description": "The ID of the organization to assign the member to.\n",
                    "willReplaceOnChanges": true
                },
                "userId": {
                    "type": "string",
                    "description": "ID of the user to add as an organization member.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "organizationId",
                "userId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering OrganizationMember resources.\n",
                "properties": {
                    "organizationId": {
                        "type": "string",
                        "description": "The ID of the organization to assign the member to.\n",
                        "willReplaceOnChanges": true
                    },
                    "userId": {
                        "type": "string",
                        "description": "ID of the user to add as an organization member.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "auth0:index/organizationMemberRole:OrganizationMemberRole": {
            "description": "This resource is used to manage the roles assigned to an organization member.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as auth0 from \"@pulumi/auth0\";\n\nconst reader = new auth0.Role(\"reader\", {});\nconst writer = new auth0.Role(\"writer\", {});\nconst user = new auth0.User(\"user\", {\n    connectionName: \"Username-Password-Authentication\",\n    email: \"test-user@auth0.com\",\n    password: \"MyPass123$\",\n});\nconst myOrg = new auth0.Organization(\"myOrg\", {displayName: \"Some Org\"});\nconst myOrgMember = new auth0.OrganizationMember(\"myOrgMember\", {\n    organizationId: myOrg.id,\n    userId: user.id,\n});\nconst role1 = new auth0.OrganizationMemberRole(\"role1\", {\n    organizationId: myOrg.id,\n    userId: user.id,\n    roleId: reader.id,\n});\nconst role2 = new auth0.OrganizationMemberRole(\"role2\", {\n    organizationId: myOrg.id,\n    userId: user.id,\n    roleId: writer.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_auth0 as auth0\n\nreader = auth0.Role(\"reader\")\nwriter = auth0.Role(\"writer\")\nuser = auth0.User(\"user\",\n    connection_name=\"Username-Password-Authentication\",\n    email=\"test-user@auth0.com\",\n    password=\"MyPass123$\")\nmy_org = auth0.Organization(\"myOrg\", display_name=\"Some Org\")\nmy_org_member = auth0.OrganizationMember(\"myOrgMember\",\n    organization_id=my_org.id,\n    user_id=user.id)\nrole1 = auth0.OrganizationMemberRole(\"role1\",\n    organization_id=my_org.id,\n    user_id=user.id,\n    role_id=reader.id)\nrole2 = auth0.OrganizationMemberRole(\"role2\",\n    organization_id=my_org.id,\n    user_id=user.id,\n    role_id=writer.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Auth0 = Pulumi.Auth0;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var reader = new Auth0.Role(\"reader\");\n\n    var writer = new Auth0.Role(\"writer\");\n\n    var user = new Auth0.User(\"user\", new()\n    {\n        ConnectionName = \"Username-Password-Authentication\",\n        Email = \"test-user@auth0.com\",\n        Password = \"MyPass123$\",\n    });\n\n    var myOrg = new Auth0.Organization(\"myOrg\", new()\n    {\n        DisplayName = \"Some Org\",\n    });\n\n    var myOrgMember = new Auth0.OrganizationMember(\"myOrgMember\", new()\n    {\n        OrganizationId = myOrg.Id,\n        UserId = user.Id,\n    });\n\n    var role1 = new Auth0.OrganizationMemberRole(\"role1\", new()\n    {\n        OrganizationId = myOrg.Id,\n        UserId = user.Id,\n        RoleId = reader.Id,\n    });\n\n    var role2 = new Auth0.OrganizationMemberRole(\"role2\", new()\n    {\n        OrganizationId = myOrg.Id,\n        UserId = user.Id,\n        RoleId = writer.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-auth0/sdk/v3/go/auth0\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\treader, err := auth0.NewRole(ctx, \"reader\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\twriter, err := auth0.NewRole(ctx, \"writer\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tuser, err := auth0.NewUser(ctx, \"user\", \u0026auth0.UserArgs{\n\t\t\tConnectionName: pulumi.String(\"Username-Password-Authentication\"),\n\t\t\tEmail:          pulumi.String(\"test-user@auth0.com\"),\n\t\t\tPassword:       pulumi.String(\"MyPass123$\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmyOrg, err := auth0.NewOrganization(ctx, \"myOrg\", \u0026auth0.OrganizationArgs{\n\t\t\tDisplayName: pulumi.String(\"Some Org\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = auth0.NewOrganizationMember(ctx, \"myOrgMember\", \u0026auth0.OrganizationMemberArgs{\n\t\t\tOrganizationId: myOrg.ID(),\n\t\t\tUserId:         user.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = auth0.NewOrganizationMemberRole(ctx, \"role1\", \u0026auth0.OrganizationMemberRoleArgs{\n\t\t\tOrganizationId: myOrg.ID(),\n\t\t\tUserId:         user.ID(),\n\t\t\tRoleId:         reader.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = auth0.NewOrganizationMemberRole(ctx, \"role2\", \u0026auth0.OrganizationMemberRoleArgs{\n\t\t\tOrganizationId: myOrg.ID(),\n\t\t\tUserId:         user.ID(),\n\t\t\tRoleId:         writer.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.auth0.Role;\nimport com.pulumi.auth0.User;\nimport com.pulumi.auth0.UserArgs;\nimport com.pulumi.auth0.Organization;\nimport com.pulumi.auth0.OrganizationArgs;\nimport com.pulumi.auth0.OrganizationMember;\nimport com.pulumi.auth0.OrganizationMemberArgs;\nimport com.pulumi.auth0.OrganizationMemberRole;\nimport com.pulumi.auth0.OrganizationMemberRoleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var reader = new Role(\"reader\");\n\n        var writer = new Role(\"writer\");\n\n        var user = new User(\"user\", UserArgs.builder()        \n            .connectionName(\"Username-Password-Authentication\")\n            .email(\"test-user@auth0.com\")\n            .password(\"MyPass123$\")\n            .build());\n\n        var myOrg = new Organization(\"myOrg\", OrganizationArgs.builder()        \n            .displayName(\"Some Org\")\n            .build());\n\n        var myOrgMember = new OrganizationMember(\"myOrgMember\", OrganizationMemberArgs.builder()        \n            .organizationId(myOrg.id())\n            .userId(user.id())\n            .build());\n\n        var role1 = new OrganizationMemberRole(\"role1\", OrganizationMemberRoleArgs.builder()        \n            .organizationId(myOrg.id())\n            .userId(user.id())\n            .roleId(reader.id())\n            .build());\n\n        var role2 = new OrganizationMemberRole(\"role2\", OrganizationMemberRoleArgs.builder()        \n            .organizationId(myOrg.id())\n            .userId(user.id())\n            .roleId(writer.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  reader:\n    type: auth0:Role\n  writer:\n    type: auth0:Role\n  user:\n    type: auth0:User\n    properties:\n      connectionName: Username-Password-Authentication\n      email: test-user@auth0.com\n      password: MyPass123$\n  myOrg:\n    type: auth0:Organization\n    properties:\n      displayName: Some Org\n  myOrgMember:\n    type: auth0:OrganizationMember\n    properties:\n      organizationId: ${myOrg.id}\n      userId: ${user.id}\n  role1:\n    type: auth0:OrganizationMemberRole\n    properties:\n      organizationId: ${myOrg.id}\n      userId: ${user.id}\n      roleId: ${reader.id}\n  role2:\n    type: auth0:OrganizationMemberRole\n    properties:\n      organizationId: ${myOrg.id}\n      userId: ${user.id}\n      roleId: ${writer.id}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThis resource can be imported by specifying the organization ID, user ID and role ID separated by \"::\" (note the double colon) \u003corganizationID\u003e::\u003cuserID\u003e::\u003croleID\u003e # Example\n\n```sh\n $ pulumi import auth0:index/organizationMemberRole:OrganizationMemberRole my_org_member_role \"org_XXXXX::auth0|XXXXX::role_XXXX\"\n```\n\n ",
            "properties": {
                "organizationId": {
                    "type": "string",
                    "description": "The ID of the organization.\n"
                },
                "roleDescription": {
                    "type": "string",
                    "description": "Description of the role.\n"
                },
                "roleId": {
                    "type": "string",
                    "description": "The role ID to assign to the organization member.\n"
                },
                "roleName": {
                    "type": "string",
                    "description": "Name of the role.\n"
                },
                "userId": {
                    "type": "string",
                    "description": "The user ID of the organization member.\n"
                }
            },
            "required": [
                "organizationId",
                "roleDescription",
                "roleId",
                "roleName",
                "userId"
            ],
            "inputProperties": {
                "organizationId": {
                    "type": "string",
                    "description": "The ID of the organization.\n",
                    "willReplaceOnChanges": true
                },
                "roleId": {
                    "type": "string",
                    "description": "The role ID to assign to the organization member.\n",
                    "willReplaceOnChanges": true
                },
                "userId": {
                    "type": "string",
                    "description": "The user ID of the organization member.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "organizationId",
                "roleId",
                "userId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering OrganizationMemberRole resources.\n",
                "properties": {
                    "organizationId": {
                        "type": "string",
                        "description": "The ID of the organization.\n",
                        "willReplaceOnChanges": true
                    },
                    "roleDescription": {
                        "type": "string",
                        "description": "Description of the role.\n"
                    },
                    "roleId": {
                        "type": "string",
                        "description": "The role ID to assign to the organization member.\n",
                        "willReplaceOnChanges": true
                    },
                    "roleName": {
                        "type": "string",
                        "description": "Name of the role.\n"
                    },
                    "userId": {
                        "type": "string",
                        "description": "The user ID of the organization member.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "auth0:index/organizationMemberRoles:OrganizationMemberRoles": {
            "description": "This resource is used to manage the roles assigned to an organization member.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as auth0 from \"@pulumi/auth0\";\n\nconst reader = new auth0.Role(\"reader\", {});\nconst writer = new auth0.Role(\"writer\", {});\nconst user = new auth0.User(\"user\", {\n    connectionName: \"Username-Password-Authentication\",\n    email: \"test-user@auth0.com\",\n    password: \"MyPass123$\",\n});\nconst myOrg = new auth0.Organization(\"myOrg\", {displayName: \"Some Org\"});\nconst myOrgMember = new auth0.OrganizationMember(\"myOrgMember\", {\n    organizationId: myOrg.id,\n    userId: user.id,\n});\nconst myOrgMemberRoles = new auth0.OrganizationMemberRoles(\"myOrgMemberRoles\", {\n    organizationId: myOrg.id,\n    userId: user.id,\n    roles: [\n        reader.id,\n        writer.id,\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_auth0 as auth0\n\nreader = auth0.Role(\"reader\")\nwriter = auth0.Role(\"writer\")\nuser = auth0.User(\"user\",\n    connection_name=\"Username-Password-Authentication\",\n    email=\"test-user@auth0.com\",\n    password=\"MyPass123$\")\nmy_org = auth0.Organization(\"myOrg\", display_name=\"Some Org\")\nmy_org_member = auth0.OrganizationMember(\"myOrgMember\",\n    organization_id=my_org.id,\n    user_id=user.id)\nmy_org_member_roles = auth0.OrganizationMemberRoles(\"myOrgMemberRoles\",\n    organization_id=my_org.id,\n    user_id=user.id,\n    roles=[\n        reader.id,\n        writer.id,\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Auth0 = Pulumi.Auth0;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var reader = new Auth0.Role(\"reader\");\n\n    var writer = new Auth0.Role(\"writer\");\n\n    var user = new Auth0.User(\"user\", new()\n    {\n        ConnectionName = \"Username-Password-Authentication\",\n        Email = \"test-user@auth0.com\",\n        Password = \"MyPass123$\",\n    });\n\n    var myOrg = new Auth0.Organization(\"myOrg\", new()\n    {\n        DisplayName = \"Some Org\",\n    });\n\n    var myOrgMember = new Auth0.OrganizationMember(\"myOrgMember\", new()\n    {\n        OrganizationId = myOrg.Id,\n        UserId = user.Id,\n    });\n\n    var myOrgMemberRoles = new Auth0.OrganizationMemberRoles(\"myOrgMemberRoles\", new()\n    {\n        OrganizationId = myOrg.Id,\n        UserId = user.Id,\n        Roles = new[]\n        {\n            reader.Id,\n            writer.Id,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-auth0/sdk/v3/go/auth0\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\treader, err := auth0.NewRole(ctx, \"reader\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\twriter, err := auth0.NewRole(ctx, \"writer\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tuser, err := auth0.NewUser(ctx, \"user\", \u0026auth0.UserArgs{\n\t\t\tConnectionName: pulumi.String(\"Username-Password-Authentication\"),\n\t\t\tEmail:          pulumi.String(\"test-user@auth0.com\"),\n\t\t\tPassword:       pulumi.String(\"MyPass123$\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmyOrg, err := auth0.NewOrganization(ctx, \"myOrg\", \u0026auth0.OrganizationArgs{\n\t\t\tDisplayName: pulumi.String(\"Some Org\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = auth0.NewOrganizationMember(ctx, \"myOrgMember\", \u0026auth0.OrganizationMemberArgs{\n\t\t\tOrganizationId: myOrg.ID(),\n\t\t\tUserId:         user.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = auth0.NewOrganizationMemberRoles(ctx, \"myOrgMemberRoles\", \u0026auth0.OrganizationMemberRolesArgs{\n\t\t\tOrganizationId: myOrg.ID(),\n\t\t\tUserId:         user.ID(),\n\t\t\tRoles: pulumi.StringArray{\n\t\t\t\treader.ID(),\n\t\t\t\twriter.ID(),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.auth0.Role;\nimport com.pulumi.auth0.User;\nimport com.pulumi.auth0.UserArgs;\nimport com.pulumi.auth0.Organization;\nimport com.pulumi.auth0.OrganizationArgs;\nimport com.pulumi.auth0.OrganizationMember;\nimport com.pulumi.auth0.OrganizationMemberArgs;\nimport com.pulumi.auth0.OrganizationMemberRoles;\nimport com.pulumi.auth0.OrganizationMemberRolesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var reader = new Role(\"reader\");\n\n        var writer = new Role(\"writer\");\n\n        var user = new User(\"user\", UserArgs.builder()        \n            .connectionName(\"Username-Password-Authentication\")\n            .email(\"test-user@auth0.com\")\n            .password(\"MyPass123$\")\n            .build());\n\n        var myOrg = new Organization(\"myOrg\", OrganizationArgs.builder()        \n            .displayName(\"Some Org\")\n            .build());\n\n        var myOrgMember = new OrganizationMember(\"myOrgMember\", OrganizationMemberArgs.builder()        \n            .organizationId(myOrg.id())\n            .userId(user.id())\n            .build());\n\n        var myOrgMemberRoles = new OrganizationMemberRoles(\"myOrgMemberRoles\", OrganizationMemberRolesArgs.builder()        \n            .organizationId(myOrg.id())\n            .userId(user.id())\n            .roles(            \n                reader.id(),\n                writer.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  reader:\n    type: auth0:Role\n  writer:\n    type: auth0:Role\n  user:\n    type: auth0:User\n    properties:\n      connectionName: Username-Password-Authentication\n      email: test-user@auth0.com\n      password: MyPass123$\n  myOrg:\n    type: auth0:Organization\n    properties:\n      displayName: Some Org\n  myOrgMember:\n    type: auth0:OrganizationMember\n    properties:\n      organizationId: ${myOrg.id}\n      userId: ${user.id}\n  myOrgMemberRoles:\n    type: auth0:OrganizationMemberRoles\n    properties:\n      organizationId: ${myOrg.id}\n      userId: ${user.id}\n      roles:\n        - ${reader.id}\n        - ${writer.id}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThis resource can be imported by specifying the organization ID and user ID separated by \"::\" (note the double colon) \u003corganizationID\u003e::\u003cuserID\u003e # Example\n\n```sh\n $ pulumi import auth0:index/organizationMemberRoles:OrganizationMemberRoles my_org_member_roles \"org_XXXXX::auth0|XXXXX\"\n```\n\n ",
            "properties": {
                "organizationId": {
                    "type": "string",
                    "description": "The ID of the organization.\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The role ID(s) to assign to the organization member.\n"
                },
                "userId": {
                    "type": "string",
                    "description": "The user ID of the organization member.\n"
                }
            },
            "required": [
                "organizationId",
                "roles",
                "userId"
            ],
            "inputProperties": {
                "organizationId": {
                    "type": "string",
                    "description": "The ID of the organization.\n",
                    "willReplaceOnChanges": true
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The role ID(s) to assign to the organization member.\n"
                },
                "userId": {
                    "type": "string",
                    "description": "The user ID of the organization member.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "organizationId",
                "roles",
                "userId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering OrganizationMemberRoles resources.\n",
                "properties": {
                    "organizationId": {
                        "type": "string",
                        "description": "The ID of the organization.\n",
                        "willReplaceOnChanges": true
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The role ID(s) to assign to the organization member.\n"
                    },
                    "userId": {
                        "type": "string",
                        "description": "The user ID of the organization member.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "auth0:index/organizationMembers:OrganizationMembers": {
            "description": "This resource is used to manage members of an organization.\n\n!\u003e This resource manages all the members assigned to an organization. In contrast, the `auth0.OrganizationMember`\nresource only appends a member to an organization. To avoid potential issues, it is recommended not to use this\nresource in conjunction with the `auth0.OrganizationMember` resource when managing members for the same organization\nid.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as auth0 from \"@pulumi/auth0\";\n\nconst user1 = new auth0.User(\"user1\", {\n    connectionName: \"Username-Password-Authentication\",\n    email: \"myuser1@auth0.com\",\n    password: \"MyPass123$\",\n});\nconst user2 = new auth0.User(\"user2\", {\n    connectionName: \"Username-Password-Authentication\",\n    email: \"myuser2@auth0.com\",\n    password: \"MyPass123$\",\n});\nconst myOrg = new auth0.Organization(\"myOrg\", {displayName: \"Some Organization\"});\nconst myMembers = new auth0.OrganizationMembers(\"myMembers\", {\n    organizationId: myOrg.id,\n    members: [\n        user1.id,\n        user2.id,\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_auth0 as auth0\n\nuser1 = auth0.User(\"user1\",\n    connection_name=\"Username-Password-Authentication\",\n    email=\"myuser1@auth0.com\",\n    password=\"MyPass123$\")\nuser2 = auth0.User(\"user2\",\n    connection_name=\"Username-Password-Authentication\",\n    email=\"myuser2@auth0.com\",\n    password=\"MyPass123$\")\nmy_org = auth0.Organization(\"myOrg\", display_name=\"Some Organization\")\nmy_members = auth0.OrganizationMembers(\"myMembers\",\n    organization_id=my_org.id,\n    members=[\n        user1.id,\n        user2.id,\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Auth0 = Pulumi.Auth0;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var user1 = new Auth0.User(\"user1\", new()\n    {\n        ConnectionName = \"Username-Password-Authentication\",\n        Email = \"myuser1@auth0.com\",\n        Password = \"MyPass123$\",\n    });\n\n    var user2 = new Auth0.User(\"user2\", new()\n    {\n        ConnectionName = \"Username-Password-Authentication\",\n        Email = \"myuser2@auth0.com\",\n        Password = \"MyPass123$\",\n    });\n\n    var myOrg = new Auth0.Organization(\"myOrg\", new()\n    {\n        DisplayName = \"Some Organization\",\n    });\n\n    var myMembers = new Auth0.OrganizationMembers(\"myMembers\", new()\n    {\n        OrganizationId = myOrg.Id,\n        Members = new[]\n        {\n            user1.Id,\n            user2.Id,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-auth0/sdk/v3/go/auth0\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tuser1, err := auth0.NewUser(ctx, \"user1\", \u0026auth0.UserArgs{\n\t\t\tConnectionName: pulumi.String(\"Username-Password-Authentication\"),\n\t\t\tEmail:          pulumi.String(\"myuser1@auth0.com\"),\n\t\t\tPassword:       pulumi.String(\"MyPass123$\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tuser2, err := auth0.NewUser(ctx, \"user2\", \u0026auth0.UserArgs{\n\t\t\tConnectionName: pulumi.String(\"Username-Password-Authentication\"),\n\t\t\tEmail:          pulumi.String(\"myuser2@auth0.com\"),\n\t\t\tPassword:       pulumi.String(\"MyPass123$\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmyOrg, err := auth0.NewOrganization(ctx, \"myOrg\", \u0026auth0.OrganizationArgs{\n\t\t\tDisplayName: pulumi.String(\"Some Organization\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = auth0.NewOrganizationMembers(ctx, \"myMembers\", \u0026auth0.OrganizationMembersArgs{\n\t\t\tOrganizationId: myOrg.ID(),\n\t\t\tMembers: pulumi.StringArray{\n\t\t\t\tuser1.ID(),\n\t\t\t\tuser2.ID(),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.auth0.User;\nimport com.pulumi.auth0.UserArgs;\nimport com.pulumi.auth0.Organization;\nimport com.pulumi.auth0.OrganizationArgs;\nimport com.pulumi.auth0.OrganizationMembers;\nimport com.pulumi.auth0.OrganizationMembersArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var user1 = new User(\"user1\", UserArgs.builder()        \n            .connectionName(\"Username-Password-Authentication\")\n            .email(\"myuser1@auth0.com\")\n            .password(\"MyPass123$\")\n            .build());\n\n        var user2 = new User(\"user2\", UserArgs.builder()        \n            .connectionName(\"Username-Password-Authentication\")\n            .email(\"myuser2@auth0.com\")\n            .password(\"MyPass123$\")\n            .build());\n\n        var myOrg = new Organization(\"myOrg\", OrganizationArgs.builder()        \n            .displayName(\"Some Organization\")\n            .build());\n\n        var myMembers = new OrganizationMembers(\"myMembers\", OrganizationMembersArgs.builder()        \n            .organizationId(myOrg.id())\n            .members(            \n                user1.id(),\n                user2.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  user1:\n    type: auth0:User\n    properties:\n      connectionName: Username-Password-Authentication\n      email: myuser1@auth0.com\n      password: MyPass123$\n  user2:\n    type: auth0:User\n    properties:\n      connectionName: Username-Password-Authentication\n      email: myuser2@auth0.com\n      password: MyPass123$\n  myOrg:\n    type: auth0:Organization\n    properties:\n      displayName: Some Organization\n  myMembers:\n    type: auth0:OrganizationMembers\n    properties:\n      organizationId: ${myOrg.id}\n      members:\n        - ${user1.id}\n        - ${user2.id}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThis resource can be imported by specifying the organization ID. # Example\n\n```sh\n $ pulumi import auth0:index/organizationMembers:OrganizationMembers my_org_members \"org_XXXXX\"\n```\n\n ",
            "properties": {
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Add user ID(s) directly from the tenant to become members of the organization.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The ID of the organization to assign the members to.\n"
                }
            },
            "required": [
                "members",
                "organizationId"
            ],
            "inputProperties": {
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Add user ID(s) directly from the tenant to become members of the organization.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The ID of the organization to assign the members to.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "members",
                "organizationId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering OrganizationMembers resources.\n",
                "properties": {
                    "members": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Add user ID(s) directly from the tenant to become members of the organization.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The ID of the organization to assign the members to.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "auth0:index/pages:Pages": {
            "description": "With this resource you can manage custom HTML for the Login, Reset Password, Multi-Factor Authentication and Error pages.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as auth0 from \"@pulumi/auth0\";\n\nconst myPages = new auth0.Pages(\"myPages\", {\n    changePassword: {\n        enabled: true,\n        html: \"\u003chtml\u003e\u003cbody\u003eMy Custom Reset Password Page\u003c/body\u003e\u003c/html\u003e\",\n    },\n    error: {\n        html: \"\u003chtml\u003e\u003cbody\u003eMy Custom Error Page\u003c/body\u003e\u003c/html\u003e\",\n        showLogLink: true,\n        url: \"https://example.com\",\n    },\n    guardianMfa: {\n        enabled: true,\n        html: \"\u003chtml\u003e\u003cbody\u003eMy Custom MFA Page\u003c/body\u003e\u003c/html\u003e\",\n    },\n    login: {\n        enabled: true,\n        html: \"\u003chtml\u003e\u003cbody\u003eMy Custom Login Page\u003c/body\u003e\u003c/html\u003e\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_auth0 as auth0\n\nmy_pages = auth0.Pages(\"myPages\",\n    change_password=auth0.PagesChangePasswordArgs(\n        enabled=True,\n        html=\"\u003chtml\u003e\u003cbody\u003eMy Custom Reset Password Page\u003c/body\u003e\u003c/html\u003e\",\n    ),\n    error=auth0.PagesErrorArgs(\n        html=\"\u003chtml\u003e\u003cbody\u003eMy Custom Error Page\u003c/body\u003e\u003c/html\u003e\",\n        show_log_link=True,\n        url=\"https://example.com\",\n    ),\n    guardian_mfa=auth0.PagesGuardianMfaArgs(\n        enabled=True,\n        html=\"\u003chtml\u003e\u003cbody\u003eMy Custom MFA Page\u003c/body\u003e\u003c/html\u003e\",\n    ),\n    login=auth0.PagesLoginArgs(\n        enabled=True,\n        html=\"\u003chtml\u003e\u003cbody\u003eMy Custom Login Page\u003c/body\u003e\u003c/html\u003e\",\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Auth0 = Pulumi.Auth0;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myPages = new Auth0.Pages(\"myPages\", new()\n    {\n        ChangePassword = new Auth0.Inputs.PagesChangePasswordArgs\n        {\n            Enabled = true,\n            Html = \"\u003chtml\u003e\u003cbody\u003eMy Custom Reset Password Page\u003c/body\u003e\u003c/html\u003e\",\n        },\n        Error = new Auth0.Inputs.PagesErrorArgs\n        {\n            Html = \"\u003chtml\u003e\u003cbody\u003eMy Custom Error Page\u003c/body\u003e\u003c/html\u003e\",\n            ShowLogLink = true,\n            Url = \"https://example.com\",\n        },\n        GuardianMfa = new Auth0.Inputs.PagesGuardianMfaArgs\n        {\n            Enabled = true,\n            Html = \"\u003chtml\u003e\u003cbody\u003eMy Custom MFA Page\u003c/body\u003e\u003c/html\u003e\",\n        },\n        Login = new Auth0.Inputs.PagesLoginArgs\n        {\n            Enabled = true,\n            Html = \"\u003chtml\u003e\u003cbody\u003eMy Custom Login Page\u003c/body\u003e\u003c/html\u003e\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-auth0/sdk/v3/go/auth0\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := auth0.NewPages(ctx, \"myPages\", \u0026auth0.PagesArgs{\n\t\t\tChangePassword: \u0026auth0.PagesChangePasswordArgs{\n\t\t\t\tEnabled: pulumi.Bool(true),\n\t\t\t\tHtml:    pulumi.String(\"\u003chtml\u003e\u003cbody\u003eMy Custom Reset Password Page\u003c/body\u003e\u003c/html\u003e\"),\n\t\t\t},\n\t\t\tError: \u0026auth0.PagesErrorArgs{\n\t\t\t\tHtml:        pulumi.String(\"\u003chtml\u003e\u003cbody\u003eMy Custom Error Page\u003c/body\u003e\u003c/html\u003e\"),\n\t\t\t\tShowLogLink: pulumi.Bool(true),\n\t\t\t\tUrl:         pulumi.String(\"https://example.com\"),\n\t\t\t},\n\t\t\tGuardianMfa: \u0026auth0.PagesGuardianMfaArgs{\n\t\t\t\tEnabled: pulumi.Bool(true),\n\t\t\t\tHtml:    pulumi.String(\"\u003chtml\u003e\u003cbody\u003eMy Custom MFA Page\u003c/body\u003e\u003c/html\u003e\"),\n\t\t\t},\n\t\t\tLogin: \u0026auth0.PagesLoginArgs{\n\t\t\t\tEnabled: pulumi.Bool(true),\n\t\t\t\tHtml:    pulumi.String(\"\u003chtml\u003e\u003cbody\u003eMy Custom Login Page\u003c/body\u003e\u003c/html\u003e\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.auth0.Pages;\nimport com.pulumi.auth0.PagesArgs;\nimport com.pulumi.auth0.inputs.PagesChangePasswordArgs;\nimport com.pulumi.auth0.inputs.PagesErrorArgs;\nimport com.pulumi.auth0.inputs.PagesGuardianMfaArgs;\nimport com.pulumi.auth0.inputs.PagesLoginArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myPages = new Pages(\"myPages\", PagesArgs.builder()        \n            .changePassword(PagesChangePasswordArgs.builder()\n                .enabled(true)\n                .html(\"\u003chtml\u003e\u003cbody\u003eMy Custom Reset Password Page\u003c/body\u003e\u003c/html\u003e\")\n                .build())\n            .error(PagesErrorArgs.builder()\n                .html(\"\u003chtml\u003e\u003cbody\u003eMy Custom Error Page\u003c/body\u003e\u003c/html\u003e\")\n                .showLogLink(true)\n                .url(\"https://example.com\")\n                .build())\n            .guardianMfa(PagesGuardianMfaArgs.builder()\n                .enabled(true)\n                .html(\"\u003chtml\u003e\u003cbody\u003eMy Custom MFA Page\u003c/body\u003e\u003c/html\u003e\")\n                .build())\n            .login(PagesLoginArgs.builder()\n                .enabled(true)\n                .html(\"\u003chtml\u003e\u003cbody\u003eMy Custom Login Page\u003c/body\u003e\u003c/html\u003e\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myPages:\n    type: auth0:Pages\n    properties:\n      changePassword:\n        enabled: true\n        html: \u003chtml\u003e\u003cbody\u003eMy Custom Reset Password Page\u003c/body\u003e\u003c/html\u003e\n      error:\n        html: \u003chtml\u003e\u003cbody\u003eMy Custom Error Page\u003c/body\u003e\u003c/html\u003e\n        showLogLink: true\n        url: https://example.com\n      guardianMfa:\n        enabled: true\n        html: \u003chtml\u003e\u003cbody\u003eMy Custom MFA Page\u003c/body\u003e\u003c/html\u003e\n      login:\n        enabled: true\n        html: \u003chtml\u003e\u003cbody\u003eMy Custom Login Page\u003c/body\u003e\u003c/html\u003e\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nAs this is not a resource identifiable by an ID within the Auth0 Management API, pages can be imported using a random string. # We recommend [Version 4 UUID](https://www.uuidgenerator.net/version4) # Example\n\n```sh\n $ pulumi import auth0:index/pages:Pages my_pages \"22f4f21b-017a-319d-92e7-2291c1ca36c4\"\n```\n\n ",
            "properties": {
                "changePassword": {
                    "$ref": "#/types/auth0:index/PagesChangePassword:PagesChangePassword",
                    "description": "Configuration settings for customizing the Password Reset page.\n"
                },
                "error": {
                    "$ref": "#/types/auth0:index/PagesError:PagesError",
                    "description": "Configuration settings for the Error pages.\n"
                },
                "guardianMfa": {
                    "$ref": "#/types/auth0:index/PagesGuardianMfa:PagesGuardianMfa",
                    "description": "Configuration settings for customizing the Guardian Multi-Factor Authentication page.\n"
                },
                "login": {
                    "$ref": "#/types/auth0:index/PagesLogin:PagesLogin",
                    "description": "Configuration settings for customizing the Login page.\n"
                }
            },
            "required": [
                "changePassword",
                "error",
                "guardianMfa",
                "login"
            ],
            "inputProperties": {
                "changePassword": {
                    "$ref": "#/types/auth0:index/PagesChangePassword:PagesChangePassword",
                    "description": "Configuration settings for customizing the Password Reset page.\n"
                },
                "error": {
                    "$ref": "#/types/auth0:index/PagesError:PagesError",
                    "description": "Configuration settings for the Error pages.\n"
                },
                "guardianMfa": {
                    "$ref": "#/types/auth0:index/PagesGuardianMfa:PagesGuardianMfa",
                    "description": "Configuration settings for customizing the Guardian Multi-Factor Authentication page.\n"
                },
                "login": {
                    "$ref": "#/types/auth0:index/PagesLogin:PagesLogin",
                    "description": "Configuration settings for customizing the Login page.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Pages resources.\n",
                "properties": {
                    "changePassword": {
                        "$ref": "#/types/auth0:index/PagesChangePassword:PagesChangePassword",
                        "description": "Configuration settings for customizing the Password Reset page.\n"
                    },
                    "error": {
                        "$ref": "#/types/auth0:index/PagesError:PagesError",
                        "description": "Configuration settings for the Error pages.\n"
                    },
                    "guardianMfa": {
                        "$ref": "#/types/auth0:index/PagesGuardianMfa:PagesGuardianMfa",
                        "description": "Configuration settings for customizing the Guardian Multi-Factor Authentication page.\n"
                    },
                    "login": {
                        "$ref": "#/types/auth0:index/PagesLogin:PagesLogin",
                        "description": "Configuration settings for customizing the Login page.\n"
                    }
                },
                "type": "object"
            }
        },
        "auth0:index/prompt:Prompt": {
            "description": "With this resource, you can manage your Auth0 prompts, including choosing the login experience version.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as auth0 from \"@pulumi/auth0\";\n\nconst myPrompt = new auth0.Prompt(\"myPrompt\", {\n    identifierFirst: false,\n    universalLoginExperience: \"new\",\n    webauthnPlatformFirstFactor: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_auth0 as auth0\n\nmy_prompt = auth0.Prompt(\"myPrompt\",\n    identifier_first=False,\n    universal_login_experience=\"new\",\n    webauthn_platform_first_factor=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Auth0 = Pulumi.Auth0;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myPrompt = new Auth0.Prompt(\"myPrompt\", new()\n    {\n        IdentifierFirst = false,\n        UniversalLoginExperience = \"new\",\n        WebauthnPlatformFirstFactor = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-auth0/sdk/v3/go/auth0\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := auth0.NewPrompt(ctx, \"myPrompt\", \u0026auth0.PromptArgs{\n\t\t\tIdentifierFirst:             pulumi.Bool(false),\n\t\t\tUniversalLoginExperience:    pulumi.String(\"new\"),\n\t\t\tWebauthnPlatformFirstFactor: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.auth0.Prompt;\nimport com.pulumi.auth0.PromptArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myPrompt = new Prompt(\"myPrompt\", PromptArgs.builder()        \n            .identifierFirst(false)\n            .universalLoginExperience(\"new\")\n            .webauthnPlatformFirstFactor(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myPrompt:\n    type: auth0:Prompt\n    properties:\n      identifierFirst: false\n      universalLoginExperience: new\n      webauthnPlatformFirstFactor: true\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nAs this is not a resource identifiable by an ID within the Auth0 Management API, prompts can be imported using a random string. # We recommend [Version 4 UUID](https://www.uuidgenerator.net/version4) # Example\n\n```sh\n $ pulumi import auth0:index/prompt:Prompt my_prompt \"22f4f21b-017a-319d-92e7-2291c1ca36c4\"\n```\n\n ",
            "properties": {
                "identifierFirst": {
                    "type": "boolean",
                    "description": "Indicates whether the identifier first is used when using the new Universal Login experience.\n"
                },
                "universalLoginExperience": {
                    "type": "string",
                    "description": "Which login experience to use. Options include `classic` and `new`.\n"
                },
                "webauthnPlatformFirstFactor": {
                    "type": "boolean",
                    "description": "Determines if the login screen uses identifier and biometrics first. Setting this property to `true`, requires MFA factors enabled for enrollment; use the `auth0.Guardian` resource to set one up.\n"
                }
            },
            "required": [
                "identifierFirst",
                "universalLoginExperience",
                "webauthnPlatformFirstFactor"
            ],
            "inputProperties": {
                "identifierFirst": {
                    "type": "boolean",
                    "description": "Indicates whether the identifier first is used when using the new Universal Login experience.\n"
                },
                "universalLoginExperience": {
                    "type": "string",
                    "description": "Which login experience to use. Options include `classic` and `new`.\n"
                },
                "webauthnPlatformFirstFactor": {
                    "type": "boolean",
                    "description": "Determines if the login screen uses identifier and biometrics first. Setting this property to `true`, requires MFA factors enabled for enrollment; use the `auth0.Guardian` resource to set one up.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Prompt resources.\n",
                "properties": {
                    "identifierFirst": {
                        "type": "boolean",
                        "description": "Indicates whether the identifier first is used when using the new Universal Login experience.\n"
                    },
                    "universalLoginExperience": {
                        "type": "string",
                        "description": "Which login experience to use. Options include `classic` and `new`.\n"
                    },
                    "webauthnPlatformFirstFactor": {
                        "type": "boolean",
                        "description": "Determines if the login screen uses identifier and biometrics first. Setting this property to `true`, requires MFA factors enabled for enrollment; use the `auth0.Guardian` resource to set one up.\n"
                    }
                },
                "type": "object"
            }
        },
        "auth0:index/promptCustomText:PromptCustomText": {
            "description": "With this resource, you can manage custom text on your Auth0 prompts. You can read more about custom texts [here](https://auth0.com/docs/customize/universal-login-pages/customize-login-text-prompts).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as auth0 from \"@pulumi/auth0\";\n\nconst example = new auth0.PromptCustomText(\"example\", {\n    prompt: \"login\",\n    language: \"en\",\n    body: JSON.stringify({\n        login: {\n            alertListTitle: \"Alerts\",\n            buttonText: \"Continue\",\n            description: \"Login to\",\n            editEmailText: \"Edit\",\n            emailPlaceholder: \"Email address\",\n            federatedConnectionButtonText: \"Continue with ${connectionName}\",\n            footerLinkText: \"Sign up\",\n            footerText: \"Don't have an account?\",\n            forgotPasswordText: \"Forgot password?\",\n            invitationDescription: \"Log in to accept ${inviterName}'s invitation to join ${companyName} on ${clientName}.\",\n            invitationTitle: \"You've Been Invited!\",\n            logoAltText: \"${companyName}\",\n            pageTitle: \"Log in | ${clientName}\",\n            passwordPlaceholder: \"Password\",\n            separatorText: \"Or\",\n            signupActionLinkText: \"${footerLinkText}\",\n            signupActionText: \"${footerText}\",\n            title: \"Welcome\",\n            usernamePlaceholder: \"Username or email address\",\n        },\n    }),\n});\n```\n```python\nimport pulumi\nimport json\nimport pulumi_auth0 as auth0\n\nexample = auth0.PromptCustomText(\"example\",\n    prompt=\"login\",\n    language=\"en\",\n    body=json.dumps({\n        \"login\": {\n            \"alertListTitle\": \"Alerts\",\n            \"buttonText\": \"Continue\",\n            \"description\": \"Login to\",\n            \"editEmailText\": \"Edit\",\n            \"emailPlaceholder\": \"Email address\",\n            \"federatedConnectionButtonText\": \"Continue with ${connectionName}\",\n            \"footerLinkText\": \"Sign up\",\n            \"footerText\": \"Don't have an account?\",\n            \"forgotPasswordText\": \"Forgot password?\",\n            \"invitationDescription\": \"Log in to accept ${inviterName}'s invitation to join ${companyName} on ${clientName}.\",\n            \"invitationTitle\": \"You've Been Invited!\",\n            \"logoAltText\": \"${companyName}\",\n            \"pageTitle\": \"Log in | ${clientName}\",\n            \"passwordPlaceholder\": \"Password\",\n            \"separatorText\": \"Or\",\n            \"signupActionLinkText\": \"${footerLinkText}\",\n            \"signupActionText\": \"${footerText}\",\n            \"title\": \"Welcome\",\n            \"usernamePlaceholder\": \"Username or email address\",\n        },\n    }))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.Json;\nusing Pulumi;\nusing Auth0 = Pulumi.Auth0;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Auth0.PromptCustomText(\"example\", new()\n    {\n        Prompt = \"login\",\n        Language = \"en\",\n        Body = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n        {\n            [\"login\"] = new Dictionary\u003cstring, object?\u003e\n            {\n                [\"alertListTitle\"] = \"Alerts\",\n                [\"buttonText\"] = \"Continue\",\n                [\"description\"] = \"Login to\",\n                [\"editEmailText\"] = \"Edit\",\n                [\"emailPlaceholder\"] = \"Email address\",\n                [\"federatedConnectionButtonText\"] = \"Continue with ${connectionName}\",\n                [\"footerLinkText\"] = \"Sign up\",\n                [\"footerText\"] = \"Don't have an account?\",\n                [\"forgotPasswordText\"] = \"Forgot password?\",\n                [\"invitationDescription\"] = \"Log in to accept ${inviterName}'s invitation to join ${companyName} on ${clientName}.\",\n                [\"invitationTitle\"] = \"You've Been Invited!\",\n                [\"logoAltText\"] = \"${companyName}\",\n                [\"pageTitle\"] = \"Log in | ${clientName}\",\n                [\"passwordPlaceholder\"] = \"Password\",\n                [\"separatorText\"] = \"Or\",\n                [\"signupActionLinkText\"] = \"${footerLinkText}\",\n                [\"signupActionText\"] = \"${footerText}\",\n                [\"title\"] = \"Welcome\",\n                [\"usernamePlaceholder\"] = \"Username or email address\",\n            },\n        }),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/pulumi/pulumi-auth0/sdk/v3/go/auth0\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttmpJSON0, err := json.Marshal(map[string]interface{}{\n\t\t\t\"login\": map[string]interface{}{\n\t\t\t\t\"alertListTitle\":                \"Alerts\",\n\t\t\t\t\"buttonText\":                    \"Continue\",\n\t\t\t\t\"description\":                   \"Login to\",\n\t\t\t\t\"editEmailText\":                 \"Edit\",\n\t\t\t\t\"emailPlaceholder\":              \"Email address\",\n\t\t\t\t\"federatedConnectionButtonText\": \"Continue with ${connectionName}\",\n\t\t\t\t\"footerLinkText\":                \"Sign up\",\n\t\t\t\t\"footerText\":                    \"Don't have an account?\",\n\t\t\t\t\"forgotPasswordText\":            \"Forgot password?\",\n\t\t\t\t\"invitationDescription\":         \"Log in to accept ${inviterName}'s invitation to join ${companyName} on ${clientName}.\",\n\t\t\t\t\"invitationTitle\":               \"You've Been Invited!\",\n\t\t\t\t\"logoAltText\":                   \"${companyName}\",\n\t\t\t\t\"pageTitle\":                     \"Log in | ${clientName}\",\n\t\t\t\t\"passwordPlaceholder\":           \"Password\",\n\t\t\t\t\"separatorText\":                 \"Or\",\n\t\t\t\t\"signupActionLinkText\":          \"${footerLinkText}\",\n\t\t\t\t\"signupActionText\":              \"${footerText}\",\n\t\t\t\t\"title\":                         \"Welcome\",\n\t\t\t\t\"usernamePlaceholder\":           \"Username or email address\",\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson0 := string(tmpJSON0)\n\t\t_, err = auth0.NewPromptCustomText(ctx, \"example\", \u0026auth0.PromptCustomTextArgs{\n\t\t\tPrompt:   pulumi.String(\"login\"),\n\t\t\tLanguage: pulumi.String(\"en\"),\n\t\t\tBody:     pulumi.String(json0),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.auth0.PromptCustomText;\nimport com.pulumi.auth0.PromptCustomTextArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new PromptCustomText(\"example\", PromptCustomTextArgs.builder()        \n            .prompt(\"login\")\n            .language(\"en\")\n            .body(serializeJson(\n                jsonObject(\n                    jsonProperty(\"login\", jsonObject(\n                        jsonProperty(\"alertListTitle\", \"Alerts\"),\n                        jsonProperty(\"buttonText\", \"Continue\"),\n                        jsonProperty(\"description\", \"Login to\"),\n                        jsonProperty(\"editEmailText\", \"Edit\"),\n                        jsonProperty(\"emailPlaceholder\", \"Email address\"),\n                        jsonProperty(\"federatedConnectionButtonText\", \"Continue with ${connectionName}\"),\n                        jsonProperty(\"footerLinkText\", \"Sign up\"),\n                        jsonProperty(\"footerText\", \"Don't have an account?\"),\n                        jsonProperty(\"forgotPasswordText\", \"Forgot password?\"),\n                        jsonProperty(\"invitationDescription\", \"Log in to accept ${inviterName}'s invitation to join ${companyName} on ${clientName}.\"),\n                        jsonProperty(\"invitationTitle\", \"You've Been Invited!\"),\n                        jsonProperty(\"logoAltText\", \"${companyName}\"),\n                        jsonProperty(\"pageTitle\", \"Log in | ${clientName}\"),\n                        jsonProperty(\"passwordPlaceholder\", \"Password\"),\n                        jsonProperty(\"separatorText\", \"Or\"),\n                        jsonProperty(\"signupActionLinkText\", \"${footerLinkText}\"),\n                        jsonProperty(\"signupActionText\", \"${footerText}\"),\n                        jsonProperty(\"title\", \"Welcome\"),\n                        jsonProperty(\"usernamePlaceholder\", \"Username or email address\")\n                    ))\n                )))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: auth0:PromptCustomText\n    properties:\n      prompt: login\n      language: en\n      body:\n        fn::toJSON:\n          login:\n            alertListTitle: Alerts\n            buttonText: Continue\n            description: Login to\n            editEmailText: Edit\n            emailPlaceholder: Email address\n            federatedConnectionButtonText: Continue with ${connectionName}\n            footerLinkText: Sign up\n            footerText: Don't have an account?\n            forgotPasswordText: Forgot password?\n            invitationDescription: Log in to accept ${inviterName}'s invitation to join ${companyName} on ${clientName}.\n            invitationTitle: You've Been Invited!\n            logoAltText: ${companyName}\n            pageTitle: Log in | ${clientName}\n            passwordPlaceholder: Password\n            separatorText: Or\n            signupActionLinkText: ${footerLinkText}\n            signupActionText: ${footerText}\n            title: Welcome\n            usernamePlaceholder: Username or email address\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThis resource can be imported by specifying the prompt and language separated by \"::\" (note the double colon) \u003cprompt\u003e::\u003clanguage\u003e # Example\n\n```sh\n $ pulumi import auth0:index/promptCustomText:PromptCustomText example \"login::en\"\n```\n\n ",
            "properties": {
                "body": {
                    "type": "string",
                    "description": "JSON containing the custom texts. You can check the options for each prompt [here](https://auth0.com/docs/customize/universal-login-pages/customize-login-text-prompts#prompt-values).\n"
                },
                "language": {
                    "type": "string",
                    "description": "Language of the custom text. Options include: `ar`, `bg`, `bs`, `ca-ES`, `cs`, `cy`, `da`, `de`, `el`, `en`, `es`, `et`, `eu-ES`, `fi`, `fr`, `fr-CA`, `fr-FR`, `gl-ES`, `he`, `hi`, `hr`, `hu`, `id`, `is`, `it`, `ja`, `ko`, `lt`, `lv`, `nb`, `nl`, `nn`, `no`, `pl`, `pt`, `pt-BR`, `pt-PT`, `ro`, `ru`, `sk`, `sl`, `sr`, `sv`, `th`, `tr`, `uk`, `vi`, `zh-CN`, `zh-TW`.\n"
                },
                "prompt": {
                    "type": "string",
                    "description": "The term `prompt` is used to refer to a specific step in the login flow. Options include: `common`, `consent`, `device-flow`, `email-otp-challenge`, `email-verification`, `invitation`, `login`, `login-id`, `login-password`, `login-passwordless`, `login-email-verification`, `logout`, `mfa`, `mfa-email`, `mfa-otp`, `mfa-phone`, `mfa-push`, `mfa-recovery-code`, `mfa-sms`, `mfa-voice`, `mfa-webauthn`, `organizations`, `reset-password`, `signup`, `signup-id`, `signup-password`, `status`.\n"
                }
            },
            "required": [
                "body",
                "language",
                "prompt"
            ],
            "inputProperties": {
                "body": {
                    "type": "string",
                    "description": "JSON containing the custom texts. You can check the options for each prompt [here](https://auth0.com/docs/customize/universal-login-pages/customize-login-text-prompts#prompt-values).\n"
                },
                "language": {
                    "type": "string",
                    "description": "Language of the custom text. Options include: `ar`, `bg`, `bs`, `ca-ES`, `cs`, `cy`, `da`, `de`, `el`, `en`, `es`, `et`, `eu-ES`, `fi`, `fr`, `fr-CA`, `fr-FR`, `gl-ES`, `he`, `hi`, `hr`, `hu`, `id`, `is`, `it`, `ja`, `ko`, `lt`, `lv`, `nb`, `nl`, `nn`, `no`, `pl`, `pt`, `pt-BR`, `pt-PT`, `ro`, `ru`, `sk`, `sl`, `sr`, `sv`, `th`, `tr`, `uk`, `vi`, `zh-CN`, `zh-TW`.\n"
                },
                "prompt": {
                    "type": "string",
                    "description": "The term `prompt` is used to refer to a specific step in the login flow. Options include: `common`, `consent`, `device-flow`, `email-otp-challenge`, `email-verification`, `invitation`, `login`, `login-id`, `login-password`, `login-passwordless`, `login-email-verification`, `logout`, `mfa`, `mfa-email`, `mfa-otp`, `mfa-phone`, `mfa-push`, `mfa-recovery-code`, `mfa-sms`, `mfa-voice`, `mfa-webauthn`, `organizations`, `reset-password`, `signup`, `signup-id`, `signup-password`, `status`.\n"
                }
            },
            "requiredInputs": [
                "body",
                "language",
                "prompt"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PromptCustomText resources.\n",
                "properties": {
                    "body": {
                        "type": "string",
                        "description": "JSON containing the custom texts. You can check the options for each prompt [here](https://auth0.com/docs/customize/universal-login-pages/customize-login-text-prompts#prompt-values).\n"
                    },
                    "language": {
                        "type": "string",
                        "description": "Language of the custom text. Options include: `ar`, `bg`, `bs`, `ca-ES`, `cs`, `cy`, `da`, `de`, `el`, `en`, `es`, `et`, `eu-ES`, `fi`, `fr`, `fr-CA`, `fr-FR`, `gl-ES`, `he`, `hi`, `hr`, `hu`, `id`, `is`, `it`, `ja`, `ko`, `lt`, `lv`, `nb`, `nl`, `nn`, `no`, `pl`, `pt`, `pt-BR`, `pt-PT`, `ro`, `ru`, `sk`, `sl`, `sr`, `sv`, `th`, `tr`, `uk`, `vi`, `zh-CN`, `zh-TW`.\n"
                    },
                    "prompt": {
                        "type": "string",
                        "description": "The term `prompt` is used to refer to a specific step in the login flow. Options include: `common`, `consent`, `device-flow`, `email-otp-challenge`, `email-verification`, `invitation`, `login`, `login-id`, `login-password`, `login-passwordless`, `login-email-verification`, `logout`, `mfa`, `mfa-email`, `mfa-otp`, `mfa-phone`, `mfa-push`, `mfa-recovery-code`, `mfa-sms`, `mfa-voice`, `mfa-webauthn`, `organizations`, `reset-password`, `signup`, `signup-id`, `signup-password`, `status`.\n"
                    }
                },
                "type": "object"
            }
        },
        "auth0:index/resourceServer:ResourceServer": {
            "description": "With this resource, you can set up APIs that can be consumed from your authorized applications.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as auth0 from \"@pulumi/auth0\";\n\nconst myResourceServer = new auth0.ResourceServer(\"myResourceServer\", {\n    allowOfflineAccess: true,\n    identifier: \"https://api.example.com\",\n    signingAlg: \"RS256\",\n    skipConsentForVerifiableFirstPartyClients: true,\n    tokenLifetime: 8600,\n});\n```\n```python\nimport pulumi\nimport pulumi_auth0 as auth0\n\nmy_resource_server = auth0.ResourceServer(\"myResourceServer\",\n    allow_offline_access=True,\n    identifier=\"https://api.example.com\",\n    signing_alg=\"RS256\",\n    skip_consent_for_verifiable_first_party_clients=True,\n    token_lifetime=8600)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Auth0 = Pulumi.Auth0;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myResourceServer = new Auth0.ResourceServer(\"myResourceServer\", new()\n    {\n        AllowOfflineAccess = true,\n        Identifier = \"https://api.example.com\",\n        SigningAlg = \"RS256\",\n        SkipConsentForVerifiableFirstPartyClients = true,\n        TokenLifetime = 8600,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-auth0/sdk/v3/go/auth0\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := auth0.NewResourceServer(ctx, \"myResourceServer\", \u0026auth0.ResourceServerArgs{\n\t\t\tAllowOfflineAccess: pulumi.Bool(true),\n\t\t\tIdentifier:         pulumi.String(\"https://api.example.com\"),\n\t\t\tSigningAlg:         pulumi.String(\"RS256\"),\n\t\t\tSkipConsentForVerifiableFirstPartyClients: pulumi.Bool(true),\n\t\t\tTokenLifetime: pulumi.Int(8600),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.auth0.ResourceServer;\nimport com.pulumi.auth0.ResourceServerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myResourceServer = new ResourceServer(\"myResourceServer\", ResourceServerArgs.builder()        \n            .allowOfflineAccess(true)\n            .identifier(\"https://api.example.com\")\n            .signingAlg(\"RS256\")\n            .skipConsentForVerifiableFirstPartyClients(true)\n            .tokenLifetime(8600)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myResourceServer:\n    type: auth0:ResourceServer\n    properties:\n      allowOfflineAccess: true\n      identifier: https://api.example.com\n      signingAlg: RS256\n      skipConsentForVerifiableFirstPartyClients: true\n      tokenLifetime: 8600\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nExisting resource servers can be imported using their ID. # Example\n\n```sh\n $ pulumi import auth0:index/resourceServer:ResourceServer my_resource_server \"XXXXXXXXXXXXXXXXXXXXXXX\"\n```\n\n ",
            "properties": {
                "allowOfflineAccess": {
                    "type": "boolean",
                    "description": "Indicates whether refresh tokens can be issued for this resource server.\n"
                },
                "enforcePolicies": {
                    "type": "boolean",
                    "description": "If this setting is enabled, RBAC authorization policies will be enforced for this API. Role and permission assignments will be evaluated during the login transaction.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier for the resource server. Used as the audience parameter for authorization calls. Cannot be changed once set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Friendly name for the resource server. Cannot include `\u003c` or `\u003e` characters.\n"
                },
                "signingAlg": {
                    "type": "string",
                    "description": "Algorithm used to sign JWTs. Options include `HS256` and `RS256`.\n"
                },
                "signingSecret": {
                    "type": "string",
                    "description": "Secret used to sign tokens when using symmetric algorithms (HS256).\n"
                },
                "skipConsentForVerifiableFirstPartyClients": {
                    "type": "boolean",
                    "description": "Indicates whether to skip user consent for applications flagged as first party.\n"
                },
                "tokenDialect": {
                    "type": "string",
                    "description": "Dialect of access tokens that should be issued for this resource server. Options include `access_token` or `access_token_authz`. If this setting is set to `access_token_authz`, the Permissions claim will be added to the access token. Only available if RBAC (`enforce_policies`) is enabled for this API.\n"
                },
                "tokenLifetime": {
                    "type": "integer",
                    "description": "Number of seconds during which access tokens issued for this resource server from the token endpoint remain valid.\n"
                },
                "tokenLifetimeForWeb": {
                    "type": "integer",
                    "description": "Number of seconds during which access tokens issued for this resource server via implicit or hybrid flows remain valid. Cannot be greater than the `token_lifetime` value.\n"
                },
                "verificationLocation": {
                    "type": "string",
                    "description": "URL from which to retrieve JWKs for this resource server. Used for verifying the JWT sent to Auth0 for token introspection.\n"
                }
            },
            "required": [
                "enforcePolicies",
                "identifier",
                "name",
                "signingAlg",
                "signingSecret",
                "skipConsentForVerifiableFirstPartyClients",
                "tokenLifetime",
                "tokenLifetimeForWeb"
            ],
            "inputProperties": {
                "allowOfflineAccess": {
                    "type": "boolean",
                    "description": "Indicates whether refresh tokens can be issued for this resource server.\n"
                },
                "enforcePolicies": {
                    "type": "boolean",
                    "description": "If this setting is enabled, RBAC authorization policies will be enforced for this API. Role and permission assignments will be evaluated during the login transaction.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier for the resource server. Used as the audience parameter for authorization calls. Cannot be changed once set.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Friendly name for the resource server. Cannot include `\u003c` or `\u003e` characters.\n"
                },
                "signingAlg": {
                    "type": "string",
                    "description": "Algorithm used to sign JWTs. Options include `HS256` and `RS256`.\n"
                },
                "signingSecret": {
                    "type": "string",
                    "description": "Secret used to sign tokens when using symmetric algorithms (HS256).\n"
                },
                "skipConsentForVerifiableFirstPartyClients": {
                    "type": "boolean",
                    "description": "Indicates whether to skip user consent for applications flagged as first party.\n"
                },
                "tokenDialect": {
                    "type": "string",
                    "description": "Dialect of access tokens that should be issued for this resource server. Options include `access_token` or `access_token_authz`. If this setting is set to `access_token_authz`, the Permissions claim will be added to the access token. Only available if RBAC (`enforce_policies`) is enabled for this API.\n"
                },
                "tokenLifetime": {
                    "type": "integer",
                    "description": "Number of seconds during which access tokens issued for this resource server from the token endpoint remain valid.\n"
                },
                "tokenLifetimeForWeb": {
                    "type": "integer",
                    "description": "Number of seconds during which access tokens issued for this resource server via implicit or hybrid flows remain valid. Cannot be greater than the `token_lifetime` value.\n"
                },
                "verificationLocation": {
                    "type": "string",
                    "description": "URL from which to retrieve JWKs for this resource server. Used for verifying the JWT sent to Auth0 for token introspection.\n"
                }
            },
            "requiredInputs": [
                "identifier"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ResourceServer resources.\n",
                "properties": {
                    "allowOfflineAccess": {
                        "type": "boolean",
                        "description": "Indicates whether refresh tokens can be issued for this resource server.\n"
                    },
                    "enforcePolicies": {
                        "type": "boolean",
                        "description": "If this setting is enabled, RBAC authorization policies will be enforced for this API. Role and permission assignments will be evaluated during the login transaction.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier for the resource server. Used as the audience parameter for authorization calls. Cannot be changed once set.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Friendly name for the resource server. Cannot include `\u003c` or `\u003e` characters.\n"
                    },
                    "signingAlg": {
                        "type": "string",
                        "description": "Algorithm used to sign JWTs. Options include `HS256` and `RS256`.\n"
                    },
                    "signingSecret": {
                        "type": "string",
                        "description": "Secret used to sign tokens when using symmetric algorithms (HS256).\n"
                    },
                    "skipConsentForVerifiableFirstPartyClients": {
                        "type": "boolean",
                        "description": "Indicates whether to skip user consent for applications flagged as first party.\n"
                    },
                    "tokenDialect": {
                        "type": "string",
                        "description": "Dialect of access tokens that should be issued for this resource server. Options include `access_token` or `access_token_authz`. If this setting is set to `access_token_authz`, the Permissions claim will be added to the access token. Only available if RBAC (`enforce_policies`) is enabled for this API.\n"
                    },
                    "tokenLifetime": {
                        "type": "integer",
                        "description": "Number of seconds during which access tokens issued for this resource server from the token endpoint remain valid.\n"
                    },
                    "tokenLifetimeForWeb": {
                        "type": "integer",
                        "description": "Number of seconds during which access tokens issued for this resource server via implicit or hybrid flows remain valid. Cannot be greater than the `token_lifetime` value.\n"
                    },
                    "verificationLocation": {
                        "type": "string",
                        "description": "URL from which to retrieve JWKs for this resource server. Used for verifying the JWT sent to Auth0 for token introspection.\n"
                    }
                },
                "type": "object"
            }
        },
        "auth0:index/resourceServerScope:ResourceServerScope": {
            "description": "With this resource, you can manage scopes (permissions) associated with a resource server (API).\n\n!\u003e This resource appends a scope to a resource server. In contrast, the `auth0.ResourceServerScopes` resource manages\nall the scopes assigned to a resource server. To avoid potential issues, it is recommended not to use this resource in\nconjunction with the `auth0.ResourceServerScopes` resource when managing scopes for the same resource server id.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as auth0 from \"@pulumi/auth0\";\n\nconst resourceServer = new auth0.ResourceServer(\"resourceServer\", {identifier: \"https://api.example.com\"});\nconst readPosts = new auth0.ResourceServerScope(\"readPosts\", {\n    resourceServerIdentifier: resourceServer.identifier,\n    scope: \"read:posts\",\n});\nconst writePosts = new auth0.ResourceServerScope(\"writePosts\", {\n    resourceServerIdentifier: resourceServer.identifier,\n    scope: \"write:posts\",\n});\n```\n```python\nimport pulumi\nimport pulumi_auth0 as auth0\n\nresource_server = auth0.ResourceServer(\"resourceServer\", identifier=\"https://api.example.com\")\nread_posts = auth0.ResourceServerScope(\"readPosts\",\n    resource_server_identifier=resource_server.identifier,\n    scope=\"read:posts\")\nwrite_posts = auth0.ResourceServerScope(\"writePosts\",\n    resource_server_identifier=resource_server.identifier,\n    scope=\"write:posts\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Auth0 = Pulumi.Auth0;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var resourceServer = new Auth0.ResourceServer(\"resourceServer\", new()\n    {\n        Identifier = \"https://api.example.com\",\n    });\n\n    var readPosts = new Auth0.ResourceServerScope(\"readPosts\", new()\n    {\n        ResourceServerIdentifier = resourceServer.Identifier,\n        Scope = \"read:posts\",\n    });\n\n    var writePosts = new Auth0.ResourceServerScope(\"writePosts\", new()\n    {\n        ResourceServerIdentifier = resourceServer.Identifier,\n        Scope = \"write:posts\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-auth0/sdk/v3/go/auth0\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tresourceServer, err := auth0.NewResourceServer(ctx, \"resourceServer\", \u0026auth0.ResourceServerArgs{\n\t\t\tIdentifier: pulumi.String(\"https://api.example.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = auth0.NewResourceServerScope(ctx, \"readPosts\", \u0026auth0.ResourceServerScopeArgs{\n\t\t\tResourceServerIdentifier: resourceServer.Identifier,\n\t\t\tScope:                    pulumi.String(\"read:posts\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = auth0.NewResourceServerScope(ctx, \"writePosts\", \u0026auth0.ResourceServerScopeArgs{\n\t\t\tResourceServerIdentifier: resourceServer.Identifier,\n\t\t\tScope:                    pulumi.String(\"write:posts\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.auth0.ResourceServer;\nimport com.pulumi.auth0.ResourceServerArgs;\nimport com.pulumi.auth0.ResourceServerScope;\nimport com.pulumi.auth0.ResourceServerScopeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var resourceServer = new ResourceServer(\"resourceServer\", ResourceServerArgs.builder()        \n            .identifier(\"https://api.example.com\")\n            .build());\n\n        var readPosts = new ResourceServerScope(\"readPosts\", ResourceServerScopeArgs.builder()        \n            .resourceServerIdentifier(resourceServer.identifier())\n            .scope(\"read:posts\")\n            .build());\n\n        var writePosts = new ResourceServerScope(\"writePosts\", ResourceServerScopeArgs.builder()        \n            .resourceServerIdentifier(resourceServer.identifier())\n            .scope(\"write:posts\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  resourceServer:\n    type: auth0:ResourceServer\n    properties:\n      identifier: https://api.example.com\n  readPosts:\n    type: auth0:ResourceServerScope\n    properties:\n      resourceServerIdentifier: ${resourceServer.identifier}\n      scope: read:posts\n  writePosts:\n    type: auth0:ResourceServerScope\n    properties:\n      resourceServerIdentifier: ${resourceServer.identifier}\n      scope: write:posts\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThis resource can be imported by specifying the resource identifier and scope name separated by \"::\" (note the double colon) \u003cresourceServerIdentifier\u003e::\u003cscope\u003e # Example\n\n```sh\n $ pulumi import auth0:index/resourceServerScope:ResourceServerScope scope \"https://api.travel0.com/v1::read:posts\"\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the scope (permission).\n"
                },
                "resourceServerIdentifier": {
                    "type": "string",
                    "description": "Identifier of the resource server that the scope (permission) is associated with.\n"
                },
                "scope": {
                    "type": "string",
                    "description": "Name of the scope (permission).\n"
                }
            },
            "required": [
                "resourceServerIdentifier",
                "scope"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the scope (permission).\n"
                },
                "resourceServerIdentifier": {
                    "type": "string",
                    "description": "Identifier of the resource server that the scope (permission) is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "scope": {
                    "type": "string",
                    "description": "Name of the scope (permission).\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "resourceServerIdentifier",
                "scope"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ResourceServerScope resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the scope (permission).\n"
                    },
                    "resourceServerIdentifier": {
                        "type": "string",
                        "description": "Identifier of the resource server that the scope (permission) is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "scope": {
                        "type": "string",
                        "description": "Name of the scope (permission).\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "auth0:index/resourceServerScopes:ResourceServerScopes": {
            "description": "With this resource, you can manage scopes (permissions) associated with a resource server (API).\n\n!\u003e This resource manages all the scopes assigned to a resource server. In contrast, the `auth0.ResourceServerScope`\nresource only appends a scope to a resource server. To avoid potential issues, it is recommended not to use this\nresource in conjunction with the `auth0.ResourceServerScope` resource when managing scopes for the same resource\nserver id.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as auth0 from \"@pulumi/auth0\";\n\nconst myApi = new auth0.ResourceServer(\"myApi\", {identifier: \"https://api.example.com\"});\nconst myApiScopes = new auth0.ResourceServerScopes(\"myApiScopes\", {\n    resourceServerIdentifier: myApi.identifier,\n    scopes: [\n        {\n            name: \"create:appointments\",\n            description: \"Ability to create appointments\",\n        },\n        {\n            name: \"read:appointments\",\n            description: \"Ability to read appointments\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_auth0 as auth0\n\nmy_api = auth0.ResourceServer(\"myApi\", identifier=\"https://api.example.com\")\nmy_api_scopes = auth0.ResourceServerScopes(\"myApiScopes\",\n    resource_server_identifier=my_api.identifier,\n    scopes=[\n        auth0.ResourceServerScopesScopeArgs(\n            name=\"create:appointments\",\n            description=\"Ability to create appointments\",\n        ),\n        auth0.ResourceServerScopesScopeArgs(\n            name=\"read:appointments\",\n            description=\"Ability to read appointments\",\n        ),\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Auth0 = Pulumi.Auth0;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myApi = new Auth0.ResourceServer(\"myApi\", new()\n    {\n        Identifier = \"https://api.example.com\",\n    });\n\n    var myApiScopes = new Auth0.ResourceServerScopes(\"myApiScopes\", new()\n    {\n        ResourceServerIdentifier = myApi.Identifier,\n        Scopes = new[]\n        {\n            new Auth0.Inputs.ResourceServerScopesScopeArgs\n            {\n                Name = \"create:appointments\",\n                Description = \"Ability to create appointments\",\n            },\n            new Auth0.Inputs.ResourceServerScopesScopeArgs\n            {\n                Name = \"read:appointments\",\n                Description = \"Ability to read appointments\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-auth0/sdk/v3/go/auth0\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyApi, err := auth0.NewResourceServer(ctx, \"myApi\", \u0026auth0.ResourceServerArgs{\n\t\t\tIdentifier: pulumi.String(\"https://api.example.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = auth0.NewResourceServerScopes(ctx, \"myApiScopes\", \u0026auth0.ResourceServerScopesArgs{\n\t\t\tResourceServerIdentifier: myApi.Identifier,\n\t\t\tScopes: auth0.ResourceServerScopesScopeArray{\n\t\t\t\t\u0026auth0.ResourceServerScopesScopeArgs{\n\t\t\t\t\tName:        pulumi.String(\"create:appointments\"),\n\t\t\t\t\tDescription: pulumi.String(\"Ability to create appointments\"),\n\t\t\t\t},\n\t\t\t\t\u0026auth0.ResourceServerScopesScopeArgs{\n\t\t\t\t\tName:        pulumi.String(\"read:appointments\"),\n\t\t\t\t\tDescription: pulumi.String(\"Ability to read appointments\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.auth0.ResourceServer;\nimport com.pulumi.auth0.ResourceServerArgs;\nimport com.pulumi.auth0.ResourceServerScopes;\nimport com.pulumi.auth0.ResourceServerScopesArgs;\nimport com.pulumi.auth0.inputs.ResourceServerScopesScopeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myApi = new ResourceServer(\"myApi\", ResourceServerArgs.builder()        \n            .identifier(\"https://api.example.com\")\n            .build());\n\n        var myApiScopes = new ResourceServerScopes(\"myApiScopes\", ResourceServerScopesArgs.builder()        \n            .resourceServerIdentifier(myApi.identifier())\n            .scopes(            \n                ResourceServerScopesScopeArgs.builder()\n                    .name(\"create:appointments\")\n                    .description(\"Ability to create appointments\")\n                    .build(),\n                ResourceServerScopesScopeArgs.builder()\n                    .name(\"read:appointments\")\n                    .description(\"Ability to read appointments\")\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myApi:\n    type: auth0:ResourceServer\n    properties:\n      identifier: https://api.example.com\n  myApiScopes:\n    type: auth0:ResourceServerScopes\n    properties:\n      resourceServerIdentifier: ${myApi.identifier}\n      scopes:\n        - name: create:appointments\n          description: Ability to create appointments\n        - name: read:appointments\n          description: Ability to read appointments\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThis resource can be imported by specifying the resource server identifier. # Example\n\n```sh\n $ pulumi import auth0:index/resourceServerScopes:ResourceServerScopes my_api_scopes \"https://api.travel0.com/v1\"\n```\n\n ",
            "properties": {
                "resourceServerIdentifier": {
                    "type": "string",
                    "description": "Identifier of the resource server that the scopes (permission) are associated with.\n"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/auth0:index/ResourceServerScopesScope:ResourceServerScopesScope"
                    }
                }
            },
            "required": [
                "resourceServerIdentifier",
                "scopes"
            ],
            "inputProperties": {
                "resourceServerIdentifier": {
                    "type": "string",
                    "description": "Identifier of the resource server that the scopes (permission) are associated with.\n",
                    "willReplaceOnChanges": true
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/auth0:index/ResourceServerScopesScope:ResourceServerScopesScope"
                    }
                }
            },
            "requiredInputs": [
                "resourceServerIdentifier",
                "scopes"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ResourceServerScopes resources.\n",
                "properties": {
                    "resourceServerIdentifier": {
                        "type": "string",
                        "description": "Identifier of the resource server that the scopes (permission) are associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "scopes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/auth0:index/ResourceServerScopesScope:ResourceServerScopesScope"
                        }
                    }
                },
                "type": "object"
            }
        },
        "auth0:index/role:Role": {
            "description": "With this resource, you can create and manage collections of permissions that can be assigned to users, which are otherwise known as roles. Permissions (scopes) are created on `auth0.ResourceServer`, then associated with roles and optionally, users using this resource.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as auth0 from \"@pulumi/auth0\";\n\nconst myRole = new auth0.Role(\"myRole\", {description: \"Role Description...\"});\n```\n```python\nimport pulumi\nimport pulumi_auth0 as auth0\n\nmy_role = auth0.Role(\"myRole\", description=\"Role Description...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Auth0 = Pulumi.Auth0;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myRole = new Auth0.Role(\"myRole\", new()\n    {\n        Description = \"Role Description...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-auth0/sdk/v3/go/auth0\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := auth0.NewRole(ctx, \"myRole\", \u0026auth0.RoleArgs{\n\t\t\tDescription: pulumi.String(\"Role Description...\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.auth0.Role;\nimport com.pulumi.auth0.RoleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myRole = new Role(\"myRole\", RoleArgs.builder()        \n            .description(\"Role Description...\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myRole:\n    type: auth0:Role\n    properties:\n      description: Role Description...\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nExisting roles can be imported using their ID. # Example\n\n```sh\n $ pulumi import auth0:index/role:Role my_role \"XXXXXXXXXXXXXXXXXXXXXXX\"\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the role.\n",
                    "default": "Managed by Pulumi"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the role.\n"
                }
            },
            "required": [
                "description",
                "name"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the role.\n",
                    "default": "Managed by Pulumi"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the role.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Role resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the role.\n",
                        "default": "Managed by Pulumi"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the role.\n"
                    }
                },
                "type": "object"
            }
        },
        "auth0:index/rolePermission:RolePermission": {
            "description": "With this resource, you can manage role permissions (1-1).\n\n!\u003e This resource appends a permission to a role. In contrast, the `auth0.RolePermissions` resource manages all the\npermissions assigned to a role. To avoid potential issues, it is recommended not to use this resource in conjunction\nwith the `auth0.RolePermissions` resource when managing permissions for the same role id.\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the permission.\n"
                },
                "permission": {
                    "type": "string",
                    "description": "Name of the permission.\n"
                },
                "resourceServerIdentifier": {
                    "type": "string",
                    "description": "Identifier of the resource server that the permission is associated with.\n"
                },
                "resourceServerName": {
                    "type": "string",
                    "description": "Name of the resource server that the permission is associated with.\n"
                },
                "roleId": {
                    "type": "string",
                    "description": "ID of the role to associate the permission to.\n"
                }
            },
            "required": [
                "description",
                "permission",
                "resourceServerIdentifier",
                "resourceServerName",
                "roleId"
            ],
            "inputProperties": {
                "permission": {
                    "type": "string",
                    "description": "Name of the permission.\n",
                    "willReplaceOnChanges": true
                },
                "resourceServerIdentifier": {
                    "type": "string",
                    "description": "Identifier of the resource server that the permission is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "roleId": {
                    "type": "string",
                    "description": "ID of the role to associate the permission to.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "permission",
                "resourceServerIdentifier",
                "roleId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RolePermission resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the permission.\n"
                    },
                    "permission": {
                        "type": "string",
                        "description": "Name of the permission.\n",
                        "willReplaceOnChanges": true
                    },
                    "resourceServerIdentifier": {
                        "type": "string",
                        "description": "Identifier of the resource server that the permission is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "resourceServerName": {
                        "type": "string",
                        "description": "Name of the resource server that the permission is associated with.\n"
                    },
                    "roleId": {
                        "type": "string",
                        "description": "ID of the role to associate the permission to.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "auth0:index/rolePermissions:RolePermissions": {
            "description": "With this resource, you can manage role permissions (1-many).\n\n!\u003e This resource manages all the permissions assigned to a role. In contrast, the `auth0.RolePermission` resource only\nappends a permission to a role. To avoid potential issues, it is recommended not to use this resource in conjunction\nwith the `auth0.RolePermission` resource when managing permissions for the same role id.\n",
            "properties": {
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/auth0:index/RolePermissionsPermission:RolePermissionsPermission"
                    },
                    "description": "List of API permissions granted to the role.\n"
                },
                "roleId": {
                    "type": "string",
                    "description": "ID of the role to associate the permission to.\n"
                }
            },
            "required": [
                "permissions",
                "roleId"
            ],
            "inputProperties": {
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/auth0:index/RolePermissionsPermission:RolePermissionsPermission"
                    },
                    "description": "List of API permissions granted to the role.\n"
                },
                "roleId": {
                    "type": "string",
                    "description": "ID of the role to associate the permission to.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "permissions",
                "roleId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RolePermissions resources.\n",
                "properties": {
                    "permissions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/auth0:index/RolePermissionsPermission:RolePermissionsPermission"
                        },
                        "description": "List of API permissions granted to the role.\n"
                    },
                    "roleId": {
                        "type": "string",
                        "description": "ID of the role to associate the permission to.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "auth0:index/rule:Rule": {
            "description": "With Auth0, you can create custom Javascript snippets that run in a secure, isolated sandbox as part of your authentication pipeline, which are otherwise known as rules. This resource allows you to create and manage rules. You can create global variable for use with rules by using the `auth0.RuleConfig` resource.\n\n!\u003e This resource is deprecated. Refer to the [guide on how to migrate from rules to actions](https://auth0.com/docs/customize/actions/migrate/migrate-from-rules-to-actions) and manage your actions using the `auth0.Action` resource.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as auth0 from \"@pulumi/auth0\";\n\nconst myRule = new auth0.Rule(\"myRule\", {\n    enabled: true,\n    script: `    function (user, context, callback) {\n      callback(null, user, context);\n    }\n  \n`,\n});\n```\n```python\nimport pulumi\nimport pulumi_auth0 as auth0\n\nmy_rule = auth0.Rule(\"myRule\",\n    enabled=True,\n    script=\"\"\"    function (user, context, callback) {\n      callback(null, user, context);\n    }\n  \n\"\"\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Auth0 = Pulumi.Auth0;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myRule = new Auth0.Rule(\"myRule\", new()\n    {\n        Enabled = true,\n        Script = @\"    function (user, context, callback) {\n      callback(null, user, context);\n    }\n  \n\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-auth0/sdk/v3/go/auth0\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := auth0.NewRule(ctx, \"myRule\", \u0026auth0.RuleArgs{\n\t\t\tEnabled: pulumi.Bool(true),\n\t\t\tScript:  pulumi.String(\"    function (user, context, callback) {\\n      callback(null, user, context);\\n    }\\n  \\n\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.auth0.Rule;\nimport com.pulumi.auth0.RuleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myRule = new Rule(\"myRule\", RuleArgs.builder()        \n            .enabled(true)\n            .script(\"\"\"\n    function (user, context, callback) {\n      callback(null, user, context);\n    }\n  \n            \"\"\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myRule:\n    type: auth0:Rule\n    properties:\n      enabled: true\n      script: \"    function (user, context, callback) {\\n      callback(null, user, context);\\n    }\\n  \\n\"\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nExisting rules can be imported using their ID. # Example\n\n```sh\n $ pulumi import auth0:index/rule:Rule my_rule \"rul_XXXXXXXXXXXXX\"\n```\n\n ",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Indicates whether the rule is enabled.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the rule. May only contain alphanumeric characters, spaces, and hyphens. May neither start nor end with hyphens or spaces.\n"
                },
                "order": {
                    "type": "integer",
                    "description": "Order in which the rule executes relative to other rules. Lower-valued rules execute first.\n"
                },
                "script": {
                    "type": "string",
                    "description": "Code to be executed when the rule runs.\n"
                }
            },
            "required": [
                "enabled",
                "name",
                "order",
                "script"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Indicates whether the rule is enabled.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the rule. May only contain alphanumeric characters, spaces, and hyphens. May neither start nor end with hyphens or spaces.\n"
                },
                "order": {
                    "type": "integer",
                    "description": "Order in which the rule executes relative to other rules. Lower-valued rules execute first.\n"
                },
                "script": {
                    "type": "string",
                    "description": "Code to be executed when the rule runs.\n"
                }
            },
            "requiredInputs": [
                "script"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Rule resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Indicates whether the rule is enabled.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the rule. May only contain alphanumeric characters, spaces, and hyphens. May neither start nor end with hyphens or spaces.\n"
                    },
                    "order": {
                        "type": "integer",
                        "description": "Order in which the rule executes relative to other rules. Lower-valued rules execute first.\n"
                    },
                    "script": {
                        "type": "string",
                        "description": "Code to be executed when the rule runs.\n"
                    }
                },
                "type": "object"
            }
        },
        "auth0:index/ruleConfig:RuleConfig": {
            "description": "With Auth0, you can create custom Javascript snippets that run in a secure, isolated sandbox as part of your authentication pipeline, which are otherwise known as rules. This resource allows you to create and manage variables that are available to all rules via Auth0's global configuration object. Used in conjunction with configured rules.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as auth0 from \"@pulumi/auth0\";\n\nconst myRule = new auth0.Rule(\"myRule\", {\n    enabled: true,\n    script: `    function (user, context, callback) {\n      callback(null, user, context);\n    }\n  \n`,\n});\nconst myRuleConfig = new auth0.RuleConfig(\"myRuleConfig\", {\n    key: \"foo\",\n    value: \"bar\",\n});\n```\n```python\nimport pulumi\nimport pulumi_auth0 as auth0\n\nmy_rule = auth0.Rule(\"myRule\",\n    enabled=True,\n    script=\"\"\"    function (user, context, callback) {\n      callback(null, user, context);\n    }\n  \n\"\"\")\nmy_rule_config = auth0.RuleConfig(\"myRuleConfig\",\n    key=\"foo\",\n    value=\"bar\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Auth0 = Pulumi.Auth0;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myRule = new Auth0.Rule(\"myRule\", new()\n    {\n        Enabled = true,\n        Script = @\"    function (user, context, callback) {\n      callback(null, user, context);\n    }\n  \n\",\n    });\n\n    var myRuleConfig = new Auth0.RuleConfig(\"myRuleConfig\", new()\n    {\n        Key = \"foo\",\n        Value = \"bar\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-auth0/sdk/v3/go/auth0\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := auth0.NewRule(ctx, \"myRule\", \u0026auth0.RuleArgs{\n\t\t\tEnabled: pulumi.Bool(true),\n\t\t\tScript:  pulumi.String(\"    function (user, context, callback) {\\n      callback(null, user, context);\\n    }\\n  \\n\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = auth0.NewRuleConfig(ctx, \"myRuleConfig\", \u0026auth0.RuleConfigArgs{\n\t\t\tKey:   pulumi.String(\"foo\"),\n\t\t\tValue: pulumi.String(\"bar\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.auth0.Rule;\nimport com.pulumi.auth0.RuleArgs;\nimport com.pulumi.auth0.RuleConfig;\nimport com.pulumi.auth0.RuleConfigArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myRule = new Rule(\"myRule\", RuleArgs.builder()        \n            .enabled(true)\n            .script(\"\"\"\n    function (user, context, callback) {\n      callback(null, user, context);\n    }\n  \n            \"\"\")\n            .build());\n\n        var myRuleConfig = new RuleConfig(\"myRuleConfig\", RuleConfigArgs.builder()        \n            .key(\"foo\")\n            .value(\"bar\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myRule:\n    type: auth0:Rule\n    properties:\n      enabled: true\n      script: \"    function (user, context, callback) {\\n      callback(null, user, context);\\n    }\\n  \\n\"\n  myRuleConfig:\n    type: auth0:RuleConfig\n    properties:\n      key: foo\n      value: bar\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nExisting rule configs can be imported using their key name. # Example\n\n```sh\n $ pulumi import auth0:index/ruleConfig:RuleConfig my_rule_config \"foo\"\n```\n\n ",
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Key for a rules configuration variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value for a rules configuration variable.\n",
                    "secret": true
                }
            },
            "required": [
                "key",
                "value"
            ],
            "inputProperties": {
                "key": {
                    "type": "string",
                    "description": "Key for a rules configuration variable.\n",
                    "willReplaceOnChanges": true
                },
                "value": {
                    "type": "string",
                    "description": "Value for a rules configuration variable.\n",
                    "secret": true
                }
            },
            "requiredInputs": [
                "key",
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RuleConfig resources.\n",
                "properties": {
                    "key": {
                        "type": "string",
                        "description": "Key for a rules configuration variable.\n",
                        "willReplaceOnChanges": true
                    },
                    "value": {
                        "type": "string",
                        "description": "Value for a rules configuration variable.\n",
                        "secret": true
                    }
                },
                "type": "object"
            }
        },
        "auth0:index/tenant:Tenant": {
            "description": "With this resource, you can manage Auth0 tenants, including setting logos and support contact information, setting error pages, and configuring default tenant behaviors.\n\n\u003e Creating tenants through the Management API is not currently supported. Therefore, this resource can only\nmanage an existing tenant created through the Auth0 dashboard.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as auth0 from \"@pulumi/auth0\";\n\nconst myTenant = new auth0.Tenant(\"myTenant\", {\n    allowedLogoutUrls: [\"http://example.com/logout\"],\n    defaultRedirectionUri: \"https://example.com/login\",\n    enabledLocales: [\"en\"],\n    flags: {\n        disableClickjackProtectionHeaders: true,\n        disableFieldsMapFix: false,\n        disableManagementApiSmsObfuscation: false,\n        enablePublicSignupUserExistsError: true,\n        noDiscloseEnterpriseConnections: false,\n        useScopeDescriptionsForConsent: true,\n    },\n    friendlyName: \"Tenant Name\",\n    pictureUrl: \"http://example.com/logo.png\",\n    sandboxVersion: \"12\",\n    sessionCookie: {\n        mode: \"non-persistent\",\n    },\n    sessionLifetime: 8760,\n    sessions: {\n        oidcLogoutPromptEnabled: false,\n    },\n    supportEmail: \"support@example.com\",\n    supportUrl: \"http://example.com/support\",\n});\n```\n```python\nimport pulumi\nimport pulumi_auth0 as auth0\n\nmy_tenant = auth0.Tenant(\"myTenant\",\n    allowed_logout_urls=[\"http://example.com/logout\"],\n    default_redirection_uri=\"https://example.com/login\",\n    enabled_locales=[\"en\"],\n    flags=auth0.TenantFlagsArgs(\n        disable_clickjack_protection_headers=True,\n        disable_fields_map_fix=False,\n        disable_management_api_sms_obfuscation=False,\n        enable_public_signup_user_exists_error=True,\n        no_disclose_enterprise_connections=False,\n        use_scope_descriptions_for_consent=True,\n    ),\n    friendly_name=\"Tenant Name\",\n    picture_url=\"http://example.com/logo.png\",\n    sandbox_version=\"12\",\n    session_cookie=auth0.TenantSessionCookieArgs(\n        mode=\"non-persistent\",\n    ),\n    session_lifetime=8760,\n    sessions=auth0.TenantSessionsArgs(\n        oidc_logout_prompt_enabled=False,\n    ),\n    support_email=\"support@example.com\",\n    support_url=\"http://example.com/support\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Auth0 = Pulumi.Auth0;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myTenant = new Auth0.Tenant(\"myTenant\", new()\n    {\n        AllowedLogoutUrls = new[]\n        {\n            \"http://example.com/logout\",\n        },\n        DefaultRedirectionUri = \"https://example.com/login\",\n        EnabledLocales = new[]\n        {\n            \"en\",\n        },\n        Flags = new Auth0.Inputs.TenantFlagsArgs\n        {\n            DisableClickjackProtectionHeaders = true,\n            DisableFieldsMapFix = false,\n            DisableManagementApiSmsObfuscation = false,\n            EnablePublicSignupUserExistsError = true,\n            NoDiscloseEnterpriseConnections = false,\n            UseScopeDescriptionsForConsent = true,\n        },\n        FriendlyName = \"Tenant Name\",\n        PictureUrl = \"http://example.com/logo.png\",\n        SandboxVersion = \"12\",\n        SessionCookie = new Auth0.Inputs.TenantSessionCookieArgs\n        {\n            Mode = \"non-persistent\",\n        },\n        SessionLifetime = 8760,\n        Sessions = new Auth0.Inputs.TenantSessionsArgs\n        {\n            OidcLogoutPromptEnabled = false,\n        },\n        SupportEmail = \"support@example.com\",\n        SupportUrl = \"http://example.com/support\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-auth0/sdk/v3/go/auth0\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := auth0.NewTenant(ctx, \"myTenant\", \u0026auth0.TenantArgs{\n\t\t\tAllowedLogoutUrls: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"http://example.com/logout\"),\n\t\t\t},\n\t\t\tDefaultRedirectionUri: pulumi.String(\"https://example.com/login\"),\n\t\t\tEnabledLocales: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"en\"),\n\t\t\t},\n\t\t\tFlags: \u0026auth0.TenantFlagsArgs{\n\t\t\t\tDisableClickjackProtectionHeaders:  pulumi.Bool(true),\n\t\t\t\tDisableFieldsMapFix:                pulumi.Bool(false),\n\t\t\t\tDisableManagementApiSmsObfuscation: pulumi.Bool(false),\n\t\t\t\tEnablePublicSignupUserExistsError:  pulumi.Bool(true),\n\t\t\t\tNoDiscloseEnterpriseConnections:    pulumi.Bool(false),\n\t\t\t\tUseScopeDescriptionsForConsent:     pulumi.Bool(true),\n\t\t\t},\n\t\t\tFriendlyName:   pulumi.String(\"Tenant Name\"),\n\t\t\tPictureUrl:     pulumi.String(\"http://example.com/logo.png\"),\n\t\t\tSandboxVersion: pulumi.String(\"12\"),\n\t\t\tSessionCookie: \u0026auth0.TenantSessionCookieArgs{\n\t\t\t\tMode: pulumi.String(\"non-persistent\"),\n\t\t\t},\n\t\t\tSessionLifetime: pulumi.Float64(8760),\n\t\t\tSessions: \u0026auth0.TenantSessionsArgs{\n\t\t\t\tOidcLogoutPromptEnabled: pulumi.Bool(false),\n\t\t\t},\n\t\t\tSupportEmail: pulumi.String(\"support@example.com\"),\n\t\t\tSupportUrl:   pulumi.String(\"http://example.com/support\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.auth0.Tenant;\nimport com.pulumi.auth0.TenantArgs;\nimport com.pulumi.auth0.inputs.TenantFlagsArgs;\nimport com.pulumi.auth0.inputs.TenantSessionCookieArgs;\nimport com.pulumi.auth0.inputs.TenantSessionsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myTenant = new Tenant(\"myTenant\", TenantArgs.builder()        \n            .allowedLogoutUrls(\"http://example.com/logout\")\n            .defaultRedirectionUri(\"https://example.com/login\")\n            .enabledLocales(\"en\")\n            .flags(TenantFlagsArgs.builder()\n                .disableClickjackProtectionHeaders(true)\n                .disableFieldsMapFix(false)\n                .disableManagementApiSmsObfuscation(false)\n                .enablePublicSignupUserExistsError(true)\n                .noDiscloseEnterpriseConnections(false)\n                .useScopeDescriptionsForConsent(true)\n                .build())\n            .friendlyName(\"Tenant Name\")\n            .pictureUrl(\"http://example.com/logo.png\")\n            .sandboxVersion(\"12\")\n            .sessionCookie(TenantSessionCookieArgs.builder()\n                .mode(\"non-persistent\")\n                .build())\n            .sessionLifetime(8760)\n            .sessions(TenantSessionsArgs.builder()\n                .oidcLogoutPromptEnabled(false)\n                .build())\n            .supportEmail(\"support@example.com\")\n            .supportUrl(\"http://example.com/support\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myTenant:\n    type: auth0:Tenant\n    properties:\n      allowedLogoutUrls:\n        - http://example.com/logout\n      defaultRedirectionUri: https://example.com/login\n      enabledLocales:\n        - en\n      flags:\n        disableClickjackProtectionHeaders: true\n        disableFieldsMapFix: false\n        disableManagementApiSmsObfuscation: false\n        enablePublicSignupUserExistsError: true\n        noDiscloseEnterpriseConnections: false\n        useScopeDescriptionsForConsent: true\n      friendlyName: Tenant Name\n      pictureUrl: http://example.com/logo.png\n      sandboxVersion: '12'\n      sessionCookie:\n        mode: non-persistent\n      sessionLifetime: 8760\n      sessions:\n        oidcLogoutPromptEnabled: false\n      supportEmail: support@example.com\n      supportUrl: http://example.com/support\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nAs this is not a resource identifiable by an ID within the Auth0 Management API, tenant can be imported using a random string. # We recommend [Version 4 UUID](https://www.uuidgenerator.net/version4) # Example\n\n```sh\n $ pulumi import auth0:index/tenant:Tenant my_tenant \"82f4f21b-017a-319d-92e7-2291c1ca36c4\"\n```\n\n ",
            "properties": {
                "allowOrganizationNameInAuthenticationApi": {
                    "type": "boolean",
                    "description": "Whether to accept an organization name instead of an ID on auth endpoints.\n"
                },
                "allowedLogoutUrls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "URLs that Auth0 may redirect to after logout.\n"
                },
                "customizeMfaInPostloginAction": {
                    "type": "boolean",
                    "description": "Whether to enable flexible factors for MFA in the PostLogin action.\n"
                },
                "defaultAudience": {
                    "type": "string",
                    "description": "API Audience to use by default for API Authorization flows. This setting is equivalent to appending the audience to every authorization request made to the tenant for every application.\n"
                },
                "defaultDirectory": {
                    "type": "string",
                    "description": "Name of the connection to be used for Password Grant exchanges. Options include `auth0-adldap`, `ad`, `auth0`, `email`, `sms`, `waad`, and `adfs`.\n"
                },
                "defaultRedirectionUri": {
                    "type": "string",
                    "description": "The default absolute redirection URI. Must be HTTPS or an empty string.\n"
                },
                "enabledLocales": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Supported locales for the user interface. The first locale in the list will be used to set the default locale.\n"
                },
                "flags": {
                    "$ref": "#/types/auth0:index/TenantFlags:TenantFlags",
                    "description": "Configuration settings for tenant flags.\n"
                },
                "friendlyName": {
                    "type": "string",
                    "description": "Friendly name for the tenant.\n"
                },
                "idleSessionLifetime": {
                    "type": "number",
                    "description": "Number of hours during which a session can be inactive before the user must log in again.\n"
                },
                "pictureUrl": {
                    "type": "string",
                    "description": "URL of logo to be shown for the tenant. Recommended size is 150px x 150px. If no URL is provided, the Auth0 logo will be used.\n"
                },
                "sandboxVersion": {
                    "type": "string",
                    "description": "Selected sandbox version for the extensibility environment, which allows you to use custom scripts to extend parts of Auth0's functionality.\n"
                },
                "sessionCookie": {
                    "$ref": "#/types/auth0:index/TenantSessionCookie:TenantSessionCookie",
                    "description": "Alters behavior of tenant's session cookie. Contains a single `mode` property.\n"
                },
                "sessionLifetime": {
                    "type": "number",
                    "description": "Number of hours during which a session will stay valid.\n"
                },
                "sessions": {
                    "$ref": "#/types/auth0:index/TenantSessions:TenantSessions",
                    "description": "Sessions related settings for the tenant.\n"
                },
                "supportEmail": {
                    "type": "string",
                    "description": "Support email address for authenticating users.\n"
                },
                "supportUrl": {
                    "type": "string",
                    "description": "Support URL for authenticating users.\n"
                }
            },
            "required": [
                "allowOrganizationNameInAuthenticationApi",
                "allowedLogoutUrls",
                "customizeMfaInPostloginAction",
                "defaultAudience",
                "defaultDirectory",
                "defaultRedirectionUri",
                "enabledLocales",
                "flags",
                "friendlyName",
                "pictureUrl",
                "sandboxVersion",
                "sessionCookie",
                "sessions",
                "supportEmail",
                "supportUrl"
            ],
            "inputProperties": {
                "allowOrganizationNameInAuthenticationApi": {
                    "type": "boolean",
                    "description": "Whether to accept an organization name instead of an ID on auth endpoints.\n"
                },
                "allowedLogoutUrls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "URLs that Auth0 may redirect to after logout.\n"
                },
                "customizeMfaInPostloginAction": {
                    "type": "boolean",
                    "description": "Whether to enable flexible factors for MFA in the PostLogin action.\n"
                },
                "defaultAudience": {
                    "type": "string",
                    "description": "API Audience to use by default for API Authorization flows. This setting is equivalent to appending the audience to every authorization request made to the tenant for every application.\n"
                },
                "defaultDirectory": {
                    "type": "string",
                    "description": "Name of the connection to be used for Password Grant exchanges. Options include `auth0-adldap`, `ad`, `auth0`, `email`, `sms`, `waad`, and `adfs`.\n"
                },
                "defaultRedirectionUri": {
                    "type": "string",
                    "description": "The default absolute redirection URI. Must be HTTPS or an empty string.\n"
                },
                "enabledLocales": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Supported locales for the user interface. The first locale in the list will be used to set the default locale.\n"
                },
                "flags": {
                    "$ref": "#/types/auth0:index/TenantFlags:TenantFlags",
                    "description": "Configuration settings for tenant flags.\n"
                },
                "friendlyName": {
                    "type": "string",
                    "description": "Friendly name for the tenant.\n"
                },
                "idleSessionLifetime": {
                    "type": "number",
                    "description": "Number of hours during which a session can be inactive before the user must log in again.\n"
                },
                "pictureUrl": {
                    "type": "string",
                    "description": "URL of logo to be shown for the tenant. Recommended size is 150px x 150px. If no URL is provided, the Auth0 logo will be used.\n"
                },
                "sandboxVersion": {
                    "type": "string",
                    "description": "Selected sandbox version for the extensibility environment, which allows you to use custom scripts to extend parts of Auth0's functionality.\n"
                },
                "sessionCookie": {
                    "$ref": "#/types/auth0:index/TenantSessionCookie:TenantSessionCookie",
                    "description": "Alters behavior of tenant's session cookie. Contains a single `mode` property.\n"
                },
                "sessionLifetime": {
                    "type": "number",
                    "description": "Number of hours during which a session will stay valid.\n"
                },
                "sessions": {
                    "$ref": "#/types/auth0:index/TenantSessions:TenantSessions",
                    "description": "Sessions related settings for the tenant.\n"
                },
                "supportEmail": {
                    "type": "string",
                    "description": "Support email address for authenticating users.\n"
                },
                "supportUrl": {
                    "type": "string",
                    "description": "Support URL for authenticating users.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Tenant resources.\n",
                "properties": {
                    "allowOrganizationNameInAuthenticationApi": {
                        "type": "boolean",
                        "description": "Whether to accept an organization name instead of an ID on auth endpoints.\n"
                    },
                    "allowedLogoutUrls": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "URLs that Auth0 may redirect to after logout.\n"
                    },
                    "customizeMfaInPostloginAction": {
                        "type": "boolean",
                        "description": "Whether to enable flexible factors for MFA in the PostLogin action.\n"
                    },
                    "defaultAudience": {
                        "type": "string",
                        "description": "API Audience to use by default for API Authorization flows. This setting is equivalent to appending the audience to every authorization request made to the tenant for every application.\n"
                    },
                    "defaultDirectory": {
                        "type": "string",
                        "description": "Name of the connection to be used for Password Grant exchanges. Options include `auth0-adldap`, `ad`, `auth0`, `email`, `sms`, `waad`, and `adfs`.\n"
                    },
                    "defaultRedirectionUri": {
                        "type": "string",
                        "description": "The default absolute redirection URI. Must be HTTPS or an empty string.\n"
                    },
                    "enabledLocales": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Supported locales for the user interface. The first locale in the list will be used to set the default locale.\n"
                    },
                    "flags": {
                        "$ref": "#/types/auth0:index/TenantFlags:TenantFlags",
                        "description": "Configuration settings for tenant flags.\n"
                    },
                    "friendlyName": {
                        "type": "string",
                        "description": "Friendly name for the tenant.\n"
                    },
                    "idleSessionLifetime": {
                        "type": "number",
                        "description": "Number of hours during which a session can be inactive before the user must log in again.\n"
                    },
                    "pictureUrl": {
                        "type": "string",
                        "description": "URL of logo to be shown for the tenant. Recommended size is 150px x 150px. If no URL is provided, the Auth0 logo will be used.\n"
                    },
                    "sandboxVersion": {
                        "type": "string",
                        "description": "Selected sandbox version for the extensibility environment, which allows you to use custom scripts to extend parts of Auth0's functionality.\n"
                    },
                    "sessionCookie": {
                        "$ref": "#/types/auth0:index/TenantSessionCookie:TenantSessionCookie",
                        "description": "Alters behavior of tenant's session cookie. Contains a single `mode` property.\n"
                    },
                    "sessionLifetime": {
                        "type": "number",
                        "description": "Number of hours during which a session will stay valid.\n"
                    },
                    "sessions": {
                        "$ref": "#/types/auth0:index/TenantSessions:TenantSessions",
                        "description": "Sessions related settings for the tenant.\n"
                    },
                    "supportEmail": {
                        "type": "string",
                        "description": "Support email address for authenticating users.\n"
                    },
                    "supportUrl": {
                        "type": "string",
                        "description": "Support URL for authenticating users.\n"
                    }
                },
                "type": "object"
            }
        },
        "auth0:index/triggerAction:TriggerAction": {
            "description": "With this resource, you can bind an action to a trigger. Once an action is created and deployed, it can be attached (i.e. bound) to a trigger so that it will be executed as part of a flow.\n\nOrdering of an action within a specific flow is not currently supported when using this resource; the action will get appended to the end of the flow. To precisely manage ordering, it is advised to either do so with the dashboard UI or with the `auth0_trigger_bindings` resource.\n\n!\u003e This resource appends an action to the trigger binding. In contrast, the `auth0.TriggerActions` resource manages all\nthe action bindings to a trigger. To avoid potential issues, it is recommended not to use this resource in conjunction\nwith the `auth0.TriggerAction` resource when binding actions to the same trigger.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as auth0 from \"@pulumi/auth0\";\n\nconst loginAlert = new auth0.Action(\"loginAlert\", {\n    code: `exports.onContinuePostLogin = async (event, api) =\u003e {\n  console.log(\"foo\");\n};\"\n`,\n    deploy: true,\n    supportedTriggers: {\n        id: \"post-login\",\n        version: \"v3\",\n    },\n});\nconst postLoginAlertAction = new auth0.TriggerAction(\"postLoginAlertAction\", {\n    trigger: \"post-login\",\n    actionId: loginAlert.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_auth0 as auth0\n\nlogin_alert = auth0.Action(\"loginAlert\",\n    code=\"\"\"exports.onContinuePostLogin = async (event, api) =\u003e {\n  console.log(\"foo\");\n};\"\n\"\"\",\n    deploy=True,\n    supported_triggers=auth0.ActionSupportedTriggersArgs(\n        id=\"post-login\",\n        version=\"v3\",\n    ))\npost_login_alert_action = auth0.TriggerAction(\"postLoginAlertAction\",\n    trigger=\"post-login\",\n    action_id=login_alert.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Auth0 = Pulumi.Auth0;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var loginAlert = new Auth0.Action(\"loginAlert\", new()\n    {\n        Code = @\"exports.onContinuePostLogin = async (event, api) =\u003e {\n  console.log(\"\"foo\"\");\n};\"\"\n\",\n        Deploy = true,\n        SupportedTriggers = new Auth0.Inputs.ActionSupportedTriggersArgs\n        {\n            Id = \"post-login\",\n            Version = \"v3\",\n        },\n    });\n\n    var postLoginAlertAction = new Auth0.TriggerAction(\"postLoginAlertAction\", new()\n    {\n        Trigger = \"post-login\",\n        ActionId = loginAlert.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-auth0/sdk/v3/go/auth0\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tloginAlert, err := auth0.NewAction(ctx, \"loginAlert\", \u0026auth0.ActionArgs{\n\t\t\tCode:   pulumi.String(\"exports.onContinuePostLogin = async (event, api) =\u003e {\\n  console.log(\\\"foo\\\");\\n};\\\"\\n\"),\n\t\t\tDeploy: pulumi.Bool(true),\n\t\t\tSupportedTriggers: \u0026auth0.ActionSupportedTriggersArgs{\n\t\t\t\tId:      pulumi.String(\"post-login\"),\n\t\t\t\tVersion: pulumi.String(\"v3\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = auth0.NewTriggerAction(ctx, \"postLoginAlertAction\", \u0026auth0.TriggerActionArgs{\n\t\t\tTrigger:  pulumi.String(\"post-login\"),\n\t\t\tActionId: loginAlert.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.auth0.Action;\nimport com.pulumi.auth0.ActionArgs;\nimport com.pulumi.auth0.inputs.ActionSupportedTriggersArgs;\nimport com.pulumi.auth0.TriggerAction;\nimport com.pulumi.auth0.TriggerActionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var loginAlert = new Action(\"loginAlert\", ActionArgs.builder()        \n            .code(\"\"\"\nexports.onContinuePostLogin = async (event, api) =\u003e {\n  console.log(\"foo\");\n};\"\n            \"\"\")\n            .deploy(true)\n            .supportedTriggers(ActionSupportedTriggersArgs.builder()\n                .id(\"post-login\")\n                .version(\"v3\")\n                .build())\n            .build());\n\n        var postLoginAlertAction = new TriggerAction(\"postLoginAlertAction\", TriggerActionArgs.builder()        \n            .trigger(\"post-login\")\n            .actionId(loginAlert.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  loginAlert:\n    type: auth0:Action\n    properties:\n      code: |\n        exports.onContinuePostLogin = async (event, api) =\u003e {\n          console.log(\"foo\");\n        };\"\n      deploy: true\n      supportedTriggers:\n        id: post-login\n        version: v3\n  postLoginAlertAction:\n    type: auth0:TriggerAction\n    properties:\n      trigger: post-login\n      actionId: ${loginAlert.id}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThis resource can be imported by specifying the trigger and action ID separated by \"::\" (note the double colon) \u003ctrigger\u003e::\u003cactionID\u003e # Example\n\n```sh\n $ pulumi import auth0:index/triggerAction:TriggerAction post_login_action \"post-login::28b5c8fa-d371-5734-acf6-d0cf80ead918\"\n```\n\n ",
            "properties": {
                "actionId": {
                    "type": "string",
                    "description": "The ID of the action to bind to the trigger.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The name for this action within the trigger. This can be useful for distinguishing between multiple instances of the same action bound to a trigger. Defaults to action name when not provided.\n"
                },
                "trigger": {
                    "type": "string",
                    "description": "The ID of the trigger to bind with. Available options: `post-login`, `credentials-exchange`, `pre-user-registration`, `post-user-registration`, `post-change-password`, `send-phone-message`, `password-reset-post-challenge`, `iga-approval`, `iga-certification`, `iga-fulfillment-assignment`, `iga-fulfillment-execution`.\n"
                }
            },
            "required": [
                "actionId",
                "displayName",
                "trigger"
            ],
            "inputProperties": {
                "actionId": {
                    "type": "string",
                    "description": "The ID of the action to bind to the trigger.\n",
                    "willReplaceOnChanges": true
                },
                "displayName": {
                    "type": "string",
                    "description": "The name for this action within the trigger. This can be useful for distinguishing between multiple instances of the same action bound to a trigger. Defaults to action name when not provided.\n"
                },
                "trigger": {
                    "type": "string",
                    "description": "The ID of the trigger to bind with. Available options: `post-login`, `credentials-exchange`, `pre-user-registration`, `post-user-registration`, `post-change-password`, `send-phone-message`, `password-reset-post-challenge`, `iga-approval`, `iga-certification`, `iga-fulfillment-assignment`, `iga-fulfillment-execution`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "actionId",
                "trigger"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TriggerAction resources.\n",
                "properties": {
                    "actionId": {
                        "type": "string",
                        "description": "The ID of the action to bind to the trigger.\n",
                        "willReplaceOnChanges": true
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The name for this action within the trigger. This can be useful for distinguishing between multiple instances of the same action bound to a trigger. Defaults to action name when not provided.\n"
                    },
                    "trigger": {
                        "type": "string",
                        "description": "The ID of the trigger to bind with. Available options: `post-login`, `credentials-exchange`, `pre-user-registration`, `post-user-registration`, `post-change-password`, `send-phone-message`, `password-reset-post-challenge`, `iga-approval`, `iga-certification`, `iga-fulfillment-assignment`, `iga-fulfillment-execution`.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "auth0:index/triggerActions:TriggerActions": {
            "description": "With this resource, you can bind actions to a trigger. Once actions are created and deployed, they can be attached (i.e. bound) to a trigger so that it will be executed as part of a flow. The list of actions reflects the order in which they will be executed during the appropriate flow.\n\n!\u003e This resource manages all the action bindings to a trigger. In contrast, the `auth0.TriggerAction` resource only\nappends an action to the trigger binding. To avoid potential issues, it is recommended not to use this resource in\nconjunction with the `auth0.TriggerAction` resource when binding actions to the same trigger.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as auth0 from \"@pulumi/auth0\";\n\nconst actionFoo = new auth0.Action(\"actionFoo\", {\n    code: `exports.onContinuePostLogin = async (event, api) =\u003e {\n  console.log(\"foo\");\n};\"\n`,\n    deploy: true,\n    supportedTriggers: {\n        id: \"post-login\",\n        version: \"v3\",\n    },\n});\nconst actionBar = new auth0.Action(\"actionBar\", {\n    code: `exports.onContinuePostLogin = async (event, api) =\u003e {\n  console.log(\"bar\");\n};\"\n`,\n    deploy: true,\n    supportedTriggers: {\n        id: \"post-login\",\n        version: \"v3\",\n    },\n});\nconst loginFlow = new auth0.TriggerActions(\"loginFlow\", {\n    trigger: \"post-login\",\n    actions: [\n        {\n            id: actionFoo.id,\n            displayName: actionFoo.name,\n        },\n        {\n            id: actionBar.id,\n            displayName: actionBar.name,\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_auth0 as auth0\n\naction_foo = auth0.Action(\"actionFoo\",\n    code=\"\"\"exports.onContinuePostLogin = async (event, api) =\u003e {\n  console.log(\"foo\");\n};\"\n\"\"\",\n    deploy=True,\n    supported_triggers=auth0.ActionSupportedTriggersArgs(\n        id=\"post-login\",\n        version=\"v3\",\n    ))\naction_bar = auth0.Action(\"actionBar\",\n    code=\"\"\"exports.onContinuePostLogin = async (event, api) =\u003e {\n  console.log(\"bar\");\n};\"\n\"\"\",\n    deploy=True,\n    supported_triggers=auth0.ActionSupportedTriggersArgs(\n        id=\"post-login\",\n        version=\"v3\",\n    ))\nlogin_flow = auth0.TriggerActions(\"loginFlow\",\n    trigger=\"post-login\",\n    actions=[\n        auth0.TriggerActionsActionArgs(\n            id=action_foo.id,\n            display_name=action_foo.name,\n        ),\n        auth0.TriggerActionsActionArgs(\n            id=action_bar.id,\n            display_name=action_bar.name,\n        ),\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Auth0 = Pulumi.Auth0;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var actionFoo = new Auth0.Action(\"actionFoo\", new()\n    {\n        Code = @\"exports.onContinuePostLogin = async (event, api) =\u003e {\n  console.log(\"\"foo\"\");\n};\"\"\n\",\n        Deploy = true,\n        SupportedTriggers = new Auth0.Inputs.ActionSupportedTriggersArgs\n        {\n            Id = \"post-login\",\n            Version = \"v3\",\n        },\n    });\n\n    var actionBar = new Auth0.Action(\"actionBar\", new()\n    {\n        Code = @\"exports.onContinuePostLogin = async (event, api) =\u003e {\n  console.log(\"\"bar\"\");\n};\"\"\n\",\n        Deploy = true,\n        SupportedTriggers = new Auth0.Inputs.ActionSupportedTriggersArgs\n        {\n            Id = \"post-login\",\n            Version = \"v3\",\n        },\n    });\n\n    var loginFlow = new Auth0.TriggerActions(\"loginFlow\", new()\n    {\n        Trigger = \"post-login\",\n        Actions = new[]\n        {\n            new Auth0.Inputs.TriggerActionsActionArgs\n            {\n                Id = actionFoo.Id,\n                DisplayName = actionFoo.Name,\n            },\n            new Auth0.Inputs.TriggerActionsActionArgs\n            {\n                Id = actionBar.Id,\n                DisplayName = actionBar.Name,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-auth0/sdk/v3/go/auth0\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tactionFoo, err := auth0.NewAction(ctx, \"actionFoo\", \u0026auth0.ActionArgs{\n\t\t\tCode:   pulumi.String(\"exports.onContinuePostLogin = async (event, api) =\u003e {\\n  console.log(\\\"foo\\\");\\n};\\\"\\n\"),\n\t\t\tDeploy: pulumi.Bool(true),\n\t\t\tSupportedTriggers: \u0026auth0.ActionSupportedTriggersArgs{\n\t\t\t\tId:      pulumi.String(\"post-login\"),\n\t\t\t\tVersion: pulumi.String(\"v3\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tactionBar, err := auth0.NewAction(ctx, \"actionBar\", \u0026auth0.ActionArgs{\n\t\t\tCode:   pulumi.String(\"exports.onContinuePostLogin = async (event, api) =\u003e {\\n  console.log(\\\"bar\\\");\\n};\\\"\\n\"),\n\t\t\tDeploy: pulumi.Bool(true),\n\t\t\tSupportedTriggers: \u0026auth0.ActionSupportedTriggersArgs{\n\t\t\t\tId:      pulumi.String(\"post-login\"),\n\t\t\t\tVersion: pulumi.String(\"v3\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = auth0.NewTriggerActions(ctx, \"loginFlow\", \u0026auth0.TriggerActionsArgs{\n\t\t\tTrigger: pulumi.String(\"post-login\"),\n\t\t\tActions: auth0.TriggerActionsActionArray{\n\t\t\t\t\u0026auth0.TriggerActionsActionArgs{\n\t\t\t\t\tId:          actionFoo.ID(),\n\t\t\t\t\tDisplayName: actionFoo.Name,\n\t\t\t\t},\n\t\t\t\t\u0026auth0.TriggerActionsActionArgs{\n\t\t\t\t\tId:          actionBar.ID(),\n\t\t\t\t\tDisplayName: actionBar.Name,\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.auth0.Action;\nimport com.pulumi.auth0.ActionArgs;\nimport com.pulumi.auth0.inputs.ActionSupportedTriggersArgs;\nimport com.pulumi.auth0.TriggerActions;\nimport com.pulumi.auth0.TriggerActionsArgs;\nimport com.pulumi.auth0.inputs.TriggerActionsActionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var actionFoo = new Action(\"actionFoo\", ActionArgs.builder()        \n            .code(\"\"\"\nexports.onContinuePostLogin = async (event, api) =\u003e {\n  console.log(\"foo\");\n};\"\n            \"\"\")\n            .deploy(true)\n            .supportedTriggers(ActionSupportedTriggersArgs.builder()\n                .id(\"post-login\")\n                .version(\"v3\")\n                .build())\n            .build());\n\n        var actionBar = new Action(\"actionBar\", ActionArgs.builder()        \n            .code(\"\"\"\nexports.onContinuePostLogin = async (event, api) =\u003e {\n  console.log(\"bar\");\n};\"\n            \"\"\")\n            .deploy(true)\n            .supportedTriggers(ActionSupportedTriggersArgs.builder()\n                .id(\"post-login\")\n                .version(\"v3\")\n                .build())\n            .build());\n\n        var loginFlow = new TriggerActions(\"loginFlow\", TriggerActionsArgs.builder()        \n            .trigger(\"post-login\")\n            .actions(            \n                TriggerActionsActionArgs.builder()\n                    .id(actionFoo.id())\n                    .displayName(actionFoo.name())\n                    .build(),\n                TriggerActionsActionArgs.builder()\n                    .id(actionBar.id())\n                    .displayName(actionBar.name())\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  actionFoo:\n    type: auth0:Action\n    properties:\n      code: |\n        exports.onContinuePostLogin = async (event, api) =\u003e {\n          console.log(\"foo\");\n        };\"\n      deploy: true\n      supportedTriggers:\n        id: post-login\n        version: v3\n  actionBar:\n    type: auth0:Action\n    properties:\n      code: |\n        exports.onContinuePostLogin = async (event, api) =\u003e {\n          console.log(\"bar\");\n        };\"\n      deploy: true\n      supportedTriggers:\n        id: post-login\n        version: v3\n  loginFlow:\n    type: auth0:TriggerActions\n    properties:\n      trigger: post-login\n      actions:\n        - id: ${actionFoo.id}\n          displayName: ${actionFoo.name}\n        - id: ${actionBar.id}\n          displayName: ${actionBar.name}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThis resource can be imported using the bindings trigger ID. # Example\n\n```sh\n $ pulumi import auth0:index/triggerActions:TriggerActions example \"post-login\"\n```\n\n ",
            "properties": {
                "actions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/auth0:index/TriggerActionsAction:TriggerActionsAction"
                    },
                    "description": "The list of actions bound to this trigger.\n"
                },
                "trigger": {
                    "type": "string",
                    "description": "The ID of the trigger to bind with. Options include: `post-login`, `credentials-exchange`, `pre-user-registration`, `post-user-registration`, `post-change-password`, `send-phone-message`, `password-reset-post-challenge`, `iga-approval` , `iga-certification` , `iga-fulfillment-assignment`, `iga-fulfillment-execution`.\n"
                }
            },
            "required": [
                "actions",
                "trigger"
            ],
            "inputProperties": {
                "actions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/auth0:index/TriggerActionsAction:TriggerActionsAction"
                    },
                    "description": "The list of actions bound to this trigger.\n"
                },
                "trigger": {
                    "type": "string",
                    "description": "The ID of the trigger to bind with. Options include: `post-login`, `credentials-exchange`, `pre-user-registration`, `post-user-registration`, `post-change-password`, `send-phone-message`, `password-reset-post-challenge`, `iga-approval` , `iga-certification` , `iga-fulfillment-assignment`, `iga-fulfillment-execution`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "actions",
                "trigger"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TriggerActions resources.\n",
                "properties": {
                    "actions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/auth0:index/TriggerActionsAction:TriggerActionsAction"
                        },
                        "description": "The list of actions bound to this trigger.\n"
                    },
                    "trigger": {
                        "type": "string",
                        "description": "The ID of the trigger to bind with. Options include: `post-login`, `credentials-exchange`, `pre-user-registration`, `post-user-registration`, `post-change-password`, `send-phone-message`, `password-reset-post-challenge`, `iga-approval` , `iga-certification` , `iga-fulfillment-assignment`, `iga-fulfillment-execution`.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "auth0:index/user:User": {
            "description": "With this resource, you can manage user identities, including resetting passwords, and creating, provisioning, blocking, and deleting users.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as auth0 from \"@pulumi/auth0\";\n\nconst user = new auth0.User(\"user\", {\n    connectionName: \"Username-Password-Authentication\",\n    email: \"test@test.com\",\n    emailVerified: true,\n    nickname: \"some.nickname\",\n    password: \"passpass$12$12\",\n    picture: \"https://www.example.com/a-valid-picture-url.jpg\",\n    userId: \"12345\",\n    username: \"unique_username\",\n});\n```\n```python\nimport pulumi\nimport pulumi_auth0 as auth0\n\nuser = auth0.User(\"user\",\n    connection_name=\"Username-Password-Authentication\",\n    email=\"test@test.com\",\n    email_verified=True,\n    nickname=\"some.nickname\",\n    password=\"passpass$12$12\",\n    picture=\"https://www.example.com/a-valid-picture-url.jpg\",\n    user_id=\"12345\",\n    username=\"unique_username\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Auth0 = Pulumi.Auth0;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var user = new Auth0.User(\"user\", new()\n    {\n        ConnectionName = \"Username-Password-Authentication\",\n        Email = \"test@test.com\",\n        EmailVerified = true,\n        Nickname = \"some.nickname\",\n        Password = \"passpass$12$12\",\n        Picture = \"https://www.example.com/a-valid-picture-url.jpg\",\n        UserId = \"12345\",\n        Username = \"unique_username\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-auth0/sdk/v3/go/auth0\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := auth0.NewUser(ctx, \"user\", \u0026auth0.UserArgs{\n\t\t\tConnectionName: pulumi.String(\"Username-Password-Authentication\"),\n\t\t\tEmail:          pulumi.String(\"test@test.com\"),\n\t\t\tEmailVerified:  pulumi.Bool(true),\n\t\t\tNickname:       pulumi.String(\"some.nickname\"),\n\t\t\tPassword:       pulumi.String(\"passpass$12$12\"),\n\t\t\tPicture:        pulumi.String(\"https://www.example.com/a-valid-picture-url.jpg\"),\n\t\t\tUserId:         pulumi.String(\"12345\"),\n\t\t\tUsername:       pulumi.String(\"unique_username\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.auth0.User;\nimport com.pulumi.auth0.UserArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var user = new User(\"user\", UserArgs.builder()        \n            .connectionName(\"Username-Password-Authentication\")\n            .email(\"test@test.com\")\n            .emailVerified(true)\n            .nickname(\"some.nickname\")\n            .password(\"passpass$12$12\")\n            .picture(\"https://www.example.com/a-valid-picture-url.jpg\")\n            .userId(\"12345\")\n            .username(\"unique_username\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  user:\n    type: auth0:User\n    properties:\n      connectionName: Username-Password-Authentication\n      email: test@test.com\n      emailVerified: true\n      nickname: some.nickname\n      password: passpass$12$12\n      picture: https://www.example.com/a-valid-picture-url.jpg\n      userId: '12345'\n      username: unique_username\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThis resource can be imported using the user ID. # Example\n\n```sh\n $ pulumi import auth0:index/user:User user \"auth0|111111111111111111111111\"\n```\n\n ",
            "properties": {
                "appMetadata": {
                    "type": "string",
                    "description": "Custom fields that store info about the user that impact the user's core functionality, such as how an application functions or what the user can access. Examples include support plans and IDs for external accounts.\n"
                },
                "blocked": {
                    "type": "boolean",
                    "description": "Indicates whether the user is blocked or not.\n"
                },
                "connectionName": {
                    "type": "string",
                    "description": "Name of the connection from which the user information was sourced.\n"
                },
                "email": {
                    "type": "string",
                    "description": "Email address of the user.\n"
                },
                "emailVerified": {
                    "type": "boolean",
                    "description": "Indicates whether the email address has been verified.\n"
                },
                "familyName": {
                    "type": "string",
                    "description": "Family name of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled 'Sync user profile attributes at each login'. For more information, see: [Configure Identity Provider Connection for User Profile Updates](https://auth0.com/docs/manage-users/user-accounts/user-profiles/configure-connection-sync-with-auth0).\n"
                },
                "givenName": {
                    "type": "string",
                    "description": "Given name of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled 'Sync user profile attributes at each login'. For more information, see: [Configure Identity Provider Connection for User Profile Updates](https://auth0.com/docs/manage-users/user-accounts/user-profiles/configure-connection-sync-with-auth0).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled 'Sync user profile attributes at each login'. For more information, see: [Configure Identity Provider Connection for User Profile Updates](https://auth0.com/docs/manage-users/user-accounts/user-profiles/configure-connection-sync-with-auth0).\n"
                },
                "nickname": {
                    "type": "string",
                    "description": "Preferred nickname or alias of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled 'Sync user profile attributes at each login'. For more information, see: [Configure Identity Provider Connection for User Profile Updates](https://auth0.com/docs/manage-users/user-accounts/user-profiles/configure-connection-sync-with-auth0).\n"
                },
                "password": {
                    "type": "string",
                    "description": "Initial password for this user. Required for non-passwordless connections (SMS and email).\n",
                    "secret": true
                },
                "phoneNumber": {
                    "type": "string",
                    "description": "Phone number for the user; follows the E.164 recommendation. Used for SMS connections.\n"
                },
                "phoneVerified": {
                    "type": "boolean",
                    "description": "Indicates whether the phone number has been verified.\n"
                },
                "picture": {
                    "type": "string",
                    "description": "Picture of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled 'Sync user profile attributes at each login'. For more information, see: [Configure Identity Provider Connection for User Profile Updates](https://auth0.com/docs/manage-users/user-accounts/user-profiles/configure-connection-sync-with-auth0).\n"
                },
                "userId": {
                    "type": "string",
                    "description": "ID of the user.\n"
                },
                "userMetadata": {
                    "type": "string",
                    "description": "Custom fields that store info about the user that does not impact a user's core functionality. Examples include work address, home address, and user preferences.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username of the user. Only valid if the connection requires a username.\n"
                },
                "verifyEmail": {
                    "type": "boolean",
                    "description": "Indicates whether the user will receive a verification email after creation. Overrides behavior of `email_verified` parameter.\n"
                }
            },
            "required": [
                "connectionName",
                "name",
                "nickname",
                "picture",
                "userId"
            ],
            "inputProperties": {
                "appMetadata": {
                    "type": "string",
                    "description": "Custom fields that store info about the user that impact the user's core functionality, such as how an application functions or what the user can access. Examples include support plans and IDs for external accounts.\n"
                },
                "blocked": {
                    "type": "boolean",
                    "description": "Indicates whether the user is blocked or not.\n"
                },
                "connectionName": {
                    "type": "string",
                    "description": "Name of the connection from which the user information was sourced.\n"
                },
                "email": {
                    "type": "string",
                    "description": "Email address of the user.\n"
                },
                "emailVerified": {
                    "type": "boolean",
                    "description": "Indicates whether the email address has been verified.\n"
                },
                "familyName": {
                    "type": "string",
                    "description": "Family name of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled 'Sync user profile attributes at each login'. For more information, see: [Configure Identity Provider Connection for User Profile Updates](https://auth0.com/docs/manage-users/user-accounts/user-profiles/configure-connection-sync-with-auth0).\n"
                },
                "givenName": {
                    "type": "string",
                    "description": "Given name of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled 'Sync user profile attributes at each login'. For more information, see: [Configure Identity Provider Connection for User Profile Updates](https://auth0.com/docs/manage-users/user-accounts/user-profiles/configure-connection-sync-with-auth0).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled 'Sync user profile attributes at each login'. For more information, see: [Configure Identity Provider Connection for User Profile Updates](https://auth0.com/docs/manage-users/user-accounts/user-profiles/configure-connection-sync-with-auth0).\n"
                },
                "nickname": {
                    "type": "string",
                    "description": "Preferred nickname or alias of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled 'Sync user profile attributes at each login'. For more information, see: [Configure Identity Provider Connection for User Profile Updates](https://auth0.com/docs/manage-users/user-accounts/user-profiles/configure-connection-sync-with-auth0).\n"
                },
                "password": {
                    "type": "string",
                    "description": "Initial password for this user. Required for non-passwordless connections (SMS and email).\n",
                    "secret": true
                },
                "phoneNumber": {
                    "type": "string",
                    "description": "Phone number for the user; follows the E.164 recommendation. Used for SMS connections.\n"
                },
                "phoneVerified": {
                    "type": "boolean",
                    "description": "Indicates whether the phone number has been verified.\n"
                },
                "picture": {
                    "type": "string",
                    "description": "Picture of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled 'Sync user profile attributes at each login'. For more information, see: [Configure Identity Provider Connection for User Profile Updates](https://auth0.com/docs/manage-users/user-accounts/user-profiles/configure-connection-sync-with-auth0).\n"
                },
                "userId": {
                    "type": "string",
                    "description": "ID of the user.\n"
                },
                "userMetadata": {
                    "type": "string",
                    "description": "Custom fields that store info about the user that does not impact a user's core functionality. Examples include work address, home address, and user preferences.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username of the user. Only valid if the connection requires a username.\n"
                },
                "verifyEmail": {
                    "type": "boolean",
                    "description": "Indicates whether the user will receive a verification email after creation. Overrides behavior of `email_verified` parameter.\n"
                }
            },
            "requiredInputs": [
                "connectionName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering User resources.\n",
                "properties": {
                    "appMetadata": {
                        "type": "string",
                        "description": "Custom fields that store info about the user that impact the user's core functionality, such as how an application functions or what the user can access. Examples include support plans and IDs for external accounts.\n"
                    },
                    "blocked": {
                        "type": "boolean",
                        "description": "Indicates whether the user is blocked or not.\n"
                    },
                    "connectionName": {
                        "type": "string",
                        "description": "Name of the connection from which the user information was sourced.\n"
                    },
                    "email": {
                        "type": "string",
                        "description": "Email address of the user.\n"
                    },
                    "emailVerified": {
                        "type": "boolean",
                        "description": "Indicates whether the email address has been verified.\n"
                    },
                    "familyName": {
                        "type": "string",
                        "description": "Family name of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled 'Sync user profile attributes at each login'. For more information, see: [Configure Identity Provider Connection for User Profile Updates](https://auth0.com/docs/manage-users/user-accounts/user-profiles/configure-connection-sync-with-auth0).\n"
                    },
                    "givenName": {
                        "type": "string",
                        "description": "Given name of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled 'Sync user profile attributes at each login'. For more information, see: [Configure Identity Provider Connection for User Profile Updates](https://auth0.com/docs/manage-users/user-accounts/user-profiles/configure-connection-sync-with-auth0).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled 'Sync user profile attributes at each login'. For more information, see: [Configure Identity Provider Connection for User Profile Updates](https://auth0.com/docs/manage-users/user-accounts/user-profiles/configure-connection-sync-with-auth0).\n"
                    },
                    "nickname": {
                        "type": "string",
                        "description": "Preferred nickname or alias of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled 'Sync user profile attributes at each login'. For more information, see: [Configure Identity Provider Connection for User Profile Updates](https://auth0.com/docs/manage-users/user-accounts/user-profiles/configure-connection-sync-with-auth0).\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "Initial password for this user. Required for non-passwordless connections (SMS and email).\n",
                        "secret": true
                    },
                    "phoneNumber": {
                        "type": "string",
                        "description": "Phone number for the user; follows the E.164 recommendation. Used for SMS connections.\n"
                    },
                    "phoneVerified": {
                        "type": "boolean",
                        "description": "Indicates whether the phone number has been verified.\n"
                    },
                    "picture": {
                        "type": "string",
                        "description": "Picture of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled 'Sync user profile attributes at each login'. For more information, see: [Configure Identity Provider Connection for User Profile Updates](https://auth0.com/docs/manage-users/user-accounts/user-profiles/configure-connection-sync-with-auth0).\n"
                    },
                    "userId": {
                        "type": "string",
                        "description": "ID of the user.\n"
                    },
                    "userMetadata": {
                        "type": "string",
                        "description": "Custom fields that store info about the user that does not impact a user's core functionality. Examples include work address, home address, and user preferences.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username of the user. Only valid if the connection requires a username.\n"
                    },
                    "verifyEmail": {
                        "type": "boolean",
                        "description": "Indicates whether the user will receive a verification email after creation. Overrides behavior of `email_verified` parameter.\n"
                    }
                },
                "type": "object"
            }
        },
        "auth0:index/userPermission:UserPermission": {
            "description": "With this resource, you can manage user permissions.\n\n!\u003e This resource appends a permission to a user. In contrast, the `auth0.UserPermissions` resource manages all the\npermissions assigned to a user. To avoid potential issues, it is recommended not to use this resource in conjunction\nwith the `auth0.UserPermissions` resource when managing permissions for the same user id.\n\n\n## Import\n\nThis resource can be imported by specifying the user ID, resource identifier and permission name separated by \"::\" (note the double colon) \u003cuserID\u003e::\u003cresourceServerIdentifier\u003e::\u003cpermission\u003e # Example\n\n```sh\n $ pulumi import auth0:index/userPermission:UserPermission permission \"auth0|111111111111111111111111::https://api.travel0.com/v1::read:posts\"\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the permission.\n"
                },
                "permission": {
                    "type": "string",
                    "description": "Name of the permission.\n"
                },
                "resourceServerIdentifier": {
                    "type": "string",
                    "description": "Identifier of the resource server that the permission is associated with.\n"
                },
                "resourceServerName": {
                    "type": "string",
                    "description": "Name of the resource server that the permission is associated with.\n"
                },
                "userId": {
                    "type": "string",
                    "description": "ID of the user to associate the permission to.\n"
                }
            },
            "required": [
                "description",
                "permission",
                "resourceServerIdentifier",
                "resourceServerName",
                "userId"
            ],
            "inputProperties": {
                "permission": {
                    "type": "string",
                    "description": "Name of the permission.\n",
                    "willReplaceOnChanges": true
                },
                "resourceServerIdentifier": {
                    "type": "string",
                    "description": "Identifier of the resource server that the permission is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "userId": {
                    "type": "string",
                    "description": "ID of the user to associate the permission to.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "permission",
                "resourceServerIdentifier",
                "userId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering UserPermission resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the permission.\n"
                    },
                    "permission": {
                        "type": "string",
                        "description": "Name of the permission.\n",
                        "willReplaceOnChanges": true
                    },
                    "resourceServerIdentifier": {
                        "type": "string",
                        "description": "Identifier of the resource server that the permission is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "resourceServerName": {
                        "type": "string",
                        "description": "Name of the resource server that the permission is associated with.\n"
                    },
                    "userId": {
                        "type": "string",
                        "description": "ID of the user to associate the permission to.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "auth0:index/userPermissions:UserPermissions": {
            "description": "With this resource, you can manage all of a user's permissions.\n\n!\u003e This resource manages all the permissions assigned to a user. In contrast, the `auth0.UserPermission` resource only\nappends a permissions to a user. To avoid potential issues, it is recommended not to use this resource in conjunction\nwith the `auth0.UserPermission` resource when managing permissions for the same user id.\n\n\n## Import\n\nThis resource can be imported by specifying the user ID Example\n\n```sh\n $ pulumi import auth0:index/userPermissions:UserPermissions all_user_permissions \"auth0|111111111111111111111111\"\n```\n\n ",
            "properties": {
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/auth0:index/UserPermissionsPermission:UserPermissionsPermission"
                    },
                    "description": "List of API permissions granted to the user.\n"
                },
                "userId": {
                    "type": "string",
                    "description": "ID of the user to associate the permission to.\n"
                }
            },
            "required": [
                "permissions",
                "userId"
            ],
            "inputProperties": {
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/auth0:index/UserPermissionsPermission:UserPermissionsPermission"
                    },
                    "description": "List of API permissions granted to the user.\n"
                },
                "userId": {
                    "type": "string",
                    "description": "ID of the user to associate the permission to.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "permissions",
                "userId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering UserPermissions resources.\n",
                "properties": {
                    "permissions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/auth0:index/UserPermissionsPermission:UserPermissionsPermission"
                        },
                        "description": "List of API permissions granted to the user.\n"
                    },
                    "userId": {
                        "type": "string",
                        "description": "ID of the user to associate the permission to.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "auth0:index/userRole:UserRole": {
            "description": "With this resource, you can manage assigned roles for a user.\n\n!\u003e This resource appends a role to a user. In contrast, the `auth0.UserRoles` resource manages all the roles assigned\nto a user. To avoid potential issues, it is recommended not to use this resource in conjunction with the\n`auth0.UserRoles` resource when managing roles for the same user id.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as auth0 from \"@pulumi/auth0\";\n\n// Example:\nconst admin = new auth0.Role(\"admin\", {description: \"Administrator\"});\nconst user = new auth0.User(\"user\", {\n    connectionName: \"Username-Password-Authentication\",\n    username: \"unique_username\",\n    email: \"test@test.com\",\n    password: \"passpass$12$12\",\n});\nconst userRoles = new auth0.UserRole(\"userRoles\", {\n    userId: user.id,\n    roleId: admin.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_auth0 as auth0\n\n# Example:\nadmin = auth0.Role(\"admin\", description=\"Administrator\")\nuser = auth0.User(\"user\",\n    connection_name=\"Username-Password-Authentication\",\n    username=\"unique_username\",\n    email=\"test@test.com\",\n    password=\"passpass$12$12\")\nuser_roles = auth0.UserRole(\"userRoles\",\n    user_id=user.id,\n    role_id=admin.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Auth0 = Pulumi.Auth0;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Example:\n    var admin = new Auth0.Role(\"admin\", new()\n    {\n        Description = \"Administrator\",\n    });\n\n    var user = new Auth0.User(\"user\", new()\n    {\n        ConnectionName = \"Username-Password-Authentication\",\n        Username = \"unique_username\",\n        Email = \"test@test.com\",\n        Password = \"passpass$12$12\",\n    });\n\n    var userRoles = new Auth0.UserRole(\"userRoles\", new()\n    {\n        UserId = user.Id,\n        RoleId = admin.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-auth0/sdk/v3/go/auth0\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tadmin, err := auth0.NewRole(ctx, \"admin\", \u0026auth0.RoleArgs{\n\t\t\tDescription: pulumi.String(\"Administrator\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tuser, err := auth0.NewUser(ctx, \"user\", \u0026auth0.UserArgs{\n\t\t\tConnectionName: pulumi.String(\"Username-Password-Authentication\"),\n\t\t\tUsername:       pulumi.String(\"unique_username\"),\n\t\t\tEmail:          pulumi.String(\"test@test.com\"),\n\t\t\tPassword:       pulumi.String(\"passpass$12$12\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = auth0.NewUserRole(ctx, \"userRoles\", \u0026auth0.UserRoleArgs{\n\t\t\tUserId: user.ID(),\n\t\t\tRoleId: admin.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.auth0.Role;\nimport com.pulumi.auth0.RoleArgs;\nimport com.pulumi.auth0.User;\nimport com.pulumi.auth0.UserArgs;\nimport com.pulumi.auth0.UserRole;\nimport com.pulumi.auth0.UserRoleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var admin = new Role(\"admin\", RoleArgs.builder()        \n            .description(\"Administrator\")\n            .build());\n\n        var user = new User(\"user\", UserArgs.builder()        \n            .connectionName(\"Username-Password-Authentication\")\n            .username(\"unique_username\")\n            .email(\"test@test.com\")\n            .password(\"passpass$12$12\")\n            .build());\n\n        var userRoles = new UserRole(\"userRoles\", UserRoleArgs.builder()        \n            .userId(user.id())\n            .roleId(admin.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Example:\n  admin:\n    type: auth0:Role\n    properties:\n      description: Administrator\n  user:\n    type: auth0:User\n    properties:\n      connectionName: Username-Password-Authentication\n      username: unique_username\n      email: test@test.com\n      password: passpass$12$12\n  userRoles:\n    type: auth0:UserRole\n    properties:\n      userId: ${user.id}\n      roleId: ${admin.id}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThis resource can be imported by specifying the user ID and role ID separated by \"::\" (note the double colon) \u003cuserID\u003e::\u003croleID\u003e # Example\n\n```sh\n $ pulumi import auth0:index/userRole:UserRole user_role \"auth0|111111111111111111111111::role_123\"\n```\n\n ",
            "properties": {
                "roleDescription": {
                    "type": "string",
                    "description": "Description of the role.\n"
                },
                "roleId": {
                    "type": "string",
                    "description": "ID of the role assigned to the user.\n"
                },
                "roleName": {
                    "type": "string",
                    "description": "Name of the role.\n"
                },
                "userId": {
                    "type": "string",
                    "description": "ID of the user.\n"
                }
            },
            "required": [
                "roleDescription",
                "roleId",
                "roleName",
                "userId"
            ],
            "inputProperties": {
                "roleId": {
                    "type": "string",
                    "description": "ID of the role assigned to the user.\n",
                    "willReplaceOnChanges": true
                },
                "userId": {
                    "type": "string",
                    "description": "ID of the user.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "roleId",
                "userId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering UserRole resources.\n",
                "properties": {
                    "roleDescription": {
                        "type": "string",
                        "description": "Description of the role.\n"
                    },
                    "roleId": {
                        "type": "string",
                        "description": "ID of the role assigned to the user.\n",
                        "willReplaceOnChanges": true
                    },
                    "roleName": {
                        "type": "string",
                        "description": "Name of the role.\n"
                    },
                    "userId": {
                        "type": "string",
                        "description": "ID of the user.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "auth0:index/userRoles:UserRoles": {
            "description": "With this resource, you can manage assigned roles for a user.\n\n!\u003e This resource manages all the roles assigned to a user. In contrast, the `auth0.UserRole` resource only appends a\nrole to a user. To avoid potential issues, it is recommended not to use this resource in conjunction with the\n`auth0.UserRole` resource when managing roles for the same user id.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as auth0 from \"@pulumi/auth0\";\n\n// Example:\nconst admin = new auth0.Role(\"admin\", {description: \"Administrator\"});\nconst user = new auth0.User(\"user\", {\n    connectionName: \"Username-Password-Authentication\",\n    username: \"unique_username\",\n    email: \"test@test.com\",\n    password: \"passpass$12$12\",\n});\nconst userRoles = new auth0.UserRoles(\"userRoles\", {\n    userId: user.id,\n    roles: [admin.id],\n});\n```\n```python\nimport pulumi\nimport pulumi_auth0 as auth0\n\n# Example:\nadmin = auth0.Role(\"admin\", description=\"Administrator\")\nuser = auth0.User(\"user\",\n    connection_name=\"Username-Password-Authentication\",\n    username=\"unique_username\",\n    email=\"test@test.com\",\n    password=\"passpass$12$12\")\nuser_roles = auth0.UserRoles(\"userRoles\",\n    user_id=user.id,\n    roles=[admin.id])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Auth0 = Pulumi.Auth0;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Example:\n    var admin = new Auth0.Role(\"admin\", new()\n    {\n        Description = \"Administrator\",\n    });\n\n    var user = new Auth0.User(\"user\", new()\n    {\n        ConnectionName = \"Username-Password-Authentication\",\n        Username = \"unique_username\",\n        Email = \"test@test.com\",\n        Password = \"passpass$12$12\",\n    });\n\n    var userRoles = new Auth0.UserRoles(\"userRoles\", new()\n    {\n        UserId = user.Id,\n        Roles = new[]\n        {\n            admin.Id,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-auth0/sdk/v3/go/auth0\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tadmin, err := auth0.NewRole(ctx, \"admin\", \u0026auth0.RoleArgs{\n\t\t\tDescription: pulumi.String(\"Administrator\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tuser, err := auth0.NewUser(ctx, \"user\", \u0026auth0.UserArgs{\n\t\t\tConnectionName: pulumi.String(\"Username-Password-Authentication\"),\n\t\t\tUsername:       pulumi.String(\"unique_username\"),\n\t\t\tEmail:          pulumi.String(\"test@test.com\"),\n\t\t\tPassword:       pulumi.String(\"passpass$12$12\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = auth0.NewUserRoles(ctx, \"userRoles\", \u0026auth0.UserRolesArgs{\n\t\t\tUserId: user.ID(),\n\t\t\tRoles: pulumi.StringArray{\n\t\t\t\tadmin.ID(),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.auth0.Role;\nimport com.pulumi.auth0.RoleArgs;\nimport com.pulumi.auth0.User;\nimport com.pulumi.auth0.UserArgs;\nimport com.pulumi.auth0.UserRoles;\nimport com.pulumi.auth0.UserRolesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var admin = new Role(\"admin\", RoleArgs.builder()        \n            .description(\"Administrator\")\n            .build());\n\n        var user = new User(\"user\", UserArgs.builder()        \n            .connectionName(\"Username-Password-Authentication\")\n            .username(\"unique_username\")\n            .email(\"test@test.com\")\n            .password(\"passpass$12$12\")\n            .build());\n\n        var userRoles = new UserRoles(\"userRoles\", UserRolesArgs.builder()        \n            .userId(user.id())\n            .roles(admin.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Example:\n  admin:\n    type: auth0:Role\n    properties:\n      description: Administrator\n  user:\n    type: auth0:User\n    properties:\n      connectionName: Username-Password-Authentication\n      username: unique_username\n      email: test@test.com\n      password: passpass$12$12\n  userRoles:\n    type: auth0:UserRoles\n    properties:\n      userId: ${user.id}\n      roles:\n        - ${admin.id}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThis resource can be imported using the user ID. # Example\n\n```sh\n $ pulumi import auth0:index/userRoles:UserRoles user_roles \"auth0|111111111111111111111111\"\n```\n\n ",
            "properties": {
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of IDs of roles assigned to the user.\n"
                },
                "userId": {
                    "type": "string",
                    "description": "ID of the user.\n"
                }
            },
            "required": [
                "roles",
                "userId"
            ],
            "inputProperties": {
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of IDs of roles assigned to the user.\n"
                },
                "userId": {
                    "type": "string",
                    "description": "ID of the user.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "roles",
                "userId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering UserRoles resources.\n",
                "properties": {
                    "roles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Set of IDs of roles assigned to the user.\n"
                    },
                    "userId": {
                        "type": "string",
                        "description": "ID of the user.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "auth0:index/getAttackProtection:getAttackProtection": {
            "description": "Use this data source to access information about the tenant's attack protection settings.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as auth0 from \"@pulumi/auth0\";\n\nconst myProtection = auth0.getAttackProtection({});\n```\n```python\nimport pulumi\nimport pulumi_auth0 as auth0\n\nmy_protection = auth0.get_attack_protection()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Auth0 = Pulumi.Auth0;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myProtection = Auth0.GetAttackProtection.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-auth0/sdk/v3/go/auth0\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := auth0.LookupAttackProtection(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.auth0.Auth0Functions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myProtection = Auth0Functions.getAttackProtection();\n\n    }\n}\n```\n```yaml\nvariables:\n  myProtection:\n    fn::invoke:\n      Function: auth0:getAttackProtection\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getAttackProtection.\n",
                "properties": {
                    "breachedPasswordDetections": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/auth0:index/getAttackProtectionBreachedPasswordDetection:getAttackProtectionBreachedPasswordDetection"
                        },
                        "description": "Breached password detection protects your applications from bad actors logging in with stolen credentials.\n"
                    },
                    "bruteForceProtections": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/auth0:index/getAttackProtectionBruteForceProtection:getAttackProtectionBruteForceProtection"
                        },
                        "description": "Brute-force protection safeguards against a single IP address attacking a single user account.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "suspiciousIpThrottlings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/auth0:index/getAttackProtectionSuspiciousIpThrottling:getAttackProtectionSuspiciousIpThrottling"
                        },
                        "description": "Suspicious IP throttling blocks traffic from any IP address that rapidly attempts too many logins or signups.\n"
                    }
                },
                "type": "object",
                "required": [
                    "breachedPasswordDetections",
                    "bruteForceProtections",
                    "suspiciousIpThrottlings",
                    "id"
                ]
            }
        },
        "auth0:index/getBranding:getBranding": {
            "description": "Use this data source to access information about the tenant's branding settings.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as auth0 from \"@pulumi/auth0\";\n\nconst myBranding = auth0.getBranding({});\n```\n```python\nimport pulumi\nimport pulumi_auth0 as auth0\n\nmy_branding = auth0.get_branding()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Auth0 = Pulumi.Auth0;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myBranding = Auth0.GetBranding.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-auth0/sdk/v3/go/auth0\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := auth0.LookupBranding(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.auth0.Auth0Functions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myBranding = Auth0Functions.getBranding();\n\n    }\n}\n```\n```yaml\nvariables:\n  myBranding:\n    fn::invoke:\n      Function: auth0:getBranding\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getBranding.\n",
                "properties": {
                    "colors": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/auth0:index/getBrandingColor:getBrandingColor"
                        },
                        "description": "Configuration settings for colors for branding.\n"
                    },
                    "faviconUrl": {
                        "type": "string",
                        "description": "URL for the favicon.\n"
                    },
                    "fonts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/auth0:index/getBrandingFont:getBrandingFont"
                        },
                        "description": "Configuration settings to customize the font.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "logoUrl": {
                        "type": "string",
                        "description": "URL of logo for branding.\n"
                    },
                    "universalLogins": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/auth0:index/getBrandingUniversalLogin:getBrandingUniversalLogin"
                        },
                        "description": "Configuration settings for Universal Login.\n"
                    }
                },
                "type": "object",
                "required": [
                    "colors",
                    "faviconUrl",
                    "fonts",
                    "logoUrl",
                    "universalLogins",
                    "id"
                ]
            }
        },
        "auth0:index/getBrandingTheme:getBrandingTheme": {
            "description": "Use this data source to access information about the tenant's branding theme settings.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as auth0 from \"@pulumi/auth0\";\n\nconst myBrandingTheme = auth0.getBrandingTheme({});\n```\n```python\nimport pulumi\nimport pulumi_auth0 as auth0\n\nmy_branding_theme = auth0.get_branding_theme()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Auth0 = Pulumi.Auth0;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myBrandingTheme = Auth0.GetBrandingTheme.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-auth0/sdk/v3/go/auth0\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := auth0.LookupBrandingTheme(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.auth0.Auth0Functions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myBrandingTheme = Auth0Functions.getBrandingTheme();\n\n    }\n}\n```\n```yaml\nvariables:\n  myBrandingTheme:\n    fn::invoke:\n      Function: auth0:getBrandingTheme\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getBrandingTheme.\n",
                "properties": {
                    "borders": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/auth0:index/getBrandingThemeBorder:getBrandingThemeBorder"
                        }
                    },
                    "colors": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/auth0:index/getBrandingThemeColor:getBrandingThemeColor"
                        }
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The display name for the branding theme.\n"
                    },
                    "fonts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/auth0:index/getBrandingThemeFont:getBrandingThemeFont"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "pageBackgrounds": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/auth0:index/getBrandingThemePageBackground:getBrandingThemePageBackground"
                        }
                    },
                    "widgets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/auth0:index/getBrandingThemeWidget:getBrandingThemeWidget"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "borders",
                    "colors",
                    "displayName",
                    "fonts",
                    "pageBackgrounds",
                    "widgets",
                    "id"
                ]
            }
        },
        "auth0:index/getClient:getClient": {
            "description": "Data source to retrieve a specific Auth0 application client by `client_id` or `name`.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as auth0 from \"@pulumi/auth0\";\n\nconst some-client-by-name = auth0.getClient({\n    name: \"Name of my Application\",\n});\nconst some-client-by-id = auth0.getClient({\n    clientId: \"abcdefghkijklmnopqrstuvwxyz0123456789\",\n});\n```\n```python\nimport pulumi\nimport pulumi_auth0 as auth0\n\nsome_client_by_name = auth0.get_client(name=\"Name of my Application\")\nsome_client_by_id = auth0.get_client(client_id=\"abcdefghkijklmnopqrstuvwxyz0123456789\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Auth0 = Pulumi.Auth0;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var some_client_by_name = Auth0.GetClient.Invoke(new()\n    {\n        Name = \"Name of my Application\",\n    });\n\n    var some_client_by_id = Auth0.GetClient.Invoke(new()\n    {\n        ClientId = \"abcdefghkijklmnopqrstuvwxyz0123456789\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-auth0/sdk/v3/go/auth0\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := auth0.LookupClient(ctx, \u0026auth0.LookupClientArgs{\n\t\t\tName: pulumi.StringRef(\"Name of my Application\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = auth0.LookupClient(ctx, \u0026auth0.LookupClientArgs{\n\t\t\tClientId: pulumi.StringRef(\"abcdefghkijklmnopqrstuvwxyz0123456789\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.auth0.Auth0Functions;\nimport com.pulumi.auth0.inputs.GetClientArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var some-client-by-name = Auth0Functions.getClient(GetClientArgs.builder()\n            .name(\"Name of my Application\")\n            .build());\n\n        final var some-client-by-id = Auth0Functions.getClient(GetClientArgs.builder()\n            .clientId(\"abcdefghkijklmnopqrstuvwxyz0123456789\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  some-client-by-name:\n    fn::invoke:\n      Function: auth0:getClient\n      Arguments:\n        name: Name of my Application\n  some-client-by-id:\n    fn::invoke:\n      Function: auth0:getClient\n      Arguments:\n        clientId: abcdefghkijklmnopqrstuvwxyz0123456789\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getClient.\n",
                "properties": {
                    "clientId": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getClient.\n",
                "properties": {
                    "addons": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/auth0:index/getClientAddon:getClientAddon"
                        },
                        "description": "Addons enabled for this client and their associated configurations.\n"
                    },
                    "allowedClients": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of applications ID's that will be allowed to make delegation request. By default, all applications will be allowed.\n"
                    },
                    "allowedLogoutUrls": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "URLs that Auth0 may redirect to after logout.\n"
                    },
                    "allowedOrigins": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "URLs that represent valid origins for cross-origin resource sharing. By default, all your callback URLs will be allowed.\n"
                    },
                    "appType": {
                        "type": "string",
                        "description": "Type of application the client represents. Possible values are: `native`, `spa`, `regular_web`, `non_interactive`, `sso_integration`. Specific SSO integrations types accepted as well are: `rms`, `box`, `cloudbees`, `concur`, `dropbox`, `mscrm`, `echosign`, `egnyte`, `newrelic`, `office365`, `salesforce`, `sentry`, `sharepoint`, `slack`, `springcm`, `zendesk`, `zoom`.\n"
                    },
                    "callbacks": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "URLs that Auth0 may call back to after a user authenticates for the client. Make sure to specify the protocol (https://) otherwise the callback may fail in some cases. With the exception of custom URI schemes for native clients, all callbacks should use protocol https://.\n"
                    },
                    "clientAliases": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of audiences/realms for SAML protocol. Used by the wsfed addon.\n"
                    },
                    "clientId": {
                        "type": "string",
                        "description": "The ID of the client. If not provided, `name` must be set.\n"
                    },
                    "clientMetadata": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Metadata associated with the client, in the form of an object with string values (max 255 chars). Maximum of 10 metadata properties allowed. Field names (max 255 chars) are alphanumeric and may only include the following special characters: `:,-+=_*?\"/\\()\u003c\u003e@ [Tab] [Space]`.\n"
                    },
                    "clientSecret": {
                        "type": "string",
                        "secret": true
                    },
                    "crossOriginAuth": {
                        "type": "boolean",
                        "description": "Whether this client can be used to make cross-origin authentication requests (`true`) or it is not allowed to make such requests (`false`).\n"
                    },
                    "crossOriginLoc": {
                        "type": "string",
                        "description": "URL of the location in your site where the cross-origin verification takes place for the cross-origin auth flow when performing authentication in your own domain instead of Auth0 Universal Login page.\n"
                    },
                    "customLoginPage": {
                        "type": "string",
                        "description": "The content (HTML, CSS, JS) of the custom login page.\n"
                    },
                    "customLoginPageOn": {
                        "type": "boolean",
                        "description": "Indicates whether a custom login page is to be used.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the purpose of the client.\n"
                    },
                    "encryptionKey": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Encryption used for WS-Fed responses with this client.\n"
                    },
                    "formTemplate": {
                        "type": "string",
                        "description": "HTML form template to be used for WS-Federation.\n"
                    },
                    "grantTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Types of grants that this client is authorized to use.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "initiateLoginUri": {
                        "type": "string",
                        "description": "Initiate login URI. Must be HTTPS or an empty string.\n"
                    },
                    "isFirstParty": {
                        "type": "boolean",
                        "description": "Indicates whether this client is a first-party client.\n"
                    },
                    "isTokenEndpointIpHeaderTrusted": {
                        "type": "boolean",
                        "description": "Indicates whether the token endpoint IP header is trusted. Requires the authentication method to be set to `client_secret_post` or `client_secret_basic`. Setting this property when creating the resource, will default the authentication method to `client_secret_post`. To change the authentication method to `client_secret_basic` use the `auth0.ClientCredentials` resource.\n"
                    },
                    "jwtConfigurations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/auth0:index/getClientJwtConfiguration:getClientJwtConfiguration"
                        },
                        "description": "Configuration settings for the JWTs issued for this client.\n"
                    },
                    "logoUri": {
                        "type": "string",
                        "description": "URL of the logo for the client. Recommended size is 150px x 150px. If none is set, the default badge for the application type will be shown.\n"
                    },
                    "mobiles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/auth0:index/getClientMobile:getClientMobile"
                        },
                        "description": "Additional configuration for native mobile apps.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the client. If not provided, `client_id` must be set.\n"
                    },
                    "nativeSocialLogins": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/auth0:index/getClientNativeSocialLogin:getClientNativeSocialLogin"
                        },
                        "description": "Configuration settings to toggle native social login for mobile native applications. Once this is set it must stay set, with both resources set to `false` in order to change the `app_type`.\n"
                    },
                    "oidcBackchannelLogoutUrls": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Set of URLs that are valid to call back from Auth0 for OIDC backchannel logout. Currently only one URL is allowed.\n"
                    },
                    "oidcConformant": {
                        "type": "boolean",
                        "description": "Indicates whether this client will conform to strict OIDC specifications.\n"
                    },
                    "organizationRequireBehavior": {
                        "type": "string",
                        "description": "Defines how to proceed during an authentication transaction when `organization_usage = \"require\"`. Can be `no_prompt` (default), `pre_login_prompt` or  `post_login_prompt`.\n"
                    },
                    "organizationUsage": {
                        "type": "string",
                        "description": "Defines how to proceed during an authentication transaction with regards to an organization. Can be `deny` (default), `allow` or `require`.\n"
                    },
                    "refreshTokens": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/auth0:index/getClientRefreshToken:getClientRefreshToken"
                        },
                        "description": "Configuration settings for the refresh tokens issued for this client.\n"
                    },
                    "requirePushedAuthorizationRequests": {
                        "type": "boolean",
                        "description": "Makes the use of Pushed Authorization Requests mandatory for this client. This feature currently needs to be enabled on the tenant in order to make use of it.\n"
                    },
                    "signingKeys": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "additionalProperties": {
                                "$ref": "pulumi.json#/Any"
                            }
                        },
                        "description": "List containing a map of the public cert of the signing key and the public cert of the signing key in PKCS7.\n"
                    },
                    "sso": {
                        "type": "boolean",
                        "description": "Applies only to SSO clients and determines whether Auth0 will handle Single Sign-On (true) or whether the identity provider will (false).\n"
                    },
                    "ssoDisabled": {
                        "type": "boolean",
                        "description": "Indicates whether or not SSO is disabled.\n"
                    },
                    "tokenEndpointAuthMethod": {
                        "type": "string",
                        "description": "The authentication method for the token endpoint. Results include `none` (public client without a client secret), `client_secret_post` (client uses HTTP POST parameters), `client_secret_basic` (client uses HTTP Basic). Managing a client's authentication method can be done via the `auth0.ClientCredentials` resource.\n"
                    },
                    "webOrigins": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "URLs that represent valid web origins for use with web message response mode.\n"
                    }
                },
                "type": "object",
                "required": [
                    "addons",
                    "allowedClients",
                    "allowedLogoutUrls",
                    "allowedOrigins",
                    "appType",
                    "callbacks",
                    "clientAliases",
                    "clientMetadata",
                    "clientSecret",
                    "crossOriginAuth",
                    "crossOriginLoc",
                    "customLoginPage",
                    "customLoginPageOn",
                    "description",
                    "encryptionKey",
                    "formTemplate",
                    "grantTypes",
                    "initiateLoginUri",
                    "isFirstParty",
                    "isTokenEndpointIpHeaderTrusted",
                    "jwtConfigurations",
                    "logoUri",
                    "mobiles",
                    "nativeSocialLogins",
                    "oidcBackchannelLogoutUrls",
                    "oidcConformant",
                    "organizationRequireBehavior",
                    "organizationUsage",
                    "refreshTokens",
                    "requirePushedAuthorizationRequests",
                    "signingKeys",
                    "sso",
                    "ssoDisabled",
                    "tokenEndpointAuthMethod",
                    "webOrigins",
                    "id"
                ]
            }
        },
        "auth0:index/getConnection:getConnection": {
            "description": "Data source to retrieve a specific Auth0 connection by `connection_id` or `name`.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as auth0 from \"@pulumi/auth0\";\n\nconst some-connection-by-name = auth0.getConnection({\n    name: \"Acceptance-Test-Connection-{{.testName}}\",\n});\nconst some-connection-by-id = auth0.getConnection({\n    connectionId: \"con_abcdefghkijklmnopqrstuvwxyz0123456789\",\n});\n```\n```python\nimport pulumi\nimport pulumi_auth0 as auth0\n\nsome_connection_by_name = auth0.get_connection(name=\"Acceptance-Test-Connection-{{.testName}}\")\nsome_connection_by_id = auth0.get_connection(connection_id=\"con_abcdefghkijklmnopqrstuvwxyz0123456789\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Auth0 = Pulumi.Auth0;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var some_connection_by_name = Auth0.GetConnection.Invoke(new()\n    {\n        Name = \"Acceptance-Test-Connection-{{.testName}}\",\n    });\n\n    var some_connection_by_id = Auth0.GetConnection.Invoke(new()\n    {\n        ConnectionId = \"con_abcdefghkijklmnopqrstuvwxyz0123456789\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-auth0/sdk/v3/go/auth0\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := auth0.LookupConnection(ctx, \u0026auth0.LookupConnectionArgs{\n\t\t\tName: pulumi.StringRef(\"Acceptance-Test-Connection-{{.testName}}\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = auth0.LookupConnection(ctx, \u0026auth0.LookupConnectionArgs{\n\t\t\tConnectionId: pulumi.StringRef(\"con_abcdefghkijklmnopqrstuvwxyz0123456789\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.auth0.Auth0Functions;\nimport com.pulumi.auth0.inputs.GetConnectionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var some-connection-by-name = Auth0Functions.getConnection(GetConnectionArgs.builder()\n            .name(\"Acceptance-Test-Connection-{{.testName}}\")\n            .build());\n\n        final var some-connection-by-id = Auth0Functions.getConnection(GetConnectionArgs.builder()\n            .connectionId(\"con_abcdefghkijklmnopqrstuvwxyz0123456789\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  some-connection-by-name:\n    fn::invoke:\n      Function: auth0:getConnection\n      Arguments:\n        name: Acceptance-Test-Connection-{{.testName}}\n  some-connection-by-id:\n    fn::invoke:\n      Function: auth0:getConnection\n      Arguments:\n        connectionId: con_abcdefghkijklmnopqrstuvwxyz0123456789\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getConnection.\n",
                "properties": {
                    "connectionId": {
                        "type": "string",
                        "description": "The ID of the connection. If not provided, `name` must be set.\n"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getConnection.\n",
                "properties": {
                    "connectionId": {
                        "type": "string",
                        "description": "The ID of the connection. If not provided, `name` must be set.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Name used in login screen.\n"
                    },
                    "enabledClients": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "IDs of the clients for which the connection is enabled.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "isDomainConnection": {
                        "type": "boolean",
                        "description": "Indicates whether the connection is domain level.\n"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Metadata associated with the connection, in the form of a map of string values (max 255 chars).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the connection. If not provided, `connection_id` must be set.\n"
                    },
                    "options": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/auth0:index/getConnectionOption:getConnectionOption"
                        },
                        "description": "Configuration settings for connection options.\n"
                    },
                    "realms": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Defines the realms for which the connection will be used (e.g., email domains). If not specified, the connection name is added as the realm.\n"
                    },
                    "showAsButton": {
                        "type": "boolean",
                        "description": "Display connection as a button. Only available on enterprise connections.\n"
                    },
                    "strategy": {
                        "type": "string",
                        "description": "Type of the connection, which indicates the identity provider.\n"
                    }
                },
                "type": "object",
                "required": [
                    "displayName",
                    "enabledClients",
                    "isDomainConnection",
                    "metadata",
                    "options",
                    "realms",
                    "showAsButton",
                    "strategy",
                    "id"
                ]
            }
        },
        "auth0:index/getCustomDomain:getCustomDomain": {
            "description": "Data source to retrieve the custom domain configuration.\n",
            "outputs": {
                "description": "A collection of values returned by getCustomDomain.\n",
                "properties": {
                    "customClientIpHeader": {
                        "type": "string",
                        "description": "The HTTP header to fetch the client's IP address. Cannot be set on auth0_managed domains.\n"
                    },
                    "domain": {
                        "type": "string",
                        "description": "Name of the custom domain.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "originDomainName": {
                        "type": "string",
                        "description": "Once the configuration status is `ready`, the DNS name of the Auth0 origin server that handles traffic for the custom domain.\n"
                    },
                    "primary": {
                        "type": "boolean",
                        "description": "Indicates whether this is a primary domain.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Configuration status for the custom domain. Options include `disabled`, `pending`, `pending_verification`, and `ready`.\n"
                    },
                    "tlsPolicy": {
                        "type": "string",
                        "description": "TLS policy for the custom domain. Available options are: `compatible` or `recommended`. Compatible includes TLS 1.0, 1.1, 1.2, and recommended only includes TLS 1.2. Cannot be set on self_managed domains.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Provisioning type for the custom domain. Options include `auth0_managed_certs` and `self_managed_certs`.\n"
                    },
                    "verifications": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/auth0:index/getCustomDomainVerification:getCustomDomainVerification"
                        },
                        "description": "Configuration settings for verification.\n"
                    }
                },
                "type": "object",
                "required": [
                    "customClientIpHeader",
                    "domain",
                    "originDomainName",
                    "primary",
                    "status",
                    "tlsPolicy",
                    "type",
                    "verifications",
                    "id"
                ]
            }
        },
        "auth0:index/getOrganization:getOrganization": {
            "description": "Data source to retrieve a specific Auth0 organization by `organization_id` or `name`.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as auth0 from \"@pulumi/auth0\";\n\nconst some-organization-by-name = auth0.getOrganization({\n    name: \"my-org\",\n});\nconst some-organization-by-id = auth0.getOrganization({\n    organizationId: \"org_abcdefghkijklmnopqrstuvwxyz0123456789\",\n});\n```\n```python\nimport pulumi\nimport pulumi_auth0 as auth0\n\nsome_organization_by_name = auth0.get_organization(name=\"my-org\")\nsome_organization_by_id = auth0.get_organization(organization_id=\"org_abcdefghkijklmnopqrstuvwxyz0123456789\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Auth0 = Pulumi.Auth0;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var some_organization_by_name = Auth0.GetOrganization.Invoke(new()\n    {\n        Name = \"my-org\",\n    });\n\n    var some_organization_by_id = Auth0.GetOrganization.Invoke(new()\n    {\n        OrganizationId = \"org_abcdefghkijklmnopqrstuvwxyz0123456789\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-auth0/sdk/v3/go/auth0\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := auth0.LookupOrganization(ctx, \u0026auth0.LookupOrganizationArgs{\n\t\t\tName: pulumi.StringRef(\"my-org\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = auth0.LookupOrganization(ctx, \u0026auth0.LookupOrganizationArgs{\n\t\t\tOrganizationId: pulumi.StringRef(\"org_abcdefghkijklmnopqrstuvwxyz0123456789\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.auth0.Auth0Functions;\nimport com.pulumi.auth0.inputs.GetOrganizationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var some-organization-by-name = Auth0Functions.getOrganization(GetOrganizationArgs.builder()\n            .name(\"my-org\")\n            .build());\n\n        final var some-organization-by-id = Auth0Functions.getOrganization(GetOrganizationArgs.builder()\n            .organizationId(\"org_abcdefghkijklmnopqrstuvwxyz0123456789\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  some-organization-by-name:\n    fn::invoke:\n      Function: auth0:getOrganization\n      Arguments:\n        name: my-org\n  some-organization-by-id:\n    fn::invoke:\n      Function: auth0:getOrganization\n      Arguments:\n        organizationId: org_abcdefghkijklmnopqrstuvwxyz0123456789\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getOrganization.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the organization. If not provided, `organization_id` must be set. For performance, it is advised to use the `organization_id` as a lookup if possible.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The ID of the organization. If not provided, `name` must be set.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getOrganization.\n",
                "properties": {
                    "brandings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/auth0:index/getOrganizationBranding:getOrganizationBranding"
                        },
                        "description": "Defines how to style the login pages.\n"
                    },
                    "connections": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/auth0:index/getOrganizationConnection:getOrganizationConnection"
                        }
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Friendly name of this organization.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "User ID(s) that are members of the organization.\n"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Metadata associated with the organization. Maximum of 10 metadata properties allowed.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the organization. If not provided, `organization_id` must be set. For performance, it is advised to use the `organization_id` as a lookup if possible.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The ID of the organization. If not provided, `name` must be set.\n"
                    }
                },
                "type": "object",
                "required": [
                    "brandings",
                    "connections",
                    "displayName",
                    "members",
                    "metadata",
                    "id"
                ]
            }
        },
        "auth0:index/getPages:getPages": {
            "description": "Use this data source to access the HTML for the login, reset password, multi-factor authentication and error pages.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as auth0 from \"@pulumi/auth0\";\n\nconst myPages = auth0.getPages({});\n```\n```python\nimport pulumi\nimport pulumi_auth0 as auth0\n\nmy_pages = auth0.get_pages()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Auth0 = Pulumi.Auth0;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myPages = Auth0.GetPages.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-auth0/sdk/v3/go/auth0\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := auth0.LookupPages(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.auth0.Auth0Functions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myPages = Auth0Functions.getPages();\n\n    }\n}\n```\n```yaml\nvariables:\n  myPages:\n    fn::invoke:\n      Function: auth0:getPages\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getPages.\n",
                "properties": {
                    "changePasswords": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/auth0:index/getPagesChangePassword:getPagesChangePassword"
                        },
                        "description": "Configuration settings for customizing the Password Reset page.\n"
                    },
                    "errors": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/auth0:index/getPagesError:getPagesError"
                        },
                        "description": "Configuration settings for the Error pages.\n"
                    },
                    "guardianMfas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/auth0:index/getPagesGuardianMfa:getPagesGuardianMfa"
                        },
                        "description": "Configuration settings for customizing the Guardian Multi-Factor Authentication page.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "logins": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/auth0:index/getPagesLogin:getPagesLogin"
                        },
                        "description": "Configuration settings for customizing the Login page.\n"
                    }
                },
                "type": "object",
                "required": [
                    "changePasswords",
                    "errors",
                    "guardianMfas",
                    "logins",
                    "id"
                ]
            }
        },
        "auth0:index/getResourceServer:getResourceServer": {
            "description": "Data source to retrieve a specific Auth0 resource server by `resource_server_id` or `identifier`.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as auth0 from \"@pulumi/auth0\";\n\nconst some-resource-server-by-identifier = auth0.getResourceServer({\n    identifier: \"https://my-api.com/v1\",\n});\nconst some-resource-server-by-id = auth0.getResourceServer({\n    resourceServerId: \"abcdefghkijklmnopqrstuvwxyz0123456789\",\n});\n```\n```python\nimport pulumi\nimport pulumi_auth0 as auth0\n\nsome_resource_server_by_identifier = auth0.get_resource_server(identifier=\"https://my-api.com/v1\")\nsome_resource_server_by_id = auth0.get_resource_server(resource_server_id=\"abcdefghkijklmnopqrstuvwxyz0123456789\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Auth0 = Pulumi.Auth0;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var some_resource_server_by_identifier = Auth0.GetResourceServer.Invoke(new()\n    {\n        Identifier = \"https://my-api.com/v1\",\n    });\n\n    var some_resource_server_by_id = Auth0.GetResourceServer.Invoke(new()\n    {\n        ResourceServerId = \"abcdefghkijklmnopqrstuvwxyz0123456789\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-auth0/sdk/v3/go/auth0\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := auth0.LookupResourceServer(ctx, \u0026auth0.LookupResourceServerArgs{\n\t\t\tIdentifier: pulumi.StringRef(\"https://my-api.com/v1\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = auth0.LookupResourceServer(ctx, \u0026auth0.LookupResourceServerArgs{\n\t\t\tResourceServerId: pulumi.StringRef(\"abcdefghkijklmnopqrstuvwxyz0123456789\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.auth0.Auth0Functions;\nimport com.pulumi.auth0.inputs.GetResourceServerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var some-resource-server-by-identifier = Auth0Functions.getResourceServer(GetResourceServerArgs.builder()\n            .identifier(\"https://my-api.com/v1\")\n            .build());\n\n        final var some-resource-server-by-id = Auth0Functions.getResourceServer(GetResourceServerArgs.builder()\n            .resourceServerId(\"abcdefghkijklmnopqrstuvwxyz0123456789\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  some-resource-server-by-identifier:\n    fn::invoke:\n      Function: auth0:getResourceServer\n      Arguments:\n        identifier: https://my-api.com/v1\n  some-resource-server-by-id:\n    fn::invoke:\n      Function: auth0:getResourceServer\n      Arguments:\n        resourceServerId: abcdefghkijklmnopqrstuvwxyz0123456789\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getResourceServer.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier for the resource server. Used as the audience parameter for authorization calls. If not provided, `resource_server_id` must be set.\n"
                    },
                    "resourceServerId": {
                        "type": "string",
                        "description": "The ID of the resource server. If not provided, `identifier` must be set.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getResourceServer.\n",
                "properties": {
                    "allowOfflineAccess": {
                        "type": "boolean",
                        "description": "Indicates whether refresh tokens can be issued for this resource server.\n"
                    },
                    "enforcePolicies": {
                        "type": "boolean",
                        "description": "If this setting is enabled, RBAC authorization policies will be enforced for this API. Role and permission assignments will be evaluated during the login transaction.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier for the resource server. Used as the audience parameter for authorization calls. If not provided, `resource_server_id` must be set.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Friendly name for the resource server. Cannot include `\u003c` or `\u003e` characters.\n"
                    },
                    "resourceServerId": {
                        "type": "string",
                        "description": "The ID of the resource server. If not provided, `identifier` must be set.\n"
                    },
                    "scopes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/auth0:index/getResourceServerScope:getResourceServerScope"
                        },
                        "description": "List of permissions (scopes) used by this resource server.\n"
                    },
                    "signingAlg": {
                        "type": "string",
                        "description": "Algorithm used to sign JWTs. Options include `HS256` and `RS256`.\n"
                    },
                    "signingSecret": {
                        "type": "string",
                        "description": "Secret used to sign tokens when using symmetric algorithms (HS256).\n"
                    },
                    "skipConsentForVerifiableFirstPartyClients": {
                        "type": "boolean",
                        "description": "Indicates whether to skip user consent for applications flagged as first party.\n"
                    },
                    "tokenDialect": {
                        "type": "string",
                        "description": "Dialect of access tokens that should be issued for this resource server. Options include `access_token` or `access_token_authz`. If this setting is set to `access_token_authz`, the Permissions claim will be added to the access token. Only available if RBAC (`enforce_policies`) is enabled for this API.\n"
                    },
                    "tokenLifetime": {
                        "type": "integer",
                        "description": "Number of seconds during which access tokens issued for this resource server from the token endpoint remain valid.\n"
                    },
                    "tokenLifetimeForWeb": {
                        "type": "integer",
                        "description": "Number of seconds during which access tokens issued for this resource server via implicit or hybrid flows remain valid. Cannot be greater than the `token_lifetime` value.\n"
                    },
                    "verificationLocation": {
                        "type": "string",
                        "description": "URL from which to retrieve JWKs for this resource server. Used for verifying the JWT sent to Auth0 for token introspection.\n"
                    }
                },
                "type": "object",
                "required": [
                    "allowOfflineAccess",
                    "enforcePolicies",
                    "name",
                    "scopes",
                    "signingAlg",
                    "signingSecret",
                    "skipConsentForVerifiableFirstPartyClients",
                    "tokenDialect",
                    "tokenLifetime",
                    "tokenLifetimeForWeb",
                    "verificationLocation",
                    "id"
                ]
            }
        },
        "auth0:index/getRole:getRole": {
            "description": "Data source to retrieve a specific Auth0 role by `role_id` or `name`.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as auth0 from \"@pulumi/auth0\";\n\nconst some-role-by-name = auth0.getRole({\n    name: \"my-role\",\n});\nconst some-role-by-id = auth0.getRole({\n    roleId: \"abcdefghkijklmnopqrstuvwxyz0123456789\",\n});\n```\n```python\nimport pulumi\nimport pulumi_auth0 as auth0\n\nsome_role_by_name = auth0.get_role(name=\"my-role\")\nsome_role_by_id = auth0.get_role(role_id=\"abcdefghkijklmnopqrstuvwxyz0123456789\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Auth0 = Pulumi.Auth0;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var some_role_by_name = Auth0.GetRole.Invoke(new()\n    {\n        Name = \"my-role\",\n    });\n\n    var some_role_by_id = Auth0.GetRole.Invoke(new()\n    {\n        RoleId = \"abcdefghkijklmnopqrstuvwxyz0123456789\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-auth0/sdk/v3/go/auth0\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := auth0.LookupRole(ctx, \u0026auth0.LookupRoleArgs{\n\t\t\tName: pulumi.StringRef(\"my-role\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = auth0.LookupRole(ctx, \u0026auth0.LookupRoleArgs{\n\t\t\tRoleId: pulumi.StringRef(\"abcdefghkijklmnopqrstuvwxyz0123456789\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.auth0.Auth0Functions;\nimport com.pulumi.auth0.inputs.GetRoleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var some-role-by-name = Auth0Functions.getRole(GetRoleArgs.builder()\n            .name(\"my-role\")\n            .build());\n\n        final var some-role-by-id = Auth0Functions.getRole(GetRoleArgs.builder()\n            .roleId(\"abcdefghkijklmnopqrstuvwxyz0123456789\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  some-role-by-name:\n    fn::invoke:\n      Function: auth0:getRole\n      Arguments:\n        name: my-role\n  some-role-by-id:\n    fn::invoke:\n      Function: auth0:getRole\n      Arguments:\n        roleId: abcdefghkijklmnopqrstuvwxyz0123456789\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getRole.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "roleId": {
                        "type": "string",
                        "description": "The ID of the role. If not provided, `name` must be set.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getRole.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the role.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the role. If not provided, `role_id` must be set.\n"
                    },
                    "permissions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/auth0:index/getRolePermission:getRolePermission"
                        },
                        "description": "Configuration settings for permissions (scopes) attached to the role.\n"
                    },
                    "roleId": {
                        "type": "string",
                        "description": "The ID of the role. If not provided, `name` must be set.\n"
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of user IDs assigned to this role. Retrieves a maximum of 1000 user IDs.\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "permissions",
                    "users",
                    "id"
                ]
            }
        },
        "auth0:index/getSigningKeys:getSigningKeys": {
            "description": "Data source to retrieve signing keys used by the applications in your tenant. [Learn more](https://auth0.com/docs/get-started/tenant-settings/signing-keys).\n",
            "outputs": {
                "description": "A collection of values returned by getSigningKeys.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "signingKeys": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/auth0:index/getSigningKeysSigningKey:getSigningKeysSigningKey"
                        },
                        "description": "All application signing keys.\n"
                    }
                },
                "type": "object",
                "required": [
                    "signingKeys",
                    "id"
                ]
            }
        },
        "auth0:index/getTenant:getTenant": {
            "description": "Use this data source to access information about the tenant this provider is configured to access.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as auth0 from \"@pulumi/auth0\";\n\nconst myTenant = auth0.getTenant({});\n```\n```python\nimport pulumi\nimport pulumi_auth0 as auth0\n\nmy_tenant = auth0.get_tenant()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Auth0 = Pulumi.Auth0;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myTenant = Auth0.GetTenant.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-auth0/sdk/v3/go/auth0\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := auth0.LookupTenant(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.auth0.Auth0Functions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myTenant = Auth0Functions.getTenant();\n\n    }\n}\n```\n```yaml\nvariables:\n  myTenant:\n    fn::invoke:\n      Function: auth0:getTenant\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getTenant.\n",
                "properties": {
                    "allowOrganizationNameInAuthenticationApi": {
                        "type": "boolean",
                        "description": "Whether to accept an organization name instead of an ID on auth endpoints.\n"
                    },
                    "allowedLogoutUrls": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "URLs that Auth0 may redirect to after logout.\n"
                    },
                    "customizeMfaInPostloginAction": {
                        "type": "boolean",
                        "description": "Whether to enable flexible factors for MFA in the PostLogin action.\n"
                    },
                    "defaultAudience": {
                        "type": "string",
                        "description": "API Audience to use by default for API Authorization flows. This setting is equivalent to appending the audience to every authorization request made to the tenant for every application.\n"
                    },
                    "defaultDirectory": {
                        "type": "string",
                        "description": "Name of the connection to be used for Password Grant exchanges. Options include `auth0-adldap`, `ad`, `auth0`, `email`, `sms`, `waad`, and `adfs`.\n"
                    },
                    "defaultRedirectionUri": {
                        "type": "string",
                        "description": "The default absolute redirection URI. Must be HTTPS or an empty string.\n"
                    },
                    "domain": {
                        "type": "string",
                        "description": "Your Auth0 domain name.\n"
                    },
                    "enabledLocales": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Supported locales for the user interface. The first locale in the list will be used to set the default locale.\n"
                    },
                    "flags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/auth0:index/getTenantFlag:getTenantFlag"
                        },
                        "description": "Configuration settings for tenant flags.\n"
                    },
                    "friendlyName": {
                        "type": "string",
                        "description": "Friendly name for the tenant.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "idleSessionLifetime": {
                        "type": "number",
                        "description": "Number of hours during which a session can be inactive before the user must log in again.\n"
                    },
                    "managementApiIdentifier": {
                        "type": "string",
                        "description": "The identifier value of the built-in Management API resource server, which can be used as an audience when configuring client grants.\n"
                    },
                    "pictureUrl": {
                        "type": "string",
                        "description": "URL of logo to be shown for the tenant. Recommended size is 150px x 150px. If no URL is provided, the Auth0 logo will be used.\n"
                    },
                    "sandboxVersion": {
                        "type": "string",
                        "description": "Selected sandbox version for the extensibility environment, which allows you to use custom scripts to extend parts of Auth0's functionality.\n"
                    },
                    "sessionCookies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/auth0:index/getTenantSessionCooky:getTenantSessionCooky"
                        },
                        "description": "Alters behavior of tenant's session cookie. Contains a single `mode` property.\n"
                    },
                    "sessionLifetime": {
                        "type": "number",
                        "description": "Number of hours during which a session will stay valid.\n"
                    },
                    "sessions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/auth0:index/getTenantSession:getTenantSession"
                        },
                        "description": "Sessions related settings for the tenant.\n"
                    },
                    "supportEmail": {
                        "type": "string",
                        "description": "Support email address for authenticating users.\n"
                    },
                    "supportUrl": {
                        "type": "string",
                        "description": "Support URL for authenticating users.\n"
                    }
                },
                "type": "object",
                "required": [
                    "allowOrganizationNameInAuthenticationApi",
                    "allowedLogoutUrls",
                    "customizeMfaInPostloginAction",
                    "defaultAudience",
                    "defaultDirectory",
                    "defaultRedirectionUri",
                    "domain",
                    "enabledLocales",
                    "flags",
                    "friendlyName",
                    "idleSessionLifetime",
                    "managementApiIdentifier",
                    "pictureUrl",
                    "sandboxVersion",
                    "sessionCookies",
                    "sessionLifetime",
                    "sessions",
                    "supportEmail",
                    "supportUrl",
                    "id"
                ]
            }
        },
        "auth0:index/getUser:getUser": {
            "description": "Data source to retrieve a specific Auth0 user by `user_id`.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as auth0 from \"@pulumi/auth0\";\n\nconst myUser = auth0.getUser({\n    userId: \"auth0|34fdr23fdsfdfsf\",\n});\n```\n```python\nimport pulumi\nimport pulumi_auth0 as auth0\n\nmy_user = auth0.get_user(user_id=\"auth0|34fdr23fdsfdfsf\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Auth0 = Pulumi.Auth0;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myUser = Auth0.GetUser.Invoke(new()\n    {\n        UserId = \"auth0|34fdr23fdsfdfsf\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-auth0/sdk/v3/go/auth0\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := auth0.LookupUser(ctx, \u0026auth0.LookupUserArgs{\n\t\t\tUserId: \"auth0|34fdr23fdsfdfsf\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.auth0.Auth0Functions;\nimport com.pulumi.auth0.inputs.GetUserArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myUser = Auth0Functions.getUser(GetUserArgs.builder()\n            .userId(\"auth0|34fdr23fdsfdfsf\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myUser:\n    fn::invoke:\n      Function: auth0:getUser\n      Arguments:\n        userId: auth0|34fdr23fdsfdfsf\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getUser.\n",
                "properties": {
                    "userId": {
                        "type": "string",
                        "description": "ID of the user.\n"
                    }
                },
                "type": "object",
                "required": [
                    "userId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getUser.\n",
                "properties": {
                    "appMetadata": {
                        "type": "string",
                        "description": "Custom fields that store info about the user that impact the user's core functionality, such as how an application functions or what the user can access. Examples include support plans and IDs for external accounts.\n"
                    },
                    "blocked": {
                        "type": "boolean",
                        "description": "Indicates whether the user is blocked or not.\n"
                    },
                    "connectionName": {
                        "type": "string",
                        "description": "Name of the connection from which the user information was sourced.\n"
                    },
                    "email": {
                        "type": "string",
                        "description": "Email address of the user.\n"
                    },
                    "emailVerified": {
                        "type": "boolean",
                        "description": "Indicates whether the email address has been verified.\n"
                    },
                    "familyName": {
                        "type": "string",
                        "description": "Family name of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled 'Sync user profile attributes at each login'. For more information, see: [Configure Identity Provider Connection for User Profile Updates](https://auth0.com/docs/manage-users/user-accounts/user-profiles/configure-connection-sync-with-auth0).\n"
                    },
                    "givenName": {
                        "type": "string",
                        "description": "Given name of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled 'Sync user profile attributes at each login'. For more information, see: [Configure Identity Provider Connection for User Profile Updates](https://auth0.com/docs/manage-users/user-accounts/user-profiles/configure-connection-sync-with-auth0).\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled 'Sync user profile attributes at each login'. For more information, see: [Configure Identity Provider Connection for User Profile Updates](https://auth0.com/docs/manage-users/user-accounts/user-profiles/configure-connection-sync-with-auth0).\n"
                    },
                    "nickname": {
                        "type": "string",
                        "description": "Preferred nickname or alias of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled 'Sync user profile attributes at each login'. For more information, see: [Configure Identity Provider Connection for User Profile Updates](https://auth0.com/docs/manage-users/user-accounts/user-profiles/configure-connection-sync-with-auth0).\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "Initial password for this user. Required for non-passwordless connections (SMS and email).\n"
                    },
                    "permissions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/auth0:index/getUserPermission:getUserPermission"
                        },
                        "description": "List of API permissions granted to the user.\n"
                    },
                    "phoneNumber": {
                        "type": "string",
                        "description": "Phone number for the user; follows the E.164 recommendation. Used for SMS connections.\n"
                    },
                    "phoneVerified": {
                        "type": "boolean",
                        "description": "Indicates whether the phone number has been verified.\n"
                    },
                    "picture": {
                        "type": "string",
                        "description": "Picture of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled 'Sync user profile attributes at each login'. For more information, see: [Configure Identity Provider Connection for User Profile Updates](https://auth0.com/docs/manage-users/user-accounts/user-profiles/configure-connection-sync-with-auth0).\n"
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Set of IDs of roles assigned to the user.\n"
                    },
                    "userId": {
                        "type": "string",
                        "description": "ID of the user.\n"
                    },
                    "userMetadata": {
                        "type": "string",
                        "description": "Custom fields that store info about the user that does not impact a user's core functionality. Examples include work address, home address, and user preferences.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username of the user. Only valid if the connection requires a username.\n"
                    },
                    "verifyEmail": {
                        "type": "boolean",
                        "description": "Indicates whether the user will receive a verification email after creation. Overrides behavior of `email_verified` parameter.\n"
                    }
                },
                "type": "object",
                "required": [
                    "appMetadata",
                    "blocked",
                    "connectionName",
                    "email",
                    "emailVerified",
                    "familyName",
                    "givenName",
                    "name",
                    "nickname",
                    "password",
                    "permissions",
                    "phoneNumber",
                    "phoneVerified",
                    "picture",
                    "roles",
                    "userId",
                    "userMetadata",
                    "username",
                    "verifyEmail",
                    "id"
                ]
            }
        }
    }
}