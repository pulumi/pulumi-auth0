// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * With this resource, you can configure [SCIM(System for Cross-domain Identity Management)](https://simplecloud.info/) support for `SAML` and `OpenID Connect` Enterprise connections.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as auth0 from "@pulumi/auth0";
 *
 * const myEnterpriseConnection = new auth0.Connection("my_enterprise_connection", {
 *     name: "my-enterprise-connection",
 *     displayName: "My Enterprise Connection",
 *     strategy: "okta",
 *     options: {
 *         clientId: "1234567",
 *         clientSecret: "1234567",
 *         issuer: "https://example.okta.com",
 *         jwksUri: "https://example.okta.com/oauth2/v1/keys",
 *         tokenEndpoint: "https://example.okta.com/oauth2/v1/token",
 *         authorizationEndpoint: "https://example.okta.com/oauth2/v1/authorize",
 *     },
 * });
 * const myEnterpriseConnection2 = new auth0.Connection("my_enterprise_connection_2", {
 *     name: "my-enterprise-connection-2",
 *     displayName: "My Enterprise Connection 2",
 *     strategy: "okta",
 *     options: {
 *         clientId: "1234567",
 *         clientSecret: "1234567",
 *         issuer: "https://example.okta.com",
 *         jwksUri: "https://example.okta.com/oauth2/v1/keys",
 *         tokenEndpoint: "https://example.okta.com/oauth2/v1/token",
 *         authorizationEndpoint: "https://example.okta.com/oauth2/v1/authorize",
 *     },
 * });
 * // A resource for configuring an Auth0 Connection SCIM Configuration, using default values.
 * // Only one can be specified for a connection.
 * const myConnScimConfigurationDefault = new auth0.ConnectionScimConfiguration("my_conn_scim_configuration_default", {connectionId: myEnterpriseConnection.id});
 * // A resource for configuring an Auth0 Connection SCIM Configuration, specifying `user_id_attribute` and `mapping`.
 * // Only one can be specified for a connection.
 * const myConnScimConfiguration = new auth0.ConnectionScimConfiguration("my_conn_scim_configuration", {
 *     connectionId: myEnterpriseConnection2.id,
 *     userIdAttribute: "attribute1",
 *     mappings: [
 *         {
 *             auth0: "auth0_attribute1",
 *             scim: "sacim_attribute1",
 *         },
 *         {
 *             auth0: "auth0_attribute2",
 *             scim: "sacim_attribute2",
 *         },
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * This resource can be imported by specifying the connection ID <connectionID>
 *
 * Example:
 *
 * ```sh
 * $ pulumi import auth0:index/connectionScimConfiguration:ConnectionScimConfiguration my_conn_scim_conf "con_XXXXX"
 * ```
 */
export class ConnectionScimConfiguration extends pulumi.CustomResource {
    /**
     * Get an existing ConnectionScimConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConnectionScimConfigurationState, opts?: pulumi.CustomResourceOptions): ConnectionScimConfiguration {
        return new ConnectionScimConfiguration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'auth0:index/connectionScimConfiguration:ConnectionScimConfiguration';

    /**
     * Returns true if the given object is an instance of ConnectionScimConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ConnectionScimConfiguration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConnectionScimConfiguration.__pulumiType;
    }

    /**
     * ID of the connection for this SCIM configuration.
     */
    public readonly connectionId!: pulumi.Output<string>;
    /**
     * Name of the connection for this SCIM configuration.
     */
    public /*out*/ readonly connectionName!: pulumi.Output<string>;
    /**
     * Mapping between Auth0 attributes and SCIM attributes. If `userIdAttribute` is set, `mapping` must be set as well.
     */
    public readonly mappings!: pulumi.Output<outputs.ConnectionScimConfigurationMapping[]>;
    /**
     * Schema of the connection for this SCIM configuration.
     */
    public /*out*/ readonly strategy!: pulumi.Output<string>;
    /**
     * Name of the tenant for this SCIM configuration.
     */
    public /*out*/ readonly tenantName!: pulumi.Output<string>;
    /**
     * User ID attribute for generation unique of user ids. If `userIdAttribute` is set, `mapping` must be set as well. Defaults to `userName` for SAML connections and `externalId` for OIDC connections.
     */
    public readonly userIdAttribute!: pulumi.Output<string>;

    /**
     * Create a ConnectionScimConfiguration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConnectionScimConfigurationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConnectionScimConfigurationArgs | ConnectionScimConfigurationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConnectionScimConfigurationState | undefined;
            resourceInputs["connectionId"] = state ? state.connectionId : undefined;
            resourceInputs["connectionName"] = state ? state.connectionName : undefined;
            resourceInputs["mappings"] = state ? state.mappings : undefined;
            resourceInputs["strategy"] = state ? state.strategy : undefined;
            resourceInputs["tenantName"] = state ? state.tenantName : undefined;
            resourceInputs["userIdAttribute"] = state ? state.userIdAttribute : undefined;
        } else {
            const args = argsOrState as ConnectionScimConfigurationArgs | undefined;
            if ((!args || args.connectionId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connectionId'");
            }
            resourceInputs["connectionId"] = args ? args.connectionId : undefined;
            resourceInputs["mappings"] = args ? args.mappings : undefined;
            resourceInputs["userIdAttribute"] = args ? args.userIdAttribute : undefined;
            resourceInputs["connectionName"] = undefined /*out*/;
            resourceInputs["strategy"] = undefined /*out*/;
            resourceInputs["tenantName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ConnectionScimConfiguration.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ConnectionScimConfiguration resources.
 */
export interface ConnectionScimConfigurationState {
    /**
     * ID of the connection for this SCIM configuration.
     */
    connectionId?: pulumi.Input<string>;
    /**
     * Name of the connection for this SCIM configuration.
     */
    connectionName?: pulumi.Input<string>;
    /**
     * Mapping between Auth0 attributes and SCIM attributes. If `userIdAttribute` is set, `mapping` must be set as well.
     */
    mappings?: pulumi.Input<pulumi.Input<inputs.ConnectionScimConfigurationMapping>[]>;
    /**
     * Schema of the connection for this SCIM configuration.
     */
    strategy?: pulumi.Input<string>;
    /**
     * Name of the tenant for this SCIM configuration.
     */
    tenantName?: pulumi.Input<string>;
    /**
     * User ID attribute for generation unique of user ids. If `userIdAttribute` is set, `mapping` must be set as well. Defaults to `userName` for SAML connections and `externalId` for OIDC connections.
     */
    userIdAttribute?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ConnectionScimConfiguration resource.
 */
export interface ConnectionScimConfigurationArgs {
    /**
     * ID of the connection for this SCIM configuration.
     */
    connectionId: pulumi.Input<string>;
    /**
     * Mapping between Auth0 attributes and SCIM attributes. If `userIdAttribute` is set, `mapping` must be set as well.
     */
    mappings?: pulumi.Input<pulumi.Input<inputs.ConnectionScimConfigurationMapping>[]>;
    /**
     * User ID attribute for generation unique of user ids. If `userIdAttribute` is set, `mapping` must be set as well. Defaults to `userName` for SAML connections and `externalId` for OIDC connections.
     */
    userIdAttribute?: pulumi.Input<string>;
}
