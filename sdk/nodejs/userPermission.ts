// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * With this resource, you can manage user permissions.
 *
 * !> This resource appends a permission to a user. In contrast, the `auth0.UserPermissions` resource manages all the
 * permissions assigned to a user. To avoid potential issues, it is recommended not to use this resource in conjunction
 * with the `auth0.UserPermissions` resource when managing permissions for the same user id.
 *
 * ## Example Usage
 *
 * ## Import
 *
 * This resource can be imported by specifying the
 *
 * user ID, resource identifier and permission name separated by "::" (note the double colon)
 *
 * <userID>::<resourceServerIdentifier>::<permission>
 *
 * Example:
 *
 * ```sh
 * $ pulumi import auth0:index/userPermission:UserPermission permission "auth0|111111111111111111111111::https://api.travel0.com/v1::read:posts"
 * ```
 */
export class UserPermission extends pulumi.CustomResource {
    /**
     * Get an existing UserPermission resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserPermissionState, opts?: pulumi.CustomResourceOptions): UserPermission {
        return new UserPermission(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'auth0:index/userPermission:UserPermission';

    /**
     * Returns true if the given object is an instance of UserPermission.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is UserPermission {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === UserPermission.__pulumiType;
    }

    /**
     * Description of the permission.
     */
    declare public /*out*/ readonly description: pulumi.Output<string>;
    /**
     * Name of the permission.
     */
    declare public readonly permission: pulumi.Output<string>;
    /**
     * Identifier of the resource server that the permission is associated with.
     */
    declare public readonly resourceServerIdentifier: pulumi.Output<string>;
    /**
     * Name of the resource server that the permission is associated with.
     */
    declare public /*out*/ readonly resourceServerName: pulumi.Output<string>;
    /**
     * ID of the user to associate the permission to.
     */
    declare public readonly userId: pulumi.Output<string>;

    /**
     * Create a UserPermission resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UserPermissionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserPermissionArgs | UserPermissionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UserPermissionState | undefined;
            resourceInputs["description"] = state?.description;
            resourceInputs["permission"] = state?.permission;
            resourceInputs["resourceServerIdentifier"] = state?.resourceServerIdentifier;
            resourceInputs["resourceServerName"] = state?.resourceServerName;
            resourceInputs["userId"] = state?.userId;
        } else {
            const args = argsOrState as UserPermissionArgs | undefined;
            if (args?.permission === undefined && !opts.urn) {
                throw new Error("Missing required property 'permission'");
            }
            if (args?.resourceServerIdentifier === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceServerIdentifier'");
            }
            if (args?.userId === undefined && !opts.urn) {
                throw new Error("Missing required property 'userId'");
            }
            resourceInputs["permission"] = args?.permission;
            resourceInputs["resourceServerIdentifier"] = args?.resourceServerIdentifier;
            resourceInputs["userId"] = args?.userId;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["resourceServerName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(UserPermission.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering UserPermission resources.
 */
export interface UserPermissionState {
    /**
     * Description of the permission.
     */
    description?: pulumi.Input<string>;
    /**
     * Name of the permission.
     */
    permission?: pulumi.Input<string>;
    /**
     * Identifier of the resource server that the permission is associated with.
     */
    resourceServerIdentifier?: pulumi.Input<string>;
    /**
     * Name of the resource server that the permission is associated with.
     */
    resourceServerName?: pulumi.Input<string>;
    /**
     * ID of the user to associate the permission to.
     */
    userId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a UserPermission resource.
 */
export interface UserPermissionArgs {
    /**
     * Name of the permission.
     */
    permission: pulumi.Input<string>;
    /**
     * Identifier of the resource server that the permission is associated with.
     */
    resourceServerIdentifier: pulumi.Input<string>;
    /**
     * ID of the user to associate the permission to.
     */
    userId: pulumi.Input<string>;
}
