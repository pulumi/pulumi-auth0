// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * With this resource, you can manage all of a user's permissions.
 *
 * !> To prevent issues, avoid using this resource together with the `auth0.UserPermission` resource.
 *
 * ## Import
 *
 * This resource can be imported by specifying the user ID Example
 *
 * ```sh
 *  $ pulumi import auth0:index/userPermissions:UserPermissions all_user_permissions "auth0|111111111111111111111111"
 * ```
 */
export class UserPermissions extends pulumi.CustomResource {
    /**
     * Get an existing UserPermissions resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserPermissionsState, opts?: pulumi.CustomResourceOptions): UserPermissions {
        return new UserPermissions(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'auth0:index/userPermissions:UserPermissions';

    /**
     * Returns true if the given object is an instance of UserPermissions.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is UserPermissions {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === UserPermissions.__pulumiType;
    }

    /**
     * List of API permissions granted to the user.
     */
    public readonly permissions!: pulumi.Output<outputs.UserPermissionsPermission[]>;
    /**
     * ID of the user to associate the permission to.
     */
    public readonly userId!: pulumi.Output<string>;

    /**
     * Create a UserPermissions resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UserPermissionsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserPermissionsArgs | UserPermissionsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UserPermissionsState | undefined;
            resourceInputs["permissions"] = state ? state.permissions : undefined;
            resourceInputs["userId"] = state ? state.userId : undefined;
        } else {
            const args = argsOrState as UserPermissionsArgs | undefined;
            if ((!args || args.permissions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'permissions'");
            }
            if ((!args || args.userId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userId'");
            }
            resourceInputs["permissions"] = args ? args.permissions : undefined;
            resourceInputs["userId"] = args ? args.userId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(UserPermissions.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering UserPermissions resources.
 */
export interface UserPermissionsState {
    /**
     * List of API permissions granted to the user.
     */
    permissions?: pulumi.Input<pulumi.Input<inputs.UserPermissionsPermission>[]>;
    /**
     * ID of the user to associate the permission to.
     */
    userId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a UserPermissions resource.
 */
export interface UserPermissionsArgs {
    /**
     * List of API permissions granted to the user.
     */
    permissions: pulumi.Input<pulumi.Input<inputs.UserPermissionsPermission>[]>;
    /**
     * ID of the user to associate the permission to.
     */
    userId: pulumi.Input<string>;
}
