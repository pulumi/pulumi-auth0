// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * With Auth0, you can have standard welcome, password reset, and account verification email-based workflows built right into Auth0. This resource allows you to configure email templates to customize the look, feel, and sender identities of emails sent by Auth0. Used in conjunction with configured email providers.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as auth0 from "@pulumi/auth0";
 *
 * const myEmailProvider = new auth0.EmailProvider("myEmailProvider", {
 *     enabled: true,
 *     defaultFromAddress: "accounts@example.com",
 *     credentials: {
 *         accessKeyId: "AKIAXXXXXXXXXXXXXXXX",
 *         secretAccessKey: "7e8c2148xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
 *         region: "us-east-1",
 *     },
 * });
 * const myEmailTemplate = new auth0.EmailTemplate("myEmailTemplate", {
 *     template: "welcome_email",
 *     body: "<html><body><h1>Welcome!</h1></body></html>",
 *     from: "welcome@example.com",
 *     resultUrl: "https://example.com/welcome",
 *     subject: "Welcome",
 *     syntax: "liquid",
 *     urlLifetimeInSeconds: 3600,
 *     enabled: true,
 * }, {
 *     dependsOn: [myEmailProvider],
 * });
 * ```
 *
 * ## Import
 *
 * This resource can be imported using the pre-defined template name. # These names are `verify_email`, `verify_email_by_code`, `reset_email`, `welcome_email`, `blocked_account`, `stolen_credentials`, `enrollment_email`, `mfa_oob_code`, and `user_invitation`. # The names `change_password`, and `password_reset` are also supported for legacy scenarios. # Example
 *
 * ```sh
 *  $ pulumi import auth0:index/emailTemplate:EmailTemplate my_email_template "welcome_email"
 * ```
 */
export class EmailTemplate extends pulumi.CustomResource {
    /**
     * Get an existing EmailTemplate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EmailTemplateState, opts?: pulumi.CustomResourceOptions): EmailTemplate {
        return new EmailTemplate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'auth0:index/emailTemplate:EmailTemplate';

    /**
     * Returns true if the given object is an instance of EmailTemplate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EmailTemplate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EmailTemplate.__pulumiType;
    }

    /**
     * Body of the email template. You can include [common variables](https://auth0.com/docs/customize/email/email-templates#common-variables).
     */
    public readonly body!: pulumi.Output<string>;
    /**
     * Indicates whether the template is enabled.
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * Email address to use as the sender. You can include [common variables](https://auth0.com/docs/customize/email/email-templates#common-variables).
     */
    public readonly from!: pulumi.Output<string>;
    /**
     * Whether the `resetEmail` and `verifyEmail` templates should include the user's email address as the email parameter in the `returnUrl` (true) or whether no email address should be included in the redirect (false). Defaults to `true`.
     */
    public readonly includeEmailInRedirect!: pulumi.Output<boolean>;
    /**
     * URL to redirect the user to after a successful action. [Learn more](https://auth0.com/docs/customize/email/email-templates#configure-template-fields).
     */
    public readonly resultUrl!: pulumi.Output<string | undefined>;
    /**
     * Subject line of the email. You can include [common variables](https://auth0.com/docs/customize/email/email-templates#common-variables).
     */
    public readonly subject!: pulumi.Output<string>;
    /**
     * Syntax of the template body. You can use either text or HTML with Liquid syntax.
     */
    public readonly syntax!: pulumi.Output<string>;
    /**
     * Template name. Options include `verifyEmail`, `verifyEmailByCode`, `resetEmail`, `welcomeEmail`, `blockedAccount`, `stolenCredentials`, `enrollmentEmail`, `mfaOobCode`, `userInvitation`, `changePassword` (legacy), or `passwordReset` (legacy).
     */
    public readonly template!: pulumi.Output<string>;
    /**
     * Number of seconds during which the link within the email will be valid.
     */
    public readonly urlLifetimeInSeconds!: pulumi.Output<number | undefined>;

    /**
     * Create a EmailTemplate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EmailTemplateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EmailTemplateArgs | EmailTemplateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EmailTemplateState | undefined;
            resourceInputs["body"] = state ? state.body : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["from"] = state ? state.from : undefined;
            resourceInputs["includeEmailInRedirect"] = state ? state.includeEmailInRedirect : undefined;
            resourceInputs["resultUrl"] = state ? state.resultUrl : undefined;
            resourceInputs["subject"] = state ? state.subject : undefined;
            resourceInputs["syntax"] = state ? state.syntax : undefined;
            resourceInputs["template"] = state ? state.template : undefined;
            resourceInputs["urlLifetimeInSeconds"] = state ? state.urlLifetimeInSeconds : undefined;
        } else {
            const args = argsOrState as EmailTemplateArgs | undefined;
            if ((!args || args.body === undefined) && !opts.urn) {
                throw new Error("Missing required property 'body'");
            }
            if ((!args || args.enabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            if ((!args || args.from === undefined) && !opts.urn) {
                throw new Error("Missing required property 'from'");
            }
            if ((!args || args.subject === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subject'");
            }
            if ((!args || args.syntax === undefined) && !opts.urn) {
                throw new Error("Missing required property 'syntax'");
            }
            if ((!args || args.template === undefined) && !opts.urn) {
                throw new Error("Missing required property 'template'");
            }
            resourceInputs["body"] = args ? args.body : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["from"] = args ? args.from : undefined;
            resourceInputs["includeEmailInRedirect"] = args ? args.includeEmailInRedirect : undefined;
            resourceInputs["resultUrl"] = args ? args.resultUrl : undefined;
            resourceInputs["subject"] = args ? args.subject : undefined;
            resourceInputs["syntax"] = args ? args.syntax : undefined;
            resourceInputs["template"] = args ? args.template : undefined;
            resourceInputs["urlLifetimeInSeconds"] = args ? args.urlLifetimeInSeconds : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EmailTemplate.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering EmailTemplate resources.
 */
export interface EmailTemplateState {
    /**
     * Body of the email template. You can include [common variables](https://auth0.com/docs/customize/email/email-templates#common-variables).
     */
    body?: pulumi.Input<string>;
    /**
     * Indicates whether the template is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Email address to use as the sender. You can include [common variables](https://auth0.com/docs/customize/email/email-templates#common-variables).
     */
    from?: pulumi.Input<string>;
    /**
     * Whether the `resetEmail` and `verifyEmail` templates should include the user's email address as the email parameter in the `returnUrl` (true) or whether no email address should be included in the redirect (false). Defaults to `true`.
     */
    includeEmailInRedirect?: pulumi.Input<boolean>;
    /**
     * URL to redirect the user to after a successful action. [Learn more](https://auth0.com/docs/customize/email/email-templates#configure-template-fields).
     */
    resultUrl?: pulumi.Input<string>;
    /**
     * Subject line of the email. You can include [common variables](https://auth0.com/docs/customize/email/email-templates#common-variables).
     */
    subject?: pulumi.Input<string>;
    /**
     * Syntax of the template body. You can use either text or HTML with Liquid syntax.
     */
    syntax?: pulumi.Input<string>;
    /**
     * Template name. Options include `verifyEmail`, `verifyEmailByCode`, `resetEmail`, `welcomeEmail`, `blockedAccount`, `stolenCredentials`, `enrollmentEmail`, `mfaOobCode`, `userInvitation`, `changePassword` (legacy), or `passwordReset` (legacy).
     */
    template?: pulumi.Input<string>;
    /**
     * Number of seconds during which the link within the email will be valid.
     */
    urlLifetimeInSeconds?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a EmailTemplate resource.
 */
export interface EmailTemplateArgs {
    /**
     * Body of the email template. You can include [common variables](https://auth0.com/docs/customize/email/email-templates#common-variables).
     */
    body: pulumi.Input<string>;
    /**
     * Indicates whether the template is enabled.
     */
    enabled: pulumi.Input<boolean>;
    /**
     * Email address to use as the sender. You can include [common variables](https://auth0.com/docs/customize/email/email-templates#common-variables).
     */
    from: pulumi.Input<string>;
    /**
     * Whether the `resetEmail` and `verifyEmail` templates should include the user's email address as the email parameter in the `returnUrl` (true) or whether no email address should be included in the redirect (false). Defaults to `true`.
     */
    includeEmailInRedirect?: pulumi.Input<boolean>;
    /**
     * URL to redirect the user to after a successful action. [Learn more](https://auth0.com/docs/customize/email/email-templates#configure-template-fields).
     */
    resultUrl?: pulumi.Input<string>;
    /**
     * Subject line of the email. You can include [common variables](https://auth0.com/docs/customize/email/email-templates#common-variables).
     */
    subject: pulumi.Input<string>;
    /**
     * Syntax of the template body. You can use either text or HTML with Liquid syntax.
     */
    syntax: pulumi.Input<string>;
    /**
     * Template name. Options include `verifyEmail`, `verifyEmailByCode`, `resetEmail`, `welcomeEmail`, `blockedAccount`, `stolenCredentials`, `enrollmentEmail`, `mfaOobCode`, `userInvitation`, `changePassword` (legacy), or `passwordReset` (legacy).
     */
    template: pulumi.Input<string>;
    /**
     * Number of seconds during which the link within the email will be valid.
     */
    urlLifetimeInSeconds?: pulumi.Input<number>;
}
