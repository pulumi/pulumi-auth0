// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * With this resource, you can manage scopes (permissions) associated with a resource server (API).
 *
 * !> To prevent issues, avoid using this resource together with the `auth0.ResourceServerScope` resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as auth0 from "@pulumi/auth0";
 *
 * const myApi = new auth0.ResourceServer("myApi", {identifier: "https://api.example.com"});
 * const myApiScopes = new auth0.ResourceServerScopes("myApiScopes", {
 *     resourceServerIdentifier: myApi.identifier,
 *     scopes: [
 *         {
 *             name: "create:appointments",
 *             description: "Ability to create appointments",
 *         },
 *         {
 *             name: "read:appointments",
 *             description: "Ability to read appointments",
 *         },
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * This resource can be imported by specifying the resource server identifier. # Example
 *
 * ```sh
 *  $ pulumi import auth0:index/resourceServerScopes:ResourceServerScopes my_api_scopes "https://api.travel0.com/v1"
 * ```
 */
export class ResourceServerScopes extends pulumi.CustomResource {
    /**
     * Get an existing ResourceServerScopes resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ResourceServerScopesState, opts?: pulumi.CustomResourceOptions): ResourceServerScopes {
        return new ResourceServerScopes(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'auth0:index/resourceServerScopes:ResourceServerScopes';

    /**
     * Returns true if the given object is an instance of ResourceServerScopes.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ResourceServerScopes {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ResourceServerScopes.__pulumiType;
    }

    /**
     * Identifier of the resource server that the scopes (permission) are associated with.
     */
    public readonly resourceServerIdentifier!: pulumi.Output<string>;
    public readonly scopes!: pulumi.Output<outputs.ResourceServerScopesScope[]>;

    /**
     * Create a ResourceServerScopes resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ResourceServerScopesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ResourceServerScopesArgs | ResourceServerScopesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ResourceServerScopesState | undefined;
            resourceInputs["resourceServerIdentifier"] = state ? state.resourceServerIdentifier : undefined;
            resourceInputs["scopes"] = state ? state.scopes : undefined;
        } else {
            const args = argsOrState as ResourceServerScopesArgs | undefined;
            if ((!args || args.resourceServerIdentifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceServerIdentifier'");
            }
            if ((!args || args.scopes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scopes'");
            }
            resourceInputs["resourceServerIdentifier"] = args ? args.resourceServerIdentifier : undefined;
            resourceInputs["scopes"] = args ? args.scopes : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ResourceServerScopes.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ResourceServerScopes resources.
 */
export interface ResourceServerScopesState {
    /**
     * Identifier of the resource server that the scopes (permission) are associated with.
     */
    resourceServerIdentifier?: pulumi.Input<string>;
    scopes?: pulumi.Input<pulumi.Input<inputs.ResourceServerScopesScope>[]>;
}

/**
 * The set of arguments for constructing a ResourceServerScopes resource.
 */
export interface ResourceServerScopesArgs {
    /**
     * Identifier of the resource server that the scopes (permission) are associated with.
     */
    resourceServerIdentifier: pulumi.Input<string>;
    scopes: pulumi.Input<pulumi.Input<inputs.ResourceServerScopesScope>[]>;
}
