// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Auth0 uses various grant types, or methods by which you grant limited access to your resources to another entity without exposing credentials. The OAuth 2.0 protocol supports several types of grants, which allow different types of access. This resource allows you to create and manage client grants used with configured Auth0 clients.
 *
 * ## Import
 *
 * This resource can be imported by specifying the client grant ID.
 *
 * You can find this within the Management Dashboard in Application -> APIs -> Expand the required API.
 *
 * Example:
 *
 * ```sh
 * $ pulumi import auth0:index/clientGrant:ClientGrant my_client_grant "cgr_XXXXXXXXXXXXXXXX"
 * ```
 */
export class ClientGrant extends pulumi.CustomResource {
    /**
     * Get an existing ClientGrant resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClientGrantState, opts?: pulumi.CustomResourceOptions): ClientGrant {
        return new ClientGrant(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'auth0:index/clientGrant:ClientGrant';

    /**
     * Returns true if the given object is an instance of ClientGrant.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ClientGrant {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ClientGrant.__pulumiType;
    }

    /**
     * If enabled, any organization can be used with this grant. If disabled (default), the grant must be explicitly assigned to the desired organizations.
     */
    declare public readonly allowAnyOrganization: pulumi.Output<boolean | undefined>;
    /**
     * Audience or API Identifier for this grant.
     */
    declare public readonly audience: pulumi.Output<string>;
    /**
     * ID of the client for this grant.
     */
    declare public readonly clientId: pulumi.Output<string>;
    /**
     * Defines whether organizations can be used with client credentials exchanges for this grant. (defaults to deny when not defined)
     */
    declare public readonly organizationUsage: pulumi.Output<string | undefined>;
    /**
     * Permissions (scopes) included in this grant.
     */
    declare public readonly scopes: pulumi.Output<string[]>;

    /**
     * Create a ClientGrant resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClientGrantArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClientGrantArgs | ClientGrantState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ClientGrantState | undefined;
            resourceInputs["allowAnyOrganization"] = state?.allowAnyOrganization;
            resourceInputs["audience"] = state?.audience;
            resourceInputs["clientId"] = state?.clientId;
            resourceInputs["organizationUsage"] = state?.organizationUsage;
            resourceInputs["scopes"] = state?.scopes;
        } else {
            const args = argsOrState as ClientGrantArgs | undefined;
            if (args?.audience === undefined && !opts.urn) {
                throw new Error("Missing required property 'audience'");
            }
            if (args?.clientId === undefined && !opts.urn) {
                throw new Error("Missing required property 'clientId'");
            }
            if (args?.scopes === undefined && !opts.urn) {
                throw new Error("Missing required property 'scopes'");
            }
            resourceInputs["allowAnyOrganization"] = args?.allowAnyOrganization;
            resourceInputs["audience"] = args?.audience;
            resourceInputs["clientId"] = args?.clientId;
            resourceInputs["organizationUsage"] = args?.organizationUsage;
            resourceInputs["scopes"] = args?.scopes;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ClientGrant.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ClientGrant resources.
 */
export interface ClientGrantState {
    /**
     * If enabled, any organization can be used with this grant. If disabled (default), the grant must be explicitly assigned to the desired organizations.
     */
    allowAnyOrganization?: pulumi.Input<boolean>;
    /**
     * Audience or API Identifier for this grant.
     */
    audience?: pulumi.Input<string>;
    /**
     * ID of the client for this grant.
     */
    clientId?: pulumi.Input<string>;
    /**
     * Defines whether organizations can be used with client credentials exchanges for this grant. (defaults to deny when not defined)
     */
    organizationUsage?: pulumi.Input<string>;
    /**
     * Permissions (scopes) included in this grant.
     */
    scopes?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a ClientGrant resource.
 */
export interface ClientGrantArgs {
    /**
     * If enabled, any organization can be used with this grant. If disabled (default), the grant must be explicitly assigned to the desired organizations.
     */
    allowAnyOrganization?: pulumi.Input<boolean>;
    /**
     * Audience or API Identifier for this grant.
     */
    audience: pulumi.Input<string>;
    /**
     * ID of the client for this grant.
     */
    clientId: pulumi.Input<string>;
    /**
     * Defines whether organizations can be used with client credentials exchanges for this grant. (defaults to deny when not defined)
     */
    organizationUsage?: pulumi.Input<string>;
    /**
     * Permissions (scopes) included in this grant.
     */
    scopes: pulumi.Input<pulumi.Input<string>[]>;
}
