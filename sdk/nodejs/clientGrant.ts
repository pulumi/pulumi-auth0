// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Auth0 uses various grant types, or methods by which you grant limited access to your resources to another entity without exposing credentials. The OAuth 2.0 protocol supports several types of grants, which allow different types of access. This resource allows you to create and manage client grants used with configured Auth0 clients.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as auth0 from "@pulumi/auth0";
 *
 * const myClient = new auth0.Client("my_client", {});
 * const myResourceServer = new auth0.ResourceServer("my_resource_server", {
 *     identifier: "https://api.example.com/client-grant",
 *     scopes: [
 *         {
 *             description: "Create foos",
 *             value: "create:foo",
 *         },
 *         {
 *             description: "Create bars",
 *             value: "create:bar",
 *         },
 *     ],
 * });
 * const myClientGrant = new auth0.ClientGrant("my_client_grant", {
 *     audience: myResourceServer.identifier,
 *     clientId: myClient.id,
 *     scopes: ["create:foo"],
 * });
 * ```
 */
export class ClientGrant extends pulumi.CustomResource {
    /**
     * Get an existing ClientGrant resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClientGrantState, opts?: pulumi.CustomResourceOptions): ClientGrant {
        return new ClientGrant(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'auth0:index/clientGrant:ClientGrant';

    /**
     * Returns true if the given object is an instance of ClientGrant.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ClientGrant {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ClientGrant.__pulumiType;
    }

    /**
     * String. Audience or API Identifier for this grant.
     */
    public readonly audience!: pulumi.Output<string>;
    /**
     * String. ID of the client for this grant.
     */
    public readonly clientId!: pulumi.Output<string>;
    /**
     * List(String). Permissions (scopes) included in this grant.
     */
    public readonly scopes!: pulumi.Output<string[]>;

    /**
     * Create a ClientGrant resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClientGrantArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClientGrantArgs | ClientGrantState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as ClientGrantState | undefined;
            inputs["audience"] = state ? state.audience : undefined;
            inputs["clientId"] = state ? state.clientId : undefined;
            inputs["scopes"] = state ? state.scopes : undefined;
        } else {
            const args = argsOrState as ClientGrantArgs | undefined;
            if (!args || args.audience === undefined) {
                throw new Error("Missing required property 'audience'");
            }
            if (!args || args.clientId === undefined) {
                throw new Error("Missing required property 'clientId'");
            }
            if (!args || args.scopes === undefined) {
                throw new Error("Missing required property 'scopes'");
            }
            inputs["audience"] = args ? args.audience : undefined;
            inputs["clientId"] = args ? args.clientId : undefined;
            inputs["scopes"] = args ? args.scopes : undefined;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(ClientGrant.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ClientGrant resources.
 */
export interface ClientGrantState {
    /**
     * String. Audience or API Identifier for this grant.
     */
    readonly audience?: pulumi.Input<string>;
    /**
     * String. ID of the client for this grant.
     */
    readonly clientId?: pulumi.Input<string>;
    /**
     * List(String). Permissions (scopes) included in this grant.
     */
    readonly scopes?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a ClientGrant resource.
 */
export interface ClientGrantArgs {
    /**
     * String. Audience or API Identifier for this grant.
     */
    readonly audience: pulumi.Input<string>;
    /**
     * String. ID of the client for this grant.
     */
    readonly clientId: pulumi.Input<string>;
    /**
     * List(String). Permissions (scopes) included in this grant.
     */
    readonly scopes: pulumi.Input<pulumi.Input<string>[]>;
}
