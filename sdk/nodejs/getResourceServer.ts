// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Data source to retrieve a specific Auth0 resource server by `resourceServerId` or `identifier`.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as auth0 from "@pulumi/auth0";
 *
 * // An Auth0 Resource Server loaded using its identifier.
 * const some-resource-server-by-identifier = auth0.getResourceServer({
 *     identifier: "https://my-api.com/v1",
 * });
 * // An Auth0 Resource Server loaded using its ID.
 * const some-resource-server-by-id = auth0.getResourceServer({
 *     resourceServerId: "abcdefghkijklmnopqrstuvwxyz0123456789",
 * });
 * ```
 */
export function getResourceServer(args?: GetResourceServerArgs, opts?: pulumi.InvokeOptions): Promise<GetResourceServerResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("auth0:index/getResourceServer:getResourceServer", {
        "identifier": args.identifier,
        "resourceServerId": args.resourceServerId,
    }, opts);
}

/**
 * A collection of arguments for invoking getResourceServer.
 */
export interface GetResourceServerArgs {
    /**
     * Unique identifier for the resource server. Used as the audience parameter for authorization calls. If not provided, `resourceServerId` must be set.
     */
    identifier?: string;
    /**
     * The ID of the resource server. If not provided, `identifier` must be set.
     */
    resourceServerId?: string;
}

/**
 * A collection of values returned by getResourceServer.
 */
export interface GetResourceServerResult {
    /**
     * Indicates whether refresh tokens can be issued for this resource server.
     */
    readonly allowOfflineAccess: boolean;
    /**
     * If this setting is enabled, RBAC authorization policies will be enforced for this API. Role and permission assignments will be evaluated during the login transaction.
     */
    readonly enforcePolicies: boolean;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Unique identifier for the resource server. Used as the audience parameter for authorization calls. If not provided, `resourceServerId` must be set.
     */
    readonly identifier?: string;
    /**
     * Friendly name for the resource server. Cannot include `<` or `>` characters.
     */
    readonly name: string;
    /**
     * The ID of the resource server. If not provided, `identifier` must be set.
     */
    readonly resourceServerId?: string;
    /**
     * List of permissions (scopes) used by this resource server.
     */
    readonly scopes: outputs.GetResourceServerScope[];
    /**
     * Algorithm used to sign JWTs. Options include `HS256` and `RS256`.
     */
    readonly signingAlg: string;
    /**
     * Secret used to sign tokens when using symmetric algorithms (HS256).
     */
    readonly signingSecret: string;
    /**
     * Indicates whether to skip user consent for applications flagged as first party.
     */
    readonly skipConsentForVerifiableFirstPartyClients: boolean;
    /**
     * Dialect of access tokens that should be issued for this resource server. Options include `accessToken`, `rfc9068Profile`, `accessTokenAuthz`, and `rfc9068ProfileAuthz`. `accessToken` is a JWT containing standard Auth0 claims. `rfc9068Profile` is a JWT conforming to the IETF JWT Access Token Profile. `accessTokenAuthz` is a JWT containing standard Auth0 claims, including RBAC permissions claims. `rfc9068ProfileAuthz` is a JWT conforming to the IETF JWT Access Token Profile, including RBAC permissions claims. RBAC permissions claims are available if RBAC (`enforcePolicies`) is enabled for this API. For more details, refer to [Access Token Profiles](https://auth0.com/docs/secure/tokens/access-tokens/access-token-profiles).
     */
    readonly tokenDialect: string;
    /**
     * Number of seconds during which access tokens issued for this resource server from the token endpoint remain valid.
     */
    readonly tokenLifetime: number;
    /**
     * Number of seconds during which access tokens issued for this resource server via implicit or hybrid flows remain valid. Cannot be greater than the `tokenLifetime` value.
     */
    readonly tokenLifetimeForWeb: number;
    /**
     * URL from which to retrieve JWKs for this resource server. Used for verifying the JWT sent to Auth0 for token introspection.
     */
    readonly verificationLocation: string;
}
/**
 * Data source to retrieve a specific Auth0 resource server by `resourceServerId` or `identifier`.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as auth0 from "@pulumi/auth0";
 *
 * // An Auth0 Resource Server loaded using its identifier.
 * const some-resource-server-by-identifier = auth0.getResourceServer({
 *     identifier: "https://my-api.com/v1",
 * });
 * // An Auth0 Resource Server loaded using its ID.
 * const some-resource-server-by-id = auth0.getResourceServer({
 *     resourceServerId: "abcdefghkijklmnopqrstuvwxyz0123456789",
 * });
 * ```
 */
export function getResourceServerOutput(args?: GetResourceServerOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetResourceServerResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("auth0:index/getResourceServer:getResourceServer", {
        "identifier": args.identifier,
        "resourceServerId": args.resourceServerId,
    }, opts);
}

/**
 * A collection of arguments for invoking getResourceServer.
 */
export interface GetResourceServerOutputArgs {
    /**
     * Unique identifier for the resource server. Used as the audience parameter for authorization calls. If not provided, `resourceServerId` must be set.
     */
    identifier?: pulumi.Input<string>;
    /**
     * The ID of the resource server. If not provided, `identifier` must be set.
     */
    resourceServerId?: pulumi.Input<string>;
}
