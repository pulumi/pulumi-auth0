// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Client Assertion JWT is a more secure alternative to client secret authentication for OIDC and Okta Workforce connections. It uses a signed JWT instead of a shared secret to authenticate the client. The resource only supports key rotation. Use the auth0.ConnectionKeys data source to read existing keys. Removing the resource from configuration will NOT DELETE the key.
 *
 * !> The triggers field is only a placeholder for an arbitrary map used to signal the provider
 * to perform a key rotation whenever any update is made.
 * If the resource is removed from the configuration, the keys will not be deleted.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as auth0 from "@pulumi/auth0";
 *
 * const myClient = new auth0.Client("my_client", {name: "My-Auth0-Client"});
 * const oidc = new auth0.Connection("oidc", {
 *     name: "OIDC-Connection",
 *     strategy: "oidc",
 *     options: {
 *         clientId: myClient.id,
 *         scopes: [
 *             "ext_nested_groups",
 *             "openid",
 *         ],
 *         issuer: "https://example.com",
 *         authorizationEndpoint: "https://example.com",
 *         jwksUri: "https://example.com/jwks",
 *         type: "front_channel",
 *         discoveryUrl: "https://www.paypalobjects.com/.well-known/openid-configuration",
 *         tokenEndpointAuthMethod: "private_key_jwt",
 *         tokenEndpointAuthSigningAlg: "RS256",
 *     },
 * });
 * // Resource used to rotate the keys for above OIDC connection
 * const myKeys = new auth0.ConnectionKeys("my_keys", {
 *     connectionId: oidc.id,
 *     triggers: {
 *         version: "1",
 *         date: "2023-10-01T00:00:00Z",
 *     },
 * });
 * ```
 */
export class ConnectionKeys extends pulumi.CustomResource {
    /**
     * Get an existing ConnectionKeys resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConnectionKeysState, opts?: pulumi.CustomResourceOptions): ConnectionKeys {
        return new ConnectionKeys(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'auth0:index/connectionKeys:ConnectionKeys';

    /**
     * Returns true if the given object is an instance of ConnectionKeys.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ConnectionKeys {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConnectionKeys.__pulumiType;
    }

    /**
     * The signing key algorithm.
     */
    public /*out*/ readonly algorithm!: pulumi.Output<string>;
    /**
     * The public certificate of the signing key.
     */
    public /*out*/ readonly cert!: pulumi.Output<string>;
    public readonly connectionId!: pulumi.Output<string>;
    /**
     * True if the key is the current key.
     */
    public /*out*/ readonly current!: pulumi.Output<boolean>;
    /**
     * The date and time when the key became the current key.
     */
    public /*out*/ readonly currentSince!: pulumi.Output<string>;
    /**
     * The certificate fingerprint.
     */
    public /*out*/ readonly fingerprint!: pulumi.Output<string>;
    /**
     * The signing key use, whether for encryption or signing.
     */
    public /*out*/ readonly keyUse!: pulumi.Output<string>;
    /**
     * The key ID of the signing key.
     */
    public /*out*/ readonly kid!: pulumi.Output<string>;
    /**
     * True if the key is the next key.
     */
    public /*out*/ readonly next!: pulumi.Output<boolean>;
    /**
     * The public certificate of the signing key in PKCS7 format.
     */
    public /*out*/ readonly pkcs!: pulumi.Output<string>;
    /**
     * True if the key is the previous key.
     */
    public /*out*/ readonly previous!: pulumi.Output<boolean>;
    /**
     * The subject distinguished name (DN) of the certificate.
     */
    public /*out*/ readonly subjectDn!: pulumi.Output<string>;
    /**
     * The certificate thumbprint.
     */
    public /*out*/ readonly thumbprint!: pulumi.Output<string>;
    /**
     * This is an arbitrary map, which when edited shall perform rotation of keys for the corresponding connection. It can host keys like version, timestamp of last rotation etc.The field has no association with API
     */
    public readonly triggers!: pulumi.Output<{[key: string]: string}>;

    /**
     * Create a ConnectionKeys resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConnectionKeysArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConnectionKeysArgs | ConnectionKeysState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConnectionKeysState | undefined;
            resourceInputs["algorithm"] = state ? state.algorithm : undefined;
            resourceInputs["cert"] = state ? state.cert : undefined;
            resourceInputs["connectionId"] = state ? state.connectionId : undefined;
            resourceInputs["current"] = state ? state.current : undefined;
            resourceInputs["currentSince"] = state ? state.currentSince : undefined;
            resourceInputs["fingerprint"] = state ? state.fingerprint : undefined;
            resourceInputs["keyUse"] = state ? state.keyUse : undefined;
            resourceInputs["kid"] = state ? state.kid : undefined;
            resourceInputs["next"] = state ? state.next : undefined;
            resourceInputs["pkcs"] = state ? state.pkcs : undefined;
            resourceInputs["previous"] = state ? state.previous : undefined;
            resourceInputs["subjectDn"] = state ? state.subjectDn : undefined;
            resourceInputs["thumbprint"] = state ? state.thumbprint : undefined;
            resourceInputs["triggers"] = state ? state.triggers : undefined;
        } else {
            const args = argsOrState as ConnectionKeysArgs | undefined;
            if ((!args || args.connectionId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connectionId'");
            }
            if ((!args || args.triggers === undefined) && !opts.urn) {
                throw new Error("Missing required property 'triggers'");
            }
            resourceInputs["connectionId"] = args ? args.connectionId : undefined;
            resourceInputs["triggers"] = args ? args.triggers : undefined;
            resourceInputs["algorithm"] = undefined /*out*/;
            resourceInputs["cert"] = undefined /*out*/;
            resourceInputs["current"] = undefined /*out*/;
            resourceInputs["currentSince"] = undefined /*out*/;
            resourceInputs["fingerprint"] = undefined /*out*/;
            resourceInputs["keyUse"] = undefined /*out*/;
            resourceInputs["kid"] = undefined /*out*/;
            resourceInputs["next"] = undefined /*out*/;
            resourceInputs["pkcs"] = undefined /*out*/;
            resourceInputs["previous"] = undefined /*out*/;
            resourceInputs["subjectDn"] = undefined /*out*/;
            resourceInputs["thumbprint"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ConnectionKeys.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ConnectionKeys resources.
 */
export interface ConnectionKeysState {
    /**
     * The signing key algorithm.
     */
    algorithm?: pulumi.Input<string>;
    /**
     * The public certificate of the signing key.
     */
    cert?: pulumi.Input<string>;
    connectionId?: pulumi.Input<string>;
    /**
     * True if the key is the current key.
     */
    current?: pulumi.Input<boolean>;
    /**
     * The date and time when the key became the current key.
     */
    currentSince?: pulumi.Input<string>;
    /**
     * The certificate fingerprint.
     */
    fingerprint?: pulumi.Input<string>;
    /**
     * The signing key use, whether for encryption or signing.
     */
    keyUse?: pulumi.Input<string>;
    /**
     * The key ID of the signing key.
     */
    kid?: pulumi.Input<string>;
    /**
     * True if the key is the next key.
     */
    next?: pulumi.Input<boolean>;
    /**
     * The public certificate of the signing key in PKCS7 format.
     */
    pkcs?: pulumi.Input<string>;
    /**
     * True if the key is the previous key.
     */
    previous?: pulumi.Input<boolean>;
    /**
     * The subject distinguished name (DN) of the certificate.
     */
    subjectDn?: pulumi.Input<string>;
    /**
     * The certificate thumbprint.
     */
    thumbprint?: pulumi.Input<string>;
    /**
     * This is an arbitrary map, which when edited shall perform rotation of keys for the corresponding connection. It can host keys like version, timestamp of last rotation etc.The field has no association with API
     */
    triggers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a ConnectionKeys resource.
 */
export interface ConnectionKeysArgs {
    connectionId: pulumi.Input<string>;
    /**
     * This is an arbitrary map, which when edited shall perform rotation of keys for the corresponding connection. It can host keys like version, timestamp of last rotation etc.The field has no association with API
     */
    triggers: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
