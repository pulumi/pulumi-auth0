// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * With this resource, you can create and manage flow vault connections for a tenant.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as auth0 from "@pulumi/auth0";
 *
 * // Example:
 * const myConnection = new auth0.FlowVaultConnection("my_connection", {
 *     appId: "AUTH0",
 *     name: "Auth0 M2M Connection",
 *     setup: {
 *         client_id: "******************",
 *         client_secret: "*********************************",
 *         domain: "*****************************",
 *         type: "OAUTH_APP",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * This resource can be imported using the flow vault connection ID.
 *
 * Example:
 *
 * ```sh
 * $ pulumi import auth0:index/flowVaultConnection:FlowVaultConnection my_connection "ac_42HT5oiobDyUs8ASwEEWK0"
 * ```
 */
export class FlowVaultConnection extends pulumi.CustomResource {
    /**
     * Get an existing FlowVaultConnection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FlowVaultConnectionState, opts?: pulumi.CustomResourceOptions): FlowVaultConnection {
        return new FlowVaultConnection(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'auth0:index/flowVaultConnection:FlowVaultConnection';

    /**
     * Returns true if the given object is an instance of FlowVaultConnection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FlowVaultConnection {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FlowVaultConnection.__pulumiType;
    }

    /**
     * Custom account name of the vault connection.
     */
    public readonly accountName!: pulumi.Output<string | undefined>;
    /**
     * App identifier of the vault connection.
     */
    public readonly appId!: pulumi.Output<string>;
    /**
     * Environment of the vault connection.
     */
    public readonly environment!: pulumi.Output<string | undefined>;
    /**
     * Fingerprint of the vault connection.
     */
    public readonly fingerprint!: pulumi.Output<string>;
    /**
     * Name of the vault connection.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Indicates if the vault connection is configured.
     */
    public /*out*/ readonly ready!: pulumi.Output<boolean>;
    /**
     * Configuration of the vault connection. (Mapping information must be provided as key/value pairs)
     */
    public readonly setup!: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a FlowVaultConnection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FlowVaultConnectionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FlowVaultConnectionArgs | FlowVaultConnectionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FlowVaultConnectionState | undefined;
            resourceInputs["accountName"] = state ? state.accountName : undefined;
            resourceInputs["appId"] = state ? state.appId : undefined;
            resourceInputs["environment"] = state ? state.environment : undefined;
            resourceInputs["fingerprint"] = state ? state.fingerprint : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["ready"] = state ? state.ready : undefined;
            resourceInputs["setup"] = state ? state.setup : undefined;
        } else {
            const args = argsOrState as FlowVaultConnectionArgs | undefined;
            if ((!args || args.appId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'appId'");
            }
            resourceInputs["accountName"] = args ? args.accountName : undefined;
            resourceInputs["appId"] = args ? args.appId : undefined;
            resourceInputs["environment"] = args ? args.environment : undefined;
            resourceInputs["fingerprint"] = args ? args.fingerprint : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["setup"] = args?.setup ? pulumi.secret(args.setup) : undefined;
            resourceInputs["ready"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["setup"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(FlowVaultConnection.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FlowVaultConnection resources.
 */
export interface FlowVaultConnectionState {
    /**
     * Custom account name of the vault connection.
     */
    accountName?: pulumi.Input<string>;
    /**
     * App identifier of the vault connection.
     */
    appId?: pulumi.Input<string>;
    /**
     * Environment of the vault connection.
     */
    environment?: pulumi.Input<string>;
    /**
     * Fingerprint of the vault connection.
     */
    fingerprint?: pulumi.Input<string>;
    /**
     * Name of the vault connection.
     */
    name?: pulumi.Input<string>;
    /**
     * Indicates if the vault connection is configured.
     */
    ready?: pulumi.Input<boolean>;
    /**
     * Configuration of the vault connection. (Mapping information must be provided as key/value pairs)
     */
    setup?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a FlowVaultConnection resource.
 */
export interface FlowVaultConnectionArgs {
    /**
     * Custom account name of the vault connection.
     */
    accountName?: pulumi.Input<string>;
    /**
     * App identifier of the vault connection.
     */
    appId: pulumi.Input<string>;
    /**
     * Environment of the vault connection.
     */
    environment?: pulumi.Input<string>;
    /**
     * Fingerprint of the vault connection.
     */
    fingerprint?: pulumi.Input<string>;
    /**
     * Name of the vault connection.
     */
    name?: pulumi.Input<string>;
    /**
     * Configuration of the vault connection. (Mapping information must be provided as key/value pairs)
     */
    setup?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
