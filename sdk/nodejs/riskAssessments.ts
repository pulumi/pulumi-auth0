// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Resource for managing general Risk Assessment settings.
 */
export class RiskAssessments extends pulumi.CustomResource {
    /**
     * Get an existing RiskAssessments resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RiskAssessmentsState, opts?: pulumi.CustomResourceOptions): RiskAssessments {
        return new RiskAssessments(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'auth0:index/riskAssessments:RiskAssessments';

    /**
     * Returns true if the given object is an instance of RiskAssessments.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RiskAssessments {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RiskAssessments.__pulumiType;
    }

    /**
     * Whether risk assessment is enabled or not.
     */
    declare public readonly enabled: pulumi.Output<boolean>;

    /**
     * Create a RiskAssessments resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RiskAssessmentsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RiskAssessmentsArgs | RiskAssessmentsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RiskAssessmentsState | undefined;
            resourceInputs["enabled"] = state?.enabled;
        } else {
            const args = argsOrState as RiskAssessmentsArgs | undefined;
            if (args?.enabled === undefined && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            resourceInputs["enabled"] = args?.enabled;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RiskAssessments.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RiskAssessments resources.
 */
export interface RiskAssessmentsState {
    /**
     * Whether risk assessment is enabled or not.
     */
    enabled?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a RiskAssessments resource.
 */
export interface RiskAssessmentsArgs {
    /**
     * Whether risk assessment is enabled or not.
     */
    enabled: pulumi.Input<boolean>;
}
