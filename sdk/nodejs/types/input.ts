// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface ActionDependency {
    /**
     * Dependency name, e.g. `lodash`.
     */
    name: pulumi.Input<string>;
    /**
     * Dependency version, e.g. `latest` or `4.17.21`.
     */
    version: pulumi.Input<string>;
}

export interface ActionSecret {
    /**
     * Secret name.
     */
    name: pulumi.Input<string>;
    /**
     * Secret value.
     */
    value: pulumi.Input<string>;
}

export interface ActionSupportedTriggers {
    /**
     * The trigger ID.
     */
    id: pulumi.Input<string>;
    /**
     * The trigger version. This regulates which `runtime` versions are supported.
     */
    version: pulumi.Input<string>;
}

export interface AttackProtectionBreachedPasswordDetection {
    /**
     * When "adminNotification" is enabled, determines how often email notifications are sent. Possible values: `immediately`, `daily`, `weekly`, `monthly`.
     */
    adminNotificationFrequencies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether breached password detection is active.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The subscription level for breached password detection methods. Use "enhanced" to enable Credential Guard. Possible values: `standard`, `enhanced`.
     */
    method?: pulumi.Input<string>;
    /**
     * Configuration options that apply before every user registration attempt. Only available on public tenants.
     */
    preUserRegistration?: pulumi.Input<inputs.AttackProtectionBreachedPasswordDetectionPreUserRegistration>;
    /**
     * Action to take when a breached password is detected.
     */
    shields?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface AttackProtectionBreachedPasswordDetectionPreUserRegistration {
    shields?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface AttackProtectionBruteForceProtection {
    /**
     * List of trusted IP addresses that will not have attack protection enforced against them.
     */
    allowlists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether brute force attack protections are active.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Maximum number of unsuccessful attempts. Only available on public tenants.
     */
    maxAttempts?: pulumi.Input<number>;
    /**
     * Determines whether the IP address is used when counting failed attempts. Possible values: `countPerIdentifierAndIp` or `countPerIdentifier`.
     */
    mode?: pulumi.Input<string>;
    /**
     * Action to take when a brute force protection threshold is violated. Possible values: `block`, `userNotification`
     */
    shields?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface AttackProtectionSuspiciousIpThrottling {
    /**
     * List of trusted IP addresses that will not have attack protection enforced against them.
     */
    allowlists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether suspicious IP throttling attack protections are active.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Configuration options that apply before every login attempt. Only available on public tenants.
     */
    preLogin?: pulumi.Input<inputs.AttackProtectionSuspiciousIpThrottlingPreLogin>;
    /**
     * Configuration options that apply before every user registration attempt. Only available on public tenants.
     */
    preUserRegistration?: pulumi.Input<inputs.AttackProtectionSuspiciousIpThrottlingPreUserRegistration>;
    /**
     * Action to take when a suspicious IP throttling threshold is violated. Possible values: `block`, `adminNotification`
     */
    shields?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface AttackProtectionSuspiciousIpThrottlingPreLogin {
    maxAttempts?: pulumi.Input<number>;
    rate?: pulumi.Input<number>;
}

export interface AttackProtectionSuspiciousIpThrottlingPreUserRegistration {
    maxAttempts?: pulumi.Input<number>;
    rate?: pulumi.Input<number>;
}

export interface BrandingColors {
    /**
     * Background color of login pages in hexadecimal.
     */
    pageBackground?: pulumi.Input<string>;
    /**
     * Primary button background color in hexadecimal.
     */
    primary?: pulumi.Input<string>;
}

export interface BrandingFont {
    /**
     * URL for the custom font.
     */
    url?: pulumi.Input<string>;
}

export interface BrandingThemeBorders {
    /**
     * Button border radius. Value needs to be between `1` and `10`. Defaults to `3.0`.
     */
    buttonBorderRadius?: pulumi.Input<number>;
    /**
     * Button border weight. Value needs to be between `0` and `10`. Defaults to `1.0`.
     */
    buttonBorderWeight?: pulumi.Input<number>;
    /**
     * Buttons style. Available options: `pill`, `rounded`, `sharp`. Defaults to `rounded`.
     */
    buttonsStyle?: pulumi.Input<string>;
    /**
     * Input border radius. Value needs to be between `0` and `10`. Defaults to `3.0`.
     */
    inputBorderRadius?: pulumi.Input<number>;
    /**
     * Input border weight. Value needs to be between `0` and `3`. Defaults to `1.0`.
     */
    inputBorderWeight?: pulumi.Input<number>;
    /**
     * Inputs style. Available options: `pill`, `rounded`, `sharp`. Defaults to `rounded`.
     */
    inputsStyle?: pulumi.Input<string>;
    /**
     * Show widget shadow. Defaults to `true`.
     */
    showWidgetShadow?: pulumi.Input<boolean>;
    /**
     * Widget border weight. Value needs to be between `0` and `10`. Defaults to `0.0`.
     */
    widgetBorderWeight?: pulumi.Input<number>;
    /**
     * Widget corner radius. Value needs to be between `0` and `50`. Defaults to `5.0`.
     */
    widgetCornerRadius?: pulumi.Input<number>;
}

export interface BrandingThemeColors {
    /**
     * Base focus color. Defaults to `#635dff`.
     */
    baseFocusColor?: pulumi.Input<string>;
    /**
     * Base hover color. Defaults to `#000000`.
     */
    baseHoverColor?: pulumi.Input<string>;
    /**
     * Body text. Defaults to `#1e212a`.
     */
    bodyText?: pulumi.Input<string>;
    /**
     * Error. Defaults to `#d03c38`.
     */
    error?: pulumi.Input<string>;
    /**
     * Header. Defaults to `#1e212a`.
     */
    header?: pulumi.Input<string>;
    /**
     * Icons. Defaults to `#65676e`.
     */
    icons?: pulumi.Input<string>;
    /**
     * Input background. Defaults to `#ffffff`.
     */
    inputBackground?: pulumi.Input<string>;
    /**
     * Input border. Defaults to `#c9cace`.
     */
    inputBorder?: pulumi.Input<string>;
    /**
     * Input filled text. Defaults to `#000000`.
     */
    inputFilledText?: pulumi.Input<string>;
    /**
     * Input labels & placeholders. Defaults to `#65676e`.
     */
    inputLabelsPlaceholders?: pulumi.Input<string>;
    /**
     * Links & focused components. Defaults to `#635dff`.
     */
    linksFocusedComponents?: pulumi.Input<string>;
    /**
     * Primary button. Defaults to `#635dff`.
     */
    primaryButton?: pulumi.Input<string>;
    /**
     * Primary button label. Defaults to `#ffffff`.
     */
    primaryButtonLabel?: pulumi.Input<string>;
    /**
     * Secondary button border. Defaults to `#c9cace`.
     */
    secondaryButtonBorder?: pulumi.Input<string>;
    /**
     * Secondary button label. Defaults to `#1e212a`.
     */
    secondaryButtonLabel?: pulumi.Input<string>;
    /**
     * Success. Defaults to `#13a688`.
     */
    success?: pulumi.Input<string>;
    /**
     * Widget background. Defaults to `#ffffff`.
     */
    widgetBackground?: pulumi.Input<string>;
    /**
     * Widget border. Defaults to `#c9cace`.
     */
    widgetBorder?: pulumi.Input<string>;
}

export interface BrandingThemeFonts {
    /**
     * Body text.
     */
    bodyText: pulumi.Input<inputs.BrandingThemeFontsBodyText>;
    /**
     * Buttons text.
     */
    buttonsText: pulumi.Input<inputs.BrandingThemeFontsButtonsText>;
    /**
     * Font URL. Defaults to an empty string.
     */
    fontUrl?: pulumi.Input<string>;
    /**
     * Input labels.
     */
    inputLabels: pulumi.Input<inputs.BrandingThemeFontsInputLabels>;
    /**
     * Links.
     */
    links: pulumi.Input<inputs.BrandingThemeFontsLinks>;
    /**
     * Links style. Defaults to `normal`.
     */
    linksStyle?: pulumi.Input<string>;
    /**
     * Reference text size. Value needs to be between `12` and `24`. Defaults to `16.0`.
     */
    referenceTextSize?: pulumi.Input<number>;
    /**
     * Subtitle.
     */
    subtitle: pulumi.Input<inputs.BrandingThemeFontsSubtitle>;
    /**
     * Title.
     */
    title: pulumi.Input<inputs.BrandingThemeFontsTitle>;
}

export interface BrandingThemeFontsBodyText {
    bold?: pulumi.Input<boolean>;
    size?: pulumi.Input<number>;
}

export interface BrandingThemeFontsButtonsText {
    bold?: pulumi.Input<boolean>;
    size?: pulumi.Input<number>;
}

export interface BrandingThemeFontsInputLabels {
    bold?: pulumi.Input<boolean>;
    size?: pulumi.Input<number>;
}

export interface BrandingThemeFontsLinks {
    bold?: pulumi.Input<boolean>;
    size?: pulumi.Input<number>;
}

export interface BrandingThemeFontsSubtitle {
    bold?: pulumi.Input<boolean>;
    size?: pulumi.Input<number>;
}

export interface BrandingThemeFontsTitle {
    bold?: pulumi.Input<boolean>;
    size?: pulumi.Input<number>;
}

export interface BrandingThemePageBackground {
    /**
     * Background color. Defaults to `#000000`.
     */
    backgroundColor?: pulumi.Input<string>;
    /**
     * Background image url. Defaults to an empty string.
     */
    backgroundImageUrl?: pulumi.Input<string>;
    /**
     * Page layout. Available options: `center`, `left`, `right`. Defaults to `center`.
     */
    pageLayout?: pulumi.Input<string>;
}

export interface BrandingThemeWidget {
    /**
     * Header text alignment. Available options: `center`, `left`, `right`. Defaults to `center`.
     */
    headerTextAlignment?: pulumi.Input<string>;
    /**
     * Logo height. Value needs to be between `1` and `100`. Defaults to `52.0`.
     */
    logoHeight?: pulumi.Input<number>;
    /**
     * Logo position. Available options: `center`, `left`, `right`, `none`. Defaults to `center`.
     */
    logoPosition?: pulumi.Input<string>;
    /**
     * Logo url. Defaults to an empty string.
     */
    logoUrl?: pulumi.Input<string>;
    /**
     * Social buttons layout. Available options: `bottom`, `top`. Defaults to `bottom`.
     */
    socialButtonsLayout?: pulumi.Input<string>;
}

export interface BrandingUniversalLogin {
    /**
     * The body of login pages.
     */
    body?: pulumi.Input<string>;
}

export interface ClientAddons {
    aws?: pulumi.Input<{[key: string]: any}>;
    azureBlob?: pulumi.Input<{[key: string]: any}>;
    azureSb?: pulumi.Input<{[key: string]: any}>;
    box?: pulumi.Input<{[key: string]: any}>;
    cloudbees?: pulumi.Input<{[key: string]: any}>;
    concur?: pulumi.Input<{[key: string]: any}>;
    dropbox?: pulumi.Input<{[key: string]: any}>;
    echosign?: pulumi.Input<{[key: string]: any}>;
    egnyte?: pulumi.Input<{[key: string]: any}>;
    firebase?: pulumi.Input<{[key: string]: any}>;
    layer?: pulumi.Input<{[key: string]: any}>;
    mscrm?: pulumi.Input<{[key: string]: any}>;
    newrelic?: pulumi.Input<{[key: string]: any}>;
    office365?: pulumi.Input<{[key: string]: any}>;
    rms?: pulumi.Input<{[key: string]: any}>;
    salesforce?: pulumi.Input<{[key: string]: any}>;
    salesforceApi?: pulumi.Input<{[key: string]: any}>;
    salesforceSandboxApi?: pulumi.Input<{[key: string]: any}>;
    /**
     * Configuration settings for a SAML add-on.
     */
    samlp?: pulumi.Input<inputs.ClientAddonsSamlp>;
    sapApi?: pulumi.Input<{[key: string]: any}>;
    sentry?: pulumi.Input<{[key: string]: any}>;
    sharepoint?: pulumi.Input<{[key: string]: any}>;
    slack?: pulumi.Input<{[key: string]: any}>;
    springcm?: pulumi.Input<{[key: string]: any}>;
    wams?: pulumi.Input<{[key: string]: any}>;
    /**
     * WS-Fed (WIF) addon indicator. Actual configuration is stored in callback and `clientAliases` properties on the client.
     */
    wsfed?: pulumi.Input<{[key: string]: any}>;
    zendesk?: pulumi.Input<{[key: string]: any}>;
    zoom?: pulumi.Input<{[key: string]: any}>;
}

export interface ClientAddonsSamlp {
    audience?: pulumi.Input<string>;
    authnContextClassRef?: pulumi.Input<string>;
    binding?: pulumi.Input<string>;
    createUpnClaim?: pulumi.Input<boolean>;
    destination?: pulumi.Input<string>;
    digestAlgorithm?: pulumi.Input<string>;
    includeAttributeNameFormat?: pulumi.Input<boolean>;
    issuer?: pulumi.Input<string>;
    lifetimeInSeconds?: pulumi.Input<number>;
    logout?: pulumi.Input<{[key: string]: any}>;
    mapIdentities?: pulumi.Input<boolean>;
    mapUnknownClaimsAsIs?: pulumi.Input<boolean>;
    mappings?: pulumi.Input<{[key: string]: any}>;
    nameIdentifierFormat?: pulumi.Input<string>;
    nameIdentifierProbes?: pulumi.Input<pulumi.Input<string>[]>;
    passthroughClaimsWithNoMapping?: pulumi.Input<boolean>;
    recipient?: pulumi.Input<string>;
    signResponse?: pulumi.Input<boolean>;
    signatureAlgorithm?: pulumi.Input<string>;
    signingCert?: pulumi.Input<string>;
    typedAttributes?: pulumi.Input<boolean>;
}

export interface ClientCredentialsPrivateKeyJwt {
    /**
     * Client credentials available for use when Private Key JWT is in use as the client authentication method. A maximum of 2 client credentials can be set.
     */
    credentials: pulumi.Input<pulumi.Input<inputs.ClientCredentialsPrivateKeyJwtCredential>[]>;
}

export interface ClientCredentialsPrivateKeyJwtCredential {
    algorithm?: pulumi.Input<string>;
    createdAt?: pulumi.Input<string>;
    credentialType: pulumi.Input<string>;
    expiresAt?: pulumi.Input<string>;
    /**
     * The ID of this resource.
     */
    id?: pulumi.Input<string>;
    keyId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    parseExpiryFromCert?: pulumi.Input<boolean>;
    pem: pulumi.Input<string>;
    updatedAt?: pulumi.Input<string>;
}

export interface ClientJwtConfiguration {
    /**
     * Algorithm used to sign JWTs.
     */
    alg?: pulumi.Input<string>;
    /**
     * Number of seconds during which the JWT will be valid.
     */
    lifetimeInSeconds?: pulumi.Input<number>;
    /**
     * Permissions (scopes) included in JWTs.
     */
    scopes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Indicates whether the client secret is Base64-encoded.
     */
    secretEncoded?: pulumi.Input<boolean>;
}

export interface ClientMobile {
    /**
     * Configuration settings for Android native apps.
     */
    android?: pulumi.Input<inputs.ClientMobileAndroid>;
    /**
     * Configuration settings for i0S native apps.
     */
    ios?: pulumi.Input<inputs.ClientMobileIos>;
}

export interface ClientMobileAndroid {
    appPackageName?: pulumi.Input<string>;
    sha256CertFingerprints?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ClientMobileIos {
    appBundleIdentifier?: pulumi.Input<string>;
    teamId?: pulumi.Input<string>;
}

export interface ClientNativeSocialLogin {
    apple?: pulumi.Input<inputs.ClientNativeSocialLoginApple>;
    facebook?: pulumi.Input<inputs.ClientNativeSocialLoginFacebook>;
}

export interface ClientNativeSocialLoginApple {
    enabled?: pulumi.Input<boolean>;
}

export interface ClientNativeSocialLoginFacebook {
    enabled?: pulumi.Input<boolean>;
}

export interface ClientRefreshToken {
    /**
     * Options include `expiring`, `non-expiring`. Whether a refresh token will expire based on an absolute lifetime, after which the token can no longer be used. If rotation is `rotating`, this must be set to `expiring`.
     */
    expirationType: pulumi.Input<string>;
    /**
     * The time in seconds after which inactive refresh tokens will expire.
     */
    idleTokenLifetime?: pulumi.Input<number>;
    /**
     * Whether inactive refresh tokens should remain valid indefinitely.
     */
    infiniteIdleTokenLifetime?: pulumi.Input<boolean>;
    /**
     * Whether refresh tokens should remain valid indefinitely. If false, `tokenLifetime` should also be set.
     */
    infiniteTokenLifetime?: pulumi.Input<boolean>;
    /**
     * The amount of time in seconds in which a refresh token may be reused without triggering reuse detection.
     */
    leeway?: pulumi.Input<number>;
    /**
     * Options include `rotating`, `non-rotating`. When `rotating`, exchanging a refresh token will cause a new refresh token to be issued and the existing token will be invalidated. This allows for automatic detection of token reuse if the token is leaked.
     */
    rotationType: pulumi.Input<string>;
    /**
     * The absolute lifetime of a refresh token in seconds.
     */
    tokenLifetime?: pulumi.Input<number>;
}

export interface ConnectionOptions {
    /**
     * ADFS URL where to fetch the metadata source.
     */
    adfsServer?: pulumi.Input<string>;
    /**
     * List of allowed audiences.
     */
    allowedAudiences?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Enable API Access to users.
     */
    apiEnableUsers?: pulumi.Input<boolean>;
    /**
     * App ID.
     */
    appId?: pulumi.Input<string>;
    /**
     * Query string parameters to be included as part of the generated passwordless email link.
     */
    authParams?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Authorization endpoint.
     */
    authorizationEndpoint?: pulumi.Input<string>;
    /**
     * Indicates whether to enable brute force protection, which will limit the number of signups and failed logins from a suspicious IP address.
     */
    bruteForceProtection?: pulumi.Input<boolean>;
    /**
     * The strategy's client ID.
     */
    clientId?: pulumi.Input<string>;
    /**
     * The strategy's client secret.
     */
    clientSecret?: pulumi.Input<string>;
    /**
     * Salesforce community base URL.
     */
    communityBaseUrl?: pulumi.Input<string>;
    /**
     * A case-sensitive map of key value pairs used as configuration variables for the `customScript`.
     */
    configuration?: pulumi.Input<{[key: string]: any}>;
    /**
     * A map of scripts used to integrate with a custom database.
     */
    customScripts?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * When enabled, additional debug information will be generated.
     */
    debug?: pulumi.Input<boolean>;
    /**
     * Sign Request Algorithm Digest.
     */
    digestAlgorithm?: pulumi.Input<string>;
    /**
     * Indicates whether to disable the cache or not.
     */
    disableCache?: pulumi.Input<boolean>;
    /**
     * Indicates whether to remove the forgot password link within the New Universal Login.
     */
    disableSelfServiceChangePassword?: pulumi.Input<boolean>;
    /**
     * When enabled, will disable sign out.
     */
    disableSignOut?: pulumi.Input<boolean>;
    /**
     * Indicates whether to allow user sign-ups to your application.
     */
    disableSignup?: pulumi.Input<boolean>;
    /**
     * OpenID discovery URL, e.g. `https://auth.example.com/.well-known/openid-configuration`.
     */
    discoveryUrl?: pulumi.Input<string>;
    /**
     * Domain name.
     */
    domain?: pulumi.Input<string>;
    /**
     * List of the domains that can be authenticated using the identity provider. Only needed for Identifier First authentication flows.
     */
    domainAliases?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Set to `true` to inject context into custom DB scripts (warning: cannot be disabled once enabled).
     */
    enableScriptContext?: pulumi.Input<boolean>;
    /**
     * Set to `true` to use a legacy user store.
     */
    enabledDatabaseCustomization?: pulumi.Input<boolean>;
    /**
     * Custom Entity ID for the connection.
     */
    entityId?: pulumi.Input<string>;
    /**
     * Federation Metadata for the ADFS connection.
     */
    fedMetadataXml?: pulumi.Input<string>;
    /**
     * If you're configuring a SAML enterprise connection for a non-standard PingFederate Server, you must update the attribute mappings.
     */
    fieldsMap?: pulumi.Input<string>;
    /**
     * Specifies whether or not request info should be forwarded to sms gateway.
     */
    forwardRequestInfo?: pulumi.Input<boolean>;
    /**
     * Address to use as the sender.
     */
    from?: pulumi.Input<string>;
    /**
     * Defines the parameters used to generate the auth token for the custom gateway.
     */
    gatewayAuthentication?: pulumi.Input<inputs.ConnectionOptionsGatewayAuthentication>;
    /**
     * Defines a custom sms gateway to use instead of Twilio.
     */
    gatewayUrl?: pulumi.Input<string>;
    /**
     * Icon URL.
     */
    iconUrl?: pulumi.Input<string>;
    /**
     * Azure AD Identity API. Available options are: `microsoft-identity-platform-v2.0` or `azure-active-directory-v1.0`.
     */
    identityApi?: pulumi.Input<string>;
    /**
     * Configuration options for IDP Initiated Authentication. This is an object with the properties: `clientId`, `clientProtocol`, and `clientAuthorizeQuery`.
     */
    idpInitiated?: pulumi.Input<inputs.ConnectionOptionsIdpInitiated>;
    /**
     * Indicates whether you have a legacy user store and want to gradually migrate those users to the Auth0 user store.
     */
    importMode?: pulumi.Input<boolean>;
    /**
     * A list of IPs.
     */
    ips?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Issuer URL, e.g. `https://auth.example.com`.
     */
    issuer?: pulumi.Input<string>;
    /**
     * JWKS URI.
     */
    jwksUri?: pulumi.Input<string>;
    /**
     * Apple Key ID.
     */
    keyId?: pulumi.Input<string>;
    /**
     * Maximum number of groups to retrieve.
     */
    maxGroupsToRetrieve?: pulumi.Input<string>;
    /**
     * SID for Copilot. Used when SMS Source is Copilot.
     */
    messagingServiceSid?: pulumi.Input<string>;
    /**
     * The URL of the SAML metadata document.
     */
    metadataUrl?: pulumi.Input<string>;
    /**
     * The XML content for the SAML metadata document.
     */
    metadataXml?: pulumi.Input<string>;
    /**
     * Configuration options for multifactor authentication.
     */
    mfa?: pulumi.Input<inputs.ConnectionOptionsMfa>;
    /**
     * The public name of the email or SMS Connection. In most cases this is the same name as the connection name.
     */
    name?: pulumi.Input<string>;
    /**
     * If there are user fields that should not be stored in Auth0 databases due to privacy reasons, you can add them to the DenyList here.
     */
    nonPersistentAttrs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Configuration settings for password complexity.
     */
    passwordComplexityOptions?: pulumi.Input<inputs.ConnectionOptionsPasswordComplexityOptions>;
    /**
     * Configuration settings for the password dictionary check, which does not allow passwords that are part of the password dictionary.
     */
    passwordDictionary?: pulumi.Input<inputs.ConnectionOptionsPasswordDictionary>;
    /**
     * Configuration settings for the password history that is maintained for each user to prevent the reuse of passwords.
     */
    passwordHistories?: pulumi.Input<pulumi.Input<inputs.ConnectionOptionsPasswordHistory>[]>;
    /**
     * Configuration settings for the password personal info check, which does not allow passwords that contain any part of the user's personal data, including user's `name`, `username`, `nickname`, `user_metadata.name`, `user_metadata.first`, `user_metadata.last`, user's `email`, or first part of the user's `email`.
     */
    passwordNoPersonalInfo?: pulumi.Input<inputs.ConnectionOptionsPasswordNoPersonalInfo>;
    /**
     * Indicates level of password strength to enforce during authentication. A strong password policy will make it difficult, if not improbable, for someone to guess a password through either manual or automated means. Options include `none`, `low`, `fair`, `good`, `excellent`.
     */
    passwordPolicy?: pulumi.Input<string>;
    /**
     * Ping Federate Server URL.
     */
    pingFederateBaseUrl?: pulumi.Input<string>;
    /**
     * Enables Proof Key for Code Exchange (PKCE) functionality for OAuth2 connections.
     */
    pkceEnabled?: pulumi.Input<boolean>;
    /**
     * The SAML Response Binding: how the SAML token is received by Auth0 from the IdP.
     */
    protocolBinding?: pulumi.Input<string>;
    /**
     * Defines the custom `smsGateway` provider.
     */
    provider?: pulumi.Input<string>;
    /**
     * Template that formats the SAML request.
     */
    requestTemplate?: pulumi.Input<string>;
    /**
     * Indicates whether the user is required to provide a username in addition to an email address.
     */
    requiresUsername?: pulumi.Input<boolean>;
    /**
     * Permissions to grant to the connection. Within the Auth0 dashboard these appear under the "Attributes" and "Extended Attributes" sections. Some examples: `basicProfile`, `extProfile`, `extNestedGroups`, etc.
     */
    scopes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A map of scripts used for an OAuth connection. Only accepts a `fetchUserProfile` script.
     */
    scripts?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Determines whether to sync user profile attributes (`name`, `givenName`, `familyName`, `nickname`, `picture`) at each login or only on the first login. Options include: `onEachLogin`, `onFirstLogin`. Default value: `onEachLogin`.
     */
    setUserRootAttributes?: pulumi.Input<string>;
    /**
     * Choose how Auth0 sets the emailVerified field in the user profile.
     */
    shouldTrustEmailVerifiedConnection?: pulumi.Input<string>;
    /**
     * SAML single login URL for the connection.
     */
    signInEndpoint?: pulumi.Input<string>;
    /**
     * SAML single logout URL for the connection.
     */
    signOutEndpoint?: pulumi.Input<string>;
    /**
     * When enabled, the SAML authentication request will be signed.
     */
    signSamlRequest?: pulumi.Input<boolean>;
    /**
     * Sign Request Algorithm.
     */
    signatureAlgorithm?: pulumi.Input<string>;
    /**
     * X.509 signing certificate (encoded in PEM or CER) you retrieved from the IdP, Base64-encoded.
     */
    signingCert?: pulumi.Input<string>;
    /**
     * The key used to sign requests in the connection. Uses the `key` and `cert` properties to provide the private key and certificate respectively.
     */
    signingKey?: pulumi.Input<inputs.ConnectionOptionsSigningKey>;
    /**
     * Version 1 is deprecated, use version 2.
     */
    strategyVersion?: pulumi.Input<number>;
    /**
     * Subject line of the email.
     */
    subject?: pulumi.Input<string>;
    /**
     * Syntax of the template body.
     */
    syntax?: pulumi.Input<string>;
    /**
     * Apple Team ID.
     */
    teamId?: pulumi.Input<string>;
    /**
     * Body of the template.
     */
    template?: pulumi.Input<string>;
    /**
     * Tenant domain name.
     */
    tenantDomain?: pulumi.Input<string>;
    /**
     * Token endpoint.
     */
    tokenEndpoint?: pulumi.Input<string>;
    /**
     * Configuration options for one-time passwords.
     */
    totp?: pulumi.Input<inputs.ConnectionOptionsTotp>;
    /**
     * SID for your Twilio account.
     */
    twilioSid?: pulumi.Input<string>;
    /**
     * AuthToken for your Twilio account.
     */
    twilioToken?: pulumi.Input<string>;
    /**
     * Value can be `backChannel` or `frontChannel`.
     */
    type?: pulumi.Input<string>;
    /**
     * You can pass provider-specific parameters to an identity provider during authentication. The values can either be static per connection or dynamic per user.
     */
    upstreamParams?: pulumi.Input<string>;
    /**
     * Indicates whether to use cert auth or not.
     */
    useCertAuth?: pulumi.Input<boolean>;
    /**
     * Indicates whether to use Kerberos or not.
     */
    useKerberos?: pulumi.Input<boolean>;
    /**
     * Whether to use WS-Fed.
     */
    useWsfed?: pulumi.Input<boolean>;
    /**
     * Attribute in the SAML token that will be mapped to the userId property in Auth0.
     */
    userIdAttribute?: pulumi.Input<string>;
    /**
     * User info endpoint.
     */
    userinfoEndpoint?: pulumi.Input<string>;
    /**
     * Validation of the minimum and maximum values allowed for a user to have as username.
     */
    validation?: pulumi.Input<inputs.ConnectionOptionsValidation>;
    /**
     * Indicates whether to use the common endpoint rather than the default endpoint. Typically enabled if you're using this for a multi-tenant application in Azure AD.
     */
    waadCommonEndpoint?: pulumi.Input<boolean>;
    /**
     * Protocol to use.
     */
    waadProtocol?: pulumi.Input<string>;
}

export interface ConnectionOptionsGatewayAuthentication {
    audience?: pulumi.Input<string>;
    method?: pulumi.Input<string>;
    secret?: pulumi.Input<string>;
    secretBase64Encoded?: pulumi.Input<boolean>;
    subject?: pulumi.Input<string>;
}

export interface ConnectionOptionsIdpInitiated {
    clientAuthorizeQuery?: pulumi.Input<string>;
    clientId?: pulumi.Input<string>;
    clientProtocol?: pulumi.Input<string>;
}

export interface ConnectionOptionsMfa {
    active?: pulumi.Input<boolean>;
    returnEnrollSettings?: pulumi.Input<boolean>;
}

export interface ConnectionOptionsPasswordComplexityOptions {
    minLength?: pulumi.Input<number>;
}

export interface ConnectionOptionsPasswordDictionary {
    dictionaries?: pulumi.Input<pulumi.Input<string>[]>;
    enable?: pulumi.Input<boolean>;
}

export interface ConnectionOptionsPasswordHistory {
    enable?: pulumi.Input<boolean>;
    size?: pulumi.Input<number>;
}

export interface ConnectionOptionsPasswordNoPersonalInfo {
    enable?: pulumi.Input<boolean>;
}

export interface ConnectionOptionsSigningKey {
    cert: pulumi.Input<string>;
    key: pulumi.Input<string>;
}

export interface ConnectionOptionsTotp {
    length?: pulumi.Input<number>;
    timeStep?: pulumi.Input<number>;
}

export interface ConnectionOptionsValidation {
    username?: pulumi.Input<inputs.ConnectionOptionsValidationUsername>;
}

export interface ConnectionOptionsValidationUsername {
    max?: pulumi.Input<number>;
    min?: pulumi.Input<number>;
}

export interface CustomDomainVerification {
    methods?: pulumi.Input<any[]>;
}

export interface EmailCredentials {
    /**
     * AWS Access Key ID. Used only for AWS.
     */
    accessKeyId?: pulumi.Input<string>;
    /**
     * API Key for your email service. Will always be encrypted in our database.
     */
    apiKey?: pulumi.Input<string>;
    /**
     * API User for your email service.
     *
     * @deprecated This field is not accepted by the API any more so it will be removed soon.
     */
    apiUser?: pulumi.Input<string>;
    /**
     * Domain name.
     */
    domain?: pulumi.Input<string>;
    /**
     * Default region. Used only for AWS, Mailgun, and SparkPost.
     */
    region?: pulumi.Input<string>;
    /**
     * AWS Secret Key. Will always be encrypted in our database. Used only for AWS.
     */
    secretAccessKey?: pulumi.Input<string>;
    /**
     * Hostname or IP address of your SMTP server. Used only for SMTP.
     */
    smtpHost?: pulumi.Input<string>;
    /**
     * SMTP password. Used only for SMTP.
     */
    smtpPass?: pulumi.Input<string>;
    /**
     * Port used by your SMTP server. Please avoid using port 25 if possible because many providers have limitations on this port. Used only for SMTP.
     */
    smtpPort?: pulumi.Input<number>;
    /**
     * SMTP username. Used only for SMTP.
     */
    smtpUser?: pulumi.Input<string>;
}

export interface EmailSettings {
    /**
     * Headers settings for the `smtp` email provider.
     */
    headers?: pulumi.Input<inputs.EmailSettingsHeaders>;
    /**
     * Message settings for the `mandrill` or `ses` email provider.
     */
    message?: pulumi.Input<inputs.EmailSettingsMessage>;
}

export interface EmailSettingsHeaders {
    xMcViewContentLink?: pulumi.Input<string>;
    xSesConfigurationSet?: pulumi.Input<string>;
}

export interface EmailSettingsMessage {
    configurationSetName?: pulumi.Input<string>;
    viewContentLink?: pulumi.Input<boolean>;
}

export interface GlobalClientAddons {
    aws?: pulumi.Input<{[key: string]: any}>;
    azureBlob?: pulumi.Input<{[key: string]: any}>;
    azureSb?: pulumi.Input<{[key: string]: any}>;
    box?: pulumi.Input<{[key: string]: any}>;
    cloudbees?: pulumi.Input<{[key: string]: any}>;
    concur?: pulumi.Input<{[key: string]: any}>;
    dropbox?: pulumi.Input<{[key: string]: any}>;
    echosign?: pulumi.Input<{[key: string]: any}>;
    egnyte?: pulumi.Input<{[key: string]: any}>;
    firebase?: pulumi.Input<{[key: string]: any}>;
    layer?: pulumi.Input<{[key: string]: any}>;
    mscrm?: pulumi.Input<{[key: string]: any}>;
    newrelic?: pulumi.Input<{[key: string]: any}>;
    office365?: pulumi.Input<{[key: string]: any}>;
    rms?: pulumi.Input<{[key: string]: any}>;
    salesforce?: pulumi.Input<{[key: string]: any}>;
    salesforceApi?: pulumi.Input<{[key: string]: any}>;
    salesforceSandboxApi?: pulumi.Input<{[key: string]: any}>;
    /**
     * Configuration settings for a SAML add-on.
     */
    samlp?: pulumi.Input<inputs.GlobalClientAddonsSamlp>;
    sapApi?: pulumi.Input<{[key: string]: any}>;
    sentry?: pulumi.Input<{[key: string]: any}>;
    sharepoint?: pulumi.Input<{[key: string]: any}>;
    slack?: pulumi.Input<{[key: string]: any}>;
    springcm?: pulumi.Input<{[key: string]: any}>;
    wams?: pulumi.Input<{[key: string]: any}>;
    /**
     * WS-Fed (WIF) addon indicator. Actual configuration is stored in callback and `clientAliases` properties on the client.
     */
    wsfed?: pulumi.Input<{[key: string]: any}>;
    zendesk?: pulumi.Input<{[key: string]: any}>;
    zoom?: pulumi.Input<{[key: string]: any}>;
}

export interface GlobalClientAddonsSamlp {
    audience?: pulumi.Input<string>;
    authnContextClassRef?: pulumi.Input<string>;
    binding?: pulumi.Input<string>;
    createUpnClaim?: pulumi.Input<boolean>;
    destination?: pulumi.Input<string>;
    digestAlgorithm?: pulumi.Input<string>;
    includeAttributeNameFormat?: pulumi.Input<boolean>;
    issuer?: pulumi.Input<string>;
    lifetimeInSeconds?: pulumi.Input<number>;
    logout?: pulumi.Input<{[key: string]: any}>;
    mapIdentities?: pulumi.Input<boolean>;
    mapUnknownClaimsAsIs?: pulumi.Input<boolean>;
    mappings?: pulumi.Input<{[key: string]: any}>;
    nameIdentifierFormat?: pulumi.Input<string>;
    nameIdentifierProbes?: pulumi.Input<pulumi.Input<string>[]>;
    passthroughClaimsWithNoMapping?: pulumi.Input<boolean>;
    recipient?: pulumi.Input<string>;
    signResponse?: pulumi.Input<boolean>;
    signatureAlgorithm?: pulumi.Input<string>;
    signingCert?: pulumi.Input<string>;
    typedAttributes?: pulumi.Input<boolean>;
}

export interface GlobalClientJwtConfiguration {
    /**
     * Algorithm used to sign JWTs.
     */
    alg?: pulumi.Input<string>;
    /**
     * Number of seconds during which the JWT will be valid.
     */
    lifetimeInSeconds?: pulumi.Input<number>;
    /**
     * Permissions (scopes) included in JWTs.
     */
    scopes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Indicates whether the client secret is Base64-encoded.
     */
    secretEncoded?: pulumi.Input<boolean>;
}

export interface GlobalClientMobile {
    /**
     * Configuration settings for Android native apps.
     */
    android?: pulumi.Input<inputs.GlobalClientMobileAndroid>;
    /**
     * Configuration settings for i0S native apps.
     */
    ios?: pulumi.Input<inputs.GlobalClientMobileIos>;
}

export interface GlobalClientMobileAndroid {
    appPackageName?: pulumi.Input<string>;
    sha256CertFingerprints?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GlobalClientMobileIos {
    appBundleIdentifier?: pulumi.Input<string>;
    teamId?: pulumi.Input<string>;
}

export interface GlobalClientNativeSocialLogin {
    apple?: pulumi.Input<inputs.GlobalClientNativeSocialLoginApple>;
    facebook?: pulumi.Input<inputs.GlobalClientNativeSocialLoginFacebook>;
}

export interface GlobalClientNativeSocialLoginApple {
    enabled?: pulumi.Input<boolean>;
}

export interface GlobalClientNativeSocialLoginFacebook {
    enabled?: pulumi.Input<boolean>;
}

export interface GlobalClientRefreshToken {
    /**
     * Options include `expiring`, `non-expiring`. Whether a refresh token will expire based on an absolute lifetime, after which the token can no longer be used. If rotation is `rotating`, this must be set to `expiring`.
     */
    expirationType: pulumi.Input<string>;
    /**
     * The time in seconds after which inactive refresh tokens will expire.
     */
    idleTokenLifetime?: pulumi.Input<number>;
    /**
     * Whether inactive refresh tokens should remain valid indefinitely.
     */
    infiniteIdleTokenLifetime?: pulumi.Input<boolean>;
    /**
     * Whether refresh tokens should remain valid indefinitely. If false, `tokenLifetime` should also be set.
     */
    infiniteTokenLifetime?: pulumi.Input<boolean>;
    /**
     * The amount of time in seconds in which a refresh token may be reused without triggering reuse detection.
     */
    leeway?: pulumi.Input<number>;
    /**
     * Options include `rotating`, `non-rotating`. When `rotating`, exchanging a refresh token will cause a new refresh token to be issued and the existing token will be invalidated. This allows for automatic detection of token reuse if the token is leaked.
     */
    rotationType: pulumi.Input<string>;
    /**
     * The absolute lifetime of a refresh token in seconds.
     */
    tokenLifetime?: pulumi.Input<number>;
}

export interface GuardianDuo {
    /**
     * Indicates whether Duo MFA is enabled.
     */
    enabled: pulumi.Input<boolean>;
    /**
     * Duo API Hostname, see the Duo documentation for more details on Duo setup.
     */
    hostname?: pulumi.Input<string>;
    /**
     * Duo client ID, see the Duo documentation for more details on Duo setup.
     */
    integrationKey?: pulumi.Input<string>;
    /**
     * Duo client secret, see the Duo documentation for more details on Duo setup.
     */
    secretKey?: pulumi.Input<string>;
}

export interface GuardianPhone {
    /**
     * Indicates whether Phone MFA is enabled.
     */
    enabled: pulumi.Input<boolean>;
    /**
     * Message types to use, array of `sms` and/or `voice`. Adding both to the array should enable the user to choose.
     */
    messageTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Options for the various providers.
     */
    options?: pulumi.Input<inputs.GuardianPhoneOptions>;
    /**
     * Provider to use, one of `auth0`, `twilio` or `phone-message-hook`. Selecting `phone-message-hook` will require a Phone Message Action to be created before. [Learn how](https://auth0.com/docs/customize/actions/flows-and-triggers/send-phone-message-flow).
     */
    provider?: pulumi.Input<string>;
}

export interface GuardianPhoneOptions {
    authToken?: pulumi.Input<string>;
    enrollmentMessage?: pulumi.Input<string>;
    from?: pulumi.Input<string>;
    messagingServiceSid?: pulumi.Input<string>;
    sid?: pulumi.Input<string>;
    verificationMessage?: pulumi.Input<string>;
}

export interface GuardianPush {
    /**
     * Configuration for Amazon SNS.
     */
    amazonSns?: pulumi.Input<inputs.GuardianPushAmazonSns>;
    /**
     * Configuration for the Guardian Custom App.
     */
    customApp?: pulumi.Input<inputs.GuardianPushCustomApp>;
    /**
     * Configuration for the Apple Push Notification service (APNs) settings.
     */
    directApns?: pulumi.Input<inputs.GuardianPushDirectApns>;
    /**
     * Configuration for Firebase Cloud Messaging (FCM) settings.
     */
    directFcm?: pulumi.Input<inputs.GuardianPushDirectFcm>;
    /**
     * Indicates whether Push MFA is enabled.
     */
    enabled: pulumi.Input<boolean>;
    /**
     * Provider to use, one of `direct`, `guardian`, `sns`.
     */
    provider?: pulumi.Input<string>;
}

export interface GuardianPushAmazonSns {
    awsAccessKeyId: pulumi.Input<string>;
    awsRegion: pulumi.Input<string>;
    awsSecretAccessKey: pulumi.Input<string>;
    snsApnsPlatformApplicationArn: pulumi.Input<string>;
    snsGcmPlatformApplicationArn: pulumi.Input<string>;
}

export interface GuardianPushCustomApp {
    appName?: pulumi.Input<string>;
    appleAppLink?: pulumi.Input<string>;
    googleAppLink?: pulumi.Input<string>;
}

export interface GuardianPushDirectApns {
    bundleId: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    p12: pulumi.Input<string>;
    sandbox: pulumi.Input<boolean>;
}

export interface GuardianPushDirectFcm {
    serverKey: pulumi.Input<string>;
}

export interface GuardianWebauthnPlatform {
    /**
     * Indicates whether WebAuthn with FIDO Device Biometrics MFA is enabled.
     */
    enabled: pulumi.Input<boolean>;
    /**
     * The Relying Party is the domain for which the WebAuthn keys will be issued, set to `true` if you are customizing the identifier.
     */
    overrideRelyingParty?: pulumi.Input<boolean>;
    /**
     * The Relying Party should be a suffix of the custom domain.
     */
    relyingPartyIdentifier?: pulumi.Input<string>;
}

export interface GuardianWebauthnRoaming {
    /**
     * Indicates whether WebAuthn with FIDO Security Keys MFA is enabled.
     */
    enabled: pulumi.Input<boolean>;
    /**
     * The Relying Party is the domain for which the WebAuthn keys will be issued, set to `true` if you are customizing the identifier.
     */
    overrideRelyingParty?: pulumi.Input<boolean>;
    /**
     * The Relying Party should be a suffix of the custom domain.
     */
    relyingPartyIdentifier?: pulumi.Input<string>;
    /**
     * User verification, one of `discouraged`, `preferred` or `required`.
     */
    userVerification?: pulumi.Input<string>;
}

export interface LogStreamSink {
    /**
     * The AWS Account ID.
     */
    awsAccountId?: pulumi.Input<string>;
    /**
     * Name of the Partner Event Source to be used with AWS. Generally generated by Auth0 and passed to AWS, so this should be an output attribute.
     */
    awsPartnerEventSource?: pulumi.Input<string>;
    /**
     * The AWS Region, e.g. "us-east-2").
     */
    awsRegion?: pulumi.Input<string>;
    /**
     * Name of the Partner Topic to be used with Azure. Generally should not be specified.
     */
    azurePartnerTopic?: pulumi.Input<string>;
    /**
     * The Azure region code, e.g. "ne")
     */
    azureRegion?: pulumi.Input<string>;
    /**
     * The Azure EventGrid resource group which allows you to manage all Azure assets within one subscription.
     */
    azureResourceGroup?: pulumi.Input<string>;
    /**
     * The unique alphanumeric string that identifies your Azure subscription.
     */
    azureSubscriptionId?: pulumi.Input<string>;
    /**
     * The Datadog API key.
     */
    datadogApiKey?: pulumi.Input<string>;
    /**
     * The Datadog region. Options are ["us", "eu", "us3", "us5"].
     */
    datadogRegion?: pulumi.Input<string>;
    /**
     * Sent in the HTTP "Authorization" header with each request.
     */
    httpAuthorization?: pulumi.Input<string>;
    /**
     * The format of data sent over HTTP. Options are "JSONLINES", "JSONARRAY" or "JSONOBJECT"
     */
    httpContentFormat?: pulumi.Input<string>;
    /**
     * The "Content-Type" header to send over HTTP. Common value is "application/json".
     */
    httpContentType?: pulumi.Input<string>;
    /**
     * Additional HTTP headers to be included as part of the HTTP request.
     */
    httpCustomHeaders?: pulumi.Input<pulumi.Input<{[key: string]: pulumi.Input<string>}>[]>;
    /**
     * The HTTP endpoint to send streaming logs.
     */
    httpEndpoint?: pulumi.Input<string>;
    /**
     * The Mixpanel project ID, found on the Project Settings page.
     */
    mixpanelProjectId?: pulumi.Input<string>;
    /**
     * The Mixpanel region. Options are ["us", "eu"]. EU is required for customers with EU data residency requirements.
     */
    mixpanelRegion?: pulumi.Input<string>;
    /**
     * The Mixpanel Service Account password.
     */
    mixpanelServiceAccountPassword?: pulumi.Input<string>;
    /**
     * The Mixpanel Service Account username. Services Accounts can be created in the Project Settings page.
     */
    mixpanelServiceAccountUsername?: pulumi.Input<string>;
    /**
     * The [Segment Write Key](https://segment.com/docs/connections/find-writekey/).
     */
    segmentWriteKey?: pulumi.Input<string>;
    /**
     * The Splunk domain name.
     */
    splunkDomain?: pulumi.Input<string>;
    /**
     * The Splunk port.
     */
    splunkPort?: pulumi.Input<string>;
    /**
     * This toggle should be turned off when using self-signed certificates.
     */
    splunkSecure?: pulumi.Input<boolean>;
    /**
     * The Splunk access token.
     */
    splunkToken?: pulumi.Input<string>;
    /**
     * Generated URL for your defined HTTP source in Sumo Logic for collecting streaming data from Auth0.
     */
    sumoSourceAddress?: pulumi.Input<string>;
}

export interface OrganizationBranding {
    /**
     * Color scheme used to customize the login pages.
     */
    colors?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * URL of logo to display on login page.
     */
    logoUrl?: pulumi.Input<string>;
}

export interface OrganizationConnectionsEnabledConnection {
    /**
     * When true, all users that log in with this connection will be automatically granted membership in the organization. When false, users must be granted membership in the organization before logging in with this connection.
     */
    assignMembershipOnLogin?: pulumi.Input<boolean>;
    /**
     * The ID of the connection to enable for the organization.
     */
    connectionId: pulumi.Input<string>;
}

export interface ResourceServerScope {
    /**
     * Description of the permission (scope).
     */
    description?: pulumi.Input<string>;
    /**
     * Name of the permission (scope). Examples include `read:appointments` or `delete:appointments`.
     */
    value: pulumi.Input<string>;
}

export interface ResourceServerScopesScope {
    /**
     * User-friendly description of the scope (permission).
     */
    description?: pulumi.Input<string>;
    /**
     * Name of the scope (permission). Examples include `read:appointments` or `delete:appointments`.
     */
    name: pulumi.Input<string>;
}

export interface RolePermission {
    /**
     * Description of the permission.
     */
    description?: pulumi.Input<string>;
    /**
     * Name of the permission (scope) configured on the resource server. If referencing a scope from an `auth0.ResourceServer` resource, use the `value` property, for example `auth0_resource_server.my_resource_server.scopes[0].value`.
     */
    name: pulumi.Input<string>;
    /**
     * Unique identifier for the resource server.
     */
    resourceServerIdentifier: pulumi.Input<string>;
    /**
     * Name of resource server that the permission is associated with.
     */
    resourceServerName?: pulumi.Input<string>;
}

export interface RolePermissionsPermission {
    /**
     * Description of the permission.
     */
    description?: pulumi.Input<string>;
    /**
     * Name of permission.
     */
    name: pulumi.Input<string>;
    /**
     * Resource server identifier associated with the permission.
     */
    resourceServerIdentifier: pulumi.Input<string>;
    /**
     * Name of resource server that the permission is associated with.
     */
    resourceServerName?: pulumi.Input<string>;
}

export interface TenantChangePassword {
    /**
     * Indicates whether to use the custom change password page.
     */
    enabled: pulumi.Input<boolean>;
    /**
     * HTML format with supported Liquid syntax. Customized content of the change password page.
     */
    html: pulumi.Input<string>;
}

export interface TenantErrorPage {
    /**
     * HTML format with supported Liquid syntax. Customized content of the error page.
     */
    html: pulumi.Input<string>;
    /**
     * Indicates whether to show the link to logs as part of the default error page.
     */
    showLogLink: pulumi.Input<boolean>;
    /**
     * URL to redirect to when an error occurs rather than showing the default error page.
     */
    url: pulumi.Input<string>;
}

export interface TenantFlags {
    /**
     * Whether the legacy delegation endpoint will be enabled for your account (true) or not available (false).
     */
    allowLegacyDelegationGrantTypes?: pulumi.Input<boolean>;
    /**
     * Whether the legacy `auth/ro` endpoint (used with resource owner password and passwordless features) will be enabled for your account (true) or not available (false).
     */
    allowLegacyRoGrantTypes?: pulumi.Input<boolean>;
    /**
     * If enabled, customers can use Tokeninfo Endpoint, otherwise they can not use it.
     */
    allowLegacyTokeninfoEndpoint?: pulumi.Input<boolean>;
    /**
     * Enables new insights activity page view.
     */
    dashboardInsightsView?: pulumi.Input<boolean>;
    /**
     * Enables beta access to log streaming changes.
     */
    dashboardLogStreamsNext?: pulumi.Input<boolean>;
    /**
     * Indicates whether classic Universal Login prompts include additional security headers to prevent clickjacking.
     */
    disableClickjackProtectionHeaders?: pulumi.Input<boolean>;
    /**
     * Disables SAML fields map fix for bad mappings with repeated attributes.
     */
    disableFieldsMapFix?: pulumi.Input<boolean>;
    /**
     * If true, SMS phone numbers will not be obfuscated in Management API GET calls.
     */
    disableManagementApiSmsObfuscation?: pulumi.Input<boolean>;
    /**
     * If enabled, users will be presented with an email verification prompt during their first login when using Azure AD or ADFS connections.
     */
    enableAdfsWaadEmailVerification?: pulumi.Input<boolean>;
    /**
     * Indicates whether the APIs section is enabled for the tenant.
     */
    enableApisSection?: pulumi.Input<boolean>;
    /**
     * Indicates whether all current connections should be enabled when a new client is created.
     */
    enableClientConnections?: pulumi.Input<boolean>;
    /**
     * Indicates whether the tenant allows custom domains in emails.
     */
    enableCustomDomainInEmails?: pulumi.Input<boolean>;
    /**
     * Indicates whether the tenant allows dynamic client registration.
     */
    enableDynamicClientRegistration?: pulumi.Input<boolean>;
    /**
     * Whether ID tokens can be used to authorize some types of requests to API v2 (true) or not (false).
     */
    enableIdtokenApi2?: pulumi.Input<boolean>;
    /**
     * Indicates whether to use the older v2 legacy logs search.
     */
    enableLegacyLogsSearchV2?: pulumi.Input<boolean>;
    /**
     * Whether ID tokens and the userinfo endpoint includes a complete user profile (true) or only OpenID Connect claims (false).
     */
    enableLegacyProfile?: pulumi.Input<boolean>;
    /**
     * Indicates whether advanced API Authorization scenarios are enabled.
     */
    enablePipeline2?: pulumi.Input<boolean>;
    /**
     * Indicates whether the public sign up process shows a `userExists` error if the user already exists.
     */
    enablePublicSignupUserExistsError?: pulumi.Input<boolean>;
    /**
     * Used to allow users to pick which factor to enroll with from the list of available MFA factors.
     */
    mfaShowFactorListOnEnrollment?: pulumi.Input<boolean>;
    /**
     * Do not Publish Enterprise Connections Information with IdP domains on the lock configuration file.
     */
    noDiscloseEnterpriseConnections?: pulumi.Input<boolean>;
    /**
     * Delete underlying grant when a refresh token is revoked via the Authentication API.
     */
    revokeRefreshTokenGrant?: pulumi.Input<boolean>;
    /**
     * Indicates whether the New Universal Login Experience is enabled.
     *
     * @deprecated This attribute is deprecated. Use the `universal_login_experience` attribute on the `auth0_prompt` resource to toggle the new or classic experience instead.
     */
    universalLogin?: pulumi.Input<boolean>;
    /**
     * Indicates whether to use scope descriptions for consent.
     */
    useScopeDescriptionsForConsent?: pulumi.Input<boolean>;
}

export interface TenantGuardianMfaPage {
    /**
     * Indicates whether to use the custom Guardian page.
     */
    enabled: pulumi.Input<boolean>;
    /**
     * HTML format with supported Liquid syntax. Customized content of the Guardian page.
     */
    html: pulumi.Input<string>;
}

export interface TenantSessionCookie {
    /**
     * Behavior of tenant session cookie. Accepts either "persistent" or "non-persistent".
     */
    mode?: pulumi.Input<string>;
}

export interface TenantUniversalLogin {
    /**
     * Configuration settings for Universal Login colors.
     */
    colors?: pulumi.Input<inputs.TenantUniversalLoginColors>;
}

export interface TenantUniversalLoginColors {
    pageBackground?: pulumi.Input<string>;
    primary?: pulumi.Input<string>;
}

export interface TriggerActionsAction {
    /**
     * The display name of the action within the flow.
     */
    displayName: pulumi.Input<string>;
    /**
     * Action ID.
     */
    id: pulumi.Input<string>;
}

export interface TriggerBindingAction {
    /**
     * The display name of the action within the flow.
     */
    displayName: pulumi.Input<string>;
    /**
     * Action ID.
     */
    id: pulumi.Input<string>;
}

export interface UserPermission {
    description?: pulumi.Input<string>;
    /**
     * Name of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled 'Sync user profile attributes at each login'. For more information, see: [Configure Identity Provider Connection for User Profile Updates](https://auth0.com/docs/manage-users/user-accounts/user-profiles/configure-connection-sync-with-auth0).
     */
    name?: pulumi.Input<string>;
    resourceServerIdentifier?: pulumi.Input<string>;
    resourceServerName?: pulumi.Input<string>;
}

export interface UserPermissionsPermission {
    /**
     * Description of the permission.
     */
    description?: pulumi.Input<string>;
    /**
     * Name of permission.
     */
    name: pulumi.Input<string>;
    /**
     * Resource server identifier associated with the permission.
     */
    resourceServerIdentifier: pulumi.Input<string>;
    /**
     * Name of resource server that the permission is associated with.
     */
    resourceServerName?: pulumi.Input<string>;
}
