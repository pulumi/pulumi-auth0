// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface ClientAddons {
    /**
     * String
     */
    aws?: {[key: string]: any};
    /**
     * String
     */
    azureBlob?: {[key: string]: any};
    /**
     * String
     */
    azureSb?: {[key: string]: any};
    /**
     * String
     */
    box?: {[key: string]: any};
    /**
     * String
     */
    cloudbees?: {[key: string]: any};
    /**
     * String
     */
    concur?: {[key: string]: any};
    /**
     * String
     */
    dropbox?: {[key: string]: any};
    /**
     * String
     */
    echosign?: {[key: string]: any};
    /**
     * String
     */
    egnyte?: {[key: string]: any};
    /**
     * String
     */
    firebase?: {[key: string]: any};
    /**
     * String
     */
    layer?: {[key: string]: any};
    /**
     * String
     */
    mscrm?: {[key: string]: any};
    /**
     * String
     */
    newrelic?: {[key: string]: any};
    /**
     * String
     */
    office365?: {[key: string]: any};
    /**
     * String
     */
    rms?: {[key: string]: any};
    /**
     * String
     */
    salesforce?: {[key: string]: any};
    /**
     * String
     */
    salesforceApi?: {[key: string]: any};
    /**
     * String
     */
    salesforceSandboxApi?: {[key: string]: any};
    /**
     * List(Resource). Configuration settings for a SAML add-on. For details, see SAML.
     */
    samlp?: outputs.ClientAddonsSamlp;
    /**
     * String
     */
    sapApi?: {[key: string]: any};
    /**
     * String
     */
    sentry?: {[key: string]: any};
    /**
     * String
     */
    sharepoint?: {[key: string]: any};
    /**
     * String
     */
    slack?: {[key: string]: any};
    /**
     * String
     */
    springcm?: {[key: string]: any};
    /**
     * String
     */
    wams?: {[key: string]: any};
    /**
     * String
     */
    wsfed?: {[key: string]: any};
    /**
     * String
     */
    zendesk?: {[key: string]: any};
    /**
     * String
     */
    zoom?: {[key: string]: any};
}

export interface ClientAddonsSamlp {
    /**
     * String. Audience of the SAML Assertion. Default will be the Issuer on SAMLRequest.
     */
    audience?: string;
    /**
     * String. Class reference of the authentication context.
     */
    authnContextClassRef?: string;
    /**
     * String. Protocol binding used for SAML logout responses.
     */
    binding?: string;
    /**
     * Boolean, (Default=true) Indicates whether or not a UPN claim should be created.
     */
    createUpnClaim?: boolean;
    /**
     * String. Destination of the SAML Response. If not specified, it will be AssertionConsumerUrlof SAMLRequest or Callback URL if there was no SAMLRequest.
     */
    destination?: string;
    /**
     * String, (Default=`sha1`). Algorithm used to calculate the digest of the SAML Assertion or response. Options include `defaultsha1` and `sha256`.
     */
    digestAlgorithm?: string;
    /**
     * Boolean,(Default=true). Indicates whether or not we should infer the NameFormat based on the attribute name. If set to false, the attribute NameFormat is not set in the assertion.
     */
    includeAttributeNameFormat?: boolean;
    /**
     * Integer, (Default=3600). Number of seconds during which the token is valid.
     */
    lifetimeInSeconds?: number;
    /**
     * Map(Resource). Configuration settings for logout. For details, see Logout.
     */
    logout?: outputs.ClientAddonsSamlpLogout;
    /**
     * Boolean, (Default=true). Indicates whether or not to add additional identity information in the token, such as the provider used and the access_token, if available.
     */
    mapIdentities?: boolean;
    /**
     * Boolean, (Default=false). Indicates whether or not to add a prefix of `http://schema.auth0.com` to any claims that are not mapped to the common profile when passed through in the output assertion.
     */
    mapUnknownClaimsAsIs?: boolean;
    /**
     * Map(String). Mappings between the Auth0 user profile property name (`name`) and the output attributes on the SAML attribute in the assertion (`value`).
     */
    mappings?: {[key: string]: any};
    /**
     * String, (Default=`urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified`). Format of the name identifier.
     */
    nameIdentifierFormat?: string;
    /**
     * List(String). Attributes that can be used for Subject/NameID. Auth0 will try each of the attributes of this array in order and use the first value it finds.
     */
    nameIdentifierProbes?: string[];
    /**
     * Boolean, (Default=true). Indicates whether or not to passthrough claims that are not mapped to the common profile in the output assertion.
     */
    passthroughClaimsWithNoMapping?: boolean;
    /**
     * String. Recipient of the SAML Assertion (SubjectConfirmationData). Default is AssertionConsumerUrl on SAMLRequest or Callback URL if no SAMLRequest was sent.
     */
    recipient?: string;
    /**
     * Boolean. Indicates whether or not the SAML Response should be signed instead of the SAML Assertion.
     */
    signResponse?: boolean;
    /**
     * String, (Default=`rsa-sha1`). Algorithm used to sign the SAML Assertion or response. Options include `rsa-sha1` and `rsa-sha256`.
     */
    signatureAlgorithm?: string;
    /**
     * Boolean, (Default=true). Indicates whether or not we should infer the `xs:type` of the element. Types include `xs:string`, `xs:boolean`, `xs:double`, and `xs:anyType`. When set to false, all `xs:type` are `xs:anyType`.
     */
    typedAttributes?: boolean;
}

export interface ClientAddonsSamlpLogout {
    /**
     * String. Service provider's Single Logout Service URL, to which Auth0 will send logout requests and responses.
     */
    callback?: string;
    /**
     * Boolean. Indicates whether or not Auth0 should notify service providers of session termination.
     */
    sloEnabled?: boolean;
}

export interface ClientJwtConfiguration {
    /**
     * String. Algorithm used to sign JWTs.
     */
    alg?: string;
    /**
     * Integer. Number of seconds during which the JWT will be valid.
     */
    lifetimeInSeconds: number;
    /**
     * Map(String). Permissions (scopes) included in JWTs.
     */
    scopes?: {[key: string]: string};
    /**
     * Boolean. Indicates whether or not the client secret is base64 encoded.
     */
    secretEncoded: boolean;
}

export interface ClientMobile {
    /**
     * List(Resource). Configuration settings for Android native apps. For details, see Android.
     */
    android?: outputs.ClientMobileAndroid;
    /**
     * List(Resource). Configuration settings for i0S native apps. For details, see iOS.
     */
    ios?: outputs.ClientMobileIos;
}

export interface ClientMobileAndroid {
    /**
     * String
     */
    appPackageName?: string;
    /**
     * List(String)
     */
    sha256CertFingerprints?: string[];
}

export interface ClientMobileIos {
    /**
     * String
     */
    appBundleIdentifier?: string;
    /**
     * String
     */
    teamId?: string;
}

export interface ConnectionOptions {
    /**
     * String. ADFS Metadata source.
     */
    adfsServer?: string;
    allowedAudiences?: string[];
    /**
     * Boolean.
     */
    apiEnableUsers?: boolean;
    /**
     * String. Azure AD domain name.
     *
     * @deprecated use domain instead
     */
    appDomain?: string;
    /**
     * String
     */
    appId?: string;
    /**
     * String.
     */
    authorizationEndpoint?: string;
    /**
     * Boolean. Indicates whether or not to enable brute force protection, which will limit the number of signups and failed logins from a suspicious IP address.
     */
    bruteForceProtection?: boolean;
    /**
     * String. Client ID given by your OIDC provider.
     */
    clientId?: string;
    /**
     * String, Case-sensitive. Client secret given by your OIDC provider.
     */
    clientSecret?: string;
    /**
     * String.
     */
    communityBaseUrl?: string;
    /**
     * Map(String), Case-sensitive.
     */
    configuration?: {[key: string]: string};
    /**
     * Map(String).
     */
    customScripts?: {[key: string]: string};
    disableCache?: boolean;
    /**
     * Boolean. Indicates whether or not to allow user sign-ups to your application.
     */
    disableSignup?: boolean;
    /**
     * String. Usually an URL ending with `/.well-known/openid-configuration`
     */
    discoveryUrl?: string;
    domain?: string;
    /**
     * List(String). List of the domains that can be authenticated using the Identity Provider. Only needed for Identifier First authentication flows.
     */
    domainAliases?: string[];
    /**
     * Boolean.
     */
    enabledDatabaseCustomization?: boolean;
    /**
     * String. SMS number for the sender. Used when SMS Source is From.
     */
    from?: string;
    iconUrl?: string;
    identityApi?: string;
    /**
     * Boolean. Indicates whether or not you have a legacy user store and want to gradually migrate those users to the Auth0 user store. [Learn more](https://auth0.com/docs/users/guides/configure-automatic-migration).
     */
    importMode?: boolean;
    ips?: string[];
    /**
     * String. URL of the issuer.
     */
    issuer?: string;
    /**
     * String.
     */
    jwksUri?: string;
    keyId?: string;
    /**
     * String. Maximum number of groups to retrieve.
     */
    maxGroupsToRetrieve?: string;
    /**
     * String. SID for Copilot. Used when SMS Source is Copilot.
     */
    messagingServiceSid?: string;
    /**
     * String.
     */
    name?: string;
    /**
     * List(Resource). Configuration settings for password complexity. For details, see Password Complexity Options.
     */
    passwordComplexityOptions?: outputs.ConnectionOptionsPasswordComplexityOptions;
    /**
     * List(Resource). Configuration settings for the password dictionary check, which does not allow passwords that are part of the password dictionary. For details, see Password Dictionary.
     */
    passwordDictionary?: outputs.ConnectionOptionsPasswordDictionary;
    /**
     * List(Resource). Configuration settings for the password history that is maintained for each user to prevent the reuse of passwords. For details, see Password History.
     */
    passwordHistories: outputs.ConnectionOptionsPasswordHistory[];
    /**
     * List(Resource). Configuration settings for the password personal info check, which does not allow passwords that contain any part of the user's personal data, including user's name, username, nickname, user_metadata.name, user_metadata.first, user_metadata.last, user's email, or first part of the user's email. For details, see Password No Personal Info.
     */
    passwordNoPersonalInfo?: outputs.ConnectionOptionsPasswordNoPersonalInfo;
    /**
     * String. Indicates level of password strength to enforce during authentication. A strong password policy will make it difficult, if not improbable, for someone to guess a password through either manual or automated means. Options include `none`, `low`, `fair`, `good`, `excellent`.
     */
    passwordPolicy: string;
    /**
     * Boolean. Indicates whether or not the user is required to provide a username in addition to an email address.
     */
    requiresUsername?: boolean;
    /**
     * List(String). Value must be a list of scopes. For example `["openid", "profile", "email"]`
     */
    scopes?: string[];
    /**
     * Int. Version 1 is deprecated, use version 2.
     */
    strategyVersion: number;
    subject?: string;
    /**
     * String. Syntax of the SMS. Options include `markdown` and `liquid`.
     */
    syntax?: string;
    teamId?: string;
    /**
     * String. Template for the SMS. You can use `@@password@@` as a placeholder for the password value.
     */
    template?: string;
    /**
     * String
     */
    tenantDomain?: string;
    /**
     * String.
     */
    tokenEndpoint?: string;
    /**
     * Map(Resource). Configuration options for one-time passwords. For details, see TOTP.
     */
    totp?: outputs.ConnectionOptionsTotp;
    /**
     * String. SID for your Twilio account.
     */
    twilioSid?: string;
    /**
     * String, Case-sensitive. AuthToken for your Twilio account.
     */
    twilioToken?: string;
    /**
     * String. Value must be `backChannel` or `frontChannel`
     */
    type?: string;
    useCertAuth?: boolean;
    useKerberos?: boolean;
    /**
     * Bool
     */
    useWsfed?: boolean;
    /**
     * String.
     */
    userinfoEndpoint?: string;
    /**
     * String.
     */
    validation?: {[key: string]: string};
    /**
     * Boolean. Indicates whether or not to use the common endpoint rather than the default endpoint. Typically enabled if you're using this for a multi-tenant application in Azure AD.
     */
    waadCommonEndpoint?: boolean;
    /**
     * String
     */
    waadProtocol?: string;
}

export interface ConnectionOptionsPasswordComplexityOptions {
    /**
     * Integer. Minimum number of characters allowed in passwords.
     */
    minLength?: number;
}

export interface ConnectionOptionsPasswordDictionary {
    /**
     * Set(String), (Maximum=2000 characters). Customized contents of the password dictionary. By default, the password dictionary contains a list of the [10,000 most common passwords](https://github.com/danielmiessler/SecLists/blob/master/Passwords/Common-Credentials/10k-most-common.txt); your customized content is used in addition to the default password dictionary. Matching is not case-sensitive.
     */
    dictionaries?: string[];
    /**
     * Boolean. Indicates whether password history is enabled for the connection. When enabled, any existing users in this connection will be unaffected; the system will maintain their password history going forward.
     */
    enable?: boolean;
}

export interface ConnectionOptionsPasswordHistory {
    /**
     * Boolean. Indicates whether password history is enabled for the connection. When enabled, any existing users in this connection will be unaffected; the system will maintain their password history going forward.
     */
    enable?: boolean;
    /**
     * Integer, (Maximum=24). Indicates the number of passwords to keep in history.
     */
    size?: number;
}

export interface ConnectionOptionsPasswordNoPersonalInfo {
    /**
     * Boolean. Indicates whether the password personal info check is enabled for this connection.
     */
    enable?: boolean;
}

export interface ConnectionOptionsTotp {
    /**
     * Integer. Length of the one-time password.
     */
    length?: number;
    /**
     * Integer. Seconds between allowed generation of new passwords.
     */
    timeStep?: number;
}

export interface CustomDomainVerification {
    /**
     * List(Map). Verification methods for the domain.
     */
    methods: any[];
}

export interface EmailCredentials {
    /**
     * String, Case-sensitive. AWS Access Key ID. Used only for AWS.
     */
    accessKeyId?: string;
    /**
     * String, Case-sensitive. API Key for your email service. Will always be encrypted in our database.
     */
    apiKey?: string;
    /**
     * String. API User for your email service.
     */
    apiUser?: string;
    domain?: string;
    /**
     * String. Default region. Used only for AWS, Mailgun, and SparkPost.
     */
    region?: string;
    /**
     * String, Case-sensitive. AWS Secret Key. Will always be encrypted in our database. Used only for AWS.
     */
    secretAccessKey?: string;
    /**
     * String. Hostname or IP address of your SMTP server. Used only for SMTP.
     */
    smtpHost?: string;
    /**
     * String, Case-sensitive. SMTP password. Used only for SMTP.
     */
    smtpPass?: string;
    /**
     * Integer. Port used by your SMTP server. Please avoid using port 25 if possible because many providers have limitations on this port. Used only for SMTP.
     */
    smtpPort?: number;
    /**
     * String. SMTP username. Used only for SMTP.
     */
    smtpUser?: string;
}

export interface GlobalClientAddons {
    aws?: {[key: string]: any};
    azureBlob?: {[key: string]: any};
    azureSb?: {[key: string]: any};
    box?: {[key: string]: any};
    cloudbees?: {[key: string]: any};
    concur?: {[key: string]: any};
    dropbox?: {[key: string]: any};
    echosign?: {[key: string]: any};
    egnyte?: {[key: string]: any};
    firebase?: {[key: string]: any};
    layer?: {[key: string]: any};
    mscrm?: {[key: string]: any};
    newrelic?: {[key: string]: any};
    office365?: {[key: string]: any};
    rms?: {[key: string]: any};
    salesforce?: {[key: string]: any};
    salesforceApi?: {[key: string]: any};
    salesforceSandboxApi?: {[key: string]: any};
    samlp?: outputs.GlobalClientAddonsSamlp;
    sapApi?: {[key: string]: any};
    sentry?: {[key: string]: any};
    sharepoint?: {[key: string]: any};
    slack?: {[key: string]: any};
    springcm?: {[key: string]: any};
    wams?: {[key: string]: any};
    wsfed?: {[key: string]: any};
    zendesk?: {[key: string]: any};
    zoom?: {[key: string]: any};
}

export interface GlobalClientAddonsSamlp {
    audience?: string;
    authnContextClassRef?: string;
    binding?: string;
    createUpnClaim?: boolean;
    destination?: string;
    digestAlgorithm?: string;
    includeAttributeNameFormat?: boolean;
    lifetimeInSeconds?: number;
    logout?: outputs.GlobalClientAddonsSamlpLogout;
    mapIdentities?: boolean;
    mapUnknownClaimsAsIs?: boolean;
    mappings?: {[key: string]: any};
    nameIdentifierFormat?: string;
    nameIdentifierProbes?: string[];
    passthroughClaimsWithNoMapping?: boolean;
    recipient?: string;
    signResponse?: boolean;
    signatureAlgorithm?: string;
    typedAttributes?: boolean;
}

export interface GlobalClientAddonsSamlpLogout {
    callback?: string;
    sloEnabled?: boolean;
}

export interface GlobalClientJwtConfiguration {
    alg?: string;
    lifetimeInSeconds: number;
    scopes?: {[key: string]: string};
    secretEncoded: boolean;
}

export interface GlobalClientMobile {
    android?: outputs.GlobalClientMobileAndroid;
    ios?: outputs.GlobalClientMobileIos;
}

export interface GlobalClientMobileAndroid {
    appPackageName?: string;
    sha256CertFingerprints?: string[];
}

export interface GlobalClientMobileIos {
    appBundleIdentifier?: string;
    teamId?: string;
}

export interface ResourceServerScope {
    /**
     * String. Description of the permission (scope).
     */
    description?: string;
    /**
     * String. Name of the permission (scope). Examples include `read:appointments` or `delete:appointments`.
     */
    value: string;
}

export interface RolePermission {
    /**
     * String. Name of the permission (scope).
     */
    name: string;
    /**
     * String. Unique identifier for the resource server.
     */
    resourceServerIdentifier: string;
}

export interface TenantChangePassword {
    /**
     * Boolean. Indicates whether or not to use the custom change password page.
     */
    enabled: boolean;
    /**
     * String, HTML format with supported Liquid syntax. Customized content of the change password page.
     */
    html: string;
}

export interface TenantErrorPage {
    /**
     * String, HTML format with supported Liquid syntax. Customized content of the error page.
     */
    html: string;
    /**
     * Boolean. Indicates whether or not to show the link to logs as part of the default error page.
     */
    showLogLink: boolean;
    /**
     * String. URL to redirect to when an error occurs rather than showing the default error page.
     */
    url: string;
}

export interface TenantFlags {
    /**
     * Boolean. Indicates whether or not to use the older v1 change password flow. Not recommended except for backward compatibility.
     */
    changePwdFlowV1: boolean;
    /**
     * Boolean. Indicated whether or not classic Universal Login prompts include additional security headers to prevent clickjacking.
     */
    disableClickjackProtectionHeaders: boolean;
    /**
     * Boolean. Indicates whether or not the APIs section is enabled for the tenant.
     */
    enableApisSection: boolean;
    /**
     * Boolean. Indicates whether or not all current connections should be enabled when a new client is created.
     */
    enableClientConnections: boolean;
    /**
     * Boolean. Indicates whether or not the tenant allows custom domains in emails.
     */
    enableCustomDomainInEmails: boolean;
    /**
     * Boolean. Indicates whether or not the tenant allows dynamic client registration.
     */
    enableDynamicClientRegistration: boolean;
    /**
     * Boolean. Indicates whether or not to use the older v2 legacy logs search.
     */
    enableLegacyLogsSearchV2: boolean;
    /**
     * Boolean. Indicates whether or not advanced API Authorization scenarios are enabled.
     */
    enablePipeline2: boolean;
    /**
     * Boolean. Indicates whether or not the public sign up process shows a userExists error if the user already exists.
     */
    enablePublicSignupUserExistsError: boolean;
    /**
     * Boolean. Indicates whether or not the tenant uses universal login.
     */
    universalLogin: boolean;
    useScopeDescriptionsForConsent: boolean;
}

export interface TenantGuardianMfaPage {
    /**
     * Boolean. Indicates whether or not to use the custom Guardian page.
     */
    enabled: boolean;
    /**
     * String, HTML format with supported Liquid syntax. Customized content of the Guardian page.
     */
    html: string;
}

export interface TenantUniversalLogin {
    /**
     * List(Resource). Configuration settings for Universal Login colors. See Universal Login - Colors.
     */
    colors?: outputs.TenantUniversalLoginColors;
}

export interface TenantUniversalLoginColors {
    /**
     * String, Hexadecimal. Background color of login pages.
     */
    pageBackground: string;
    /**
     * String, Hexadecimal. Primary button background color.
     */
    primary: string;
}
