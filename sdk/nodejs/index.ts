// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { ActionArgs, ActionState } from "./action";
export type Action = import("./action").Action;
export const Action: typeof import("./action").Action = null as any;
utilities.lazyLoad(exports, ["Action"], () => require("./action"));

export { AttackProtectionArgs, AttackProtectionState } from "./attackProtection";
export type AttackProtection = import("./attackProtection").AttackProtection;
export const AttackProtection: typeof import("./attackProtection").AttackProtection = null as any;
utilities.lazyLoad(exports, ["AttackProtection"], () => require("./attackProtection"));

export { BrandingArgs, BrandingState } from "./branding";
export type Branding = import("./branding").Branding;
export const Branding: typeof import("./branding").Branding = null as any;
utilities.lazyLoad(exports, ["Branding"], () => require("./branding"));

export { BrandingThemeArgs, BrandingThemeState } from "./brandingTheme";
export type BrandingTheme = import("./brandingTheme").BrandingTheme;
export const BrandingTheme: typeof import("./brandingTheme").BrandingTheme = null as any;
utilities.lazyLoad(exports, ["BrandingTheme"], () => require("./brandingTheme"));

export { ClientArgs, ClientState } from "./client";
export type Client = import("./client").Client;
export const Client: typeof import("./client").Client = null as any;
utilities.lazyLoad(exports, ["Client"], () => require("./client"));

export { ClientCredentialsArgs, ClientCredentialsState } from "./clientCredentials";
export type ClientCredentials = import("./clientCredentials").ClientCredentials;
export const ClientCredentials: typeof import("./clientCredentials").ClientCredentials = null as any;
utilities.lazyLoad(exports, ["ClientCredentials"], () => require("./clientCredentials"));

export { ClientGrantArgs, ClientGrantState } from "./clientGrant";
export type ClientGrant = import("./clientGrant").ClientGrant;
export const ClientGrant: typeof import("./clientGrant").ClientGrant = null as any;
utilities.lazyLoad(exports, ["ClientGrant"], () => require("./clientGrant"));

export { ConnectionArgs, ConnectionState } from "./connection";
export type Connection = import("./connection").Connection;
export const Connection: typeof import("./connection").Connection = null as any;
utilities.lazyLoad(exports, ["Connection"], () => require("./connection"));

export { ConnectionClientArgs, ConnectionClientState } from "./connectionClient";
export type ConnectionClient = import("./connectionClient").ConnectionClient;
export const ConnectionClient: typeof import("./connectionClient").ConnectionClient = null as any;
utilities.lazyLoad(exports, ["ConnectionClient"], () => require("./connectionClient"));

export { ConnectionClientsArgs, ConnectionClientsState } from "./connectionClients";
export type ConnectionClients = import("./connectionClients").ConnectionClients;
export const ConnectionClients: typeof import("./connectionClients").ConnectionClients = null as any;
utilities.lazyLoad(exports, ["ConnectionClients"], () => require("./connectionClients"));

export { CustomDomainArgs, CustomDomainState } from "./customDomain";
export type CustomDomain = import("./customDomain").CustomDomain;
export const CustomDomain: typeof import("./customDomain").CustomDomain = null as any;
utilities.lazyLoad(exports, ["CustomDomain"], () => require("./customDomain"));

export { CustomDomainVerificationArgs, CustomDomainVerificationState } from "./customDomainVerification";
export type CustomDomainVerification = import("./customDomainVerification").CustomDomainVerification;
export const CustomDomainVerification: typeof import("./customDomainVerification").CustomDomainVerification = null as any;
utilities.lazyLoad(exports, ["CustomDomainVerification"], () => require("./customDomainVerification"));

export { EmailArgs, EmailState } from "./email";
export type Email = import("./email").Email;
export const Email: typeof import("./email").Email = null as any;
utilities.lazyLoad(exports, ["Email"], () => require("./email"));

export { EmailTemplateArgs, EmailTemplateState } from "./emailTemplate";
export type EmailTemplate = import("./emailTemplate").EmailTemplate;
export const EmailTemplate: typeof import("./emailTemplate").EmailTemplate = null as any;
utilities.lazyLoad(exports, ["EmailTemplate"], () => require("./emailTemplate"));

export { GetAttackProtectionResult } from "./getAttackProtection";
export const getAttackProtection: typeof import("./getAttackProtection").getAttackProtection = null as any;
utilities.lazyLoad(exports, ["getAttackProtection"], () => require("./getAttackProtection"));

export { GetBrandingResult } from "./getBranding";
export const getBranding: typeof import("./getBranding").getBranding = null as any;
utilities.lazyLoad(exports, ["getBranding"], () => require("./getBranding"));

export { GetBrandingThemeResult } from "./getBrandingTheme";
export const getBrandingTheme: typeof import("./getBrandingTheme").getBrandingTheme = null as any;
utilities.lazyLoad(exports, ["getBrandingTheme"], () => require("./getBrandingTheme"));

export { GetClientArgs, GetClientResult, GetClientOutputArgs } from "./getClient";
export const getClient: typeof import("./getClient").getClient = null as any;
export const getClientOutput: typeof import("./getClient").getClientOutput = null as any;
utilities.lazyLoad(exports, ["getClient","getClientOutput"], () => require("./getClient"));

export { GetConnectionArgs, GetConnectionResult, GetConnectionOutputArgs } from "./getConnection";
export const getConnection: typeof import("./getConnection").getConnection = null as any;
export const getConnectionOutput: typeof import("./getConnection").getConnectionOutput = null as any;
utilities.lazyLoad(exports, ["getConnection","getConnectionOutput"], () => require("./getConnection"));

export { GetCustomDomainResult } from "./getCustomDomain";
export const getCustomDomain: typeof import("./getCustomDomain").getCustomDomain = null as any;
utilities.lazyLoad(exports, ["getCustomDomain"], () => require("./getCustomDomain"));

export { GetGlobalClientResult } from "./getGlobalClient";
export const getGlobalClient: typeof import("./getGlobalClient").getGlobalClient = null as any;
utilities.lazyLoad(exports, ["getGlobalClient"], () => require("./getGlobalClient"));

export { GetOrganizationArgs, GetOrganizationResult, GetOrganizationOutputArgs } from "./getOrganization";
export const getOrganization: typeof import("./getOrganization").getOrganization = null as any;
export const getOrganizationOutput: typeof import("./getOrganization").getOrganizationOutput = null as any;
utilities.lazyLoad(exports, ["getOrganization","getOrganizationOutput"], () => require("./getOrganization"));

export { GetResourceServerArgs, GetResourceServerResult, GetResourceServerOutputArgs } from "./getResourceServer";
export const getResourceServer: typeof import("./getResourceServer").getResourceServer = null as any;
export const getResourceServerOutput: typeof import("./getResourceServer").getResourceServerOutput = null as any;
utilities.lazyLoad(exports, ["getResourceServer","getResourceServerOutput"], () => require("./getResourceServer"));

export { GetRoleArgs, GetRoleResult, GetRoleOutputArgs } from "./getRole";
export const getRole: typeof import("./getRole").getRole = null as any;
export const getRoleOutput: typeof import("./getRole").getRoleOutput = null as any;
utilities.lazyLoad(exports, ["getRole","getRoleOutput"], () => require("./getRole"));

export { GetTenantResult } from "./getTenant";
export const getTenant: typeof import("./getTenant").getTenant = null as any;
utilities.lazyLoad(exports, ["getTenant"], () => require("./getTenant"));

export { GetUserArgs, GetUserResult, GetUserOutputArgs } from "./getUser";
export const getUser: typeof import("./getUser").getUser = null as any;
export const getUserOutput: typeof import("./getUser").getUserOutput = null as any;
utilities.lazyLoad(exports, ["getUser","getUserOutput"], () => require("./getUser"));

export { GlobalClientArgs, GlobalClientState } from "./globalClient";
export type GlobalClient = import("./globalClient").GlobalClient;
export const GlobalClient: typeof import("./globalClient").GlobalClient = null as any;
utilities.lazyLoad(exports, ["GlobalClient"], () => require("./globalClient"));

export { GuardianArgs, GuardianState } from "./guardian";
export type Guardian = import("./guardian").Guardian;
export const Guardian: typeof import("./guardian").Guardian = null as any;
utilities.lazyLoad(exports, ["Guardian"], () => require("./guardian"));

export { HookArgs, HookState } from "./hook";
export type Hook = import("./hook").Hook;
export const Hook: typeof import("./hook").Hook = null as any;
utilities.lazyLoad(exports, ["Hook"], () => require("./hook"));

export { LogStreamArgs, LogStreamState } from "./logStream";
export type LogStream = import("./logStream").LogStream;
export const LogStream: typeof import("./logStream").LogStream = null as any;
utilities.lazyLoad(exports, ["LogStream"], () => require("./logStream"));

export { OrganizationArgs, OrganizationState } from "./organization";
export type Organization = import("./organization").Organization;
export const Organization: typeof import("./organization").Organization = null as any;
utilities.lazyLoad(exports, ["Organization"], () => require("./organization"));

export { OrganizationConnectionArgs, OrganizationConnectionState } from "./organizationConnection";
export type OrganizationConnection = import("./organizationConnection").OrganizationConnection;
export const OrganizationConnection: typeof import("./organizationConnection").OrganizationConnection = null as any;
utilities.lazyLoad(exports, ["OrganizationConnection"], () => require("./organizationConnection"));

export { OrganizationConnectionsArgs, OrganizationConnectionsState } from "./organizationConnections";
export type OrganizationConnections = import("./organizationConnections").OrganizationConnections;
export const OrganizationConnections: typeof import("./organizationConnections").OrganizationConnections = null as any;
utilities.lazyLoad(exports, ["OrganizationConnections"], () => require("./organizationConnections"));

export { OrganizationMemberArgs, OrganizationMemberState } from "./organizationMember";
export type OrganizationMember = import("./organizationMember").OrganizationMember;
export const OrganizationMember: typeof import("./organizationMember").OrganizationMember = null as any;
utilities.lazyLoad(exports, ["OrganizationMember"], () => require("./organizationMember"));

export { OrganizationMemberRoleArgs, OrganizationMemberRoleState } from "./organizationMemberRole";
export type OrganizationMemberRole = import("./organizationMemberRole").OrganizationMemberRole;
export const OrganizationMemberRole: typeof import("./organizationMemberRole").OrganizationMemberRole = null as any;
utilities.lazyLoad(exports, ["OrganizationMemberRole"], () => require("./organizationMemberRole"));

export { OrganizationMemberRolesArgs, OrganizationMemberRolesState } from "./organizationMemberRoles";
export type OrganizationMemberRoles = import("./organizationMemberRoles").OrganizationMemberRoles;
export const OrganizationMemberRoles: typeof import("./organizationMemberRoles").OrganizationMemberRoles = null as any;
utilities.lazyLoad(exports, ["OrganizationMemberRoles"], () => require("./organizationMemberRoles"));

export { OrganizationMembersArgs, OrganizationMembersState } from "./organizationMembers";
export type OrganizationMembers = import("./organizationMembers").OrganizationMembers;
export const OrganizationMembers: typeof import("./organizationMembers").OrganizationMembers = null as any;
utilities.lazyLoad(exports, ["OrganizationMembers"], () => require("./organizationMembers"));

export { PromptArgs, PromptState } from "./prompt";
export type Prompt = import("./prompt").Prompt;
export const Prompt: typeof import("./prompt").Prompt = null as any;
utilities.lazyLoad(exports, ["Prompt"], () => require("./prompt"));

export { PromptCustomTextArgs, PromptCustomTextState } from "./promptCustomText";
export type PromptCustomText = import("./promptCustomText").PromptCustomText;
export const PromptCustomText: typeof import("./promptCustomText").PromptCustomText = null as any;
utilities.lazyLoad(exports, ["PromptCustomText"], () => require("./promptCustomText"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { ResourceServerArgs, ResourceServerState } from "./resourceServer";
export type ResourceServer = import("./resourceServer").ResourceServer;
export const ResourceServer: typeof import("./resourceServer").ResourceServer = null as any;
utilities.lazyLoad(exports, ["ResourceServer"], () => require("./resourceServer"));

export { ResourceServerScopeArgs, ResourceServerScopeState } from "./resourceServerScope";
export type ResourceServerScope = import("./resourceServerScope").ResourceServerScope;
export const ResourceServerScope: typeof import("./resourceServerScope").ResourceServerScope = null as any;
utilities.lazyLoad(exports, ["ResourceServerScope"], () => require("./resourceServerScope"));

export { ResourceServerScopesArgs, ResourceServerScopesState } from "./resourceServerScopes";
export type ResourceServerScopes = import("./resourceServerScopes").ResourceServerScopes;
export const ResourceServerScopes: typeof import("./resourceServerScopes").ResourceServerScopes = null as any;
utilities.lazyLoad(exports, ["ResourceServerScopes"], () => require("./resourceServerScopes"));

export { RoleArgs, RoleState } from "./role";
export type Role = import("./role").Role;
export const Role: typeof import("./role").Role = null as any;
utilities.lazyLoad(exports, ["Role"], () => require("./role"));

export { RolePermissionArgs, RolePermissionState } from "./rolePermission";
export type RolePermission = import("./rolePermission").RolePermission;
export const RolePermission: typeof import("./rolePermission").RolePermission = null as any;
utilities.lazyLoad(exports, ["RolePermission"], () => require("./rolePermission"));

export { RolePermissionsArgs, RolePermissionsState } from "./rolePermissions";
export type RolePermissions = import("./rolePermissions").RolePermissions;
export const RolePermissions: typeof import("./rolePermissions").RolePermissions = null as any;
utilities.lazyLoad(exports, ["RolePermissions"], () => require("./rolePermissions"));

export { RuleArgs, RuleState } from "./rule";
export type Rule = import("./rule").Rule;
export const Rule: typeof import("./rule").Rule = null as any;
utilities.lazyLoad(exports, ["Rule"], () => require("./rule"));

export { RuleConfigArgs, RuleConfigState } from "./ruleConfig";
export type RuleConfig = import("./ruleConfig").RuleConfig;
export const RuleConfig: typeof import("./ruleConfig").RuleConfig = null as any;
utilities.lazyLoad(exports, ["RuleConfig"], () => require("./ruleConfig"));

export { TenantArgs, TenantState } from "./tenant";
export type Tenant = import("./tenant").Tenant;
export const Tenant: typeof import("./tenant").Tenant = null as any;
utilities.lazyLoad(exports, ["Tenant"], () => require("./tenant"));

export { TriggerActionArgs, TriggerActionState } from "./triggerAction";
export type TriggerAction = import("./triggerAction").TriggerAction;
export const TriggerAction: typeof import("./triggerAction").TriggerAction = null as any;
utilities.lazyLoad(exports, ["TriggerAction"], () => require("./triggerAction"));

export { TriggerActionsArgs, TriggerActionsState } from "./triggerActions";
export type TriggerActions = import("./triggerActions").TriggerActions;
export const TriggerActions: typeof import("./triggerActions").TriggerActions = null as any;
utilities.lazyLoad(exports, ["TriggerActions"], () => require("./triggerActions"));

export { TriggerBindingArgs, TriggerBindingState } from "./triggerBinding";
export type TriggerBinding = import("./triggerBinding").TriggerBinding;
export const TriggerBinding: typeof import("./triggerBinding").TriggerBinding = null as any;
utilities.lazyLoad(exports, ["TriggerBinding"], () => require("./triggerBinding"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));

export { UserPermissionArgs, UserPermissionState } from "./userPermission";
export type UserPermission = import("./userPermission").UserPermission;
export const UserPermission: typeof import("./userPermission").UserPermission = null as any;
utilities.lazyLoad(exports, ["UserPermission"], () => require("./userPermission"));

export { UserPermissionsArgs, UserPermissionsState } from "./userPermissions";
export type UserPermissions = import("./userPermissions").UserPermissions;
export const UserPermissions: typeof import("./userPermissions").UserPermissions = null as any;
utilities.lazyLoad(exports, ["UserPermissions"], () => require("./userPermissions"));

export { UserRoleArgs, UserRoleState } from "./userRole";
export type UserRole = import("./userRole").UserRole;
export const UserRole: typeof import("./userRole").UserRole = null as any;
utilities.lazyLoad(exports, ["UserRole"], () => require("./userRole"));

export { UserRolesArgs, UserRolesState } from "./userRoles";
export type UserRoles = import("./userRoles").UserRoles;
export const UserRoles: typeof import("./userRoles").UserRoles = null as any;
utilities.lazyLoad(exports, ["UserRoles"], () => require("./userRoles"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "auth0:index/action:Action":
                return new Action(name, <any>undefined, { urn })
            case "auth0:index/attackProtection:AttackProtection":
                return new AttackProtection(name, <any>undefined, { urn })
            case "auth0:index/branding:Branding":
                return new Branding(name, <any>undefined, { urn })
            case "auth0:index/brandingTheme:BrandingTheme":
                return new BrandingTheme(name, <any>undefined, { urn })
            case "auth0:index/client:Client":
                return new Client(name, <any>undefined, { urn })
            case "auth0:index/clientCredentials:ClientCredentials":
                return new ClientCredentials(name, <any>undefined, { urn })
            case "auth0:index/clientGrant:ClientGrant":
                return new ClientGrant(name, <any>undefined, { urn })
            case "auth0:index/connection:Connection":
                return new Connection(name, <any>undefined, { urn })
            case "auth0:index/connectionClient:ConnectionClient":
                return new ConnectionClient(name, <any>undefined, { urn })
            case "auth0:index/connectionClients:ConnectionClients":
                return new ConnectionClients(name, <any>undefined, { urn })
            case "auth0:index/customDomain:CustomDomain":
                return new CustomDomain(name, <any>undefined, { urn })
            case "auth0:index/customDomainVerification:CustomDomainVerification":
                return new CustomDomainVerification(name, <any>undefined, { urn })
            case "auth0:index/email:Email":
                return new Email(name, <any>undefined, { urn })
            case "auth0:index/emailTemplate:EmailTemplate":
                return new EmailTemplate(name, <any>undefined, { urn })
            case "auth0:index/globalClient:GlobalClient":
                return new GlobalClient(name, <any>undefined, { urn })
            case "auth0:index/guardian:Guardian":
                return new Guardian(name, <any>undefined, { urn })
            case "auth0:index/hook:Hook":
                return new Hook(name, <any>undefined, { urn })
            case "auth0:index/logStream:LogStream":
                return new LogStream(name, <any>undefined, { urn })
            case "auth0:index/organization:Organization":
                return new Organization(name, <any>undefined, { urn })
            case "auth0:index/organizationConnection:OrganizationConnection":
                return new OrganizationConnection(name, <any>undefined, { urn })
            case "auth0:index/organizationConnections:OrganizationConnections":
                return new OrganizationConnections(name, <any>undefined, { urn })
            case "auth0:index/organizationMember:OrganizationMember":
                return new OrganizationMember(name, <any>undefined, { urn })
            case "auth0:index/organizationMemberRole:OrganizationMemberRole":
                return new OrganizationMemberRole(name, <any>undefined, { urn })
            case "auth0:index/organizationMemberRoles:OrganizationMemberRoles":
                return new OrganizationMemberRoles(name, <any>undefined, { urn })
            case "auth0:index/organizationMembers:OrganizationMembers":
                return new OrganizationMembers(name, <any>undefined, { urn })
            case "auth0:index/prompt:Prompt":
                return new Prompt(name, <any>undefined, { urn })
            case "auth0:index/promptCustomText:PromptCustomText":
                return new PromptCustomText(name, <any>undefined, { urn })
            case "auth0:index/resourceServer:ResourceServer":
                return new ResourceServer(name, <any>undefined, { urn })
            case "auth0:index/resourceServerScope:ResourceServerScope":
                return new ResourceServerScope(name, <any>undefined, { urn })
            case "auth0:index/resourceServerScopes:ResourceServerScopes":
                return new ResourceServerScopes(name, <any>undefined, { urn })
            case "auth0:index/role:Role":
                return new Role(name, <any>undefined, { urn })
            case "auth0:index/rolePermission:RolePermission":
                return new RolePermission(name, <any>undefined, { urn })
            case "auth0:index/rolePermissions:RolePermissions":
                return new RolePermissions(name, <any>undefined, { urn })
            case "auth0:index/rule:Rule":
                return new Rule(name, <any>undefined, { urn })
            case "auth0:index/ruleConfig:RuleConfig":
                return new RuleConfig(name, <any>undefined, { urn })
            case "auth0:index/tenant:Tenant":
                return new Tenant(name, <any>undefined, { urn })
            case "auth0:index/triggerAction:TriggerAction":
                return new TriggerAction(name, <any>undefined, { urn })
            case "auth0:index/triggerActions:TriggerActions":
                return new TriggerActions(name, <any>undefined, { urn })
            case "auth0:index/triggerBinding:TriggerBinding":
                return new TriggerBinding(name, <any>undefined, { urn })
            case "auth0:index/user:User":
                return new User(name, <any>undefined, { urn })
            case "auth0:index/userPermission:UserPermission":
                return new UserPermission(name, <any>undefined, { urn })
            case "auth0:index/userPermissions:UserPermissions":
                return new UserPermissions(name, <any>undefined, { urn })
            case "auth0:index/userRole:UserRole":
                return new UserRole(name, <any>undefined, { urn })
            case "auth0:index/userRoles:UserRoles":
                return new UserRoles(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("auth0", "index/action", _module)
pulumi.runtime.registerResourceModule("auth0", "index/attackProtection", _module)
pulumi.runtime.registerResourceModule("auth0", "index/branding", _module)
pulumi.runtime.registerResourceModule("auth0", "index/brandingTheme", _module)
pulumi.runtime.registerResourceModule("auth0", "index/client", _module)
pulumi.runtime.registerResourceModule("auth0", "index/clientCredentials", _module)
pulumi.runtime.registerResourceModule("auth0", "index/clientGrant", _module)
pulumi.runtime.registerResourceModule("auth0", "index/connection", _module)
pulumi.runtime.registerResourceModule("auth0", "index/connectionClient", _module)
pulumi.runtime.registerResourceModule("auth0", "index/connectionClients", _module)
pulumi.runtime.registerResourceModule("auth0", "index/customDomain", _module)
pulumi.runtime.registerResourceModule("auth0", "index/customDomainVerification", _module)
pulumi.runtime.registerResourceModule("auth0", "index/email", _module)
pulumi.runtime.registerResourceModule("auth0", "index/emailTemplate", _module)
pulumi.runtime.registerResourceModule("auth0", "index/globalClient", _module)
pulumi.runtime.registerResourceModule("auth0", "index/guardian", _module)
pulumi.runtime.registerResourceModule("auth0", "index/hook", _module)
pulumi.runtime.registerResourceModule("auth0", "index/logStream", _module)
pulumi.runtime.registerResourceModule("auth0", "index/organization", _module)
pulumi.runtime.registerResourceModule("auth0", "index/organizationConnection", _module)
pulumi.runtime.registerResourceModule("auth0", "index/organizationConnections", _module)
pulumi.runtime.registerResourceModule("auth0", "index/organizationMember", _module)
pulumi.runtime.registerResourceModule("auth0", "index/organizationMemberRole", _module)
pulumi.runtime.registerResourceModule("auth0", "index/organizationMemberRoles", _module)
pulumi.runtime.registerResourceModule("auth0", "index/organizationMembers", _module)
pulumi.runtime.registerResourceModule("auth0", "index/prompt", _module)
pulumi.runtime.registerResourceModule("auth0", "index/promptCustomText", _module)
pulumi.runtime.registerResourceModule("auth0", "index/resourceServer", _module)
pulumi.runtime.registerResourceModule("auth0", "index/resourceServerScope", _module)
pulumi.runtime.registerResourceModule("auth0", "index/resourceServerScopes", _module)
pulumi.runtime.registerResourceModule("auth0", "index/role", _module)
pulumi.runtime.registerResourceModule("auth0", "index/rolePermission", _module)
pulumi.runtime.registerResourceModule("auth0", "index/rolePermissions", _module)
pulumi.runtime.registerResourceModule("auth0", "index/rule", _module)
pulumi.runtime.registerResourceModule("auth0", "index/ruleConfig", _module)
pulumi.runtime.registerResourceModule("auth0", "index/tenant", _module)
pulumi.runtime.registerResourceModule("auth0", "index/triggerAction", _module)
pulumi.runtime.registerResourceModule("auth0", "index/triggerActions", _module)
pulumi.runtime.registerResourceModule("auth0", "index/triggerBinding", _module)
pulumi.runtime.registerResourceModule("auth0", "index/user", _module)
pulumi.runtime.registerResourceModule("auth0", "index/userPermission", _module)
pulumi.runtime.registerResourceModule("auth0", "index/userPermissions", _module)
pulumi.runtime.registerResourceModule("auth0", "index/userRole", _module)
pulumi.runtime.registerResourceModule("auth0", "index/userRoles", _module)
pulumi.runtime.registerResourcePackage("auth0", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:auth0") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
