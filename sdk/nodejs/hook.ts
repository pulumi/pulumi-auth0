// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Hooks are secure, self-contained functions that allow you to customize the behavior of Auth0 when executed for selected extensibility points of the Auth0 platform. Auth0 invokes Hooks during runtime to execute your custom Node.js code.
 *
 * Depending on the extensibility point, you can use Hooks with Database Connections and/or Passwordless Connections.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as auth0 from "@pulumi/auth0";
 *
 * const myHook = new auth0.Hook("my_hook", {
 *     enabled: true,
 *     script: `function (user, context, callback) { 
 *   callback(null, { user }); 
 * }
 * `,
 *     triggerId: "pre-user-registration",
 * });
 * ```
 */
export class Hook extends pulumi.CustomResource {
    /**
     * Get an existing Hook resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HookState, opts?: pulumi.CustomResourceOptions): Hook {
        return new Hook(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'auth0:index/hook:Hook';

    /**
     * Returns true if the given object is an instance of Hook.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Hook {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Hook.__pulumiType;
    }

    /**
     * Whether the hook is enabled, or disabled
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * Name of this hook
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Code to be executed when this hook runs
     */
    public readonly script!: pulumi.Output<string>;
    /**
     * Execution stage of this rule. Can be credentials-exchange, pre-user-registration, post-user-registration, post-change-password, or send-phone-message
     */
    public readonly triggerId!: pulumi.Output<string>;

    /**
     * Create a Hook resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: HookArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: HookArgs | HookState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as HookState | undefined;
            inputs["enabled"] = state ? state.enabled : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["script"] = state ? state.script : undefined;
            inputs["triggerId"] = state ? state.triggerId : undefined;
        } else {
            const args = argsOrState as HookArgs | undefined;
            if (!args || args.script === undefined) {
                throw new Error("Missing required property 'script'");
            }
            if (!args || args.triggerId === undefined) {
                throw new Error("Missing required property 'triggerId'");
            }
            inputs["enabled"] = args ? args.enabled : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["script"] = args ? args.script : undefined;
            inputs["triggerId"] = args ? args.triggerId : undefined;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(Hook.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Hook resources.
 */
export interface HookState {
    /**
     * Whether the hook is enabled, or disabled
     */
    readonly enabled?: pulumi.Input<boolean>;
    /**
     * Name of this hook
     */
    readonly name?: pulumi.Input<string>;
    /**
     * Code to be executed when this hook runs
     */
    readonly script?: pulumi.Input<string>;
    /**
     * Execution stage of this rule. Can be credentials-exchange, pre-user-registration, post-user-registration, post-change-password, or send-phone-message
     */
    readonly triggerId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Hook resource.
 */
export interface HookArgs {
    /**
     * Whether the hook is enabled, or disabled
     */
    readonly enabled?: pulumi.Input<boolean>;
    /**
     * Name of this hook
     */
    readonly name?: pulumi.Input<string>;
    /**
     * Code to be executed when this hook runs
     */
    readonly script: pulumi.Input<string>;
    /**
     * Execution stage of this rule. Can be credentials-exchange, pre-user-registration, post-user-registration, post-change-password, or send-phone-message
     */
    readonly triggerId: pulumi.Input<string>;
}
