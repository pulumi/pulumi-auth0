// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * With this resource, you can manage scopes (permissions) associated with a resource server (API).
 *
 * !> This resource appends a scope to a resource server. In contrast, the `auth0.ResourceServerScopes` resource manages
 * all the scopes assigned to a resource server. To avoid potential issues, it is recommended not to use this resource in
 * conjunction with the `auth0.ResourceServerScopes` resource when managing scopes for the same resource server id.
 *
 * ## Import
 *
 * This resource can be imported by specifying the resource identifier and scope name separated by "::" (note the double colon) <resourceServerIdentifier>::<scope> # Example
 *
 * ```sh
 *  $ pulumi import auth0:index/resourceServerScope:ResourceServerScope scope "https://api.travel0.com/v1::read:posts"
 * ```
 */
export class ResourceServerScope extends pulumi.CustomResource {
    /**
     * Get an existing ResourceServerScope resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ResourceServerScopeState, opts?: pulumi.CustomResourceOptions): ResourceServerScope {
        return new ResourceServerScope(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'auth0:index/resourceServerScope:ResourceServerScope';

    /**
     * Returns true if the given object is an instance of ResourceServerScope.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ResourceServerScope {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ResourceServerScope.__pulumiType;
    }

    /**
     * Description of the scope (permission).
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Identifier of the resource server that the scope (permission) is associated with.
     */
    public readonly resourceServerIdentifier!: pulumi.Output<string>;
    /**
     * Name of the scope (permission).
     */
    public readonly scope!: pulumi.Output<string>;

    /**
     * Create a ResourceServerScope resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ResourceServerScopeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ResourceServerScopeArgs | ResourceServerScopeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ResourceServerScopeState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["resourceServerIdentifier"] = state ? state.resourceServerIdentifier : undefined;
            resourceInputs["scope"] = state ? state.scope : undefined;
        } else {
            const args = argsOrState as ResourceServerScopeArgs | undefined;
            if ((!args || args.resourceServerIdentifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceServerIdentifier'");
            }
            if ((!args || args.scope === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scope'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["resourceServerIdentifier"] = args ? args.resourceServerIdentifier : undefined;
            resourceInputs["scope"] = args ? args.scope : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ResourceServerScope.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ResourceServerScope resources.
 */
export interface ResourceServerScopeState {
    /**
     * Description of the scope (permission).
     */
    description?: pulumi.Input<string>;
    /**
     * Identifier of the resource server that the scope (permission) is associated with.
     */
    resourceServerIdentifier?: pulumi.Input<string>;
    /**
     * Name of the scope (permission).
     */
    scope?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ResourceServerScope resource.
 */
export interface ResourceServerScopeArgs {
    /**
     * Description of the scope (permission).
     */
    description?: pulumi.Input<string>;
    /**
     * Identifier of the resource server that the scope (permission) is associated with.
     */
    resourceServerIdentifier: pulumi.Input<string>;
    /**
     * Name of the scope (permission).
     */
    scope: pulumi.Input<string>;
}
