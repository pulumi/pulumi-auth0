// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * With this resource, you can manage your Auth0 log streams.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as auth0 from "@pulumi/auth0";
 *
 * // This is an example of an http log stream.
 * const myWebhook = new auth0.LogStream("myWebhook", {
 *     filters: [
 *         {
 *             name: "auth.login.fail",
 *             type: "category",
 *         },
 *         {
 *             name: "auth.signup.fail",
 *             type: "category",
 *         },
 *     ],
 *     sink: {
 *         httpAuthorization: "AKIAXXXXXXXXXXXXXXXX",
 *         httpContentFormat: "JSONOBJECT",
 *         httpContentType: "application/json",
 *         httpCustomHeaders: [{
 *             header: "foo",
 *             value: "bar",
 *         }],
 *         httpEndpoint: "https://example.com/logs",
 *     },
 *     type: "http",
 * });
 * // This is an example of an Amazon EventBridge log stream.
 * const exampleAws = new auth0.LogStream("exampleAws", {
 *     sink: {
 *         awsAccountId: "my_account_id",
 *         awsRegion: "us-east-2",
 *     },
 *     status: "active",
 *     type: "eventbridge",
 * });
 * ```
 *
 * ## Import
 *
 * An existing log stream can be imported using its ID. # Example
 *
 * ```sh
 *  $ pulumi import auth0:index/logStream:LogStream example lst_XXXXXXXXXXXXXXXX
 * ```
 */
export class LogStream extends pulumi.CustomResource {
    /**
     * Get an existing LogStream resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LogStreamState, opts?: pulumi.CustomResourceOptions): LogStream {
        return new LogStream(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'auth0:index/logStream:LogStream';

    /**
     * Returns true if the given object is an instance of LogStream.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LogStream {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LogStream.__pulumiType;
    }

    /**
     * Only logs events matching these filters will be delivered by the stream. If omitted or empty, all events will be delivered.
     */
    public readonly filters!: pulumi.Output<{[key: string]: string}[] | undefined>;
    /**
     * Name of the log stream.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The sink configuration for the log stream.
     */
    public readonly sink!: pulumi.Output<outputs.LogStreamSink>;
    /**
     * The current status of the log stream. Options are "active", "paused", "suspended".
     */
    public readonly status!: pulumi.Output<string>;
    /**
     * Type of the log stream, which indicates the sink provider. Options include: `eventbridge`, `eventgrid`, `http`, `datadog`, `splunk`, `sumo`, `mixpanel`, `segment`.
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a LogStream resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LogStreamArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LogStreamArgs | LogStreamState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LogStreamState | undefined;
            resourceInputs["filters"] = state ? state.filters : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["sink"] = state ? state.sink : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as LogStreamArgs | undefined;
            if ((!args || args.sink === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sink'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["filters"] = args ? args.filters : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["sink"] = args ? args.sink : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LogStream.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LogStream resources.
 */
export interface LogStreamState {
    /**
     * Only logs events matching these filters will be delivered by the stream. If omitted or empty, all events will be delivered.
     */
    filters?: pulumi.Input<pulumi.Input<{[key: string]: pulumi.Input<string>}>[]>;
    /**
     * Name of the log stream.
     */
    name?: pulumi.Input<string>;
    /**
     * The sink configuration for the log stream.
     */
    sink?: pulumi.Input<inputs.LogStreamSink>;
    /**
     * The current status of the log stream. Options are "active", "paused", "suspended".
     */
    status?: pulumi.Input<string>;
    /**
     * Type of the log stream, which indicates the sink provider. Options include: `eventbridge`, `eventgrid`, `http`, `datadog`, `splunk`, `sumo`, `mixpanel`, `segment`.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LogStream resource.
 */
export interface LogStreamArgs {
    /**
     * Only logs events matching these filters will be delivered by the stream. If omitted or empty, all events will be delivered.
     */
    filters?: pulumi.Input<pulumi.Input<{[key: string]: pulumi.Input<string>}>[]>;
    /**
     * Name of the log stream.
     */
    name?: pulumi.Input<string>;
    /**
     * The sink configuration for the log stream.
     */
    sink: pulumi.Input<inputs.LogStreamSink>;
    /**
     * The current status of the log stream. Options are "active", "paused", "suspended".
     */
    status?: pulumi.Input<string>;
    /**
     * Type of the log stream, which indicates the sink provider. Options include: `eventbridge`, `eventgrid`, `http`, `datadog`, `splunk`, `sumo`, `mixpanel`, `segment`.
     */
    type: pulumi.Input<string>;
}
