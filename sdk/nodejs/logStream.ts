// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * With this resource, you can manage your Auth0 log streams.
 *
 * !> isPriority is a field that can be set while the resource is being created.
 * This cannot be updated once set. Updating the value might result in a noisy plan.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as auth0 from "@pulumi/auth0";
 *
 * // This is an example of an http log stream.
 * const myWebhook = new auth0.LogStream("my_webhook", {
 *     name: "HTTP log stream",
 *     type: "http",
 *     filters: [
 *         {
 *             type: "category",
 *             name: "auth.login.fail",
 *         },
 *         {
 *             type: "category",
 *             name: "auth.signup.fail",
 *         },
 *     ],
 *     sink: {
 *         httpEndpoint: "https://example.com/logs",
 *         httpContentType: "application/json",
 *         httpContentFormat: "JSONOBJECT",
 *         httpAuthorization: "AKIAXXXXXXXXXXXXXXXX",
 *         httpCustomHeaders: [{
 *             header: "foo",
 *             value: "bar",
 *         }],
 *     },
 * });
 * // This is an example of an Amazon EventBridge log stream.
 * const exampleAws = new auth0.LogStream("example_aws", {
 *     name: "AWS Eventbridge",
 *     type: "eventbridge",
 *     status: "active",
 *     sink: {
 *         awsAccountId: "my_account_id",
 *         awsRegion: "us-east-2",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * This resource can be imported by specifying the log stream ID.
 *
 * Example:
 *
 * ```sh
 * $ pulumi import auth0:index/logStream:LogStream example "lst_XXXXXXXXXXXXXXXX"
 * ```
 */
export class LogStream extends pulumi.CustomResource {
    /**
     * Get an existing LogStream resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LogStreamState, opts?: pulumi.CustomResourceOptions): LogStream {
        return new LogStream(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'auth0:index/logStream:LogStream';

    /**
     * Returns true if the given object is an instance of LogStream.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LogStream {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LogStream.__pulumiType;
    }

    /**
     * Only logs events matching these filters will be delivered by the stream. If omitted or empty, all events will be delivered. Filters available: `auth.ancillary.fail`, `auth.ancillary.success`, `auth.login.fail`, `auth.login.notification`, `auth.login.success`, `auth.logout.fail`, `auth.logout.success`, `auth.signup.fail`, `auth.signup.success`, `auth.silent_auth.fail`, `auth.silent_auth.success`, `auth.token_exchange.fail`, `auth.token_exchange.success`, `management.fail`, `management.success`, `system.notification`, `user.fail`, `user.notification`, `user.success`, `other`.
     */
    declare public readonly filters: pulumi.Output<{[key: string]: string}[]>;
    /**
     * Set True for priority log streams, False for non-priority
     */
    declare public readonly isPriority: pulumi.Output<boolean | undefined>;
    /**
     * Name of the log stream.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Configuration for PII (Personally Identifiable Information) handling.
     */
    declare public readonly piiConfig: pulumi.Output<outputs.LogStreamPiiConfig | undefined>;
    /**
     * The sink configuration for the log stream.
     */
    declare public readonly sink: pulumi.Output<outputs.LogStreamSink>;
    /**
     * The optional datetime (ISO 8601) to start streaming logs from.
     */
    declare public readonly startFrom: pulumi.Output<string | undefined>;
    /**
     * The current status of the log stream. Options are "active", "paused", "suspended".
     */
    declare public readonly status: pulumi.Output<string>;
    /**
     * Type of the log stream, which indicates the sink provider. Options include: `eventbridge`, `eventgrid`, `http`, `datadog`, `splunk`, `sumo`, `mixpanel`, `segment`.
     */
    declare public readonly type: pulumi.Output<string>;

    /**
     * Create a LogStream resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LogStreamArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LogStreamArgs | LogStreamState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LogStreamState | undefined;
            resourceInputs["filters"] = state?.filters;
            resourceInputs["isPriority"] = state?.isPriority;
            resourceInputs["name"] = state?.name;
            resourceInputs["piiConfig"] = state?.piiConfig;
            resourceInputs["sink"] = state?.sink;
            resourceInputs["startFrom"] = state?.startFrom;
            resourceInputs["status"] = state?.status;
            resourceInputs["type"] = state?.type;
        } else {
            const args = argsOrState as LogStreamArgs | undefined;
            if (args?.sink === undefined && !opts.urn) {
                throw new Error("Missing required property 'sink'");
            }
            if (args?.type === undefined && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["filters"] = args?.filters;
            resourceInputs["isPriority"] = args?.isPriority;
            resourceInputs["name"] = args?.name;
            resourceInputs["piiConfig"] = args?.piiConfig;
            resourceInputs["sink"] = args?.sink;
            resourceInputs["startFrom"] = args?.startFrom;
            resourceInputs["status"] = args?.status;
            resourceInputs["type"] = args?.type;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LogStream.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LogStream resources.
 */
export interface LogStreamState {
    /**
     * Only logs events matching these filters will be delivered by the stream. If omitted or empty, all events will be delivered. Filters available: `auth.ancillary.fail`, `auth.ancillary.success`, `auth.login.fail`, `auth.login.notification`, `auth.login.success`, `auth.logout.fail`, `auth.logout.success`, `auth.signup.fail`, `auth.signup.success`, `auth.silent_auth.fail`, `auth.silent_auth.success`, `auth.token_exchange.fail`, `auth.token_exchange.success`, `management.fail`, `management.success`, `system.notification`, `user.fail`, `user.notification`, `user.success`, `other`.
     */
    filters?: pulumi.Input<pulumi.Input<{[key: string]: pulumi.Input<string>}>[]>;
    /**
     * Set True for priority log streams, False for non-priority
     */
    isPriority?: pulumi.Input<boolean>;
    /**
     * Name of the log stream.
     */
    name?: pulumi.Input<string>;
    /**
     * Configuration for PII (Personally Identifiable Information) handling.
     */
    piiConfig?: pulumi.Input<inputs.LogStreamPiiConfig>;
    /**
     * The sink configuration for the log stream.
     */
    sink?: pulumi.Input<inputs.LogStreamSink>;
    /**
     * The optional datetime (ISO 8601) to start streaming logs from.
     */
    startFrom?: pulumi.Input<string>;
    /**
     * The current status of the log stream. Options are "active", "paused", "suspended".
     */
    status?: pulumi.Input<string>;
    /**
     * Type of the log stream, which indicates the sink provider. Options include: `eventbridge`, `eventgrid`, `http`, `datadog`, `splunk`, `sumo`, `mixpanel`, `segment`.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LogStream resource.
 */
export interface LogStreamArgs {
    /**
     * Only logs events matching these filters will be delivered by the stream. If omitted or empty, all events will be delivered. Filters available: `auth.ancillary.fail`, `auth.ancillary.success`, `auth.login.fail`, `auth.login.notification`, `auth.login.success`, `auth.logout.fail`, `auth.logout.success`, `auth.signup.fail`, `auth.signup.success`, `auth.silent_auth.fail`, `auth.silent_auth.success`, `auth.token_exchange.fail`, `auth.token_exchange.success`, `management.fail`, `management.success`, `system.notification`, `user.fail`, `user.notification`, `user.success`, `other`.
     */
    filters?: pulumi.Input<pulumi.Input<{[key: string]: pulumi.Input<string>}>[]>;
    /**
     * Set True for priority log streams, False for non-priority
     */
    isPriority?: pulumi.Input<boolean>;
    /**
     * Name of the log stream.
     */
    name?: pulumi.Input<string>;
    /**
     * Configuration for PII (Personally Identifiable Information) handling.
     */
    piiConfig?: pulumi.Input<inputs.LogStreamPiiConfig>;
    /**
     * The sink configuration for the log stream.
     */
    sink: pulumi.Input<inputs.LogStreamSink>;
    /**
     * The optional datetime (ISO 8601) to start streaming logs from.
     */
    startFrom?: pulumi.Input<string>;
    /**
     * The current status of the log stream. Options are "active", "paused", "suspended".
     */
    status?: pulumi.Input<string>;
    /**
     * Type of the log stream, which indicates the sink provider. Options include: `eventbridge`, `eventgrid`, `http`, `datadog`, `splunk`, `sumo`, `mixpanel`, `segment`.
     */
    type: pulumi.Input<string>;
}
