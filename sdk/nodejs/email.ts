// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * With Auth0, you can have standard welcome, password reset, and account verification email-based workflows built right into Auth0. This resource allows you to configure email providers, so you can route all emails that are part of Auth0's authentication workflows through the supported high-volume email service of your choice.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as auth0 from "@pulumi/auth0";
 *
 * // This is an example on how to set up the email provider with Amazon SES.
 * const amazonSesEmailProvider = new auth0.Email("amazonSesEmailProvider", {
 *     credentials: {
 *         accessKeyId: "AKIAXXXXXXXXXXXXXXXX",
 *         region: "us-east-1",
 *         secretAccessKey: "7e8c2148xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
 *     },
 *     defaultFromAddress: "accounts@example.com",
 *     enabled: true,
 * });
 * // This is an example on how to set up the email provider with SMTP.
 * const smtpEmailProvider = new auth0.Email("smtpEmailProvider", {
 *     credentials: {
 *         smtpHost: "your.smtp.host.com",
 *         smtpPass: "SMTP Password",
 *         smtpPort: 583,
 *         smtpUser: "SMTP Username",
 *     },
 *     defaultFromAddress: "accounts@example.com",
 *     enabled: true,
 * });
 * // This is an example on how to set up the email provider with Sendgrid.
 * const sendgridEmailProvider = new auth0.Email("sendgridEmailProvider", {
 *     credentials: {
 *         apiKey: "secretAPIKey",
 *     },
 *     defaultFromAddress: "accounts@example.com",
 *     enabled: true,
 * });
 * ```
 *
 * ## Import
 *
 * As this is not a resource identifiable by an ID within the Auth0 Management API, email can be imported using a random string. # We recommend [Version 4 UUID](https://www.uuidgenerator.net/version4) # Example
 *
 * ```sh
 *  $ pulumi import auth0:index/email:Email my_email_provider b4213dc2-2eed-42c3-9516-c6131a9ce0b0
 * ```
 */
export class Email extends pulumi.CustomResource {
    /**
     * Get an existing Email resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EmailState, opts?: pulumi.CustomResourceOptions): Email {
        return new Email(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'auth0:index/email:Email';

    /**
     * Returns true if the given object is an instance of Email.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Email {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Email.__pulumiType;
    }

    /**
     * Configuration settings for the credentials for the email provider.
     */
    public readonly credentials!: pulumi.Output<outputs.EmailCredentials>;
    /**
     * Email address to use as the sender when no other "from" address is specified.
     */
    public readonly defaultFromAddress!: pulumi.Output<string>;
    /**
     * Indicates whether the email provider is enabled.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * Name of the email provider. Options include `mailgun`, `mandrill`, `sendgrid`, `ses`, `smtp`, and `sparkpost`.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Specific email provider settings.
     */
    public readonly settings!: pulumi.Output<outputs.EmailSettings>;

    /**
     * Create a Email resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EmailArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EmailArgs | EmailState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EmailState | undefined;
            resourceInputs["credentials"] = state ? state.credentials : undefined;
            resourceInputs["defaultFromAddress"] = state ? state.defaultFromAddress : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["settings"] = state ? state.settings : undefined;
        } else {
            const args = argsOrState as EmailArgs | undefined;
            if ((!args || args.credentials === undefined) && !opts.urn) {
                throw new Error("Missing required property 'credentials'");
            }
            if ((!args || args.defaultFromAddress === undefined) && !opts.urn) {
                throw new Error("Missing required property 'defaultFromAddress'");
            }
            resourceInputs["credentials"] = args ? args.credentials : undefined;
            resourceInputs["defaultFromAddress"] = args ? args.defaultFromAddress : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["settings"] = args ? args.settings : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Email.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Email resources.
 */
export interface EmailState {
    /**
     * Configuration settings for the credentials for the email provider.
     */
    credentials?: pulumi.Input<inputs.EmailCredentials>;
    /**
     * Email address to use as the sender when no other "from" address is specified.
     */
    defaultFromAddress?: pulumi.Input<string>;
    /**
     * Indicates whether the email provider is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Name of the email provider. Options include `mailgun`, `mandrill`, `sendgrid`, `ses`, `smtp`, and `sparkpost`.
     */
    name?: pulumi.Input<string>;
    /**
     * Specific email provider settings.
     */
    settings?: pulumi.Input<inputs.EmailSettings>;
}

/**
 * The set of arguments for constructing a Email resource.
 */
export interface EmailArgs {
    /**
     * Configuration settings for the credentials for the email provider.
     */
    credentials: pulumi.Input<inputs.EmailCredentials>;
    /**
     * Email address to use as the sender when no other "from" address is specified.
     */
    defaultFromAddress: pulumi.Input<string>;
    /**
     * Indicates whether the email provider is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Name of the email provider. Options include `mailgun`, `mandrill`, `sendgrid`, `ses`, `smtp`, and `sparkpost`.
     */
    name?: pulumi.Input<string>;
    /**
     * Specific email provider settings.
     */
    settings?: pulumi.Input<inputs.EmailSettings>;
}
