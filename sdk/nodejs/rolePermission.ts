// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * With this resource, you can manage role permissions (1-1).
 *
 * !> To prevent issues, avoid using this resource together with the `auth0.RolePermissions` resource.
 */
export class RolePermission extends pulumi.CustomResource {
    /**
     * Get an existing RolePermission resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RolePermissionState, opts?: pulumi.CustomResourceOptions): RolePermission {
        return new RolePermission(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'auth0:index/rolePermission:RolePermission';

    /**
     * Returns true if the given object is an instance of RolePermission.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RolePermission {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RolePermission.__pulumiType;
    }

    /**
     * Description of the permission.
     */
    public /*out*/ readonly description!: pulumi.Output<string>;
    /**
     * Name of the permission.
     */
    public readonly permission!: pulumi.Output<string>;
    /**
     * Identifier of the resource server that the permission is associated with.
     */
    public readonly resourceServerIdentifier!: pulumi.Output<string>;
    /**
     * Name of the resource server that the permission is associated with.
     */
    public /*out*/ readonly resourceServerName!: pulumi.Output<string>;
    /**
     * ID of the role to associate the permission to.
     */
    public readonly roleId!: pulumi.Output<string>;

    /**
     * Create a RolePermission resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RolePermissionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RolePermissionArgs | RolePermissionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RolePermissionState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["permission"] = state ? state.permission : undefined;
            resourceInputs["resourceServerIdentifier"] = state ? state.resourceServerIdentifier : undefined;
            resourceInputs["resourceServerName"] = state ? state.resourceServerName : undefined;
            resourceInputs["roleId"] = state ? state.roleId : undefined;
        } else {
            const args = argsOrState as RolePermissionArgs | undefined;
            if ((!args || args.permission === undefined) && !opts.urn) {
                throw new Error("Missing required property 'permission'");
            }
            if ((!args || args.resourceServerIdentifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceServerIdentifier'");
            }
            if ((!args || args.roleId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleId'");
            }
            resourceInputs["permission"] = args ? args.permission : undefined;
            resourceInputs["resourceServerIdentifier"] = args ? args.resourceServerIdentifier : undefined;
            resourceInputs["roleId"] = args ? args.roleId : undefined;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["resourceServerName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RolePermission.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RolePermission resources.
 */
export interface RolePermissionState {
    /**
     * Description of the permission.
     */
    description?: pulumi.Input<string>;
    /**
     * Name of the permission.
     */
    permission?: pulumi.Input<string>;
    /**
     * Identifier of the resource server that the permission is associated with.
     */
    resourceServerIdentifier?: pulumi.Input<string>;
    /**
     * Name of the resource server that the permission is associated with.
     */
    resourceServerName?: pulumi.Input<string>;
    /**
     * ID of the role to associate the permission to.
     */
    roleId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RolePermission resource.
 */
export interface RolePermissionArgs {
    /**
     * Name of the permission.
     */
    permission: pulumi.Input<string>;
    /**
     * Identifier of the resource server that the permission is associated with.
     */
    resourceServerIdentifier: pulumi.Input<string>;
    /**
     * ID of the role to associate the permission to.
     */
    roleId: pulumi.Input<string>;
}
