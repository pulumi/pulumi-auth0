// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * With this resource, you can manage User Attribute Profiles within Auth0. User Attribute Profiles allow you to define how user attributes are mapped between different identity providers and Auth0.
 *
 * > This resource is only available for [EA](https://auth0.com/docs/troubleshoot/product-lifecycle/product-release-stages#early-access) users.
 */
export class UserAttributeProfile extends pulumi.CustomResource {
    /**
     * Get an existing UserAttributeProfile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserAttributeProfileState, opts?: pulumi.CustomResourceOptions): UserAttributeProfile {
        return new UserAttributeProfile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'auth0:index/userAttributeProfile:UserAttributeProfile';

    /**
     * Returns true if the given object is an instance of UserAttributeProfile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is UserAttributeProfile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === UserAttributeProfile.__pulumiType;
    }

    /**
     * The name of the User Attribute Profile.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * List of user attribute configurations.
     */
    declare public readonly userAttributes: pulumi.Output<outputs.UserAttributeProfileUserAttribute[]>;
    /**
     * Configuration for mapping the user ID from identity providers.
     */
    declare public readonly userId: pulumi.Output<outputs.UserAttributeProfileUserId>;

    /**
     * Create a UserAttributeProfile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UserAttributeProfileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserAttributeProfileArgs | UserAttributeProfileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UserAttributeProfileState | undefined;
            resourceInputs["name"] = state?.name;
            resourceInputs["userAttributes"] = state?.userAttributes;
            resourceInputs["userId"] = state?.userId;
        } else {
            const args = argsOrState as UserAttributeProfileArgs | undefined;
            if (args?.userAttributes === undefined && !opts.urn) {
                throw new Error("Missing required property 'userAttributes'");
            }
            resourceInputs["name"] = args?.name;
            resourceInputs["userAttributes"] = args?.userAttributes;
            resourceInputs["userId"] = args?.userId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(UserAttributeProfile.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering UserAttributeProfile resources.
 */
export interface UserAttributeProfileState {
    /**
     * The name of the User Attribute Profile.
     */
    name?: pulumi.Input<string>;
    /**
     * List of user attribute configurations.
     */
    userAttributes?: pulumi.Input<pulumi.Input<inputs.UserAttributeProfileUserAttribute>[]>;
    /**
     * Configuration for mapping the user ID from identity providers.
     */
    userId?: pulumi.Input<inputs.UserAttributeProfileUserId>;
}

/**
 * The set of arguments for constructing a UserAttributeProfile resource.
 */
export interface UserAttributeProfileArgs {
    /**
     * The name of the User Attribute Profile.
     */
    name?: pulumi.Input<string>;
    /**
     * List of user attribute configurations.
     */
    userAttributes: pulumi.Input<pulumi.Input<inputs.UserAttributeProfileUserAttribute>[]>;
    /**
     * Configuration for mapping the user ID from identity providers.
     */
    userId?: pulumi.Input<inputs.UserAttributeProfileUserId>;
}
