// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * With this resource, you can manage a customized sign up and login experience by adding custom content, form elements and css/javascript. You can read more about this [here](https://auth0.com/docs/customize/universal-login-pages/customize-signup-and-login-prompts).
 *
 * !> This resource appends a specific prompt screen to the list of prompt screens displayed to the user during the authentication flow.
 *  In contrast, the `auth0.PromptScreenPartials` resource manages the complete set of prompt screens that are displayed during the
 *  authentication flow. To avoid potential issues, it is recommended not to use this resource in conjunction with the
 *  `auth0.PromptScreenPartials` resource when managing prompt screens for the same prompt.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as auth0 from "@pulumi/auth0";
 *
 * const login = new auth0.PromptScreenPartial("login", {
 *     promptType: "login",
 *     screenName: "login",
 *     insertionPoints: {
 *         formContentStart: "<div>Form Content Start</div>",
 *         formContentEnd: "<div>Form Content End</div>",
 *     },
 * });
 * const customized_consent = new auth0.PromptScreenPartial("customized-consent", {
 *     promptType: "customized-consent",
 *     screenName: "customized-consent",
 *     insertionPoints: {
 *         formContent: "<div>Form Content</div>",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * This resource can be imported using the prompt name and screen_name.
 *
 * # 
 *
 * As this is not a resource identifiable by an ID within the Auth0 Management API,
 *
 * login can be imported using the prompt name and screen name using the format:
 *
 * prompt_name:screen_name
 *
 * # 
 *
 * Example:
 *
 * ```sh
 * $ pulumi import auth0:index/promptScreenPartial:PromptScreenPartial login "login:login"
 * ```
 */
export class PromptScreenPartial extends pulumi.CustomResource {
    /**
     * Get an existing PromptScreenPartial resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PromptScreenPartialState, opts?: pulumi.CustomResourceOptions): PromptScreenPartial {
        return new PromptScreenPartial(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'auth0:index/promptScreenPartial:PromptScreenPartial';

    /**
     * Returns true if the given object is an instance of PromptScreenPartial.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PromptScreenPartial {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PromptScreenPartial.__pulumiType;
    }

    /**
     * The insertion points for the partials.
     */
    public readonly insertionPoints!: pulumi.Output<outputs.PromptScreenPartialInsertionPoints | undefined>;
    /**
     * The prompt that you are adding partials for. Options are: `login-id`, `login`, `login-password`, `signup`, `signup-id`, `signup-password`, `login-passwordless`, `customized-consent`.
     */
    public readonly promptType!: pulumi.Output<string>;
    /**
     * The name of the screen associated with the partials
     */
    public readonly screenName!: pulumi.Output<string>;

    /**
     * Create a PromptScreenPartial resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PromptScreenPartialArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PromptScreenPartialArgs | PromptScreenPartialState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PromptScreenPartialState | undefined;
            resourceInputs["insertionPoints"] = state ? state.insertionPoints : undefined;
            resourceInputs["promptType"] = state ? state.promptType : undefined;
            resourceInputs["screenName"] = state ? state.screenName : undefined;
        } else {
            const args = argsOrState as PromptScreenPartialArgs | undefined;
            if ((!args || args.promptType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'promptType'");
            }
            if ((!args || args.screenName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'screenName'");
            }
            resourceInputs["insertionPoints"] = args ? args.insertionPoints : undefined;
            resourceInputs["promptType"] = args ? args.promptType : undefined;
            resourceInputs["screenName"] = args ? args.screenName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PromptScreenPartial.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PromptScreenPartial resources.
 */
export interface PromptScreenPartialState {
    /**
     * The insertion points for the partials.
     */
    insertionPoints?: pulumi.Input<inputs.PromptScreenPartialInsertionPoints>;
    /**
     * The prompt that you are adding partials for. Options are: `login-id`, `login`, `login-password`, `signup`, `signup-id`, `signup-password`, `login-passwordless`, `customized-consent`.
     */
    promptType?: pulumi.Input<string>;
    /**
     * The name of the screen associated with the partials
     */
    screenName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PromptScreenPartial resource.
 */
export interface PromptScreenPartialArgs {
    /**
     * The insertion points for the partials.
     */
    insertionPoints?: pulumi.Input<inputs.PromptScreenPartialInsertionPoints>;
    /**
     * The prompt that you are adding partials for. Options are: `login-id`, `login`, `login-password`, `signup`, `signup-id`, `signup-password`, `login-passwordless`, `customized-consent`.
     */
    promptType: pulumi.Input<string>;
    /**
     * The name of the screen associated with the partials
     */
    screenName: pulumi.Input<string>;
}
