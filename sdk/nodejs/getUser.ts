// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Data source to retrieve a specific Auth0 user by `userId`.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as auth0 from "@pulumi/auth0";
 *
 * const myUser = auth0.getUser({
 *     userId: "auth0|34fdr23fdsfdfsf",
 * });
 * ```
 */
export function getUser(args: GetUserArgs, opts?: pulumi.InvokeOptions): Promise<GetUserResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("auth0:index/getUser:getUser", {
        "userId": args.userId,
    }, opts);
}

/**
 * A collection of arguments for invoking getUser.
 */
export interface GetUserArgs {
    /**
     * ID of the user.
     */
    userId: string;
}

/**
 * A collection of values returned by getUser.
 */
export interface GetUserResult {
    /**
     * Custom fields that store info about the user that impact the user's core functionality, such as how an application functions or what the user can access. Examples include support plans and IDs for external accounts.
     */
    readonly appMetadata: string;
    /**
     * Indicates whether the user is blocked or not.
     */
    readonly blocked: boolean;
    /**
     * Name of the connection from which the user information was sourced.
     */
    readonly connectionName: string;
    /**
     * Email address of the user.
     */
    readonly email: string;
    /**
     * Indicates whether the email address has been verified.
     */
    readonly emailVerified: boolean;
    /**
     * Family name of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled 'Sync user profile attributes at each login'. For more information, see: [Configure Identity Provider Connection for User Profile Updates](https://auth0.com/docs/manage-users/user-accounts/user-profiles/configure-connection-sync-with-auth0).
     */
    readonly familyName: string;
    /**
     * Given name of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled 'Sync user profile attributes at each login'. For more information, see: [Configure Identity Provider Connection for User Profile Updates](https://auth0.com/docs/manage-users/user-accounts/user-profiles/configure-connection-sync-with-auth0).
     */
    readonly givenName: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Name of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled 'Sync user profile attributes at each login'. For more information, see: [Configure Identity Provider Connection for User Profile Updates](https://auth0.com/docs/manage-users/user-accounts/user-profiles/configure-connection-sync-with-auth0).
     */
    readonly name: string;
    /**
     * Preferred nickname or alias of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled 'Sync user profile attributes at each login'. For more information, see: [Configure Identity Provider Connection for User Profile Updates](https://auth0.com/docs/manage-users/user-accounts/user-profiles/configure-connection-sync-with-auth0).
     */
    readonly nickname: string;
    /**
     * Initial password for this user. Required for non-passwordless connections (SMS and email).
     */
    readonly password: string;
    /**
     * List of API permissions granted to the user.
     */
    readonly permissions: outputs.GetUserPermission[];
    /**
     * Phone number for the user; follows the E.164 recommendation. Used for SMS connections.
     */
    readonly phoneNumber: string;
    /**
     * Indicates whether the phone number has been verified.
     */
    readonly phoneVerified: boolean;
    /**
     * Picture of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled 'Sync user profile attributes at each login'. For more information, see: [Configure Identity Provider Connection for User Profile Updates](https://auth0.com/docs/manage-users/user-accounts/user-profiles/configure-connection-sync-with-auth0).
     */
    readonly picture: string;
    /**
     * Set of IDs of roles assigned to the user.
     */
    readonly roles: string[];
    /**
     * ID of the user.
     */
    readonly userId: string;
    /**
     * Custom fields that store info about the user that does not impact a user's core functionality. Examples include work address, home address, and user preferences.
     */
    readonly userMetadata: string;
    /**
     * Username of the user. Only valid if the connection requires a username.
     */
    readonly username: string;
    /**
     * Indicates whether the user will receive a verification email after creation. Overrides behavior of `emailVerified` parameter.
     */
    readonly verifyEmail: boolean;
}
/**
 * Data source to retrieve a specific Auth0 user by `userId`.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as auth0 from "@pulumi/auth0";
 *
 * const myUser = auth0.getUser({
 *     userId: "auth0|34fdr23fdsfdfsf",
 * });
 * ```
 */
export function getUserOutput(args: GetUserOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetUserResult> {
    return pulumi.output(args).apply((a: any) => getUser(a, opts))
}

/**
 * A collection of arguments for invoking getUser.
 */
export interface GetUserOutputArgs {
    /**
     * ID of the user.
     */
    userId: pulumi.Input<string>;
}
