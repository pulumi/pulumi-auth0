// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package auth0

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-auth0/sdk/v3/go/auth0/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// With this resource, you can manage role permissions (1-many).
//
// !> This resource manages all the permissions assigned to a role. In contrast, the `RolePermission` resource only
// appends a permission to a role. To avoid potential issues, it is recommended not to use this resource in conjunction
// with the `RolePermission` resource when managing permissions for the same role id.
type RolePermissions struct {
	pulumi.CustomResourceState

	// List of API permissions granted to the role.
	Permissions RolePermissionsPermissionArrayOutput `pulumi:"permissions"`
	// ID of the role to associate the permission to.
	RoleId pulumi.StringOutput `pulumi:"roleId"`
}

// NewRolePermissions registers a new resource with the given unique name, arguments, and options.
func NewRolePermissions(ctx *pulumi.Context,
	name string, args *RolePermissionsArgs, opts ...pulumi.ResourceOption) (*RolePermissions, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Permissions == nil {
		return nil, errors.New("invalid value for required argument 'Permissions'")
	}
	if args.RoleId == nil {
		return nil, errors.New("invalid value for required argument 'RoleId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RolePermissions
	err := ctx.RegisterResource("auth0:index/rolePermissions:RolePermissions", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRolePermissions gets an existing RolePermissions resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRolePermissions(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RolePermissionsState, opts ...pulumi.ResourceOption) (*RolePermissions, error) {
	var resource RolePermissions
	err := ctx.ReadResource("auth0:index/rolePermissions:RolePermissions", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RolePermissions resources.
type rolePermissionsState struct {
	// List of API permissions granted to the role.
	Permissions []RolePermissionsPermission `pulumi:"permissions"`
	// ID of the role to associate the permission to.
	RoleId *string `pulumi:"roleId"`
}

type RolePermissionsState struct {
	// List of API permissions granted to the role.
	Permissions RolePermissionsPermissionArrayInput
	// ID of the role to associate the permission to.
	RoleId pulumi.StringPtrInput
}

func (RolePermissionsState) ElementType() reflect.Type {
	return reflect.TypeOf((*rolePermissionsState)(nil)).Elem()
}

type rolePermissionsArgs struct {
	// List of API permissions granted to the role.
	Permissions []RolePermissionsPermission `pulumi:"permissions"`
	// ID of the role to associate the permission to.
	RoleId string `pulumi:"roleId"`
}

// The set of arguments for constructing a RolePermissions resource.
type RolePermissionsArgs struct {
	// List of API permissions granted to the role.
	Permissions RolePermissionsPermissionArrayInput
	// ID of the role to associate the permission to.
	RoleId pulumi.StringInput
}

func (RolePermissionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rolePermissionsArgs)(nil)).Elem()
}

type RolePermissionsInput interface {
	pulumi.Input

	ToRolePermissionsOutput() RolePermissionsOutput
	ToRolePermissionsOutputWithContext(ctx context.Context) RolePermissionsOutput
}

func (*RolePermissions) ElementType() reflect.Type {
	return reflect.TypeOf((**RolePermissions)(nil)).Elem()
}

func (i *RolePermissions) ToRolePermissionsOutput() RolePermissionsOutput {
	return i.ToRolePermissionsOutputWithContext(context.Background())
}

func (i *RolePermissions) ToRolePermissionsOutputWithContext(ctx context.Context) RolePermissionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RolePermissionsOutput)
}

// RolePermissionsArrayInput is an input type that accepts RolePermissionsArray and RolePermissionsArrayOutput values.
// You can construct a concrete instance of `RolePermissionsArrayInput` via:
//
//	RolePermissionsArray{ RolePermissionsArgs{...} }
type RolePermissionsArrayInput interface {
	pulumi.Input

	ToRolePermissionsArrayOutput() RolePermissionsArrayOutput
	ToRolePermissionsArrayOutputWithContext(context.Context) RolePermissionsArrayOutput
}

type RolePermissionsArray []RolePermissionsInput

func (RolePermissionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RolePermissions)(nil)).Elem()
}

func (i RolePermissionsArray) ToRolePermissionsArrayOutput() RolePermissionsArrayOutput {
	return i.ToRolePermissionsArrayOutputWithContext(context.Background())
}

func (i RolePermissionsArray) ToRolePermissionsArrayOutputWithContext(ctx context.Context) RolePermissionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RolePermissionsArrayOutput)
}

// RolePermissionsMapInput is an input type that accepts RolePermissionsMap and RolePermissionsMapOutput values.
// You can construct a concrete instance of `RolePermissionsMapInput` via:
//
//	RolePermissionsMap{ "key": RolePermissionsArgs{...} }
type RolePermissionsMapInput interface {
	pulumi.Input

	ToRolePermissionsMapOutput() RolePermissionsMapOutput
	ToRolePermissionsMapOutputWithContext(context.Context) RolePermissionsMapOutput
}

type RolePermissionsMap map[string]RolePermissionsInput

func (RolePermissionsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RolePermissions)(nil)).Elem()
}

func (i RolePermissionsMap) ToRolePermissionsMapOutput() RolePermissionsMapOutput {
	return i.ToRolePermissionsMapOutputWithContext(context.Background())
}

func (i RolePermissionsMap) ToRolePermissionsMapOutputWithContext(ctx context.Context) RolePermissionsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RolePermissionsMapOutput)
}

type RolePermissionsOutput struct{ *pulumi.OutputState }

func (RolePermissionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RolePermissions)(nil)).Elem()
}

func (o RolePermissionsOutput) ToRolePermissionsOutput() RolePermissionsOutput {
	return o
}

func (o RolePermissionsOutput) ToRolePermissionsOutputWithContext(ctx context.Context) RolePermissionsOutput {
	return o
}

// List of API permissions granted to the role.
func (o RolePermissionsOutput) Permissions() RolePermissionsPermissionArrayOutput {
	return o.ApplyT(func(v *RolePermissions) RolePermissionsPermissionArrayOutput { return v.Permissions }).(RolePermissionsPermissionArrayOutput)
}

// ID of the role to associate the permission to.
func (o RolePermissionsOutput) RoleId() pulumi.StringOutput {
	return o.ApplyT(func(v *RolePermissions) pulumi.StringOutput { return v.RoleId }).(pulumi.StringOutput)
}

type RolePermissionsArrayOutput struct{ *pulumi.OutputState }

func (RolePermissionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RolePermissions)(nil)).Elem()
}

func (o RolePermissionsArrayOutput) ToRolePermissionsArrayOutput() RolePermissionsArrayOutput {
	return o
}

func (o RolePermissionsArrayOutput) ToRolePermissionsArrayOutputWithContext(ctx context.Context) RolePermissionsArrayOutput {
	return o
}

func (o RolePermissionsArrayOutput) Index(i pulumi.IntInput) RolePermissionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RolePermissions {
		return vs[0].([]*RolePermissions)[vs[1].(int)]
	}).(RolePermissionsOutput)
}

type RolePermissionsMapOutput struct{ *pulumi.OutputState }

func (RolePermissionsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RolePermissions)(nil)).Elem()
}

func (o RolePermissionsMapOutput) ToRolePermissionsMapOutput() RolePermissionsMapOutput {
	return o
}

func (o RolePermissionsMapOutput) ToRolePermissionsMapOutputWithContext(ctx context.Context) RolePermissionsMapOutput {
	return o
}

func (o RolePermissionsMapOutput) MapIndex(k pulumi.StringInput) RolePermissionsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RolePermissions {
		return vs[0].(map[string]*RolePermissions)[vs[1].(string)]
	}).(RolePermissionsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RolePermissionsInput)(nil)).Elem(), &RolePermissions{})
	pulumi.RegisterInputType(reflect.TypeOf((*RolePermissionsArrayInput)(nil)).Elem(), RolePermissionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RolePermissionsMapInput)(nil)).Elem(), RolePermissionsMap{})
	pulumi.RegisterOutputType(RolePermissionsOutput{})
	pulumi.RegisterOutputType(RolePermissionsArrayOutput{})
	pulumi.RegisterOutputType(RolePermissionsMapOutput{})
}
