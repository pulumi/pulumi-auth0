// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package auth0

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-auth0/sdk/v3/go/auth0/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// With this resource, you can manage Auth0 Custom Token Exchange Profiles
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-auth0/sdk/v3/go/auth0"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Below action is created with custom-token-exchange as supported_triggers
//			// This action is then linked using the action_id param to the token-exchange profile
//			myAction, err := auth0.NewAction(ctx, "my_action", &auth0.ActionArgs{
//				Name:   pulumi.String("TokenExchange-Action"),
//				Code:   pulumi.String("exports.onContinuePostLogin = async (event, api) => {\n	console.log(\"foo\")\n};\"\n"),
//				Deploy: pulumi.Bool(true),
//				SupportedTriggers: &auth0.ActionSupportedTriggersArgs{
//					Id:      pulumi.String("custom-token-exchange"),
//					Version: pulumi.String("v1"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = auth0.NewTokenExchangeProfile(ctx, "my_token_exchange_profile", &auth0.TokenExchangeProfileArgs{
//				Name:             pulumi.String("token-exchange-prof"),
//				SubjectTokenType: pulumi.String("https://acme.com/cis-token"),
//				ActionId:         myAction.ID(),
//				Type:             pulumi.String("custom_authentication"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// This resource can be imported using the token exchange profile ID.
//
// Example:
//
// ```sh
// $ pulumi import auth0:index/tokenExchangeProfile:TokenExchangeProfile profile "tep_XXXXXXXXXXXXXX"
// ```
type TokenExchangeProfile struct {
	pulumi.CustomResourceState

	// Unique identifier of the Action
	ActionId pulumi.StringPtrOutput `pulumi:"actionId"`
	// The ISO 8601 formatted date the credential was created.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Name of the token exchange profile.
	Name pulumi.StringOutput `pulumi:"name"`
	// Type of the subject token
	SubjectTokenType pulumi.StringPtrOutput `pulumi:"subjectTokenType"`
	// Type of the token exchange profile
	Type pulumi.StringOutput `pulumi:"type"`
	// The ISO 8601 formatted date the credential was updated.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewTokenExchangeProfile registers a new resource with the given unique name, arguments, and options.
func NewTokenExchangeProfile(ctx *pulumi.Context,
	name string, args *TokenExchangeProfileArgs, opts ...pulumi.ResourceOption) (*TokenExchangeProfile, error) {
	if args == nil {
		args = &TokenExchangeProfileArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TokenExchangeProfile
	err := ctx.RegisterResource("auth0:index/tokenExchangeProfile:TokenExchangeProfile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTokenExchangeProfile gets an existing TokenExchangeProfile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTokenExchangeProfile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TokenExchangeProfileState, opts ...pulumi.ResourceOption) (*TokenExchangeProfile, error) {
	var resource TokenExchangeProfile
	err := ctx.ReadResource("auth0:index/tokenExchangeProfile:TokenExchangeProfile", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TokenExchangeProfile resources.
type tokenExchangeProfileState struct {
	// Unique identifier of the Action
	ActionId *string `pulumi:"actionId"`
	// The ISO 8601 formatted date the credential was created.
	CreatedAt *string `pulumi:"createdAt"`
	// Name of the token exchange profile.
	Name *string `pulumi:"name"`
	// Type of the subject token
	SubjectTokenType *string `pulumi:"subjectTokenType"`
	// Type of the token exchange profile
	Type *string `pulumi:"type"`
	// The ISO 8601 formatted date the credential was updated.
	UpdatedAt *string `pulumi:"updatedAt"`
}

type TokenExchangeProfileState struct {
	// Unique identifier of the Action
	ActionId pulumi.StringPtrInput
	// The ISO 8601 formatted date the credential was created.
	CreatedAt pulumi.StringPtrInput
	// Name of the token exchange profile.
	Name pulumi.StringPtrInput
	// Type of the subject token
	SubjectTokenType pulumi.StringPtrInput
	// Type of the token exchange profile
	Type pulumi.StringPtrInput
	// The ISO 8601 formatted date the credential was updated.
	UpdatedAt pulumi.StringPtrInput
}

func (TokenExchangeProfileState) ElementType() reflect.Type {
	return reflect.TypeOf((*tokenExchangeProfileState)(nil)).Elem()
}

type tokenExchangeProfileArgs struct {
	// Unique identifier of the Action
	ActionId *string `pulumi:"actionId"`
	// Name of the token exchange profile.
	Name *string `pulumi:"name"`
	// Type of the subject token
	SubjectTokenType *string `pulumi:"subjectTokenType"`
	// Type of the token exchange profile
	Type *string `pulumi:"type"`
}

// The set of arguments for constructing a TokenExchangeProfile resource.
type TokenExchangeProfileArgs struct {
	// Unique identifier of the Action
	ActionId pulumi.StringPtrInput
	// Name of the token exchange profile.
	Name pulumi.StringPtrInput
	// Type of the subject token
	SubjectTokenType pulumi.StringPtrInput
	// Type of the token exchange profile
	Type pulumi.StringPtrInput
}

func (TokenExchangeProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tokenExchangeProfileArgs)(nil)).Elem()
}

type TokenExchangeProfileInput interface {
	pulumi.Input

	ToTokenExchangeProfileOutput() TokenExchangeProfileOutput
	ToTokenExchangeProfileOutputWithContext(ctx context.Context) TokenExchangeProfileOutput
}

func (*TokenExchangeProfile) ElementType() reflect.Type {
	return reflect.TypeOf((**TokenExchangeProfile)(nil)).Elem()
}

func (i *TokenExchangeProfile) ToTokenExchangeProfileOutput() TokenExchangeProfileOutput {
	return i.ToTokenExchangeProfileOutputWithContext(context.Background())
}

func (i *TokenExchangeProfile) ToTokenExchangeProfileOutputWithContext(ctx context.Context) TokenExchangeProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TokenExchangeProfileOutput)
}

// TokenExchangeProfileArrayInput is an input type that accepts TokenExchangeProfileArray and TokenExchangeProfileArrayOutput values.
// You can construct a concrete instance of `TokenExchangeProfileArrayInput` via:
//
//	TokenExchangeProfileArray{ TokenExchangeProfileArgs{...} }
type TokenExchangeProfileArrayInput interface {
	pulumi.Input

	ToTokenExchangeProfileArrayOutput() TokenExchangeProfileArrayOutput
	ToTokenExchangeProfileArrayOutputWithContext(context.Context) TokenExchangeProfileArrayOutput
}

type TokenExchangeProfileArray []TokenExchangeProfileInput

func (TokenExchangeProfileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TokenExchangeProfile)(nil)).Elem()
}

func (i TokenExchangeProfileArray) ToTokenExchangeProfileArrayOutput() TokenExchangeProfileArrayOutput {
	return i.ToTokenExchangeProfileArrayOutputWithContext(context.Background())
}

func (i TokenExchangeProfileArray) ToTokenExchangeProfileArrayOutputWithContext(ctx context.Context) TokenExchangeProfileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TokenExchangeProfileArrayOutput)
}

// TokenExchangeProfileMapInput is an input type that accepts TokenExchangeProfileMap and TokenExchangeProfileMapOutput values.
// You can construct a concrete instance of `TokenExchangeProfileMapInput` via:
//
//	TokenExchangeProfileMap{ "key": TokenExchangeProfileArgs{...} }
type TokenExchangeProfileMapInput interface {
	pulumi.Input

	ToTokenExchangeProfileMapOutput() TokenExchangeProfileMapOutput
	ToTokenExchangeProfileMapOutputWithContext(context.Context) TokenExchangeProfileMapOutput
}

type TokenExchangeProfileMap map[string]TokenExchangeProfileInput

func (TokenExchangeProfileMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TokenExchangeProfile)(nil)).Elem()
}

func (i TokenExchangeProfileMap) ToTokenExchangeProfileMapOutput() TokenExchangeProfileMapOutput {
	return i.ToTokenExchangeProfileMapOutputWithContext(context.Background())
}

func (i TokenExchangeProfileMap) ToTokenExchangeProfileMapOutputWithContext(ctx context.Context) TokenExchangeProfileMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TokenExchangeProfileMapOutput)
}

type TokenExchangeProfileOutput struct{ *pulumi.OutputState }

func (TokenExchangeProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TokenExchangeProfile)(nil)).Elem()
}

func (o TokenExchangeProfileOutput) ToTokenExchangeProfileOutput() TokenExchangeProfileOutput {
	return o
}

func (o TokenExchangeProfileOutput) ToTokenExchangeProfileOutputWithContext(ctx context.Context) TokenExchangeProfileOutput {
	return o
}

// Unique identifier of the Action
func (o TokenExchangeProfileOutput) ActionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TokenExchangeProfile) pulumi.StringPtrOutput { return v.ActionId }).(pulumi.StringPtrOutput)
}

// The ISO 8601 formatted date the credential was created.
func (o TokenExchangeProfileOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *TokenExchangeProfile) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Name of the token exchange profile.
func (o TokenExchangeProfileOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *TokenExchangeProfile) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Type of the subject token
func (o TokenExchangeProfileOutput) SubjectTokenType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TokenExchangeProfile) pulumi.StringPtrOutput { return v.SubjectTokenType }).(pulumi.StringPtrOutput)
}

// Type of the token exchange profile
func (o TokenExchangeProfileOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *TokenExchangeProfile) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// The ISO 8601 formatted date the credential was updated.
func (o TokenExchangeProfileOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *TokenExchangeProfile) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

type TokenExchangeProfileArrayOutput struct{ *pulumi.OutputState }

func (TokenExchangeProfileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TokenExchangeProfile)(nil)).Elem()
}

func (o TokenExchangeProfileArrayOutput) ToTokenExchangeProfileArrayOutput() TokenExchangeProfileArrayOutput {
	return o
}

func (o TokenExchangeProfileArrayOutput) ToTokenExchangeProfileArrayOutputWithContext(ctx context.Context) TokenExchangeProfileArrayOutput {
	return o
}

func (o TokenExchangeProfileArrayOutput) Index(i pulumi.IntInput) TokenExchangeProfileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TokenExchangeProfile {
		return vs[0].([]*TokenExchangeProfile)[vs[1].(int)]
	}).(TokenExchangeProfileOutput)
}

type TokenExchangeProfileMapOutput struct{ *pulumi.OutputState }

func (TokenExchangeProfileMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TokenExchangeProfile)(nil)).Elem()
}

func (o TokenExchangeProfileMapOutput) ToTokenExchangeProfileMapOutput() TokenExchangeProfileMapOutput {
	return o
}

func (o TokenExchangeProfileMapOutput) ToTokenExchangeProfileMapOutputWithContext(ctx context.Context) TokenExchangeProfileMapOutput {
	return o
}

func (o TokenExchangeProfileMapOutput) MapIndex(k pulumi.StringInput) TokenExchangeProfileOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TokenExchangeProfile {
		return vs[0].(map[string]*TokenExchangeProfile)[vs[1].(string)]
	}).(TokenExchangeProfileOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TokenExchangeProfileInput)(nil)).Elem(), &TokenExchangeProfile{})
	pulumi.RegisterInputType(reflect.TypeOf((*TokenExchangeProfileArrayInput)(nil)).Elem(), TokenExchangeProfileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TokenExchangeProfileMapInput)(nil)).Elem(), TokenExchangeProfileMap{})
	pulumi.RegisterOutputType(TokenExchangeProfileOutput{})
	pulumi.RegisterOutputType(TokenExchangeProfileArrayOutput{})
	pulumi.RegisterOutputType(TokenExchangeProfileMapOutput{})
}
