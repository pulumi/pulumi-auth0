// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package auth0

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// With this resource, you can manage your Auth0 prompts, including choosing the login experience version.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-auth0/sdk/v2/go/auth0"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := auth0.NewPrompt(ctx, "example", &auth0.PromptArgs{
// 			IdentifierFirst:          pulumi.Bool(false),
// 			UniversalLoginExperience: pulumi.String("classic"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type Prompt struct {
	pulumi.CustomResourceState

	// Boolean. Indicates whether or not identifier first is used when using the new universal login experience.
	IdentifierFirst pulumi.BoolPtrOutput `pulumi:"identifierFirst"`
	// Which login experience to use. Options include `classic` and `new`.
	UniversalLoginExperience pulumi.StringPtrOutput `pulumi:"universalLoginExperience"`
}

// NewPrompt registers a new resource with the given unique name, arguments, and options.
func NewPrompt(ctx *pulumi.Context,
	name string, args *PromptArgs, opts ...pulumi.ResourceOption) (*Prompt, error) {
	if args == nil {
		args = &PromptArgs{}
	}

	var resource Prompt
	err := ctx.RegisterResource("auth0:index/prompt:Prompt", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPrompt gets an existing Prompt resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPrompt(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PromptState, opts ...pulumi.ResourceOption) (*Prompt, error) {
	var resource Prompt
	err := ctx.ReadResource("auth0:index/prompt:Prompt", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Prompt resources.
type promptState struct {
	// Boolean. Indicates whether or not identifier first is used when using the new universal login experience.
	IdentifierFirst *bool `pulumi:"identifierFirst"`
	// Which login experience to use. Options include `classic` and `new`.
	UniversalLoginExperience *string `pulumi:"universalLoginExperience"`
}

type PromptState struct {
	// Boolean. Indicates whether or not identifier first is used when using the new universal login experience.
	IdentifierFirst pulumi.BoolPtrInput
	// Which login experience to use. Options include `classic` and `new`.
	UniversalLoginExperience pulumi.StringPtrInput
}

func (PromptState) ElementType() reflect.Type {
	return reflect.TypeOf((*promptState)(nil)).Elem()
}

type promptArgs struct {
	// Boolean. Indicates whether or not identifier first is used when using the new universal login experience.
	IdentifierFirst *bool `pulumi:"identifierFirst"`
	// Which login experience to use. Options include `classic` and `new`.
	UniversalLoginExperience *string `pulumi:"universalLoginExperience"`
}

// The set of arguments for constructing a Prompt resource.
type PromptArgs struct {
	// Boolean. Indicates whether or not identifier first is used when using the new universal login experience.
	IdentifierFirst pulumi.BoolPtrInput
	// Which login experience to use. Options include `classic` and `new`.
	UniversalLoginExperience pulumi.StringPtrInput
}

func (PromptArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*promptArgs)(nil)).Elem()
}

type PromptInput interface {
	pulumi.Input

	ToPromptOutput() PromptOutput
	ToPromptOutputWithContext(ctx context.Context) PromptOutput
}

func (*Prompt) ElementType() reflect.Type {
	return reflect.TypeOf((**Prompt)(nil)).Elem()
}

func (i *Prompt) ToPromptOutput() PromptOutput {
	return i.ToPromptOutputWithContext(context.Background())
}

func (i *Prompt) ToPromptOutputWithContext(ctx context.Context) PromptOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PromptOutput)
}

// PromptArrayInput is an input type that accepts PromptArray and PromptArrayOutput values.
// You can construct a concrete instance of `PromptArrayInput` via:
//
//          PromptArray{ PromptArgs{...} }
type PromptArrayInput interface {
	pulumi.Input

	ToPromptArrayOutput() PromptArrayOutput
	ToPromptArrayOutputWithContext(context.Context) PromptArrayOutput
}

type PromptArray []PromptInput

func (PromptArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Prompt)(nil)).Elem()
}

func (i PromptArray) ToPromptArrayOutput() PromptArrayOutput {
	return i.ToPromptArrayOutputWithContext(context.Background())
}

func (i PromptArray) ToPromptArrayOutputWithContext(ctx context.Context) PromptArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PromptArrayOutput)
}

// PromptMapInput is an input type that accepts PromptMap and PromptMapOutput values.
// You can construct a concrete instance of `PromptMapInput` via:
//
//          PromptMap{ "key": PromptArgs{...} }
type PromptMapInput interface {
	pulumi.Input

	ToPromptMapOutput() PromptMapOutput
	ToPromptMapOutputWithContext(context.Context) PromptMapOutput
}

type PromptMap map[string]PromptInput

func (PromptMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Prompt)(nil)).Elem()
}

func (i PromptMap) ToPromptMapOutput() PromptMapOutput {
	return i.ToPromptMapOutputWithContext(context.Background())
}

func (i PromptMap) ToPromptMapOutputWithContext(ctx context.Context) PromptMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PromptMapOutput)
}

type PromptOutput struct{ *pulumi.OutputState }

func (PromptOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Prompt)(nil)).Elem()
}

func (o PromptOutput) ToPromptOutput() PromptOutput {
	return o
}

func (o PromptOutput) ToPromptOutputWithContext(ctx context.Context) PromptOutput {
	return o
}

type PromptArrayOutput struct{ *pulumi.OutputState }

func (PromptArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Prompt)(nil)).Elem()
}

func (o PromptArrayOutput) ToPromptArrayOutput() PromptArrayOutput {
	return o
}

func (o PromptArrayOutput) ToPromptArrayOutputWithContext(ctx context.Context) PromptArrayOutput {
	return o
}

func (o PromptArrayOutput) Index(i pulumi.IntInput) PromptOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Prompt {
		return vs[0].([]*Prompt)[vs[1].(int)]
	}).(PromptOutput)
}

type PromptMapOutput struct{ *pulumi.OutputState }

func (PromptMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Prompt)(nil)).Elem()
}

func (o PromptMapOutput) ToPromptMapOutput() PromptMapOutput {
	return o
}

func (o PromptMapOutput) ToPromptMapOutputWithContext(ctx context.Context) PromptMapOutput {
	return o
}

func (o PromptMapOutput) MapIndex(k pulumi.StringInput) PromptOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Prompt {
		return vs[0].(map[string]*Prompt)[vs[1].(string)]
	}).(PromptOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PromptInput)(nil)).Elem(), &Prompt{})
	pulumi.RegisterInputType(reflect.TypeOf((*PromptArrayInput)(nil)).Elem(), PromptArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PromptMapInput)(nil)).Elem(), PromptMap{})
	pulumi.RegisterOutputType(PromptOutput{})
	pulumi.RegisterOutputType(PromptArrayOutput{})
	pulumi.RegisterOutputType(PromptMapOutput{})
}
