// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package auth0

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-auth0/sdk/v3/go/auth0/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// With this resource, you can configure [SCIM(System for Cross-domain Identity Management)](https://simplecloud.info/) support for `SAML` and `OpenID Connect` Enterprise connections.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-auth0/sdk/v3/go/auth0"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			myEnterpriseConnection, err := auth0.NewConnection(ctx, "my_enterprise_connection", &auth0.ConnectionArgs{
//				Name:        pulumi.String("my-enterprise-connection"),
//				DisplayName: pulumi.String("My Enterprise Connection"),
//				Strategy:    pulumi.String("okta"),
//				Options: &auth0.ConnectionOptionsArgs{
//					ClientId:              pulumi.String("1234567"),
//					ClientSecret:          pulumi.String("1234567"),
//					Issuer:                pulumi.String("https://example.okta.com"),
//					JwksUri:               pulumi.String("https://example.okta.com/oauth2/v1/keys"),
//					TokenEndpoint:         pulumi.String("https://example.okta.com/oauth2/v1/token"),
//					AuthorizationEndpoint: pulumi.String("https://example.okta.com/oauth2/v1/authorize"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			myEnterpriseConnection2, err := auth0.NewConnection(ctx, "my_enterprise_connection_2", &auth0.ConnectionArgs{
//				Name:        pulumi.String("my-enterprise-connection-2"),
//				DisplayName: pulumi.String("My Enterprise Connection 2"),
//				Strategy:    pulumi.String("okta"),
//				Options: &auth0.ConnectionOptionsArgs{
//					ClientId:              pulumi.String("1234567"),
//					ClientSecret:          pulumi.String("1234567"),
//					Issuer:                pulumi.String("https://example.okta.com"),
//					JwksUri:               pulumi.String("https://example.okta.com/oauth2/v1/keys"),
//					TokenEndpoint:         pulumi.String("https://example.okta.com/oauth2/v1/token"),
//					AuthorizationEndpoint: pulumi.String("https://example.okta.com/oauth2/v1/authorize"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			// A resource for configuring an Auth0 Connection SCIM Configuration, using default values.
//			// Only one can be specified for a connection.
//			_, err = auth0.NewConnectionScimConfiguration(ctx, "my_conn_scim_configuration_default", &auth0.ConnectionScimConfigurationArgs{
//				ConnectionId: myEnterpriseConnection.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			// A resource for configuring an Auth0 Connection SCIM Configuration, specifying `user_id_attribute` and `mapping`.
//			// Only one can be specified for a connection.
//			_, err = auth0.NewConnectionScimConfiguration(ctx, "my_conn_scim_configuration", &auth0.ConnectionScimConfigurationArgs{
//				ConnectionId:    myEnterpriseConnection2.ID(),
//				UserIdAttribute: pulumi.String("attribute1"),
//				Mappings: auth0.ConnectionScimConfigurationMappingArray{
//					&auth0.ConnectionScimConfigurationMappingArgs{
//						Auth0: pulumi.String("auth0_attribute1"),
//						Scim:  pulumi.String("sacim_attribute1"),
//					},
//					&auth0.ConnectionScimConfigurationMappingArgs{
//						Auth0: pulumi.String("auth0_attribute2"),
//						Scim:  pulumi.String("sacim_attribute2"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// This resource can be imported by specifying the connection ID <connectionID>
//
// #
//
// Example:
//
// ```sh
// $ pulumi import auth0:index/connectionScimConfiguration:ConnectionScimConfiguration my_conn_scim_conf "con_XXXXX"
// ```
type ConnectionScimConfiguration struct {
	pulumi.CustomResourceState

	// ID of the connection for this SCIM configuration.
	ConnectionId pulumi.StringOutput `pulumi:"connectionId"`
	// Name of the connection for this SCIM configuration.
	ConnectionName pulumi.StringOutput `pulumi:"connectionName"`
	// Mapping between Auth0 attributes and SCIM attributes. If `userIdAttribute` is set, `mapping` must be set as well.
	Mappings ConnectionScimConfigurationMappingArrayOutput `pulumi:"mappings"`
	// Schema of the connection for this SCIM configuration.
	Strategy pulumi.StringOutput `pulumi:"strategy"`
	// Name of the tenant for this SCIM configuration.
	TenantName pulumi.StringOutput `pulumi:"tenantName"`
	// User ID attribute for generation unique of user ids. If `userIdAttribute` is set, `mapping` must be set as well. Defaults to `userName` for SAML connections and `externalId` for OIDC connections.
	UserIdAttribute pulumi.StringOutput `pulumi:"userIdAttribute"`
}

// NewConnectionScimConfiguration registers a new resource with the given unique name, arguments, and options.
func NewConnectionScimConfiguration(ctx *pulumi.Context,
	name string, args *ConnectionScimConfigurationArgs, opts ...pulumi.ResourceOption) (*ConnectionScimConfiguration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConnectionId == nil {
		return nil, errors.New("invalid value for required argument 'ConnectionId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ConnectionScimConfiguration
	err := ctx.RegisterResource("auth0:index/connectionScimConfiguration:ConnectionScimConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConnectionScimConfiguration gets an existing ConnectionScimConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConnectionScimConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConnectionScimConfigurationState, opts ...pulumi.ResourceOption) (*ConnectionScimConfiguration, error) {
	var resource ConnectionScimConfiguration
	err := ctx.ReadResource("auth0:index/connectionScimConfiguration:ConnectionScimConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConnectionScimConfiguration resources.
type connectionScimConfigurationState struct {
	// ID of the connection for this SCIM configuration.
	ConnectionId *string `pulumi:"connectionId"`
	// Name of the connection for this SCIM configuration.
	ConnectionName *string `pulumi:"connectionName"`
	// Mapping between Auth0 attributes and SCIM attributes. If `userIdAttribute` is set, `mapping` must be set as well.
	Mappings []ConnectionScimConfigurationMapping `pulumi:"mappings"`
	// Schema of the connection for this SCIM configuration.
	Strategy *string `pulumi:"strategy"`
	// Name of the tenant for this SCIM configuration.
	TenantName *string `pulumi:"tenantName"`
	// User ID attribute for generation unique of user ids. If `userIdAttribute` is set, `mapping` must be set as well. Defaults to `userName` for SAML connections and `externalId` for OIDC connections.
	UserIdAttribute *string `pulumi:"userIdAttribute"`
}

type ConnectionScimConfigurationState struct {
	// ID of the connection for this SCIM configuration.
	ConnectionId pulumi.StringPtrInput
	// Name of the connection for this SCIM configuration.
	ConnectionName pulumi.StringPtrInput
	// Mapping between Auth0 attributes and SCIM attributes. If `userIdAttribute` is set, `mapping` must be set as well.
	Mappings ConnectionScimConfigurationMappingArrayInput
	// Schema of the connection for this SCIM configuration.
	Strategy pulumi.StringPtrInput
	// Name of the tenant for this SCIM configuration.
	TenantName pulumi.StringPtrInput
	// User ID attribute for generation unique of user ids. If `userIdAttribute` is set, `mapping` must be set as well. Defaults to `userName` for SAML connections and `externalId` for OIDC connections.
	UserIdAttribute pulumi.StringPtrInput
}

func (ConnectionScimConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*connectionScimConfigurationState)(nil)).Elem()
}

type connectionScimConfigurationArgs struct {
	// ID of the connection for this SCIM configuration.
	ConnectionId string `pulumi:"connectionId"`
	// Mapping between Auth0 attributes and SCIM attributes. If `userIdAttribute` is set, `mapping` must be set as well.
	Mappings []ConnectionScimConfigurationMapping `pulumi:"mappings"`
	// User ID attribute for generation unique of user ids. If `userIdAttribute` is set, `mapping` must be set as well. Defaults to `userName` for SAML connections and `externalId` for OIDC connections.
	UserIdAttribute *string `pulumi:"userIdAttribute"`
}

// The set of arguments for constructing a ConnectionScimConfiguration resource.
type ConnectionScimConfigurationArgs struct {
	// ID of the connection for this SCIM configuration.
	ConnectionId pulumi.StringInput
	// Mapping between Auth0 attributes and SCIM attributes. If `userIdAttribute` is set, `mapping` must be set as well.
	Mappings ConnectionScimConfigurationMappingArrayInput
	// User ID attribute for generation unique of user ids. If `userIdAttribute` is set, `mapping` must be set as well. Defaults to `userName` for SAML connections and `externalId` for OIDC connections.
	UserIdAttribute pulumi.StringPtrInput
}

func (ConnectionScimConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*connectionScimConfigurationArgs)(nil)).Elem()
}

type ConnectionScimConfigurationInput interface {
	pulumi.Input

	ToConnectionScimConfigurationOutput() ConnectionScimConfigurationOutput
	ToConnectionScimConfigurationOutputWithContext(ctx context.Context) ConnectionScimConfigurationOutput
}

func (*ConnectionScimConfiguration) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionScimConfiguration)(nil)).Elem()
}

func (i *ConnectionScimConfiguration) ToConnectionScimConfigurationOutput() ConnectionScimConfigurationOutput {
	return i.ToConnectionScimConfigurationOutputWithContext(context.Background())
}

func (i *ConnectionScimConfiguration) ToConnectionScimConfigurationOutputWithContext(ctx context.Context) ConnectionScimConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionScimConfigurationOutput)
}

// ConnectionScimConfigurationArrayInput is an input type that accepts ConnectionScimConfigurationArray and ConnectionScimConfigurationArrayOutput values.
// You can construct a concrete instance of `ConnectionScimConfigurationArrayInput` via:
//
//	ConnectionScimConfigurationArray{ ConnectionScimConfigurationArgs{...} }
type ConnectionScimConfigurationArrayInput interface {
	pulumi.Input

	ToConnectionScimConfigurationArrayOutput() ConnectionScimConfigurationArrayOutput
	ToConnectionScimConfigurationArrayOutputWithContext(context.Context) ConnectionScimConfigurationArrayOutput
}

type ConnectionScimConfigurationArray []ConnectionScimConfigurationInput

func (ConnectionScimConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConnectionScimConfiguration)(nil)).Elem()
}

func (i ConnectionScimConfigurationArray) ToConnectionScimConfigurationArrayOutput() ConnectionScimConfigurationArrayOutput {
	return i.ToConnectionScimConfigurationArrayOutputWithContext(context.Background())
}

func (i ConnectionScimConfigurationArray) ToConnectionScimConfigurationArrayOutputWithContext(ctx context.Context) ConnectionScimConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionScimConfigurationArrayOutput)
}

// ConnectionScimConfigurationMapInput is an input type that accepts ConnectionScimConfigurationMap and ConnectionScimConfigurationMapOutput values.
// You can construct a concrete instance of `ConnectionScimConfigurationMapInput` via:
//
//	ConnectionScimConfigurationMap{ "key": ConnectionScimConfigurationArgs{...} }
type ConnectionScimConfigurationMapInput interface {
	pulumi.Input

	ToConnectionScimConfigurationMapOutput() ConnectionScimConfigurationMapOutput
	ToConnectionScimConfigurationMapOutputWithContext(context.Context) ConnectionScimConfigurationMapOutput
}

type ConnectionScimConfigurationMap map[string]ConnectionScimConfigurationInput

func (ConnectionScimConfigurationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConnectionScimConfiguration)(nil)).Elem()
}

func (i ConnectionScimConfigurationMap) ToConnectionScimConfigurationMapOutput() ConnectionScimConfigurationMapOutput {
	return i.ToConnectionScimConfigurationMapOutputWithContext(context.Background())
}

func (i ConnectionScimConfigurationMap) ToConnectionScimConfigurationMapOutputWithContext(ctx context.Context) ConnectionScimConfigurationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionScimConfigurationMapOutput)
}

type ConnectionScimConfigurationOutput struct{ *pulumi.OutputState }

func (ConnectionScimConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionScimConfiguration)(nil)).Elem()
}

func (o ConnectionScimConfigurationOutput) ToConnectionScimConfigurationOutput() ConnectionScimConfigurationOutput {
	return o
}

func (o ConnectionScimConfigurationOutput) ToConnectionScimConfigurationOutputWithContext(ctx context.Context) ConnectionScimConfigurationOutput {
	return o
}

// ID of the connection for this SCIM configuration.
func (o ConnectionScimConfigurationOutput) ConnectionId() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectionScimConfiguration) pulumi.StringOutput { return v.ConnectionId }).(pulumi.StringOutput)
}

// Name of the connection for this SCIM configuration.
func (o ConnectionScimConfigurationOutput) ConnectionName() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectionScimConfiguration) pulumi.StringOutput { return v.ConnectionName }).(pulumi.StringOutput)
}

// Mapping between Auth0 attributes and SCIM attributes. If `userIdAttribute` is set, `mapping` must be set as well.
func (o ConnectionScimConfigurationOutput) Mappings() ConnectionScimConfigurationMappingArrayOutput {
	return o.ApplyT(func(v *ConnectionScimConfiguration) ConnectionScimConfigurationMappingArrayOutput { return v.Mappings }).(ConnectionScimConfigurationMappingArrayOutput)
}

// Schema of the connection for this SCIM configuration.
func (o ConnectionScimConfigurationOutput) Strategy() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectionScimConfiguration) pulumi.StringOutput { return v.Strategy }).(pulumi.StringOutput)
}

// Name of the tenant for this SCIM configuration.
func (o ConnectionScimConfigurationOutput) TenantName() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectionScimConfiguration) pulumi.StringOutput { return v.TenantName }).(pulumi.StringOutput)
}

// User ID attribute for generation unique of user ids. If `userIdAttribute` is set, `mapping` must be set as well. Defaults to `userName` for SAML connections and `externalId` for OIDC connections.
func (o ConnectionScimConfigurationOutput) UserIdAttribute() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectionScimConfiguration) pulumi.StringOutput { return v.UserIdAttribute }).(pulumi.StringOutput)
}

type ConnectionScimConfigurationArrayOutput struct{ *pulumi.OutputState }

func (ConnectionScimConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConnectionScimConfiguration)(nil)).Elem()
}

func (o ConnectionScimConfigurationArrayOutput) ToConnectionScimConfigurationArrayOutput() ConnectionScimConfigurationArrayOutput {
	return o
}

func (o ConnectionScimConfigurationArrayOutput) ToConnectionScimConfigurationArrayOutputWithContext(ctx context.Context) ConnectionScimConfigurationArrayOutput {
	return o
}

func (o ConnectionScimConfigurationArrayOutput) Index(i pulumi.IntInput) ConnectionScimConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ConnectionScimConfiguration {
		return vs[0].([]*ConnectionScimConfiguration)[vs[1].(int)]
	}).(ConnectionScimConfigurationOutput)
}

type ConnectionScimConfigurationMapOutput struct{ *pulumi.OutputState }

func (ConnectionScimConfigurationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConnectionScimConfiguration)(nil)).Elem()
}

func (o ConnectionScimConfigurationMapOutput) ToConnectionScimConfigurationMapOutput() ConnectionScimConfigurationMapOutput {
	return o
}

func (o ConnectionScimConfigurationMapOutput) ToConnectionScimConfigurationMapOutputWithContext(ctx context.Context) ConnectionScimConfigurationMapOutput {
	return o
}

func (o ConnectionScimConfigurationMapOutput) MapIndex(k pulumi.StringInput) ConnectionScimConfigurationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ConnectionScimConfiguration {
		return vs[0].(map[string]*ConnectionScimConfiguration)[vs[1].(string)]
	}).(ConnectionScimConfigurationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionScimConfigurationInput)(nil)).Elem(), &ConnectionScimConfiguration{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionScimConfigurationArrayInput)(nil)).Elem(), ConnectionScimConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionScimConfigurationMapInput)(nil)).Elem(), ConnectionScimConfigurationMap{})
	pulumi.RegisterOutputType(ConnectionScimConfigurationOutput{})
	pulumi.RegisterOutputType(ConnectionScimConfigurationArrayOutput{})
	pulumi.RegisterOutputType(ConnectionScimConfigurationMapOutput{})
}
