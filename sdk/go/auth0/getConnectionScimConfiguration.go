// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package auth0

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-auth0/sdk/v3/go/auth0/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Data source to retrieve a SCIM configuration for an Auth0 connection by `connectionId`.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-auth0/sdk/v3/go/auth0"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			myEnterpriseConnection, err := auth0.NewConnection(ctx, "my_enterprise_connection", &auth0.ConnectionArgs{
//				Name:        pulumi.String("my-enterprise-connection"),
//				DisplayName: pulumi.String("My Enterprise Connection"),
//				Strategy:    pulumi.String("okta"),
//				Options: &auth0.ConnectionOptionsArgs{
//					ClientId:              pulumi.String("1234567"),
//					ClientSecret:          pulumi.String("1234567"),
//					Issuer:                pulumi.String("https://example.okta.com"),
//					JwksUri:               pulumi.String("https://example.okta.com/oauth2/v1/keys"),
//					TokenEndpoint:         pulumi.String("https://example.okta.com/oauth2/v1/token"),
//					AuthorizationEndpoint: pulumi.String("https://example.okta.com/oauth2/v1/authorize"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			myConnScimConfiguration, err := auth0.NewConnectionScimConfiguration(ctx, "my_conn_scim_configuration", &auth0.ConnectionScimConfigurationArgs{
//				ConnectionId: myEnterpriseConnection.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			// A data source for an Auth0 Connection SCIM Configuration.
//			_ = auth0.LookupConnectionScimConfigurationOutput(ctx, auth0.GetConnectionScimConfigurationOutputArgs{
//				ConnectionId: myConnScimConfiguration.ID(),
//			}, nil)
//			return nil
//		})
//	}
//
// ```
func LookupConnectionScimConfiguration(ctx *pulumi.Context, args *LookupConnectionScimConfigurationArgs, opts ...pulumi.InvokeOption) (*LookupConnectionScimConfigurationResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupConnectionScimConfigurationResult
	err := ctx.Invoke("auth0:index/getConnectionScimConfiguration:getConnectionScimConfiguration", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getConnectionScimConfiguration.
type LookupConnectionScimConfigurationArgs struct {
	// ID of the connection for this SCIM configuration.
	ConnectionId string `pulumi:"connectionId"`
	// Default mapping between Auth0 attributes and SCIM attributes for this connection type.
	DefaultMappings []GetConnectionScimConfigurationDefaultMapping `pulumi:"defaultMappings"`
	// Mapping between Auth0 attributes and SCIM attributes.
	Mappings []GetConnectionScimConfigurationMapping `pulumi:"mappings"`
}

// A collection of values returned by getConnectionScimConfiguration.
type LookupConnectionScimConfigurationResult struct {
	// ID of the connection for this SCIM configuration.
	ConnectionId string `pulumi:"connectionId"`
	// Name of the connection for this SCIM configuration.
	ConnectionName string `pulumi:"connectionName"`
	// Default mapping between Auth0 attributes and SCIM attributes for this connection type.
	DefaultMappings []GetConnectionScimConfigurationDefaultMapping `pulumi:"defaultMappings"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Mapping between Auth0 attributes and SCIM attributes.
	Mappings []GetConnectionScimConfigurationMapping `pulumi:"mappings"`
	// Schema of the connection for this SCIM configuration.
	Strategy string `pulumi:"strategy"`
	// Name of the tenant for this SCIM configuration.
	TenantName string `pulumi:"tenantName"`
	// User ID attribute for generation unique of user ids.
	UserIdAttribute string `pulumi:"userIdAttribute"`
}

func LookupConnectionScimConfigurationOutput(ctx *pulumi.Context, args LookupConnectionScimConfigurationOutputArgs, opts ...pulumi.InvokeOption) LookupConnectionScimConfigurationResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupConnectionScimConfigurationResult, error) {
			args := v.(LookupConnectionScimConfigurationArgs)
			r, err := LookupConnectionScimConfiguration(ctx, &args, opts...)
			var s LookupConnectionScimConfigurationResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupConnectionScimConfigurationResultOutput)
}

// A collection of arguments for invoking getConnectionScimConfiguration.
type LookupConnectionScimConfigurationOutputArgs struct {
	// ID of the connection for this SCIM configuration.
	ConnectionId pulumi.StringInput `pulumi:"connectionId"`
	// Default mapping between Auth0 attributes and SCIM attributes for this connection type.
	DefaultMappings GetConnectionScimConfigurationDefaultMappingArrayInput `pulumi:"defaultMappings"`
	// Mapping between Auth0 attributes and SCIM attributes.
	Mappings GetConnectionScimConfigurationMappingArrayInput `pulumi:"mappings"`
}

func (LookupConnectionScimConfigurationOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupConnectionScimConfigurationArgs)(nil)).Elem()
}

// A collection of values returned by getConnectionScimConfiguration.
type LookupConnectionScimConfigurationResultOutput struct{ *pulumi.OutputState }

func (LookupConnectionScimConfigurationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupConnectionScimConfigurationResult)(nil)).Elem()
}

func (o LookupConnectionScimConfigurationResultOutput) ToLookupConnectionScimConfigurationResultOutput() LookupConnectionScimConfigurationResultOutput {
	return o
}

func (o LookupConnectionScimConfigurationResultOutput) ToLookupConnectionScimConfigurationResultOutputWithContext(ctx context.Context) LookupConnectionScimConfigurationResultOutput {
	return o
}

// ID of the connection for this SCIM configuration.
func (o LookupConnectionScimConfigurationResultOutput) ConnectionId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectionScimConfigurationResult) string { return v.ConnectionId }).(pulumi.StringOutput)
}

// Name of the connection for this SCIM configuration.
func (o LookupConnectionScimConfigurationResultOutput) ConnectionName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectionScimConfigurationResult) string { return v.ConnectionName }).(pulumi.StringOutput)
}

// Default mapping between Auth0 attributes and SCIM attributes for this connection type.
func (o LookupConnectionScimConfigurationResultOutput) DefaultMappings() GetConnectionScimConfigurationDefaultMappingArrayOutput {
	return o.ApplyT(func(v LookupConnectionScimConfigurationResult) []GetConnectionScimConfigurationDefaultMapping {
		return v.DefaultMappings
	}).(GetConnectionScimConfigurationDefaultMappingArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupConnectionScimConfigurationResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectionScimConfigurationResult) string { return v.Id }).(pulumi.StringOutput)
}

// Mapping between Auth0 attributes and SCIM attributes.
func (o LookupConnectionScimConfigurationResultOutput) Mappings() GetConnectionScimConfigurationMappingArrayOutput {
	return o.ApplyT(func(v LookupConnectionScimConfigurationResult) []GetConnectionScimConfigurationMapping {
		return v.Mappings
	}).(GetConnectionScimConfigurationMappingArrayOutput)
}

// Schema of the connection for this SCIM configuration.
func (o LookupConnectionScimConfigurationResultOutput) Strategy() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectionScimConfigurationResult) string { return v.Strategy }).(pulumi.StringOutput)
}

// Name of the tenant for this SCIM configuration.
func (o LookupConnectionScimConfigurationResultOutput) TenantName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectionScimConfigurationResult) string { return v.TenantName }).(pulumi.StringOutput)
}

// User ID attribute for generation unique of user ids.
func (o LookupConnectionScimConfigurationResultOutput) UserIdAttribute() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectionScimConfigurationResult) string { return v.UserIdAttribute }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupConnectionScimConfigurationResultOutput{})
}
