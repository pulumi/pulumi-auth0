// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package auth0

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-auth0/sdk/v3/go/auth0/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing general Risk Assessment settings.
type RiskAssessments struct {
	pulumi.CustomResourceState

	// Whether risk assessment is enabled or not.
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
}

// NewRiskAssessments registers a new resource with the given unique name, arguments, and options.
func NewRiskAssessments(ctx *pulumi.Context,
	name string, args *RiskAssessmentsArgs, opts ...pulumi.ResourceOption) (*RiskAssessments, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RiskAssessments
	err := ctx.RegisterResource("auth0:index/riskAssessments:RiskAssessments", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRiskAssessments gets an existing RiskAssessments resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRiskAssessments(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RiskAssessmentsState, opts ...pulumi.ResourceOption) (*RiskAssessments, error) {
	var resource RiskAssessments
	err := ctx.ReadResource("auth0:index/riskAssessments:RiskAssessments", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RiskAssessments resources.
type riskAssessmentsState struct {
	// Whether risk assessment is enabled or not.
	Enabled *bool `pulumi:"enabled"`
}

type RiskAssessmentsState struct {
	// Whether risk assessment is enabled or not.
	Enabled pulumi.BoolPtrInput
}

func (RiskAssessmentsState) ElementType() reflect.Type {
	return reflect.TypeOf((*riskAssessmentsState)(nil)).Elem()
}

type riskAssessmentsArgs struct {
	// Whether risk assessment is enabled or not.
	Enabled bool `pulumi:"enabled"`
}

// The set of arguments for constructing a RiskAssessments resource.
type RiskAssessmentsArgs struct {
	// Whether risk assessment is enabled or not.
	Enabled pulumi.BoolInput
}

func (RiskAssessmentsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*riskAssessmentsArgs)(nil)).Elem()
}

type RiskAssessmentsInput interface {
	pulumi.Input

	ToRiskAssessmentsOutput() RiskAssessmentsOutput
	ToRiskAssessmentsOutputWithContext(ctx context.Context) RiskAssessmentsOutput
}

func (*RiskAssessments) ElementType() reflect.Type {
	return reflect.TypeOf((**RiskAssessments)(nil)).Elem()
}

func (i *RiskAssessments) ToRiskAssessmentsOutput() RiskAssessmentsOutput {
	return i.ToRiskAssessmentsOutputWithContext(context.Background())
}

func (i *RiskAssessments) ToRiskAssessmentsOutputWithContext(ctx context.Context) RiskAssessmentsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RiskAssessmentsOutput)
}

// RiskAssessmentsArrayInput is an input type that accepts RiskAssessmentsArray and RiskAssessmentsArrayOutput values.
// You can construct a concrete instance of `RiskAssessmentsArrayInput` via:
//
//	RiskAssessmentsArray{ RiskAssessmentsArgs{...} }
type RiskAssessmentsArrayInput interface {
	pulumi.Input

	ToRiskAssessmentsArrayOutput() RiskAssessmentsArrayOutput
	ToRiskAssessmentsArrayOutputWithContext(context.Context) RiskAssessmentsArrayOutput
}

type RiskAssessmentsArray []RiskAssessmentsInput

func (RiskAssessmentsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RiskAssessments)(nil)).Elem()
}

func (i RiskAssessmentsArray) ToRiskAssessmentsArrayOutput() RiskAssessmentsArrayOutput {
	return i.ToRiskAssessmentsArrayOutputWithContext(context.Background())
}

func (i RiskAssessmentsArray) ToRiskAssessmentsArrayOutputWithContext(ctx context.Context) RiskAssessmentsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RiskAssessmentsArrayOutput)
}

// RiskAssessmentsMapInput is an input type that accepts RiskAssessmentsMap and RiskAssessmentsMapOutput values.
// You can construct a concrete instance of `RiskAssessmentsMapInput` via:
//
//	RiskAssessmentsMap{ "key": RiskAssessmentsArgs{...} }
type RiskAssessmentsMapInput interface {
	pulumi.Input

	ToRiskAssessmentsMapOutput() RiskAssessmentsMapOutput
	ToRiskAssessmentsMapOutputWithContext(context.Context) RiskAssessmentsMapOutput
}

type RiskAssessmentsMap map[string]RiskAssessmentsInput

func (RiskAssessmentsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RiskAssessments)(nil)).Elem()
}

func (i RiskAssessmentsMap) ToRiskAssessmentsMapOutput() RiskAssessmentsMapOutput {
	return i.ToRiskAssessmentsMapOutputWithContext(context.Background())
}

func (i RiskAssessmentsMap) ToRiskAssessmentsMapOutputWithContext(ctx context.Context) RiskAssessmentsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RiskAssessmentsMapOutput)
}

type RiskAssessmentsOutput struct{ *pulumi.OutputState }

func (RiskAssessmentsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RiskAssessments)(nil)).Elem()
}

func (o RiskAssessmentsOutput) ToRiskAssessmentsOutput() RiskAssessmentsOutput {
	return o
}

func (o RiskAssessmentsOutput) ToRiskAssessmentsOutputWithContext(ctx context.Context) RiskAssessmentsOutput {
	return o
}

// Whether risk assessment is enabled or not.
func (o RiskAssessmentsOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *RiskAssessments) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

type RiskAssessmentsArrayOutput struct{ *pulumi.OutputState }

func (RiskAssessmentsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RiskAssessments)(nil)).Elem()
}

func (o RiskAssessmentsArrayOutput) ToRiskAssessmentsArrayOutput() RiskAssessmentsArrayOutput {
	return o
}

func (o RiskAssessmentsArrayOutput) ToRiskAssessmentsArrayOutputWithContext(ctx context.Context) RiskAssessmentsArrayOutput {
	return o
}

func (o RiskAssessmentsArrayOutput) Index(i pulumi.IntInput) RiskAssessmentsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RiskAssessments {
		return vs[0].([]*RiskAssessments)[vs[1].(int)]
	}).(RiskAssessmentsOutput)
}

type RiskAssessmentsMapOutput struct{ *pulumi.OutputState }

func (RiskAssessmentsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RiskAssessments)(nil)).Elem()
}

func (o RiskAssessmentsMapOutput) ToRiskAssessmentsMapOutput() RiskAssessmentsMapOutput {
	return o
}

func (o RiskAssessmentsMapOutput) ToRiskAssessmentsMapOutputWithContext(ctx context.Context) RiskAssessmentsMapOutput {
	return o
}

func (o RiskAssessmentsMapOutput) MapIndex(k pulumi.StringInput) RiskAssessmentsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RiskAssessments {
		return vs[0].(map[string]*RiskAssessments)[vs[1].(string)]
	}).(RiskAssessmentsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RiskAssessmentsInput)(nil)).Elem(), &RiskAssessments{})
	pulumi.RegisterInputType(reflect.TypeOf((*RiskAssessmentsArrayInput)(nil)).Elem(), RiskAssessmentsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RiskAssessmentsMapInput)(nil)).Elem(), RiskAssessmentsMap{})
	pulumi.RegisterOutputType(RiskAssessmentsOutput{})
	pulumi.RegisterOutputType(RiskAssessmentsArrayOutput{})
	pulumi.RegisterOutputType(RiskAssessmentsMapOutput{})
}
