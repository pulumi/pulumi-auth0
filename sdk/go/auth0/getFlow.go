// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package auth0

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-auth0/sdk/v3/go/auth0/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Data source to retrieve a specific Auth0 Flow by `id`
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-auth0/sdk/v3/go/auth0"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// An Auth0 flow loaded using its ID.
//			_, err := auth0.LookupFlow(ctx, &auth0.LookupFlowArgs{
//				Id: "af_5CTYdsXHLoLXD7ZVwvFHew",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupFlow(ctx *pulumi.Context, args *LookupFlowArgs, opts ...pulumi.InvokeOption) (*LookupFlowResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupFlowResult
	err := ctx.Invoke("auth0:index/getFlow:getFlow", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getFlow.
type LookupFlowArgs struct {
	// The id of the Flow.
	Id string `pulumi:"id"`
}

// A collection of values returned by getFlow.
type LookupFlowResult struct {
	// Actions of the flow.
	Actions string `pulumi:"actions"`
	// The id of the Flow.
	Id string `pulumi:"id"`
	// Name of the flow.
	Name string `pulumi:"name"`
}

func LookupFlowOutput(ctx *pulumi.Context, args LookupFlowOutputArgs, opts ...pulumi.InvokeOption) LookupFlowResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupFlowResultOutput, error) {
			args := v.(LookupFlowArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("auth0:index/getFlow:getFlow", args, LookupFlowResultOutput{}, options).(LookupFlowResultOutput), nil
		}).(LookupFlowResultOutput)
}

// A collection of arguments for invoking getFlow.
type LookupFlowOutputArgs struct {
	// The id of the Flow.
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupFlowOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupFlowArgs)(nil)).Elem()
}

// A collection of values returned by getFlow.
type LookupFlowResultOutput struct{ *pulumi.OutputState }

func (LookupFlowResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupFlowResult)(nil)).Elem()
}

func (o LookupFlowResultOutput) ToLookupFlowResultOutput() LookupFlowResultOutput {
	return o
}

func (o LookupFlowResultOutput) ToLookupFlowResultOutputWithContext(ctx context.Context) LookupFlowResultOutput {
	return o
}

// Actions of the flow.
func (o LookupFlowResultOutput) Actions() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFlowResult) string { return v.Actions }).(pulumi.StringOutput)
}

// The id of the Flow.
func (o LookupFlowResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFlowResult) string { return v.Id }).(pulumi.StringOutput)
}

// Name of the flow.
func (o LookupFlowResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFlowResult) string { return v.Name }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupFlowResultOutput{})
}
