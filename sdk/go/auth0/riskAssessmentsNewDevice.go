// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package auth0

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-auth0/sdk/v3/go/auth0/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing Risk Assessment settings for new devices.
type RiskAssessmentsNewDevice struct {
	pulumi.CustomResourceState

	// Length of time to remember devices for, in days
	RememberFor pulumi.IntOutput `pulumi:"rememberFor"`
}

// NewRiskAssessmentsNewDevice registers a new resource with the given unique name, arguments, and options.
func NewRiskAssessmentsNewDevice(ctx *pulumi.Context,
	name string, args *RiskAssessmentsNewDeviceArgs, opts ...pulumi.ResourceOption) (*RiskAssessmentsNewDevice, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RememberFor == nil {
		return nil, errors.New("invalid value for required argument 'RememberFor'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RiskAssessmentsNewDevice
	err := ctx.RegisterResource("auth0:index/riskAssessmentsNewDevice:RiskAssessmentsNewDevice", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRiskAssessmentsNewDevice gets an existing RiskAssessmentsNewDevice resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRiskAssessmentsNewDevice(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RiskAssessmentsNewDeviceState, opts ...pulumi.ResourceOption) (*RiskAssessmentsNewDevice, error) {
	var resource RiskAssessmentsNewDevice
	err := ctx.ReadResource("auth0:index/riskAssessmentsNewDevice:RiskAssessmentsNewDevice", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RiskAssessmentsNewDevice resources.
type riskAssessmentsNewDeviceState struct {
	// Length of time to remember devices for, in days
	RememberFor *int `pulumi:"rememberFor"`
}

type RiskAssessmentsNewDeviceState struct {
	// Length of time to remember devices for, in days
	RememberFor pulumi.IntPtrInput
}

func (RiskAssessmentsNewDeviceState) ElementType() reflect.Type {
	return reflect.TypeOf((*riskAssessmentsNewDeviceState)(nil)).Elem()
}

type riskAssessmentsNewDeviceArgs struct {
	// Length of time to remember devices for, in days
	RememberFor int `pulumi:"rememberFor"`
}

// The set of arguments for constructing a RiskAssessmentsNewDevice resource.
type RiskAssessmentsNewDeviceArgs struct {
	// Length of time to remember devices for, in days
	RememberFor pulumi.IntInput
}

func (RiskAssessmentsNewDeviceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*riskAssessmentsNewDeviceArgs)(nil)).Elem()
}

type RiskAssessmentsNewDeviceInput interface {
	pulumi.Input

	ToRiskAssessmentsNewDeviceOutput() RiskAssessmentsNewDeviceOutput
	ToRiskAssessmentsNewDeviceOutputWithContext(ctx context.Context) RiskAssessmentsNewDeviceOutput
}

func (*RiskAssessmentsNewDevice) ElementType() reflect.Type {
	return reflect.TypeOf((**RiskAssessmentsNewDevice)(nil)).Elem()
}

func (i *RiskAssessmentsNewDevice) ToRiskAssessmentsNewDeviceOutput() RiskAssessmentsNewDeviceOutput {
	return i.ToRiskAssessmentsNewDeviceOutputWithContext(context.Background())
}

func (i *RiskAssessmentsNewDevice) ToRiskAssessmentsNewDeviceOutputWithContext(ctx context.Context) RiskAssessmentsNewDeviceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RiskAssessmentsNewDeviceOutput)
}

// RiskAssessmentsNewDeviceArrayInput is an input type that accepts RiskAssessmentsNewDeviceArray and RiskAssessmentsNewDeviceArrayOutput values.
// You can construct a concrete instance of `RiskAssessmentsNewDeviceArrayInput` via:
//
//	RiskAssessmentsNewDeviceArray{ RiskAssessmentsNewDeviceArgs{...} }
type RiskAssessmentsNewDeviceArrayInput interface {
	pulumi.Input

	ToRiskAssessmentsNewDeviceArrayOutput() RiskAssessmentsNewDeviceArrayOutput
	ToRiskAssessmentsNewDeviceArrayOutputWithContext(context.Context) RiskAssessmentsNewDeviceArrayOutput
}

type RiskAssessmentsNewDeviceArray []RiskAssessmentsNewDeviceInput

func (RiskAssessmentsNewDeviceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RiskAssessmentsNewDevice)(nil)).Elem()
}

func (i RiskAssessmentsNewDeviceArray) ToRiskAssessmentsNewDeviceArrayOutput() RiskAssessmentsNewDeviceArrayOutput {
	return i.ToRiskAssessmentsNewDeviceArrayOutputWithContext(context.Background())
}

func (i RiskAssessmentsNewDeviceArray) ToRiskAssessmentsNewDeviceArrayOutputWithContext(ctx context.Context) RiskAssessmentsNewDeviceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RiskAssessmentsNewDeviceArrayOutput)
}

// RiskAssessmentsNewDeviceMapInput is an input type that accepts RiskAssessmentsNewDeviceMap and RiskAssessmentsNewDeviceMapOutput values.
// You can construct a concrete instance of `RiskAssessmentsNewDeviceMapInput` via:
//
//	RiskAssessmentsNewDeviceMap{ "key": RiskAssessmentsNewDeviceArgs{...} }
type RiskAssessmentsNewDeviceMapInput interface {
	pulumi.Input

	ToRiskAssessmentsNewDeviceMapOutput() RiskAssessmentsNewDeviceMapOutput
	ToRiskAssessmentsNewDeviceMapOutputWithContext(context.Context) RiskAssessmentsNewDeviceMapOutput
}

type RiskAssessmentsNewDeviceMap map[string]RiskAssessmentsNewDeviceInput

func (RiskAssessmentsNewDeviceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RiskAssessmentsNewDevice)(nil)).Elem()
}

func (i RiskAssessmentsNewDeviceMap) ToRiskAssessmentsNewDeviceMapOutput() RiskAssessmentsNewDeviceMapOutput {
	return i.ToRiskAssessmentsNewDeviceMapOutputWithContext(context.Background())
}

func (i RiskAssessmentsNewDeviceMap) ToRiskAssessmentsNewDeviceMapOutputWithContext(ctx context.Context) RiskAssessmentsNewDeviceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RiskAssessmentsNewDeviceMapOutput)
}

type RiskAssessmentsNewDeviceOutput struct{ *pulumi.OutputState }

func (RiskAssessmentsNewDeviceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RiskAssessmentsNewDevice)(nil)).Elem()
}

func (o RiskAssessmentsNewDeviceOutput) ToRiskAssessmentsNewDeviceOutput() RiskAssessmentsNewDeviceOutput {
	return o
}

func (o RiskAssessmentsNewDeviceOutput) ToRiskAssessmentsNewDeviceOutputWithContext(ctx context.Context) RiskAssessmentsNewDeviceOutput {
	return o
}

// Length of time to remember devices for, in days
func (o RiskAssessmentsNewDeviceOutput) RememberFor() pulumi.IntOutput {
	return o.ApplyT(func(v *RiskAssessmentsNewDevice) pulumi.IntOutput { return v.RememberFor }).(pulumi.IntOutput)
}

type RiskAssessmentsNewDeviceArrayOutput struct{ *pulumi.OutputState }

func (RiskAssessmentsNewDeviceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RiskAssessmentsNewDevice)(nil)).Elem()
}

func (o RiskAssessmentsNewDeviceArrayOutput) ToRiskAssessmentsNewDeviceArrayOutput() RiskAssessmentsNewDeviceArrayOutput {
	return o
}

func (o RiskAssessmentsNewDeviceArrayOutput) ToRiskAssessmentsNewDeviceArrayOutputWithContext(ctx context.Context) RiskAssessmentsNewDeviceArrayOutput {
	return o
}

func (o RiskAssessmentsNewDeviceArrayOutput) Index(i pulumi.IntInput) RiskAssessmentsNewDeviceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RiskAssessmentsNewDevice {
		return vs[0].([]*RiskAssessmentsNewDevice)[vs[1].(int)]
	}).(RiskAssessmentsNewDeviceOutput)
}

type RiskAssessmentsNewDeviceMapOutput struct{ *pulumi.OutputState }

func (RiskAssessmentsNewDeviceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RiskAssessmentsNewDevice)(nil)).Elem()
}

func (o RiskAssessmentsNewDeviceMapOutput) ToRiskAssessmentsNewDeviceMapOutput() RiskAssessmentsNewDeviceMapOutput {
	return o
}

func (o RiskAssessmentsNewDeviceMapOutput) ToRiskAssessmentsNewDeviceMapOutputWithContext(ctx context.Context) RiskAssessmentsNewDeviceMapOutput {
	return o
}

func (o RiskAssessmentsNewDeviceMapOutput) MapIndex(k pulumi.StringInput) RiskAssessmentsNewDeviceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RiskAssessmentsNewDevice {
		return vs[0].(map[string]*RiskAssessmentsNewDevice)[vs[1].(string)]
	}).(RiskAssessmentsNewDeviceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RiskAssessmentsNewDeviceInput)(nil)).Elem(), &RiskAssessmentsNewDevice{})
	pulumi.RegisterInputType(reflect.TypeOf((*RiskAssessmentsNewDeviceArrayInput)(nil)).Elem(), RiskAssessmentsNewDeviceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RiskAssessmentsNewDeviceMapInput)(nil)).Elem(), RiskAssessmentsNewDeviceMap{})
	pulumi.RegisterOutputType(RiskAssessmentsNewDeviceOutput{})
	pulumi.RegisterOutputType(RiskAssessmentsNewDeviceArrayOutput{})
	pulumi.RegisterOutputType(RiskAssessmentsNewDeviceMapOutput{})
}
