// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package auth0

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-auth0/sdk/v3/go/auth0/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Data source to retrieve a specific Auth0 action by `name`.
func LookupAction(ctx *pulumi.Context, args *LookupActionArgs, opts ...pulumi.InvokeOption) (*LookupActionResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupActionResult
	err := ctx.Invoke("auth0:index/getAction:getAction", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAction.
type LookupActionArgs struct {
	// The ID of the action. If not provided, `name` must be set.
	Id *string `pulumi:"id"`
	// The name of the action. If not provided, `id` must be set.
	Name *string `pulumi:"name"`
}

// A collection of values returned by getAction.
type LookupActionResult struct {
	// The source code of the action.
	Code string `pulumi:"code"`
	// List of third party npm modules, and their versions, that this action depends on.
	Dependencies []GetActionDependency `pulumi:"dependencies"`
	// Deploying an action will create a new immutable version of the action. If the action is currently bound to a trigger, then the system will begin executing the newly deployed version of the action immediately.
	Deploy bool `pulumi:"deploy"`
	// The ID of the action. If not provided, `name` must be set.
	Id *string `pulumi:"id"`
	// The name of the action. If not provided, `id` must be set.
	Name *string `pulumi:"name"`
	// The Node runtime. Possible values are: `node12`, `node16` (not recommended), `node18`, `node22`
	Runtime string `pulumi:"runtime"`
	// List of secrets that are included in an action or a version of an action. Partial management of secrets is not supported.
	Secrets []GetActionSecret `pulumi:"secrets"`
	// List of triggers that this action supports. At this time, an action can only target a single trigger at a time. Read Retrieving the set of triggers available within actions to retrieve the latest trigger versions supported.
	SupportedTriggers []GetActionSupportedTrigger `pulumi:"supportedTriggers"`
	// Version ID of the action. This value is available if `deploy` is set to true.
	VersionId string `pulumi:"versionId"`
}

func LookupActionOutput(ctx *pulumi.Context, args LookupActionOutputArgs, opts ...pulumi.InvokeOption) LookupActionResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupActionResultOutput, error) {
			args := v.(LookupActionArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("auth0:index/getAction:getAction", args, LookupActionResultOutput{}, options).(LookupActionResultOutput), nil
		}).(LookupActionResultOutput)
}

// A collection of arguments for invoking getAction.
type LookupActionOutputArgs struct {
	// The ID of the action. If not provided, `name` must be set.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The name of the action. If not provided, `id` must be set.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (LookupActionOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupActionArgs)(nil)).Elem()
}

// A collection of values returned by getAction.
type LookupActionResultOutput struct{ *pulumi.OutputState }

func (LookupActionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupActionResult)(nil)).Elem()
}

func (o LookupActionResultOutput) ToLookupActionResultOutput() LookupActionResultOutput {
	return o
}

func (o LookupActionResultOutput) ToLookupActionResultOutputWithContext(ctx context.Context) LookupActionResultOutput {
	return o
}

// The source code of the action.
func (o LookupActionResultOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v LookupActionResult) string { return v.Code }).(pulumi.StringOutput)
}

// List of third party npm modules, and their versions, that this action depends on.
func (o LookupActionResultOutput) Dependencies() GetActionDependencyArrayOutput {
	return o.ApplyT(func(v LookupActionResult) []GetActionDependency { return v.Dependencies }).(GetActionDependencyArrayOutput)
}

// Deploying an action will create a new immutable version of the action. If the action is currently bound to a trigger, then the system will begin executing the newly deployed version of the action immediately.
func (o LookupActionResultOutput) Deploy() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupActionResult) bool { return v.Deploy }).(pulumi.BoolOutput)
}

// The ID of the action. If not provided, `name` must be set.
func (o LookupActionResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupActionResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The name of the action. If not provided, `id` must be set.
func (o LookupActionResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupActionResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The Node runtime. Possible values are: `node12`, `node16` (not recommended), `node18`, `node22`
func (o LookupActionResultOutput) Runtime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupActionResult) string { return v.Runtime }).(pulumi.StringOutput)
}

// List of secrets that are included in an action or a version of an action. Partial management of secrets is not supported.
func (o LookupActionResultOutput) Secrets() GetActionSecretArrayOutput {
	return o.ApplyT(func(v LookupActionResult) []GetActionSecret { return v.Secrets }).(GetActionSecretArrayOutput)
}

// List of triggers that this action supports. At this time, an action can only target a single trigger at a time. Read Retrieving the set of triggers available within actions to retrieve the latest trigger versions supported.
func (o LookupActionResultOutput) SupportedTriggers() GetActionSupportedTriggerArrayOutput {
	return o.ApplyT(func(v LookupActionResult) []GetActionSupportedTrigger { return v.SupportedTriggers }).(GetActionSupportedTriggerArrayOutput)
}

// Version ID of the action. This value is available if `deploy` is set to true.
func (o LookupActionResultOutput) VersionId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupActionResult) string { return v.VersionId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupActionResultOutput{})
}
