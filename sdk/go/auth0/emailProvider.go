// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package auth0

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-auth0/sdk/v3/go/auth0/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// With Auth0, you can have standard welcome, password reset, and account verification email-based workflows built right into Auth0. This resource allows you to configure email providers, so you can route all emails that are part of Auth0's authentication workflows through the supported high-volume email service of your choice.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-auth0/sdk/v3/go/auth0"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := auth0.NewEmailProvider(ctx, "amazonSesEmailProvider", &auth0.EmailProviderArgs{
//				Credentials: &auth0.EmailProviderCredentialsArgs{
//					AccessKeyId:     pulumi.String("AKIAXXXXXXXXXXXXXXXX"),
//					Region:          pulumi.String("us-east-1"),
//					SecretAccessKey: pulumi.String("7e8c2148xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"),
//				},
//				DefaultFromAddress: pulumi.String("accounts@example.com"),
//				Enabled:            pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = auth0.NewEmailProvider(ctx, "sendgridEmailProvider", &auth0.EmailProviderArgs{
//				Credentials: &auth0.EmailProviderCredentialsArgs{
//					ApiKey: pulumi.String("secretAPIKey"),
//				},
//				DefaultFromAddress: pulumi.String("accounts@example.com"),
//				Enabled:            pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = auth0.NewEmailProvider(ctx, "smtpEmailProvider", &auth0.EmailProviderArgs{
//				Credentials: &auth0.EmailProviderCredentialsArgs{
//					Ms365ClientId:     pulumi.String("ms365_client_id"),
//					Ms365ClientSecret: pulumi.String("ms365_client_secret"),
//					Ms365TenantId:     pulumi.String("ms365_tenant_id"),
//				},
//				DefaultFromAddress: pulumi.String("accounts@example.com"),
//				Enabled:            pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// As this is not a resource identifiable by an ID within the Auth0 Management API, email can be imported using a random string. # We recommend [Version 4 UUID](https://www.uuidgenerator.net/version4) # Example
//
// ```sh
//
//	$ pulumi import auth0:index/emailProvider:EmailProvider my_email_provider "b4213dc2-2eed-42c3-9516-c6131a9ce0b0"
//
// ```
type EmailProvider struct {
	pulumi.CustomResourceState

	// Configuration settings for the credentials for the email provider.
	Credentials EmailProviderCredentialsOutput `pulumi:"credentials"`
	// Email address to use as the sender when no other "from" address is specified.
	DefaultFromAddress pulumi.StringOutput `pulumi:"defaultFromAddress"`
	// Indicates whether the email provider is enabled.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Name of the email provider. Options include `azureCs`, `mailgun`, `mandrill`, `ms365`, `sendgrid`, `ses`, `smtp` and `sparkpost`.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specific email provider settings.
	Settings EmailProviderSettingsOutput `pulumi:"settings"`
}

// NewEmailProvider registers a new resource with the given unique name, arguments, and options.
func NewEmailProvider(ctx *pulumi.Context,
	name string, args *EmailProviderArgs, opts ...pulumi.ResourceOption) (*EmailProvider, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Credentials == nil {
		return nil, errors.New("invalid value for required argument 'Credentials'")
	}
	if args.DefaultFromAddress == nil {
		return nil, errors.New("invalid value for required argument 'DefaultFromAddress'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EmailProvider
	err := ctx.RegisterResource("auth0:index/emailProvider:EmailProvider", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEmailProvider gets an existing EmailProvider resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEmailProvider(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EmailProviderState, opts ...pulumi.ResourceOption) (*EmailProvider, error) {
	var resource EmailProvider
	err := ctx.ReadResource("auth0:index/emailProvider:EmailProvider", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EmailProvider resources.
type emailProviderState struct {
	// Configuration settings for the credentials for the email provider.
	Credentials *EmailProviderCredentials `pulumi:"credentials"`
	// Email address to use as the sender when no other "from" address is specified.
	DefaultFromAddress *string `pulumi:"defaultFromAddress"`
	// Indicates whether the email provider is enabled.
	Enabled *bool `pulumi:"enabled"`
	// Name of the email provider. Options include `azureCs`, `mailgun`, `mandrill`, `ms365`, `sendgrid`, `ses`, `smtp` and `sparkpost`.
	Name *string `pulumi:"name"`
	// Specific email provider settings.
	Settings *EmailProviderSettings `pulumi:"settings"`
}

type EmailProviderState struct {
	// Configuration settings for the credentials for the email provider.
	Credentials EmailProviderCredentialsPtrInput
	// Email address to use as the sender when no other "from" address is specified.
	DefaultFromAddress pulumi.StringPtrInput
	// Indicates whether the email provider is enabled.
	Enabled pulumi.BoolPtrInput
	// Name of the email provider. Options include `azureCs`, `mailgun`, `mandrill`, `ms365`, `sendgrid`, `ses`, `smtp` and `sparkpost`.
	Name pulumi.StringPtrInput
	// Specific email provider settings.
	Settings EmailProviderSettingsPtrInput
}

func (EmailProviderState) ElementType() reflect.Type {
	return reflect.TypeOf((*emailProviderState)(nil)).Elem()
}

type emailProviderArgs struct {
	// Configuration settings for the credentials for the email provider.
	Credentials EmailProviderCredentials `pulumi:"credentials"`
	// Email address to use as the sender when no other "from" address is specified.
	DefaultFromAddress string `pulumi:"defaultFromAddress"`
	// Indicates whether the email provider is enabled.
	Enabled *bool `pulumi:"enabled"`
	// Name of the email provider. Options include `azureCs`, `mailgun`, `mandrill`, `ms365`, `sendgrid`, `ses`, `smtp` and `sparkpost`.
	Name *string `pulumi:"name"`
	// Specific email provider settings.
	Settings *EmailProviderSettings `pulumi:"settings"`
}

// The set of arguments for constructing a EmailProvider resource.
type EmailProviderArgs struct {
	// Configuration settings for the credentials for the email provider.
	Credentials EmailProviderCredentialsInput
	// Email address to use as the sender when no other "from" address is specified.
	DefaultFromAddress pulumi.StringInput
	// Indicates whether the email provider is enabled.
	Enabled pulumi.BoolPtrInput
	// Name of the email provider. Options include `azureCs`, `mailgun`, `mandrill`, `ms365`, `sendgrid`, `ses`, `smtp` and `sparkpost`.
	Name pulumi.StringPtrInput
	// Specific email provider settings.
	Settings EmailProviderSettingsPtrInput
}

func (EmailProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*emailProviderArgs)(nil)).Elem()
}

type EmailProviderInput interface {
	pulumi.Input

	ToEmailProviderOutput() EmailProviderOutput
	ToEmailProviderOutputWithContext(ctx context.Context) EmailProviderOutput
}

func (*EmailProvider) ElementType() reflect.Type {
	return reflect.TypeOf((**EmailProvider)(nil)).Elem()
}

func (i *EmailProvider) ToEmailProviderOutput() EmailProviderOutput {
	return i.ToEmailProviderOutputWithContext(context.Background())
}

func (i *EmailProvider) ToEmailProviderOutputWithContext(ctx context.Context) EmailProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmailProviderOutput)
}

// EmailProviderArrayInput is an input type that accepts EmailProviderArray and EmailProviderArrayOutput values.
// You can construct a concrete instance of `EmailProviderArrayInput` via:
//
//	EmailProviderArray{ EmailProviderArgs{...} }
type EmailProviderArrayInput interface {
	pulumi.Input

	ToEmailProviderArrayOutput() EmailProviderArrayOutput
	ToEmailProviderArrayOutputWithContext(context.Context) EmailProviderArrayOutput
}

type EmailProviderArray []EmailProviderInput

func (EmailProviderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EmailProvider)(nil)).Elem()
}

func (i EmailProviderArray) ToEmailProviderArrayOutput() EmailProviderArrayOutput {
	return i.ToEmailProviderArrayOutputWithContext(context.Background())
}

func (i EmailProviderArray) ToEmailProviderArrayOutputWithContext(ctx context.Context) EmailProviderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmailProviderArrayOutput)
}

// EmailProviderMapInput is an input type that accepts EmailProviderMap and EmailProviderMapOutput values.
// You can construct a concrete instance of `EmailProviderMapInput` via:
//
//	EmailProviderMap{ "key": EmailProviderArgs{...} }
type EmailProviderMapInput interface {
	pulumi.Input

	ToEmailProviderMapOutput() EmailProviderMapOutput
	ToEmailProviderMapOutputWithContext(context.Context) EmailProviderMapOutput
}

type EmailProviderMap map[string]EmailProviderInput

func (EmailProviderMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EmailProvider)(nil)).Elem()
}

func (i EmailProviderMap) ToEmailProviderMapOutput() EmailProviderMapOutput {
	return i.ToEmailProviderMapOutputWithContext(context.Background())
}

func (i EmailProviderMap) ToEmailProviderMapOutputWithContext(ctx context.Context) EmailProviderMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmailProviderMapOutput)
}

type EmailProviderOutput struct{ *pulumi.OutputState }

func (EmailProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EmailProvider)(nil)).Elem()
}

func (o EmailProviderOutput) ToEmailProviderOutput() EmailProviderOutput {
	return o
}

func (o EmailProviderOutput) ToEmailProviderOutputWithContext(ctx context.Context) EmailProviderOutput {
	return o
}

// Configuration settings for the credentials for the email provider.
func (o EmailProviderOutput) Credentials() EmailProviderCredentialsOutput {
	return o.ApplyT(func(v *EmailProvider) EmailProviderCredentialsOutput { return v.Credentials }).(EmailProviderCredentialsOutput)
}

// Email address to use as the sender when no other "from" address is specified.
func (o EmailProviderOutput) DefaultFromAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *EmailProvider) pulumi.StringOutput { return v.DefaultFromAddress }).(pulumi.StringOutput)
}

// Indicates whether the email provider is enabled.
func (o EmailProviderOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EmailProvider) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Name of the email provider. Options include `azureCs`, `mailgun`, `mandrill`, `ms365`, `sendgrid`, `ses`, `smtp` and `sparkpost`.
func (o EmailProviderOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *EmailProvider) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specific email provider settings.
func (o EmailProviderOutput) Settings() EmailProviderSettingsOutput {
	return o.ApplyT(func(v *EmailProvider) EmailProviderSettingsOutput { return v.Settings }).(EmailProviderSettingsOutput)
}

type EmailProviderArrayOutput struct{ *pulumi.OutputState }

func (EmailProviderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EmailProvider)(nil)).Elem()
}

func (o EmailProviderArrayOutput) ToEmailProviderArrayOutput() EmailProviderArrayOutput {
	return o
}

func (o EmailProviderArrayOutput) ToEmailProviderArrayOutputWithContext(ctx context.Context) EmailProviderArrayOutput {
	return o
}

func (o EmailProviderArrayOutput) Index(i pulumi.IntInput) EmailProviderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EmailProvider {
		return vs[0].([]*EmailProvider)[vs[1].(int)]
	}).(EmailProviderOutput)
}

type EmailProviderMapOutput struct{ *pulumi.OutputState }

func (EmailProviderMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EmailProvider)(nil)).Elem()
}

func (o EmailProviderMapOutput) ToEmailProviderMapOutput() EmailProviderMapOutput {
	return o
}

func (o EmailProviderMapOutput) ToEmailProviderMapOutputWithContext(ctx context.Context) EmailProviderMapOutput {
	return o
}

func (o EmailProviderMapOutput) MapIndex(k pulumi.StringInput) EmailProviderOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EmailProvider {
		return vs[0].(map[string]*EmailProvider)[vs[1].(string)]
	}).(EmailProviderOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EmailProviderInput)(nil)).Elem(), &EmailProvider{})
	pulumi.RegisterInputType(reflect.TypeOf((*EmailProviderArrayInput)(nil)).Elem(), EmailProviderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EmailProviderMapInput)(nil)).Elem(), EmailProviderMap{})
	pulumi.RegisterOutputType(EmailProviderOutput{})
	pulumi.RegisterOutputType(EmailProviderArrayOutput{})
	pulumi.RegisterOutputType(EmailProviderMapOutput{})
}
