// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package auth0

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-auth0/sdk/v3/go/auth0/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource to allow the rekeying of your tenant master key.
type EncryptionKeyManager struct {
	pulumi.CustomResourceState

	// This attribute is used for provisioning the customer provided root key. To initiate the provisioning process, create a new empty `customerProvidedRootKey` block. After applying this, the `publicWrappingKey` can be retreived from the resource, and the new root key should be generated by the customer and wrapped with the wrapping key, then base64-encoded and added as the `wrappedKey` attribute.
	CustomerProvidedRootKey EncryptionKeyManagerCustomerProvidedRootKeyPtrOutput `pulumi:"customerProvidedRootKey"`
	// All encryption keys.
	EncryptionKeys EncryptionKeyManagerEncryptionKeyArrayOutput `pulumi:"encryptionKeys"`
	// If this value is changed, the encryption keys will be rotated. A UUID is recommended for the `keyRotationId`.
	KeyRotationId pulumi.StringPtrOutput `pulumi:"keyRotationId"`
}

// NewEncryptionKeyManager registers a new resource with the given unique name, arguments, and options.
func NewEncryptionKeyManager(ctx *pulumi.Context,
	name string, args *EncryptionKeyManagerArgs, opts ...pulumi.ResourceOption) (*EncryptionKeyManager, error) {
	if args == nil {
		args = &EncryptionKeyManagerArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EncryptionKeyManager
	err := ctx.RegisterResource("auth0:index/encryptionKeyManager:EncryptionKeyManager", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEncryptionKeyManager gets an existing EncryptionKeyManager resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEncryptionKeyManager(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EncryptionKeyManagerState, opts ...pulumi.ResourceOption) (*EncryptionKeyManager, error) {
	var resource EncryptionKeyManager
	err := ctx.ReadResource("auth0:index/encryptionKeyManager:EncryptionKeyManager", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EncryptionKeyManager resources.
type encryptionKeyManagerState struct {
	// This attribute is used for provisioning the customer provided root key. To initiate the provisioning process, create a new empty `customerProvidedRootKey` block. After applying this, the `publicWrappingKey` can be retreived from the resource, and the new root key should be generated by the customer and wrapped with the wrapping key, then base64-encoded and added as the `wrappedKey` attribute.
	CustomerProvidedRootKey *EncryptionKeyManagerCustomerProvidedRootKey `pulumi:"customerProvidedRootKey"`
	// All encryption keys.
	EncryptionKeys []EncryptionKeyManagerEncryptionKey `pulumi:"encryptionKeys"`
	// If this value is changed, the encryption keys will be rotated. A UUID is recommended for the `keyRotationId`.
	KeyRotationId *string `pulumi:"keyRotationId"`
}

type EncryptionKeyManagerState struct {
	// This attribute is used for provisioning the customer provided root key. To initiate the provisioning process, create a new empty `customerProvidedRootKey` block. After applying this, the `publicWrappingKey` can be retreived from the resource, and the new root key should be generated by the customer and wrapped with the wrapping key, then base64-encoded and added as the `wrappedKey` attribute.
	CustomerProvidedRootKey EncryptionKeyManagerCustomerProvidedRootKeyPtrInput
	// All encryption keys.
	EncryptionKeys EncryptionKeyManagerEncryptionKeyArrayInput
	// If this value is changed, the encryption keys will be rotated. A UUID is recommended for the `keyRotationId`.
	KeyRotationId pulumi.StringPtrInput
}

func (EncryptionKeyManagerState) ElementType() reflect.Type {
	return reflect.TypeOf((*encryptionKeyManagerState)(nil)).Elem()
}

type encryptionKeyManagerArgs struct {
	// This attribute is used for provisioning the customer provided root key. To initiate the provisioning process, create a new empty `customerProvidedRootKey` block. After applying this, the `publicWrappingKey` can be retreived from the resource, and the new root key should be generated by the customer and wrapped with the wrapping key, then base64-encoded and added as the `wrappedKey` attribute.
	CustomerProvidedRootKey *EncryptionKeyManagerCustomerProvidedRootKey `pulumi:"customerProvidedRootKey"`
	// If this value is changed, the encryption keys will be rotated. A UUID is recommended for the `keyRotationId`.
	KeyRotationId *string `pulumi:"keyRotationId"`
}

// The set of arguments for constructing a EncryptionKeyManager resource.
type EncryptionKeyManagerArgs struct {
	// This attribute is used for provisioning the customer provided root key. To initiate the provisioning process, create a new empty `customerProvidedRootKey` block. After applying this, the `publicWrappingKey` can be retreived from the resource, and the new root key should be generated by the customer and wrapped with the wrapping key, then base64-encoded and added as the `wrappedKey` attribute.
	CustomerProvidedRootKey EncryptionKeyManagerCustomerProvidedRootKeyPtrInput
	// If this value is changed, the encryption keys will be rotated. A UUID is recommended for the `keyRotationId`.
	KeyRotationId pulumi.StringPtrInput
}

func (EncryptionKeyManagerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*encryptionKeyManagerArgs)(nil)).Elem()
}

type EncryptionKeyManagerInput interface {
	pulumi.Input

	ToEncryptionKeyManagerOutput() EncryptionKeyManagerOutput
	ToEncryptionKeyManagerOutputWithContext(ctx context.Context) EncryptionKeyManagerOutput
}

func (*EncryptionKeyManager) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionKeyManager)(nil)).Elem()
}

func (i *EncryptionKeyManager) ToEncryptionKeyManagerOutput() EncryptionKeyManagerOutput {
	return i.ToEncryptionKeyManagerOutputWithContext(context.Background())
}

func (i *EncryptionKeyManager) ToEncryptionKeyManagerOutputWithContext(ctx context.Context) EncryptionKeyManagerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionKeyManagerOutput)
}

// EncryptionKeyManagerArrayInput is an input type that accepts EncryptionKeyManagerArray and EncryptionKeyManagerArrayOutput values.
// You can construct a concrete instance of `EncryptionKeyManagerArrayInput` via:
//
//	EncryptionKeyManagerArray{ EncryptionKeyManagerArgs{...} }
type EncryptionKeyManagerArrayInput interface {
	pulumi.Input

	ToEncryptionKeyManagerArrayOutput() EncryptionKeyManagerArrayOutput
	ToEncryptionKeyManagerArrayOutputWithContext(context.Context) EncryptionKeyManagerArrayOutput
}

type EncryptionKeyManagerArray []EncryptionKeyManagerInput

func (EncryptionKeyManagerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EncryptionKeyManager)(nil)).Elem()
}

func (i EncryptionKeyManagerArray) ToEncryptionKeyManagerArrayOutput() EncryptionKeyManagerArrayOutput {
	return i.ToEncryptionKeyManagerArrayOutputWithContext(context.Background())
}

func (i EncryptionKeyManagerArray) ToEncryptionKeyManagerArrayOutputWithContext(ctx context.Context) EncryptionKeyManagerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionKeyManagerArrayOutput)
}

// EncryptionKeyManagerMapInput is an input type that accepts EncryptionKeyManagerMap and EncryptionKeyManagerMapOutput values.
// You can construct a concrete instance of `EncryptionKeyManagerMapInput` via:
//
//	EncryptionKeyManagerMap{ "key": EncryptionKeyManagerArgs{...} }
type EncryptionKeyManagerMapInput interface {
	pulumi.Input

	ToEncryptionKeyManagerMapOutput() EncryptionKeyManagerMapOutput
	ToEncryptionKeyManagerMapOutputWithContext(context.Context) EncryptionKeyManagerMapOutput
}

type EncryptionKeyManagerMap map[string]EncryptionKeyManagerInput

func (EncryptionKeyManagerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EncryptionKeyManager)(nil)).Elem()
}

func (i EncryptionKeyManagerMap) ToEncryptionKeyManagerMapOutput() EncryptionKeyManagerMapOutput {
	return i.ToEncryptionKeyManagerMapOutputWithContext(context.Background())
}

func (i EncryptionKeyManagerMap) ToEncryptionKeyManagerMapOutputWithContext(ctx context.Context) EncryptionKeyManagerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionKeyManagerMapOutput)
}

type EncryptionKeyManagerOutput struct{ *pulumi.OutputState }

func (EncryptionKeyManagerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionKeyManager)(nil)).Elem()
}

func (o EncryptionKeyManagerOutput) ToEncryptionKeyManagerOutput() EncryptionKeyManagerOutput {
	return o
}

func (o EncryptionKeyManagerOutput) ToEncryptionKeyManagerOutputWithContext(ctx context.Context) EncryptionKeyManagerOutput {
	return o
}

// This attribute is used for provisioning the customer provided root key. To initiate the provisioning process, create a new empty `customerProvidedRootKey` block. After applying this, the `publicWrappingKey` can be retreived from the resource, and the new root key should be generated by the customer and wrapped with the wrapping key, then base64-encoded and added as the `wrappedKey` attribute.
func (o EncryptionKeyManagerOutput) CustomerProvidedRootKey() EncryptionKeyManagerCustomerProvidedRootKeyPtrOutput {
	return o.ApplyT(func(v *EncryptionKeyManager) EncryptionKeyManagerCustomerProvidedRootKeyPtrOutput {
		return v.CustomerProvidedRootKey
	}).(EncryptionKeyManagerCustomerProvidedRootKeyPtrOutput)
}

// All encryption keys.
func (o EncryptionKeyManagerOutput) EncryptionKeys() EncryptionKeyManagerEncryptionKeyArrayOutput {
	return o.ApplyT(func(v *EncryptionKeyManager) EncryptionKeyManagerEncryptionKeyArrayOutput { return v.EncryptionKeys }).(EncryptionKeyManagerEncryptionKeyArrayOutput)
}

// If this value is changed, the encryption keys will be rotated. A UUID is recommended for the `keyRotationId`.
func (o EncryptionKeyManagerOutput) KeyRotationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionKeyManager) pulumi.StringPtrOutput { return v.KeyRotationId }).(pulumi.StringPtrOutput)
}

type EncryptionKeyManagerArrayOutput struct{ *pulumi.OutputState }

func (EncryptionKeyManagerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EncryptionKeyManager)(nil)).Elem()
}

func (o EncryptionKeyManagerArrayOutput) ToEncryptionKeyManagerArrayOutput() EncryptionKeyManagerArrayOutput {
	return o
}

func (o EncryptionKeyManagerArrayOutput) ToEncryptionKeyManagerArrayOutputWithContext(ctx context.Context) EncryptionKeyManagerArrayOutput {
	return o
}

func (o EncryptionKeyManagerArrayOutput) Index(i pulumi.IntInput) EncryptionKeyManagerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EncryptionKeyManager {
		return vs[0].([]*EncryptionKeyManager)[vs[1].(int)]
	}).(EncryptionKeyManagerOutput)
}

type EncryptionKeyManagerMapOutput struct{ *pulumi.OutputState }

func (EncryptionKeyManagerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EncryptionKeyManager)(nil)).Elem()
}

func (o EncryptionKeyManagerMapOutput) ToEncryptionKeyManagerMapOutput() EncryptionKeyManagerMapOutput {
	return o
}

func (o EncryptionKeyManagerMapOutput) ToEncryptionKeyManagerMapOutputWithContext(ctx context.Context) EncryptionKeyManagerMapOutput {
	return o
}

func (o EncryptionKeyManagerMapOutput) MapIndex(k pulumi.StringInput) EncryptionKeyManagerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EncryptionKeyManager {
		return vs[0].(map[string]*EncryptionKeyManager)[vs[1].(string)]
	}).(EncryptionKeyManagerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EncryptionKeyManagerInput)(nil)).Elem(), &EncryptionKeyManager{})
	pulumi.RegisterInputType(reflect.TypeOf((*EncryptionKeyManagerArrayInput)(nil)).Elem(), EncryptionKeyManagerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EncryptionKeyManagerMapInput)(nil)).Elem(), EncryptionKeyManagerMap{})
	pulumi.RegisterOutputType(EncryptionKeyManagerOutput{})
	pulumi.RegisterOutputType(EncryptionKeyManagerArrayOutput{})
	pulumi.RegisterOutputType(EncryptionKeyManagerMapOutput{})
}
