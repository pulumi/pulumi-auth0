// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package auth0

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-auth0/sdk/v2/go/auth0/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// With this resource, you can manage user permissions.
//
// !> This resource appends a permission to a user. In contrast, the `UserPermissions` resource manages all the
// permissions assigned to a user. To avoid potential issues, it is recommended not to use this resource in conjunction
// with the `UserPermissions` resource when managing permissions for the same user id.
//
// ## Import
//
// This resource can be imported by specifying the user ID, resource identifier and permission name separated by "::" (note the double colon) <userID>::<resourceServerIdentifier>::<permission> # Example
//
// ```sh
//
//	$ pulumi import auth0:index/userPermission:UserPermission permission "auth0|111111111111111111111111::https://api.travel0.com/v1::read:posts"
//
// ```
type UserPermission struct {
	pulumi.CustomResourceState

	// Description of the permission.
	Description pulumi.StringOutput `pulumi:"description"`
	// Name of the permission.
	Permission pulumi.StringOutput `pulumi:"permission"`
	// Identifier of the resource server that the permission is associated with.
	ResourceServerIdentifier pulumi.StringOutput `pulumi:"resourceServerIdentifier"`
	// Name of the resource server that the permission is associated with.
	ResourceServerName pulumi.StringOutput `pulumi:"resourceServerName"`
	// ID of the user to associate the permission to.
	UserId pulumi.StringOutput `pulumi:"userId"`
}

// NewUserPermission registers a new resource with the given unique name, arguments, and options.
func NewUserPermission(ctx *pulumi.Context,
	name string, args *UserPermissionArgs, opts ...pulumi.ResourceOption) (*UserPermission, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Permission == nil {
		return nil, errors.New("invalid value for required argument 'Permission'")
	}
	if args.ResourceServerIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'ResourceServerIdentifier'")
	}
	if args.UserId == nil {
		return nil, errors.New("invalid value for required argument 'UserId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource UserPermission
	err := ctx.RegisterResource("auth0:index/userPermission:UserPermission", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserPermission gets an existing UserPermission resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserPermission(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserPermissionState, opts ...pulumi.ResourceOption) (*UserPermission, error) {
	var resource UserPermission
	err := ctx.ReadResource("auth0:index/userPermission:UserPermission", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserPermission resources.
type userPermissionState struct {
	// Description of the permission.
	Description *string `pulumi:"description"`
	// Name of the permission.
	Permission *string `pulumi:"permission"`
	// Identifier of the resource server that the permission is associated with.
	ResourceServerIdentifier *string `pulumi:"resourceServerIdentifier"`
	// Name of the resource server that the permission is associated with.
	ResourceServerName *string `pulumi:"resourceServerName"`
	// ID of the user to associate the permission to.
	UserId *string `pulumi:"userId"`
}

type UserPermissionState struct {
	// Description of the permission.
	Description pulumi.StringPtrInput
	// Name of the permission.
	Permission pulumi.StringPtrInput
	// Identifier of the resource server that the permission is associated with.
	ResourceServerIdentifier pulumi.StringPtrInput
	// Name of the resource server that the permission is associated with.
	ResourceServerName pulumi.StringPtrInput
	// ID of the user to associate the permission to.
	UserId pulumi.StringPtrInput
}

func (UserPermissionState) ElementType() reflect.Type {
	return reflect.TypeOf((*userPermissionState)(nil)).Elem()
}

type userPermissionArgs struct {
	// Name of the permission.
	Permission string `pulumi:"permission"`
	// Identifier of the resource server that the permission is associated with.
	ResourceServerIdentifier string `pulumi:"resourceServerIdentifier"`
	// ID of the user to associate the permission to.
	UserId string `pulumi:"userId"`
}

// The set of arguments for constructing a UserPermission resource.
type UserPermissionArgs struct {
	// Name of the permission.
	Permission pulumi.StringInput
	// Identifier of the resource server that the permission is associated with.
	ResourceServerIdentifier pulumi.StringInput
	// ID of the user to associate the permission to.
	UserId pulumi.StringInput
}

func (UserPermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userPermissionArgs)(nil)).Elem()
}

type UserPermissionInput interface {
	pulumi.Input

	ToUserPermissionOutput() UserPermissionOutput
	ToUserPermissionOutputWithContext(ctx context.Context) UserPermissionOutput
}

func (*UserPermission) ElementType() reflect.Type {
	return reflect.TypeOf((**UserPermission)(nil)).Elem()
}

func (i *UserPermission) ToUserPermissionOutput() UserPermissionOutput {
	return i.ToUserPermissionOutputWithContext(context.Background())
}

func (i *UserPermission) ToUserPermissionOutputWithContext(ctx context.Context) UserPermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPermissionOutput)
}

// UserPermissionArrayInput is an input type that accepts UserPermissionArray and UserPermissionArrayOutput values.
// You can construct a concrete instance of `UserPermissionArrayInput` via:
//
//	UserPermissionArray{ UserPermissionArgs{...} }
type UserPermissionArrayInput interface {
	pulumi.Input

	ToUserPermissionArrayOutput() UserPermissionArrayOutput
	ToUserPermissionArrayOutputWithContext(context.Context) UserPermissionArrayOutput
}

type UserPermissionArray []UserPermissionInput

func (UserPermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserPermission)(nil)).Elem()
}

func (i UserPermissionArray) ToUserPermissionArrayOutput() UserPermissionArrayOutput {
	return i.ToUserPermissionArrayOutputWithContext(context.Background())
}

func (i UserPermissionArray) ToUserPermissionArrayOutputWithContext(ctx context.Context) UserPermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPermissionArrayOutput)
}

// UserPermissionMapInput is an input type that accepts UserPermissionMap and UserPermissionMapOutput values.
// You can construct a concrete instance of `UserPermissionMapInput` via:
//
//	UserPermissionMap{ "key": UserPermissionArgs{...} }
type UserPermissionMapInput interface {
	pulumi.Input

	ToUserPermissionMapOutput() UserPermissionMapOutput
	ToUserPermissionMapOutputWithContext(context.Context) UserPermissionMapOutput
}

type UserPermissionMap map[string]UserPermissionInput

func (UserPermissionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserPermission)(nil)).Elem()
}

func (i UserPermissionMap) ToUserPermissionMapOutput() UserPermissionMapOutput {
	return i.ToUserPermissionMapOutputWithContext(context.Background())
}

func (i UserPermissionMap) ToUserPermissionMapOutputWithContext(ctx context.Context) UserPermissionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPermissionMapOutput)
}

type UserPermissionOutput struct{ *pulumi.OutputState }

func (UserPermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserPermission)(nil)).Elem()
}

func (o UserPermissionOutput) ToUserPermissionOutput() UserPermissionOutput {
	return o
}

func (o UserPermissionOutput) ToUserPermissionOutputWithContext(ctx context.Context) UserPermissionOutput {
	return o
}

// Description of the permission.
func (o UserPermissionOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *UserPermission) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Name of the permission.
func (o UserPermissionOutput) Permission() pulumi.StringOutput {
	return o.ApplyT(func(v *UserPermission) pulumi.StringOutput { return v.Permission }).(pulumi.StringOutput)
}

// Identifier of the resource server that the permission is associated with.
func (o UserPermissionOutput) ResourceServerIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v *UserPermission) pulumi.StringOutput { return v.ResourceServerIdentifier }).(pulumi.StringOutput)
}

// Name of the resource server that the permission is associated with.
func (o UserPermissionOutput) ResourceServerName() pulumi.StringOutput {
	return o.ApplyT(func(v *UserPermission) pulumi.StringOutput { return v.ResourceServerName }).(pulumi.StringOutput)
}

// ID of the user to associate the permission to.
func (o UserPermissionOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v *UserPermission) pulumi.StringOutput { return v.UserId }).(pulumi.StringOutput)
}

type UserPermissionArrayOutput struct{ *pulumi.OutputState }

func (UserPermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserPermission)(nil)).Elem()
}

func (o UserPermissionArrayOutput) ToUserPermissionArrayOutput() UserPermissionArrayOutput {
	return o
}

func (o UserPermissionArrayOutput) ToUserPermissionArrayOutputWithContext(ctx context.Context) UserPermissionArrayOutput {
	return o
}

func (o UserPermissionArrayOutput) Index(i pulumi.IntInput) UserPermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UserPermission {
		return vs[0].([]*UserPermission)[vs[1].(int)]
	}).(UserPermissionOutput)
}

type UserPermissionMapOutput struct{ *pulumi.OutputState }

func (UserPermissionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserPermission)(nil)).Elem()
}

func (o UserPermissionMapOutput) ToUserPermissionMapOutput() UserPermissionMapOutput {
	return o
}

func (o UserPermissionMapOutput) ToUserPermissionMapOutputWithContext(ctx context.Context) UserPermissionMapOutput {
	return o
}

func (o UserPermissionMapOutput) MapIndex(k pulumi.StringInput) UserPermissionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UserPermission {
		return vs[0].(map[string]*UserPermission)[vs[1].(string)]
	}).(UserPermissionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserPermissionInput)(nil)).Elem(), &UserPermission{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserPermissionArrayInput)(nil)).Elem(), UserPermissionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserPermissionMapInput)(nil)).Elem(), UserPermissionMap{})
	pulumi.RegisterOutputType(UserPermissionOutput{})
	pulumi.RegisterOutputType(UserPermissionArrayOutput{})
	pulumi.RegisterOutputType(UserPermissionMapOutput{})
}
