// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package auth0

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-auth0/sdk/v3/go/auth0/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// With this resource, you can manage a customized sign up and login experience by adding custom content, form elements and css/javascript. You can read more about this [here](https://auth0.com/docs/customize/universal-login-pages/customize-signup-and-login-prompts).
//
// !> This resource appends a specific prompt screen to the list of prompt screens displayed to the user during the authentication flow.
//
//	In contrast, the `PromptScreenPartials` resource manages the complete set of prompt screens that are displayed during the
//	authentication flow. To avoid potential issues, it is recommended not to use this resource in conjunction with the
//	`PromptScreenPartials` resource when managing prompt screens for the same prompt.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-auth0/sdk/v3/go/auth0"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := auth0.NewPromptScreenPartial(ctx, "login", &auth0.PromptScreenPartialArgs{
//				PromptType: pulumi.String("login"),
//				ScreenName: pulumi.String("login"),
//				InsertionPoints: &auth0.PromptScreenPartialInsertionPointsArgs{
//					FormContentStart: pulumi.String("<div>Form Content Start</div>"),
//					FormContentEnd:   pulumi.String("<div>Form Content End</div>"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = auth0.NewPromptScreenPartial(ctx, "customized-consent", &auth0.PromptScreenPartialArgs{
//				PromptType: pulumi.String("customized-consent"),
//				ScreenName: pulumi.String("customized-consent"),
//				InsertionPoints: &auth0.PromptScreenPartialInsertionPointsArgs{
//					FormContent: pulumi.String("<div>Form Content</div>"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// This resource can be imported using the prompt name and screen_name.
//
// #
//
// As this is not a resource identifiable by an ID within the Auth0 Management API,
//
// login can be imported using the prompt name and screen name using the format:
//
// prompt_name:screen_name
//
// #
//
// Example:
//
// ```sh
// $ pulumi import auth0:index/promptScreenPartial:PromptScreenPartial login "login:login"
// ```
type PromptScreenPartial struct {
	pulumi.CustomResourceState

	// The insertion points for the partials.
	InsertionPoints PromptScreenPartialInsertionPointsPtrOutput `pulumi:"insertionPoints"`
	// The prompt that you are adding partials for. Options are: `login-id`, `login`, `login-password`, `signup`, `signup-id`, `signup-password`, `login-passwordless`, `customized-consent`.
	PromptType pulumi.StringOutput `pulumi:"promptType"`
	// The name of the screen associated with the partials
	ScreenName pulumi.StringOutput `pulumi:"screenName"`
}

// NewPromptScreenPartial registers a new resource with the given unique name, arguments, and options.
func NewPromptScreenPartial(ctx *pulumi.Context,
	name string, args *PromptScreenPartialArgs, opts ...pulumi.ResourceOption) (*PromptScreenPartial, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PromptType == nil {
		return nil, errors.New("invalid value for required argument 'PromptType'")
	}
	if args.ScreenName == nil {
		return nil, errors.New("invalid value for required argument 'ScreenName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PromptScreenPartial
	err := ctx.RegisterResource("auth0:index/promptScreenPartial:PromptScreenPartial", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPromptScreenPartial gets an existing PromptScreenPartial resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPromptScreenPartial(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PromptScreenPartialState, opts ...pulumi.ResourceOption) (*PromptScreenPartial, error) {
	var resource PromptScreenPartial
	err := ctx.ReadResource("auth0:index/promptScreenPartial:PromptScreenPartial", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PromptScreenPartial resources.
type promptScreenPartialState struct {
	// The insertion points for the partials.
	InsertionPoints *PromptScreenPartialInsertionPoints `pulumi:"insertionPoints"`
	// The prompt that you are adding partials for. Options are: `login-id`, `login`, `login-password`, `signup`, `signup-id`, `signup-password`, `login-passwordless`, `customized-consent`.
	PromptType *string `pulumi:"promptType"`
	// The name of the screen associated with the partials
	ScreenName *string `pulumi:"screenName"`
}

type PromptScreenPartialState struct {
	// The insertion points for the partials.
	InsertionPoints PromptScreenPartialInsertionPointsPtrInput
	// The prompt that you are adding partials for. Options are: `login-id`, `login`, `login-password`, `signup`, `signup-id`, `signup-password`, `login-passwordless`, `customized-consent`.
	PromptType pulumi.StringPtrInput
	// The name of the screen associated with the partials
	ScreenName pulumi.StringPtrInput
}

func (PromptScreenPartialState) ElementType() reflect.Type {
	return reflect.TypeOf((*promptScreenPartialState)(nil)).Elem()
}

type promptScreenPartialArgs struct {
	// The insertion points for the partials.
	InsertionPoints *PromptScreenPartialInsertionPoints `pulumi:"insertionPoints"`
	// The prompt that you are adding partials for. Options are: `login-id`, `login`, `login-password`, `signup`, `signup-id`, `signup-password`, `login-passwordless`, `customized-consent`.
	PromptType string `pulumi:"promptType"`
	// The name of the screen associated with the partials
	ScreenName string `pulumi:"screenName"`
}

// The set of arguments for constructing a PromptScreenPartial resource.
type PromptScreenPartialArgs struct {
	// The insertion points for the partials.
	InsertionPoints PromptScreenPartialInsertionPointsPtrInput
	// The prompt that you are adding partials for. Options are: `login-id`, `login`, `login-password`, `signup`, `signup-id`, `signup-password`, `login-passwordless`, `customized-consent`.
	PromptType pulumi.StringInput
	// The name of the screen associated with the partials
	ScreenName pulumi.StringInput
}

func (PromptScreenPartialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*promptScreenPartialArgs)(nil)).Elem()
}

type PromptScreenPartialInput interface {
	pulumi.Input

	ToPromptScreenPartialOutput() PromptScreenPartialOutput
	ToPromptScreenPartialOutputWithContext(ctx context.Context) PromptScreenPartialOutput
}

func (*PromptScreenPartial) ElementType() reflect.Type {
	return reflect.TypeOf((**PromptScreenPartial)(nil)).Elem()
}

func (i *PromptScreenPartial) ToPromptScreenPartialOutput() PromptScreenPartialOutput {
	return i.ToPromptScreenPartialOutputWithContext(context.Background())
}

func (i *PromptScreenPartial) ToPromptScreenPartialOutputWithContext(ctx context.Context) PromptScreenPartialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PromptScreenPartialOutput)
}

// PromptScreenPartialArrayInput is an input type that accepts PromptScreenPartialArray and PromptScreenPartialArrayOutput values.
// You can construct a concrete instance of `PromptScreenPartialArrayInput` via:
//
//	PromptScreenPartialArray{ PromptScreenPartialArgs{...} }
type PromptScreenPartialArrayInput interface {
	pulumi.Input

	ToPromptScreenPartialArrayOutput() PromptScreenPartialArrayOutput
	ToPromptScreenPartialArrayOutputWithContext(context.Context) PromptScreenPartialArrayOutput
}

type PromptScreenPartialArray []PromptScreenPartialInput

func (PromptScreenPartialArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PromptScreenPartial)(nil)).Elem()
}

func (i PromptScreenPartialArray) ToPromptScreenPartialArrayOutput() PromptScreenPartialArrayOutput {
	return i.ToPromptScreenPartialArrayOutputWithContext(context.Background())
}

func (i PromptScreenPartialArray) ToPromptScreenPartialArrayOutputWithContext(ctx context.Context) PromptScreenPartialArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PromptScreenPartialArrayOutput)
}

// PromptScreenPartialMapInput is an input type that accepts PromptScreenPartialMap and PromptScreenPartialMapOutput values.
// You can construct a concrete instance of `PromptScreenPartialMapInput` via:
//
//	PromptScreenPartialMap{ "key": PromptScreenPartialArgs{...} }
type PromptScreenPartialMapInput interface {
	pulumi.Input

	ToPromptScreenPartialMapOutput() PromptScreenPartialMapOutput
	ToPromptScreenPartialMapOutputWithContext(context.Context) PromptScreenPartialMapOutput
}

type PromptScreenPartialMap map[string]PromptScreenPartialInput

func (PromptScreenPartialMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PromptScreenPartial)(nil)).Elem()
}

func (i PromptScreenPartialMap) ToPromptScreenPartialMapOutput() PromptScreenPartialMapOutput {
	return i.ToPromptScreenPartialMapOutputWithContext(context.Background())
}

func (i PromptScreenPartialMap) ToPromptScreenPartialMapOutputWithContext(ctx context.Context) PromptScreenPartialMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PromptScreenPartialMapOutput)
}

type PromptScreenPartialOutput struct{ *pulumi.OutputState }

func (PromptScreenPartialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PromptScreenPartial)(nil)).Elem()
}

func (o PromptScreenPartialOutput) ToPromptScreenPartialOutput() PromptScreenPartialOutput {
	return o
}

func (o PromptScreenPartialOutput) ToPromptScreenPartialOutputWithContext(ctx context.Context) PromptScreenPartialOutput {
	return o
}

// The insertion points for the partials.
func (o PromptScreenPartialOutput) InsertionPoints() PromptScreenPartialInsertionPointsPtrOutput {
	return o.ApplyT(func(v *PromptScreenPartial) PromptScreenPartialInsertionPointsPtrOutput { return v.InsertionPoints }).(PromptScreenPartialInsertionPointsPtrOutput)
}

// The prompt that you are adding partials for. Options are: `login-id`, `login`, `login-password`, `signup`, `signup-id`, `signup-password`, `login-passwordless`, `customized-consent`.
func (o PromptScreenPartialOutput) PromptType() pulumi.StringOutput {
	return o.ApplyT(func(v *PromptScreenPartial) pulumi.StringOutput { return v.PromptType }).(pulumi.StringOutput)
}

// The name of the screen associated with the partials
func (o PromptScreenPartialOutput) ScreenName() pulumi.StringOutput {
	return o.ApplyT(func(v *PromptScreenPartial) pulumi.StringOutput { return v.ScreenName }).(pulumi.StringOutput)
}

type PromptScreenPartialArrayOutput struct{ *pulumi.OutputState }

func (PromptScreenPartialArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PromptScreenPartial)(nil)).Elem()
}

func (o PromptScreenPartialArrayOutput) ToPromptScreenPartialArrayOutput() PromptScreenPartialArrayOutput {
	return o
}

func (o PromptScreenPartialArrayOutput) ToPromptScreenPartialArrayOutputWithContext(ctx context.Context) PromptScreenPartialArrayOutput {
	return o
}

func (o PromptScreenPartialArrayOutput) Index(i pulumi.IntInput) PromptScreenPartialOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PromptScreenPartial {
		return vs[0].([]*PromptScreenPartial)[vs[1].(int)]
	}).(PromptScreenPartialOutput)
}

type PromptScreenPartialMapOutput struct{ *pulumi.OutputState }

func (PromptScreenPartialMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PromptScreenPartial)(nil)).Elem()
}

func (o PromptScreenPartialMapOutput) ToPromptScreenPartialMapOutput() PromptScreenPartialMapOutput {
	return o
}

func (o PromptScreenPartialMapOutput) ToPromptScreenPartialMapOutputWithContext(ctx context.Context) PromptScreenPartialMapOutput {
	return o
}

func (o PromptScreenPartialMapOutput) MapIndex(k pulumi.StringInput) PromptScreenPartialOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PromptScreenPartial {
		return vs[0].(map[string]*PromptScreenPartial)[vs[1].(string)]
	}).(PromptScreenPartialOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PromptScreenPartialInput)(nil)).Elem(), &PromptScreenPartial{})
	pulumi.RegisterInputType(reflect.TypeOf((*PromptScreenPartialArrayInput)(nil)).Elem(), PromptScreenPartialArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PromptScreenPartialMapInput)(nil)).Elem(), PromptScreenPartialMap{})
	pulumi.RegisterOutputType(PromptScreenPartialOutput{})
	pulumi.RegisterOutputType(PromptScreenPartialArrayOutput{})
	pulumi.RegisterOutputType(PromptScreenPartialMapOutput{})
}
