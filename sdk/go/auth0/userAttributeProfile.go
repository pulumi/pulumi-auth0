// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package auth0

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-auth0/sdk/v3/go/auth0/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// With this resource, you can manage User Attribute Profiles within Auth0. User Attribute Profiles allow you to define how user attributes are mapped between different identity providers and Auth0.
//
// > This resource is only available for [EA](https://auth0.com/docs/troubleshoot/product-lifecycle/product-release-stages#early-access) users.
type UserAttributeProfile struct {
	pulumi.CustomResourceState

	// The name of the User Attribute Profile.
	Name pulumi.StringOutput `pulumi:"name"`
	// List of user attribute configurations.
	UserAttributes UserAttributeProfileUserAttributeArrayOutput `pulumi:"userAttributes"`
	// Configuration for mapping the user ID from identity providers.
	UserId UserAttributeProfileUserIdOutput `pulumi:"userId"`
}

// NewUserAttributeProfile registers a new resource with the given unique name, arguments, and options.
func NewUserAttributeProfile(ctx *pulumi.Context,
	name string, args *UserAttributeProfileArgs, opts ...pulumi.ResourceOption) (*UserAttributeProfile, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.UserAttributes == nil {
		return nil, errors.New("invalid value for required argument 'UserAttributes'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource UserAttributeProfile
	err := ctx.RegisterResource("auth0:index/userAttributeProfile:UserAttributeProfile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserAttributeProfile gets an existing UserAttributeProfile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserAttributeProfile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserAttributeProfileState, opts ...pulumi.ResourceOption) (*UserAttributeProfile, error) {
	var resource UserAttributeProfile
	err := ctx.ReadResource("auth0:index/userAttributeProfile:UserAttributeProfile", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserAttributeProfile resources.
type userAttributeProfileState struct {
	// The name of the User Attribute Profile.
	Name *string `pulumi:"name"`
	// List of user attribute configurations.
	UserAttributes []UserAttributeProfileUserAttribute `pulumi:"userAttributes"`
	// Configuration for mapping the user ID from identity providers.
	UserId *UserAttributeProfileUserId `pulumi:"userId"`
}

type UserAttributeProfileState struct {
	// The name of the User Attribute Profile.
	Name pulumi.StringPtrInput
	// List of user attribute configurations.
	UserAttributes UserAttributeProfileUserAttributeArrayInput
	// Configuration for mapping the user ID from identity providers.
	UserId UserAttributeProfileUserIdPtrInput
}

func (UserAttributeProfileState) ElementType() reflect.Type {
	return reflect.TypeOf((*userAttributeProfileState)(nil)).Elem()
}

type userAttributeProfileArgs struct {
	// The name of the User Attribute Profile.
	Name *string `pulumi:"name"`
	// List of user attribute configurations.
	UserAttributes []UserAttributeProfileUserAttribute `pulumi:"userAttributes"`
	// Configuration for mapping the user ID from identity providers.
	UserId *UserAttributeProfileUserId `pulumi:"userId"`
}

// The set of arguments for constructing a UserAttributeProfile resource.
type UserAttributeProfileArgs struct {
	// The name of the User Attribute Profile.
	Name pulumi.StringPtrInput
	// List of user attribute configurations.
	UserAttributes UserAttributeProfileUserAttributeArrayInput
	// Configuration for mapping the user ID from identity providers.
	UserId UserAttributeProfileUserIdPtrInput
}

func (UserAttributeProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userAttributeProfileArgs)(nil)).Elem()
}

type UserAttributeProfileInput interface {
	pulumi.Input

	ToUserAttributeProfileOutput() UserAttributeProfileOutput
	ToUserAttributeProfileOutputWithContext(ctx context.Context) UserAttributeProfileOutput
}

func (*UserAttributeProfile) ElementType() reflect.Type {
	return reflect.TypeOf((**UserAttributeProfile)(nil)).Elem()
}

func (i *UserAttributeProfile) ToUserAttributeProfileOutput() UserAttributeProfileOutput {
	return i.ToUserAttributeProfileOutputWithContext(context.Background())
}

func (i *UserAttributeProfile) ToUserAttributeProfileOutputWithContext(ctx context.Context) UserAttributeProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserAttributeProfileOutput)
}

// UserAttributeProfileArrayInput is an input type that accepts UserAttributeProfileArray and UserAttributeProfileArrayOutput values.
// You can construct a concrete instance of `UserAttributeProfileArrayInput` via:
//
//	UserAttributeProfileArray{ UserAttributeProfileArgs{...} }
type UserAttributeProfileArrayInput interface {
	pulumi.Input

	ToUserAttributeProfileArrayOutput() UserAttributeProfileArrayOutput
	ToUserAttributeProfileArrayOutputWithContext(context.Context) UserAttributeProfileArrayOutput
}

type UserAttributeProfileArray []UserAttributeProfileInput

func (UserAttributeProfileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserAttributeProfile)(nil)).Elem()
}

func (i UserAttributeProfileArray) ToUserAttributeProfileArrayOutput() UserAttributeProfileArrayOutput {
	return i.ToUserAttributeProfileArrayOutputWithContext(context.Background())
}

func (i UserAttributeProfileArray) ToUserAttributeProfileArrayOutputWithContext(ctx context.Context) UserAttributeProfileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserAttributeProfileArrayOutput)
}

// UserAttributeProfileMapInput is an input type that accepts UserAttributeProfileMap and UserAttributeProfileMapOutput values.
// You can construct a concrete instance of `UserAttributeProfileMapInput` via:
//
//	UserAttributeProfileMap{ "key": UserAttributeProfileArgs{...} }
type UserAttributeProfileMapInput interface {
	pulumi.Input

	ToUserAttributeProfileMapOutput() UserAttributeProfileMapOutput
	ToUserAttributeProfileMapOutputWithContext(context.Context) UserAttributeProfileMapOutput
}

type UserAttributeProfileMap map[string]UserAttributeProfileInput

func (UserAttributeProfileMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserAttributeProfile)(nil)).Elem()
}

func (i UserAttributeProfileMap) ToUserAttributeProfileMapOutput() UserAttributeProfileMapOutput {
	return i.ToUserAttributeProfileMapOutputWithContext(context.Background())
}

func (i UserAttributeProfileMap) ToUserAttributeProfileMapOutputWithContext(ctx context.Context) UserAttributeProfileMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserAttributeProfileMapOutput)
}

type UserAttributeProfileOutput struct{ *pulumi.OutputState }

func (UserAttributeProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserAttributeProfile)(nil)).Elem()
}

func (o UserAttributeProfileOutput) ToUserAttributeProfileOutput() UserAttributeProfileOutput {
	return o
}

func (o UserAttributeProfileOutput) ToUserAttributeProfileOutputWithContext(ctx context.Context) UserAttributeProfileOutput {
	return o
}

// The name of the User Attribute Profile.
func (o UserAttributeProfileOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *UserAttributeProfile) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// List of user attribute configurations.
func (o UserAttributeProfileOutput) UserAttributes() UserAttributeProfileUserAttributeArrayOutput {
	return o.ApplyT(func(v *UserAttributeProfile) UserAttributeProfileUserAttributeArrayOutput { return v.UserAttributes }).(UserAttributeProfileUserAttributeArrayOutput)
}

// Configuration for mapping the user ID from identity providers.
func (o UserAttributeProfileOutput) UserId() UserAttributeProfileUserIdOutput {
	return o.ApplyT(func(v *UserAttributeProfile) UserAttributeProfileUserIdOutput { return v.UserId }).(UserAttributeProfileUserIdOutput)
}

type UserAttributeProfileArrayOutput struct{ *pulumi.OutputState }

func (UserAttributeProfileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserAttributeProfile)(nil)).Elem()
}

func (o UserAttributeProfileArrayOutput) ToUserAttributeProfileArrayOutput() UserAttributeProfileArrayOutput {
	return o
}

func (o UserAttributeProfileArrayOutput) ToUserAttributeProfileArrayOutputWithContext(ctx context.Context) UserAttributeProfileArrayOutput {
	return o
}

func (o UserAttributeProfileArrayOutput) Index(i pulumi.IntInput) UserAttributeProfileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UserAttributeProfile {
		return vs[0].([]*UserAttributeProfile)[vs[1].(int)]
	}).(UserAttributeProfileOutput)
}

type UserAttributeProfileMapOutput struct{ *pulumi.OutputState }

func (UserAttributeProfileMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserAttributeProfile)(nil)).Elem()
}

func (o UserAttributeProfileMapOutput) ToUserAttributeProfileMapOutput() UserAttributeProfileMapOutput {
	return o
}

func (o UserAttributeProfileMapOutput) ToUserAttributeProfileMapOutputWithContext(ctx context.Context) UserAttributeProfileMapOutput {
	return o
}

func (o UserAttributeProfileMapOutput) MapIndex(k pulumi.StringInput) UserAttributeProfileOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UserAttributeProfile {
		return vs[0].(map[string]*UserAttributeProfile)[vs[1].(string)]
	}).(UserAttributeProfileOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserAttributeProfileInput)(nil)).Elem(), &UserAttributeProfile{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserAttributeProfileArrayInput)(nil)).Elem(), UserAttributeProfileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserAttributeProfileMapInput)(nil)).Elem(), UserAttributeProfileMap{})
	pulumi.RegisterOutputType(UserAttributeProfileOutput{})
	pulumi.RegisterOutputType(UserAttributeProfileArrayOutput{})
	pulumi.RegisterOutputType(UserAttributeProfileMapOutput{})
}
