// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package auth0

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-auth0/sdk/v3/go/auth0/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource is used to manage the roles assigned to an organization member.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-auth0/sdk/v3/go/auth0"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			reader, err := auth0.NewRole(ctx, "reader", nil)
//			if err != nil {
//				return err
//			}
//			writer, err := auth0.NewRole(ctx, "writer", nil)
//			if err != nil {
//				return err
//			}
//			user, err := auth0.NewUser(ctx, "user", &auth0.UserArgs{
//				ConnectionName: pulumi.String("Username-Password-Authentication"),
//				Email:          pulumi.String("test-user@auth0.com"),
//				Password:       pulumi.String("MyPass123$"),
//			})
//			if err != nil {
//				return err
//			}
//			myOrg, err := auth0.NewOrganization(ctx, "myOrg", &auth0.OrganizationArgs{
//				DisplayName: pulumi.String("Some Org"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = auth0.NewOrganizationMember(ctx, "myOrgMember", &auth0.OrganizationMemberArgs{
//				OrganizationId: myOrg.ID(),
//				UserId:         user.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = auth0.NewOrganizationMemberRoles(ctx, "myOrgMemberRoles", &auth0.OrganizationMemberRolesArgs{
//				OrganizationId: myOrg.ID(),
//				UserId:         user.ID(),
//				Roles: pulumi.StringArray{
//					reader.ID(),
//					writer.ID(),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// This resource can be imported by specifying the organization ID and user ID separated by "::" (note the double colon) <organizationID>::<userID> # Example
//
// ```sh
//
//	$ pulumi import auth0:index/organizationMemberRoles:OrganizationMemberRoles my_org_member_roles "org_XXXXX::auth0|XXXXX"
//
// ```
type OrganizationMemberRoles struct {
	pulumi.CustomResourceState

	// The ID of the organization.
	OrganizationId pulumi.StringOutput `pulumi:"organizationId"`
	// The role ID(s) to assign to the organization member.
	Roles pulumi.StringArrayOutput `pulumi:"roles"`
	// The user ID of the organization member.
	UserId pulumi.StringOutput `pulumi:"userId"`
}

// NewOrganizationMemberRoles registers a new resource with the given unique name, arguments, and options.
func NewOrganizationMemberRoles(ctx *pulumi.Context,
	name string, args *OrganizationMemberRolesArgs, opts ...pulumi.ResourceOption) (*OrganizationMemberRoles, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OrganizationId == nil {
		return nil, errors.New("invalid value for required argument 'OrganizationId'")
	}
	if args.Roles == nil {
		return nil, errors.New("invalid value for required argument 'Roles'")
	}
	if args.UserId == nil {
		return nil, errors.New("invalid value for required argument 'UserId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OrganizationMemberRoles
	err := ctx.RegisterResource("auth0:index/organizationMemberRoles:OrganizationMemberRoles", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOrganizationMemberRoles gets an existing OrganizationMemberRoles resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOrganizationMemberRoles(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OrganizationMemberRolesState, opts ...pulumi.ResourceOption) (*OrganizationMemberRoles, error) {
	var resource OrganizationMemberRoles
	err := ctx.ReadResource("auth0:index/organizationMemberRoles:OrganizationMemberRoles", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OrganizationMemberRoles resources.
type organizationMemberRolesState struct {
	// The ID of the organization.
	OrganizationId *string `pulumi:"organizationId"`
	// The role ID(s) to assign to the organization member.
	Roles []string `pulumi:"roles"`
	// The user ID of the organization member.
	UserId *string `pulumi:"userId"`
}

type OrganizationMemberRolesState struct {
	// The ID of the organization.
	OrganizationId pulumi.StringPtrInput
	// The role ID(s) to assign to the organization member.
	Roles pulumi.StringArrayInput
	// The user ID of the organization member.
	UserId pulumi.StringPtrInput
}

func (OrganizationMemberRolesState) ElementType() reflect.Type {
	return reflect.TypeOf((*organizationMemberRolesState)(nil)).Elem()
}

type organizationMemberRolesArgs struct {
	// The ID of the organization.
	OrganizationId string `pulumi:"organizationId"`
	// The role ID(s) to assign to the organization member.
	Roles []string `pulumi:"roles"`
	// The user ID of the organization member.
	UserId string `pulumi:"userId"`
}

// The set of arguments for constructing a OrganizationMemberRoles resource.
type OrganizationMemberRolesArgs struct {
	// The ID of the organization.
	OrganizationId pulumi.StringInput
	// The role ID(s) to assign to the organization member.
	Roles pulumi.StringArrayInput
	// The user ID of the organization member.
	UserId pulumi.StringInput
}

func (OrganizationMemberRolesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*organizationMemberRolesArgs)(nil)).Elem()
}

type OrganizationMemberRolesInput interface {
	pulumi.Input

	ToOrganizationMemberRolesOutput() OrganizationMemberRolesOutput
	ToOrganizationMemberRolesOutputWithContext(ctx context.Context) OrganizationMemberRolesOutput
}

func (*OrganizationMemberRoles) ElementType() reflect.Type {
	return reflect.TypeOf((**OrganizationMemberRoles)(nil)).Elem()
}

func (i *OrganizationMemberRoles) ToOrganizationMemberRolesOutput() OrganizationMemberRolesOutput {
	return i.ToOrganizationMemberRolesOutputWithContext(context.Background())
}

func (i *OrganizationMemberRoles) ToOrganizationMemberRolesOutputWithContext(ctx context.Context) OrganizationMemberRolesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationMemberRolesOutput)
}

// OrganizationMemberRolesArrayInput is an input type that accepts OrganizationMemberRolesArray and OrganizationMemberRolesArrayOutput values.
// You can construct a concrete instance of `OrganizationMemberRolesArrayInput` via:
//
//	OrganizationMemberRolesArray{ OrganizationMemberRolesArgs{...} }
type OrganizationMemberRolesArrayInput interface {
	pulumi.Input

	ToOrganizationMemberRolesArrayOutput() OrganizationMemberRolesArrayOutput
	ToOrganizationMemberRolesArrayOutputWithContext(context.Context) OrganizationMemberRolesArrayOutput
}

type OrganizationMemberRolesArray []OrganizationMemberRolesInput

func (OrganizationMemberRolesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OrganizationMemberRoles)(nil)).Elem()
}

func (i OrganizationMemberRolesArray) ToOrganizationMemberRolesArrayOutput() OrganizationMemberRolesArrayOutput {
	return i.ToOrganizationMemberRolesArrayOutputWithContext(context.Background())
}

func (i OrganizationMemberRolesArray) ToOrganizationMemberRolesArrayOutputWithContext(ctx context.Context) OrganizationMemberRolesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationMemberRolesArrayOutput)
}

// OrganizationMemberRolesMapInput is an input type that accepts OrganizationMemberRolesMap and OrganizationMemberRolesMapOutput values.
// You can construct a concrete instance of `OrganizationMemberRolesMapInput` via:
//
//	OrganizationMemberRolesMap{ "key": OrganizationMemberRolesArgs{...} }
type OrganizationMemberRolesMapInput interface {
	pulumi.Input

	ToOrganizationMemberRolesMapOutput() OrganizationMemberRolesMapOutput
	ToOrganizationMemberRolesMapOutputWithContext(context.Context) OrganizationMemberRolesMapOutput
}

type OrganizationMemberRolesMap map[string]OrganizationMemberRolesInput

func (OrganizationMemberRolesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OrganizationMemberRoles)(nil)).Elem()
}

func (i OrganizationMemberRolesMap) ToOrganizationMemberRolesMapOutput() OrganizationMemberRolesMapOutput {
	return i.ToOrganizationMemberRolesMapOutputWithContext(context.Background())
}

func (i OrganizationMemberRolesMap) ToOrganizationMemberRolesMapOutputWithContext(ctx context.Context) OrganizationMemberRolesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationMemberRolesMapOutput)
}

type OrganizationMemberRolesOutput struct{ *pulumi.OutputState }

func (OrganizationMemberRolesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OrganizationMemberRoles)(nil)).Elem()
}

func (o OrganizationMemberRolesOutput) ToOrganizationMemberRolesOutput() OrganizationMemberRolesOutput {
	return o
}

func (o OrganizationMemberRolesOutput) ToOrganizationMemberRolesOutputWithContext(ctx context.Context) OrganizationMemberRolesOutput {
	return o
}

// The ID of the organization.
func (o OrganizationMemberRolesOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v *OrganizationMemberRoles) pulumi.StringOutput { return v.OrganizationId }).(pulumi.StringOutput)
}

// The role ID(s) to assign to the organization member.
func (o OrganizationMemberRolesOutput) Roles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OrganizationMemberRoles) pulumi.StringArrayOutput { return v.Roles }).(pulumi.StringArrayOutput)
}

// The user ID of the organization member.
func (o OrganizationMemberRolesOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v *OrganizationMemberRoles) pulumi.StringOutput { return v.UserId }).(pulumi.StringOutput)
}

type OrganizationMemberRolesArrayOutput struct{ *pulumi.OutputState }

func (OrganizationMemberRolesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OrganizationMemberRoles)(nil)).Elem()
}

func (o OrganizationMemberRolesArrayOutput) ToOrganizationMemberRolesArrayOutput() OrganizationMemberRolesArrayOutput {
	return o
}

func (o OrganizationMemberRolesArrayOutput) ToOrganizationMemberRolesArrayOutputWithContext(ctx context.Context) OrganizationMemberRolesArrayOutput {
	return o
}

func (o OrganizationMemberRolesArrayOutput) Index(i pulumi.IntInput) OrganizationMemberRolesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OrganizationMemberRoles {
		return vs[0].([]*OrganizationMemberRoles)[vs[1].(int)]
	}).(OrganizationMemberRolesOutput)
}

type OrganizationMemberRolesMapOutput struct{ *pulumi.OutputState }

func (OrganizationMemberRolesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OrganizationMemberRoles)(nil)).Elem()
}

func (o OrganizationMemberRolesMapOutput) ToOrganizationMemberRolesMapOutput() OrganizationMemberRolesMapOutput {
	return o
}

func (o OrganizationMemberRolesMapOutput) ToOrganizationMemberRolesMapOutputWithContext(ctx context.Context) OrganizationMemberRolesMapOutput {
	return o
}

func (o OrganizationMemberRolesMapOutput) MapIndex(k pulumi.StringInput) OrganizationMemberRolesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OrganizationMemberRoles {
		return vs[0].(map[string]*OrganizationMemberRoles)[vs[1].(string)]
	}).(OrganizationMemberRolesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OrganizationMemberRolesInput)(nil)).Elem(), &OrganizationMemberRoles{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrganizationMemberRolesArrayInput)(nil)).Elem(), OrganizationMemberRolesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrganizationMemberRolesMapInput)(nil)).Elem(), OrganizationMemberRolesMap{})
	pulumi.RegisterOutputType(OrganizationMemberRolesOutput{})
	pulumi.RegisterOutputType(OrganizationMemberRolesArrayOutput{})
	pulumi.RegisterOutputType(OrganizationMemberRolesMapOutput{})
}
