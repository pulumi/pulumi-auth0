// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package auth0

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-auth0/sdk/v3/go/auth0/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The provider type for the auth0 package. By default, resources use package-wide configuration
// settings, however an explicit `Provider` instance may be created and passed during resource
// construction to achieve fine-grained programmatic control over provider settings. See the
// [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
type Provider struct {
	pulumi.ProviderResourceState

	// Your Auth0 [management api access
	// token](https://auth0.com/docs/security/tokens/access-tokens/management-api-access-tokens). It can also be sourced from
	// the `AUTH0_API_TOKEN` environment variable. It can be used instead of `clientId` + `clientSecret`. If both are
	// specified, `apiToken` will be used over `clientId` + `clientSecret` fields.
	ApiToken pulumi.StringPtrOutput `pulumi:"apiToken"`
	// Your Auth0 audience when using a custom domain. It can also be sourced from the `AUTH0_AUDIENCE` environment variable.
	Audience pulumi.StringPtrOutput `pulumi:"audience"`
	// The private key used to sign the client assertion JWT. It can also be sourced from the
	// `AUTH0_CLIENT_ASSERTION_PRIVATE_KEY` environment variable.
	ClientAssertionPrivateKey pulumi.StringPtrOutput `pulumi:"clientAssertionPrivateKey"`
	// The algorithm used to sign the client assertion JWT. It can also be sourced from the
	// `AUTH0_CLIENT_ASSERTION_SIGNING_ALG` environment variable.
	ClientAssertionSigningAlg pulumi.StringPtrOutput `pulumi:"clientAssertionSigningAlg"`
	// Your Auth0 client ID. It can also be sourced from the `AUTH0_CLIENT_ID` environment variable.
	ClientId pulumi.StringPtrOutput `pulumi:"clientId"`
	// Your Auth0 client secret. It can also be sourced from the `AUTH0_CLIENT_SECRET` environment variable.
	ClientSecret pulumi.StringPtrOutput `pulumi:"clientSecret"`
	// Your Auth0 domain name. It can also be sourced from the `AUTH0_DOMAIN` environment variable.
	Domain pulumi.StringPtrOutput `pulumi:"domain"`
}

// NewProvider registers a new resource with the given unique name, arguments, and options.
func NewProvider(ctx *pulumi.Context,
	name string, args *ProviderArgs, opts ...pulumi.ResourceOption) (*Provider, error) {
	if args == nil {
		args = &ProviderArgs{}
	}

	if args.Debug == nil {
		if d := internal.GetEnvOrDefault(nil, internal.ParseEnvBool, "AUTH0_DEBUG"); d != nil {
			args.Debug = pulumi.BoolPtr(d.(bool))
		}
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Provider
	err := ctx.RegisterResource("pulumi:providers:auth0", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type providerArgs struct {
	// Your Auth0 [management api access
	// token](https://auth0.com/docs/security/tokens/access-tokens/management-api-access-tokens). It can also be sourced from
	// the `AUTH0_API_TOKEN` environment variable. It can be used instead of `clientId` + `clientSecret`. If both are
	// specified, `apiToken` will be used over `clientId` + `clientSecret` fields.
	ApiToken *string `pulumi:"apiToken"`
	// Your Auth0 audience when using a custom domain. It can also be sourced from the `AUTH0_AUDIENCE` environment variable.
	Audience *string `pulumi:"audience"`
	// While toggled on, the API token gets fetched from the keyring for the given domain
	CliLogin *bool `pulumi:"cliLogin"`
	// The private key used to sign the client assertion JWT. It can also be sourced from the
	// `AUTH0_CLIENT_ASSERTION_PRIVATE_KEY` environment variable.
	ClientAssertionPrivateKey *string `pulumi:"clientAssertionPrivateKey"`
	// The algorithm used to sign the client assertion JWT. It can also be sourced from the
	// `AUTH0_CLIENT_ASSERTION_SIGNING_ALG` environment variable.
	ClientAssertionSigningAlg *string `pulumi:"clientAssertionSigningAlg"`
	// Your Auth0 client ID. It can also be sourced from the `AUTH0_CLIENT_ID` environment variable.
	ClientId *string `pulumi:"clientId"`
	// Your Auth0 client secret. It can also be sourced from the `AUTH0_CLIENT_SECRET` environment variable.
	ClientSecret *string `pulumi:"clientSecret"`
	// Enables HTTP request and response logging when TF_LOG=DEBUG is set. It can also be sourced from the `AUTH0_DEBUG`
	// environment variable.
	Debug *bool `pulumi:"debug"`
	// Your Auth0 domain name. It can also be sourced from the `AUTH0_DOMAIN` environment variable.
	Domain             *string `pulumi:"domain"`
	DynamicCredentials *bool   `pulumi:"dynamicCredentials"`
}

// The set of arguments for constructing a Provider resource.
type ProviderArgs struct {
	// Your Auth0 [management api access
	// token](https://auth0.com/docs/security/tokens/access-tokens/management-api-access-tokens). It can also be sourced from
	// the `AUTH0_API_TOKEN` environment variable. It can be used instead of `clientId` + `clientSecret`. If both are
	// specified, `apiToken` will be used over `clientId` + `clientSecret` fields.
	ApiToken pulumi.StringPtrInput
	// Your Auth0 audience when using a custom domain. It can also be sourced from the `AUTH0_AUDIENCE` environment variable.
	Audience pulumi.StringPtrInput
	// While toggled on, the API token gets fetched from the keyring for the given domain
	CliLogin pulumi.BoolPtrInput
	// The private key used to sign the client assertion JWT. It can also be sourced from the
	// `AUTH0_CLIENT_ASSERTION_PRIVATE_KEY` environment variable.
	ClientAssertionPrivateKey pulumi.StringPtrInput
	// The algorithm used to sign the client assertion JWT. It can also be sourced from the
	// `AUTH0_CLIENT_ASSERTION_SIGNING_ALG` environment variable.
	ClientAssertionSigningAlg pulumi.StringPtrInput
	// Your Auth0 client ID. It can also be sourced from the `AUTH0_CLIENT_ID` environment variable.
	ClientId pulumi.StringPtrInput
	// Your Auth0 client secret. It can also be sourced from the `AUTH0_CLIENT_SECRET` environment variable.
	ClientSecret pulumi.StringPtrInput
	// Enables HTTP request and response logging when TF_LOG=DEBUG is set. It can also be sourced from the `AUTH0_DEBUG`
	// environment variable.
	Debug pulumi.BoolPtrInput
	// Your Auth0 domain name. It can also be sourced from the `AUTH0_DOMAIN` environment variable.
	Domain             pulumi.StringPtrInput
	DynamicCredentials pulumi.BoolPtrInput
}

func (ProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*providerArgs)(nil)).Elem()
}

// This function returns a Terraform config object with terraform-namecased keys,to be used with the Terraform Module Provider.
func (r *Provider) TerraformConfig(ctx *pulumi.Context) (ProviderTerraformConfigResultOutput, error) {
	out, err := ctx.Call("pulumi:providers:auth0/terraformConfig", nil, ProviderTerraformConfigResultOutput{}, r)
	if err != nil {
		return ProviderTerraformConfigResultOutput{}, err
	}
	return out.(ProviderTerraformConfigResultOutput), nil
}

type ProviderTerraformConfigResult struct {
	Result map[string]interface{} `pulumi:"result"`
}

type ProviderTerraformConfigResultOutput struct{ *pulumi.OutputState }

func (ProviderTerraformConfigResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderTerraformConfigResult)(nil)).Elem()
}

func (o ProviderTerraformConfigResultOutput) Result() pulumi.MapOutput {
	return o.ApplyT(func(v ProviderTerraformConfigResult) map[string]interface{} { return v.Result }).(pulumi.MapOutput)
}

type ProviderInput interface {
	pulumi.Input

	ToProviderOutput() ProviderOutput
	ToProviderOutputWithContext(ctx context.Context) ProviderOutput
}

func (*Provider) ElementType() reflect.Type {
	return reflect.TypeOf((**Provider)(nil)).Elem()
}

func (i *Provider) ToProviderOutput() ProviderOutput {
	return i.ToProviderOutputWithContext(context.Background())
}

func (i *Provider) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderOutput)
}

type ProviderOutput struct{ *pulumi.OutputState }

func (ProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Provider)(nil)).Elem()
}

func (o ProviderOutput) ToProviderOutput() ProviderOutput {
	return o
}

func (o ProviderOutput) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return o
}

// Your Auth0 [management api access
// token](https://auth0.com/docs/security/tokens/access-tokens/management-api-access-tokens). It can also be sourced from
// the `AUTH0_API_TOKEN` environment variable. It can be used instead of `clientId` + `clientSecret`. If both are
// specified, `apiToken` will be used over `clientId` + `clientSecret` fields.
func (o ProviderOutput) ApiToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.ApiToken }).(pulumi.StringPtrOutput)
}

// Your Auth0 audience when using a custom domain. It can also be sourced from the `AUTH0_AUDIENCE` environment variable.
func (o ProviderOutput) Audience() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.Audience }).(pulumi.StringPtrOutput)
}

// The private key used to sign the client assertion JWT. It can also be sourced from the
// `AUTH0_CLIENT_ASSERTION_PRIVATE_KEY` environment variable.
func (o ProviderOutput) ClientAssertionPrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.ClientAssertionPrivateKey }).(pulumi.StringPtrOutput)
}

// The algorithm used to sign the client assertion JWT. It can also be sourced from the
// `AUTH0_CLIENT_ASSERTION_SIGNING_ALG` environment variable.
func (o ProviderOutput) ClientAssertionSigningAlg() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.ClientAssertionSigningAlg }).(pulumi.StringPtrOutput)
}

// Your Auth0 client ID. It can also be sourced from the `AUTH0_CLIENT_ID` environment variable.
func (o ProviderOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.ClientId }).(pulumi.StringPtrOutput)
}

// Your Auth0 client secret. It can also be sourced from the `AUTH0_CLIENT_SECRET` environment variable.
func (o ProviderOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.ClientSecret }).(pulumi.StringPtrOutput)
}

// Your Auth0 domain name. It can also be sourced from the `AUTH0_DOMAIN` environment variable.
func (o ProviderOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.Domain }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderInput)(nil)).Elem(), &Provider{})
	pulumi.RegisterOutputType(ProviderOutput{})
	pulumi.RegisterOutputType(ProviderTerraformConfigResultOutput{})
}
