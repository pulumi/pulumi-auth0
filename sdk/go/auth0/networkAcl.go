// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package auth0

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-auth0/sdk/v3/go/auth0/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// With this resource, you can create and manage NetworkACLs for a tenant.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-auth0/sdk/v3/go/auth0"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Example of auth0_network_acl with match criteria
//			_, err := auth0.NewNetworkAcl(ctx, "my_network_acl_match", &auth0.NetworkAclArgs{
//				Description: pulumi.String("Example with match network ACL"),
//				Active:      pulumi.Bool(true),
//				Priority:    pulumi.Int(1),
//				Rule: &auth0.NetworkAclRuleArgs{
//					Action: &auth0.NetworkAclRuleActionArgs{
//						Allow: pulumi.Bool(true),
//					},
//					Scope: pulumi.String("management"),
//					Match: &auth0.NetworkAclRuleMatchArgs{
//						GeoCountryCodes: pulumi.StringArray{
//							pulumi.String("US"),
//							pulumi.String("CA"),
//						},
//						GeoSubdivisionCodes: pulumi.StringArray{
//							pulumi.String("US-NY"),
//							pulumi.String("CA-ON"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			// Example of auth0_network_acl with not-match criteria
//			_, err = auth0.NewNetworkAcl(ctx, "my_network_acl_not_match", &auth0.NetworkAclArgs{
//				Description: pulumi.String("Example with not match network ACL"),
//				Active:      pulumi.Bool(true),
//				Priority:    pulumi.Int(3),
//				Rule: &auth0.NetworkAclRuleArgs{
//					Action: &auth0.NetworkAclRuleActionArgs{
//						Log: pulumi.Bool(true),
//					},
//					Scope: pulumi.String("authentication"),
//					NotMatch: &auth0.NetworkAclRuleNotMatchArgs{
//						Asns: pulumi.IntArray{
//							pulumi.Int(9876),
//						},
//						Ipv4Cidrs: pulumi.StringArray{
//							pulumi.String("192.168.1.0/24"),
//							pulumi.String("10.0.0.0/8"),
//						},
//						Ipv6Cidrs: pulumi.StringArray{
//							pulumi.String("2001:db8::/32"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// This resource can be imported using the network acl ID.
//
// Example:
//
// ```sh
// $ pulumi import auth0:index/networkAcl:NetworkAcl my_network_acl "167f9a50-4444-3333-1111-ndfdaf953ab4"
// ```
type NetworkAcl struct {
	pulumi.CustomResourceState

	// Whether the Network ACL is active
	Active pulumi.BoolOutput `pulumi:"active"`
	// The description of the Network ACL
	Description pulumi.StringOutput `pulumi:"description"`
	// The priority of the Network ACL. Must be unique between 1 and 10.
	Priority pulumi.IntOutput `pulumi:"priority"`
	// The rule of the Network ACL
	Rule NetworkAclRuleOutput `pulumi:"rule"`
}

// NewNetworkAcl registers a new resource with the given unique name, arguments, and options.
func NewNetworkAcl(ctx *pulumi.Context,
	name string, args *NetworkAclArgs, opts ...pulumi.ResourceOption) (*NetworkAcl, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Active == nil {
		return nil, errors.New("invalid value for required argument 'Active'")
	}
	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.Priority == nil {
		return nil, errors.New("invalid value for required argument 'Priority'")
	}
	if args.Rule == nil {
		return nil, errors.New("invalid value for required argument 'Rule'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NetworkAcl
	err := ctx.RegisterResource("auth0:index/networkAcl:NetworkAcl", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkAcl gets an existing NetworkAcl resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkAcl(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkAclState, opts ...pulumi.ResourceOption) (*NetworkAcl, error) {
	var resource NetworkAcl
	err := ctx.ReadResource("auth0:index/networkAcl:NetworkAcl", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkAcl resources.
type networkAclState struct {
	// Whether the Network ACL is active
	Active *bool `pulumi:"active"`
	// The description of the Network ACL
	Description *string `pulumi:"description"`
	// The priority of the Network ACL. Must be unique between 1 and 10.
	Priority *int `pulumi:"priority"`
	// The rule of the Network ACL
	Rule *NetworkAclRule `pulumi:"rule"`
}

type NetworkAclState struct {
	// Whether the Network ACL is active
	Active pulumi.BoolPtrInput
	// The description of the Network ACL
	Description pulumi.StringPtrInput
	// The priority of the Network ACL. Must be unique between 1 and 10.
	Priority pulumi.IntPtrInput
	// The rule of the Network ACL
	Rule NetworkAclRulePtrInput
}

func (NetworkAclState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkAclState)(nil)).Elem()
}

type networkAclArgs struct {
	// Whether the Network ACL is active
	Active bool `pulumi:"active"`
	// The description of the Network ACL
	Description string `pulumi:"description"`
	// The priority of the Network ACL. Must be unique between 1 and 10.
	Priority int `pulumi:"priority"`
	// The rule of the Network ACL
	Rule NetworkAclRule `pulumi:"rule"`
}

// The set of arguments for constructing a NetworkAcl resource.
type NetworkAclArgs struct {
	// Whether the Network ACL is active
	Active pulumi.BoolInput
	// The description of the Network ACL
	Description pulumi.StringInput
	// The priority of the Network ACL. Must be unique between 1 and 10.
	Priority pulumi.IntInput
	// The rule of the Network ACL
	Rule NetworkAclRuleInput
}

func (NetworkAclArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkAclArgs)(nil)).Elem()
}

type NetworkAclInput interface {
	pulumi.Input

	ToNetworkAclOutput() NetworkAclOutput
	ToNetworkAclOutputWithContext(ctx context.Context) NetworkAclOutput
}

func (*NetworkAcl) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkAcl)(nil)).Elem()
}

func (i *NetworkAcl) ToNetworkAclOutput() NetworkAclOutput {
	return i.ToNetworkAclOutputWithContext(context.Background())
}

func (i *NetworkAcl) ToNetworkAclOutputWithContext(ctx context.Context) NetworkAclOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkAclOutput)
}

// NetworkAclArrayInput is an input type that accepts NetworkAclArray and NetworkAclArrayOutput values.
// You can construct a concrete instance of `NetworkAclArrayInput` via:
//
//	NetworkAclArray{ NetworkAclArgs{...} }
type NetworkAclArrayInput interface {
	pulumi.Input

	ToNetworkAclArrayOutput() NetworkAclArrayOutput
	ToNetworkAclArrayOutputWithContext(context.Context) NetworkAclArrayOutput
}

type NetworkAclArray []NetworkAclInput

func (NetworkAclArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkAcl)(nil)).Elem()
}

func (i NetworkAclArray) ToNetworkAclArrayOutput() NetworkAclArrayOutput {
	return i.ToNetworkAclArrayOutputWithContext(context.Background())
}

func (i NetworkAclArray) ToNetworkAclArrayOutputWithContext(ctx context.Context) NetworkAclArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkAclArrayOutput)
}

// NetworkAclMapInput is an input type that accepts NetworkAclMap and NetworkAclMapOutput values.
// You can construct a concrete instance of `NetworkAclMapInput` via:
//
//	NetworkAclMap{ "key": NetworkAclArgs{...} }
type NetworkAclMapInput interface {
	pulumi.Input

	ToNetworkAclMapOutput() NetworkAclMapOutput
	ToNetworkAclMapOutputWithContext(context.Context) NetworkAclMapOutput
}

type NetworkAclMap map[string]NetworkAclInput

func (NetworkAclMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkAcl)(nil)).Elem()
}

func (i NetworkAclMap) ToNetworkAclMapOutput() NetworkAclMapOutput {
	return i.ToNetworkAclMapOutputWithContext(context.Background())
}

func (i NetworkAclMap) ToNetworkAclMapOutputWithContext(ctx context.Context) NetworkAclMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkAclMapOutput)
}

type NetworkAclOutput struct{ *pulumi.OutputState }

func (NetworkAclOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkAcl)(nil)).Elem()
}

func (o NetworkAclOutput) ToNetworkAclOutput() NetworkAclOutput {
	return o
}

func (o NetworkAclOutput) ToNetworkAclOutputWithContext(ctx context.Context) NetworkAclOutput {
	return o
}

// Whether the Network ACL is active
func (o NetworkAclOutput) Active() pulumi.BoolOutput {
	return o.ApplyT(func(v *NetworkAcl) pulumi.BoolOutput { return v.Active }).(pulumi.BoolOutput)
}

// The description of the Network ACL
func (o NetworkAclOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkAcl) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// The priority of the Network ACL. Must be unique between 1 and 10.
func (o NetworkAclOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v *NetworkAcl) pulumi.IntOutput { return v.Priority }).(pulumi.IntOutput)
}

// The rule of the Network ACL
func (o NetworkAclOutput) Rule() NetworkAclRuleOutput {
	return o.ApplyT(func(v *NetworkAcl) NetworkAclRuleOutput { return v.Rule }).(NetworkAclRuleOutput)
}

type NetworkAclArrayOutput struct{ *pulumi.OutputState }

func (NetworkAclArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkAcl)(nil)).Elem()
}

func (o NetworkAclArrayOutput) ToNetworkAclArrayOutput() NetworkAclArrayOutput {
	return o
}

func (o NetworkAclArrayOutput) ToNetworkAclArrayOutputWithContext(ctx context.Context) NetworkAclArrayOutput {
	return o
}

func (o NetworkAclArrayOutput) Index(i pulumi.IntInput) NetworkAclOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NetworkAcl {
		return vs[0].([]*NetworkAcl)[vs[1].(int)]
	}).(NetworkAclOutput)
}

type NetworkAclMapOutput struct{ *pulumi.OutputState }

func (NetworkAclMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkAcl)(nil)).Elem()
}

func (o NetworkAclMapOutput) ToNetworkAclMapOutput() NetworkAclMapOutput {
	return o
}

func (o NetworkAclMapOutput) ToNetworkAclMapOutputWithContext(ctx context.Context) NetworkAclMapOutput {
	return o
}

func (o NetworkAclMapOutput) MapIndex(k pulumi.StringInput) NetworkAclOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NetworkAcl {
		return vs[0].(map[string]*NetworkAcl)[vs[1].(string)]
	}).(NetworkAclOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkAclInput)(nil)).Elem(), &NetworkAcl{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkAclArrayInput)(nil)).Elem(), NetworkAclArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkAclMapInput)(nil)).Elem(), NetworkAclMap{})
	pulumi.RegisterOutputType(NetworkAclOutput{})
	pulumi.RegisterOutputType(NetworkAclArrayOutput{})
	pulumi.RegisterOutputType(NetworkAclMapOutput{})
}
