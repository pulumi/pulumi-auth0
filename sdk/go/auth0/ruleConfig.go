// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package auth0

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// With Auth0, you can create custom Javascript snippets that run in a secure, isolated sandbox as part of your authentication pipeline, which are otherwise known as rules. This resource allows you to create and manage variables that are available to all rules via Auth0's global configuration object. Used in conjunction with configured rules.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"fmt"
//
// 	"github.com/pulumi/pulumi-auth0/sdk/go/auth0"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := auth0.NewRule(ctx, "myRule", &auth0.RuleArgs{
// 			Enabled: pulumi.Bool(true),
// 			Script:  pulumi.String(fmt.Sprintf("%v%v%v%v", "function (user, context, callback) {\n", "  callback(null, user, context);\n", "}\n", "\n")),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = auth0.NewRuleConfig(ctx, "myRuleConfig", &auth0.RuleConfigArgs{
// 			Key:   pulumi.String("foo"),
// 			Value: pulumi.String("bar"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type RuleConfig struct {
	pulumi.CustomResourceState

	// String. Key for a rules configuration variable.
	Key pulumi.StringOutput `pulumi:"key"`
	// String, Case-sensitive. Value for a rules configuration variable.
	Value pulumi.StringOutput `pulumi:"value"`
}

// NewRuleConfig registers a new resource with the given unique name, arguments, and options.
func NewRuleConfig(ctx *pulumi.Context,
	name string, args *RuleConfigArgs, opts ...pulumi.ResourceOption) (*RuleConfig, error) {
	if args == nil || args.Key == nil {
		return nil, errors.New("missing required argument 'Key'")
	}
	if args == nil || args.Value == nil {
		return nil, errors.New("missing required argument 'Value'")
	}
	if args == nil {
		args = &RuleConfigArgs{}
	}
	var resource RuleConfig
	err := ctx.RegisterResource("auth0:index/ruleConfig:RuleConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRuleConfig gets an existing RuleConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRuleConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RuleConfigState, opts ...pulumi.ResourceOption) (*RuleConfig, error) {
	var resource RuleConfig
	err := ctx.ReadResource("auth0:index/ruleConfig:RuleConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RuleConfig resources.
type ruleConfigState struct {
	// String. Key for a rules configuration variable.
	Key *string `pulumi:"key"`
	// String, Case-sensitive. Value for a rules configuration variable.
	Value *string `pulumi:"value"`
}

type RuleConfigState struct {
	// String. Key for a rules configuration variable.
	Key pulumi.StringPtrInput
	// String, Case-sensitive. Value for a rules configuration variable.
	Value pulumi.StringPtrInput
}

func (RuleConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*ruleConfigState)(nil)).Elem()
}

type ruleConfigArgs struct {
	// String. Key for a rules configuration variable.
	Key string `pulumi:"key"`
	// String, Case-sensitive. Value for a rules configuration variable.
	Value string `pulumi:"value"`
}

// The set of arguments for constructing a RuleConfig resource.
type RuleConfigArgs struct {
	// String. Key for a rules configuration variable.
	Key pulumi.StringInput
	// String, Case-sensitive. Value for a rules configuration variable.
	Value pulumi.StringInput
}

func (RuleConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ruleConfigArgs)(nil)).Elem()
}
