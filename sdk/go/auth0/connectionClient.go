// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package auth0

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// With this resource, you can enable a single client on a connection.
//
// !> To prevent issues, avoid using this resource together with the `ConnectionClients` resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-auth0/sdk/v2/go/auth0"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			myConn, err := auth0.NewConnection(ctx, "myConn", &auth0.ConnectionArgs{
//				Strategy: pulumi.String("auth0"),
//			})
//			if err != nil {
//				return err
//			}
//			myClient, err := auth0.NewClient(ctx, "myClient", nil)
//			if err != nil {
//				return err
//			}
//			_, err = auth0.NewConnectionClient(ctx, "myConnClientAssoc", &auth0.ConnectionClientArgs{
//				ConnectionId: myConn.ID(),
//				ClientId:     myClient.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// This resource can be imported by specifying the connection ID and client ID separated by ":". # Example
//
// ```sh
//
//	$ pulumi import auth0:index/connectionClient:ConnectionClient my_conn_client_assoc con_XXXXX:XXXXXXXX
//
// ```
type ConnectionClient struct {
	pulumi.CustomResourceState

	// ID of the client for which the connection is enabled.
	ClientId pulumi.StringOutput `pulumi:"clientId"`
	// ID of the connection on which to enable the client.
	ConnectionId pulumi.StringOutput `pulumi:"connectionId"`
	// The name of the connection on which to enable the client.
	Name pulumi.StringOutput `pulumi:"name"`
	// The strategy of the connection on which to enable the client.
	Strategy pulumi.StringOutput `pulumi:"strategy"`
}

// NewConnectionClient registers a new resource with the given unique name, arguments, and options.
func NewConnectionClient(ctx *pulumi.Context,
	name string, args *ConnectionClientArgs, opts ...pulumi.ResourceOption) (*ConnectionClient, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClientId == nil {
		return nil, errors.New("invalid value for required argument 'ClientId'")
	}
	if args.ConnectionId == nil {
		return nil, errors.New("invalid value for required argument 'ConnectionId'")
	}
	var resource ConnectionClient
	err := ctx.RegisterResource("auth0:index/connectionClient:ConnectionClient", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConnectionClient gets an existing ConnectionClient resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConnectionClient(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConnectionClientState, opts ...pulumi.ResourceOption) (*ConnectionClient, error) {
	var resource ConnectionClient
	err := ctx.ReadResource("auth0:index/connectionClient:ConnectionClient", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConnectionClient resources.
type connectionClientState struct {
	// ID of the client for which the connection is enabled.
	ClientId *string `pulumi:"clientId"`
	// ID of the connection on which to enable the client.
	ConnectionId *string `pulumi:"connectionId"`
	// The name of the connection on which to enable the client.
	Name *string `pulumi:"name"`
	// The strategy of the connection on which to enable the client.
	Strategy *string `pulumi:"strategy"`
}

type ConnectionClientState struct {
	// ID of the client for which the connection is enabled.
	ClientId pulumi.StringPtrInput
	// ID of the connection on which to enable the client.
	ConnectionId pulumi.StringPtrInput
	// The name of the connection on which to enable the client.
	Name pulumi.StringPtrInput
	// The strategy of the connection on which to enable the client.
	Strategy pulumi.StringPtrInput
}

func (ConnectionClientState) ElementType() reflect.Type {
	return reflect.TypeOf((*connectionClientState)(nil)).Elem()
}

type connectionClientArgs struct {
	// ID of the client for which the connection is enabled.
	ClientId string `pulumi:"clientId"`
	// ID of the connection on which to enable the client.
	ConnectionId string `pulumi:"connectionId"`
}

// The set of arguments for constructing a ConnectionClient resource.
type ConnectionClientArgs struct {
	// ID of the client for which the connection is enabled.
	ClientId pulumi.StringInput
	// ID of the connection on which to enable the client.
	ConnectionId pulumi.StringInput
}

func (ConnectionClientArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*connectionClientArgs)(nil)).Elem()
}

type ConnectionClientInput interface {
	pulumi.Input

	ToConnectionClientOutput() ConnectionClientOutput
	ToConnectionClientOutputWithContext(ctx context.Context) ConnectionClientOutput
}

func (*ConnectionClient) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionClient)(nil)).Elem()
}

func (i *ConnectionClient) ToConnectionClientOutput() ConnectionClientOutput {
	return i.ToConnectionClientOutputWithContext(context.Background())
}

func (i *ConnectionClient) ToConnectionClientOutputWithContext(ctx context.Context) ConnectionClientOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionClientOutput)
}

// ConnectionClientArrayInput is an input type that accepts ConnectionClientArray and ConnectionClientArrayOutput values.
// You can construct a concrete instance of `ConnectionClientArrayInput` via:
//
//	ConnectionClientArray{ ConnectionClientArgs{...} }
type ConnectionClientArrayInput interface {
	pulumi.Input

	ToConnectionClientArrayOutput() ConnectionClientArrayOutput
	ToConnectionClientArrayOutputWithContext(context.Context) ConnectionClientArrayOutput
}

type ConnectionClientArray []ConnectionClientInput

func (ConnectionClientArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConnectionClient)(nil)).Elem()
}

func (i ConnectionClientArray) ToConnectionClientArrayOutput() ConnectionClientArrayOutput {
	return i.ToConnectionClientArrayOutputWithContext(context.Background())
}

func (i ConnectionClientArray) ToConnectionClientArrayOutputWithContext(ctx context.Context) ConnectionClientArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionClientArrayOutput)
}

// ConnectionClientMapInput is an input type that accepts ConnectionClientMap and ConnectionClientMapOutput values.
// You can construct a concrete instance of `ConnectionClientMapInput` via:
//
//	ConnectionClientMap{ "key": ConnectionClientArgs{...} }
type ConnectionClientMapInput interface {
	pulumi.Input

	ToConnectionClientMapOutput() ConnectionClientMapOutput
	ToConnectionClientMapOutputWithContext(context.Context) ConnectionClientMapOutput
}

type ConnectionClientMap map[string]ConnectionClientInput

func (ConnectionClientMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConnectionClient)(nil)).Elem()
}

func (i ConnectionClientMap) ToConnectionClientMapOutput() ConnectionClientMapOutput {
	return i.ToConnectionClientMapOutputWithContext(context.Background())
}

func (i ConnectionClientMap) ToConnectionClientMapOutputWithContext(ctx context.Context) ConnectionClientMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionClientMapOutput)
}

type ConnectionClientOutput struct{ *pulumi.OutputState }

func (ConnectionClientOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionClient)(nil)).Elem()
}

func (o ConnectionClientOutput) ToConnectionClientOutput() ConnectionClientOutput {
	return o
}

func (o ConnectionClientOutput) ToConnectionClientOutputWithContext(ctx context.Context) ConnectionClientOutput {
	return o
}

// ID of the client for which the connection is enabled.
func (o ConnectionClientOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectionClient) pulumi.StringOutput { return v.ClientId }).(pulumi.StringOutput)
}

// ID of the connection on which to enable the client.
func (o ConnectionClientOutput) ConnectionId() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectionClient) pulumi.StringOutput { return v.ConnectionId }).(pulumi.StringOutput)
}

// The name of the connection on which to enable the client.
func (o ConnectionClientOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectionClient) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The strategy of the connection on which to enable the client.
func (o ConnectionClientOutput) Strategy() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectionClient) pulumi.StringOutput { return v.Strategy }).(pulumi.StringOutput)
}

type ConnectionClientArrayOutput struct{ *pulumi.OutputState }

func (ConnectionClientArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConnectionClient)(nil)).Elem()
}

func (o ConnectionClientArrayOutput) ToConnectionClientArrayOutput() ConnectionClientArrayOutput {
	return o
}

func (o ConnectionClientArrayOutput) ToConnectionClientArrayOutputWithContext(ctx context.Context) ConnectionClientArrayOutput {
	return o
}

func (o ConnectionClientArrayOutput) Index(i pulumi.IntInput) ConnectionClientOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ConnectionClient {
		return vs[0].([]*ConnectionClient)[vs[1].(int)]
	}).(ConnectionClientOutput)
}

type ConnectionClientMapOutput struct{ *pulumi.OutputState }

func (ConnectionClientMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConnectionClient)(nil)).Elem()
}

func (o ConnectionClientMapOutput) ToConnectionClientMapOutput() ConnectionClientMapOutput {
	return o
}

func (o ConnectionClientMapOutput) ToConnectionClientMapOutputWithContext(ctx context.Context) ConnectionClientMapOutput {
	return o
}

func (o ConnectionClientMapOutput) MapIndex(k pulumi.StringInput) ConnectionClientOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ConnectionClient {
		return vs[0].(map[string]*ConnectionClient)[vs[1].(string)]
	}).(ConnectionClientOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionClientInput)(nil)).Elem(), &ConnectionClient{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionClientArrayInput)(nil)).Elem(), ConnectionClientArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionClientMapInput)(nil)).Elem(), ConnectionClientMap{})
	pulumi.RegisterOutputType(ConnectionClientOutput{})
	pulumi.RegisterOutputType(ConnectionClientArrayOutput{})
	pulumi.RegisterOutputType(ConnectionClientMapOutput{})
}
