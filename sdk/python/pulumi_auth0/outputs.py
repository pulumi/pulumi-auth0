# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'ActionDependency',
    'ActionSecret',
    'ActionSupportedTriggers',
    'BrandingColors',
    'BrandingFont',
    'BrandingUniversalLogin',
    'ClientAddons',
    'ClientAddonsSamlp',
    'ClientAddonsSamlpLogout',
    'ClientJwtConfiguration',
    'ClientMobile',
    'ClientMobileAndroid',
    'ClientMobileIos',
    'ClientNativeSocialLogin',
    'ClientNativeSocialLoginApple',
    'ClientNativeSocialLoginFacebook',
    'ClientRefreshToken',
    'ConnectionOptions',
    'ConnectionOptionsGatewayAuthentication',
    'ConnectionOptionsIdpInitiated',
    'ConnectionOptionsMfa',
    'ConnectionOptionsPasswordComplexityOptions',
    'ConnectionOptionsPasswordDictionary',
    'ConnectionOptionsPasswordHistory',
    'ConnectionOptionsPasswordNoPersonalInfo',
    'ConnectionOptionsTotp',
    'ConnectionOptionsValidation',
    'ConnectionOptionsValidationUsername',
    'CustomDomainVerification',
    'EmailCredentials',
    'GlobalClientAddons',
    'GlobalClientAddonsSamlp',
    'GlobalClientAddonsSamlpLogout',
    'GlobalClientJwtConfiguration',
    'GlobalClientMobile',
    'GlobalClientMobileAndroid',
    'GlobalClientMobileIos',
    'GlobalClientNativeSocialLogin',
    'GlobalClientNativeSocialLoginApple',
    'GlobalClientNativeSocialLoginFacebook',
    'GlobalClientRefreshToken',
    'GuardianPhone',
    'GuardianPhoneOptions',
    'LogStreamSink',
    'OrganizationBranding',
    'OrganizationConnection',
    'ResourceServerScope',
    'RolePermission',
    'TenantChangePassword',
    'TenantErrorPage',
    'TenantFlags',
    'TenantGuardianMfaPage',
    'TenantUniversalLogin',
    'TenantUniversalLoginColors',
    'TriggerBindingAction',
]

@pulumi.output_type
class ActionDependency(dict):
    def __init__(__self__, *,
                 name: str,
                 version: str):
        """
        :param str name: Secret name.
        :param str version: Trigger version.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Secret name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        Trigger version.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ActionSecret(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: Secret name.
        :param str value: Secret value.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Secret name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Secret value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ActionSupportedTriggers(dict):
    def __init__(__self__, *,
                 id: str,
                 version: str):
        """
        :param str id: Trigger ID.
        :param str version: Trigger version.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Trigger ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        Trigger version.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class BrandingColors(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "pageBackground":
            suggest = "page_background"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BrandingColors. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BrandingColors.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BrandingColors.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 page_background: Optional[str] = None,
                 primary: Optional[str] = None):
        """
        :param str page_background: String, Hexadecimal. Background color of login pages.
        :param str primary: String, Hexadecimal. Primary button background color.
        """
        if page_background is not None:
            pulumi.set(__self__, "page_background", page_background)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)

    @property
    @pulumi.getter(name="pageBackground")
    def page_background(self) -> Optional[str]:
        """
        String, Hexadecimal. Background color of login pages.
        """
        return pulumi.get(self, "page_background")

    @property
    @pulumi.getter
    def primary(self) -> Optional[str]:
        """
        String, Hexadecimal. Primary button background color.
        """
        return pulumi.get(self, "primary")


@pulumi.output_type
class BrandingFont(dict):
    def __init__(__self__, *,
                 url: Optional[str] = None):
        """
        :param str url: String. URL for the custom font.
        """
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        """
        String. URL for the custom font.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class BrandingUniversalLogin(dict):
    def __init__(__self__, *,
                 body: Optional[str] = None):
        """
        :param str body: String, body of login pages.
        """
        if body is not None:
            pulumi.set(__self__, "body", body)

    @property
    @pulumi.getter
    def body(self) -> Optional[str]:
        """
        String, body of login pages.
        """
        return pulumi.get(self, "body")


@pulumi.output_type
class ClientAddons(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "azureBlob":
            suggest = "azure_blob"
        elif key == "azureSb":
            suggest = "azure_sb"
        elif key == "salesforceApi":
            suggest = "salesforce_api"
        elif key == "salesforceSandboxApi":
            suggest = "salesforce_sandbox_api"
        elif key == "sapApi":
            suggest = "sap_api"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClientAddons. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClientAddons.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClientAddons.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aws: Optional[Mapping[str, Any]] = None,
                 azure_blob: Optional[Mapping[str, Any]] = None,
                 azure_sb: Optional[Mapping[str, Any]] = None,
                 box: Optional[Mapping[str, Any]] = None,
                 cloudbees: Optional[Mapping[str, Any]] = None,
                 concur: Optional[Mapping[str, Any]] = None,
                 dropbox: Optional[Mapping[str, Any]] = None,
                 echosign: Optional[Mapping[str, Any]] = None,
                 egnyte: Optional[Mapping[str, Any]] = None,
                 firebase: Optional[Mapping[str, Any]] = None,
                 layer: Optional[Mapping[str, Any]] = None,
                 mscrm: Optional[Mapping[str, Any]] = None,
                 newrelic: Optional[Mapping[str, Any]] = None,
                 office365: Optional[Mapping[str, Any]] = None,
                 rms: Optional[Mapping[str, Any]] = None,
                 salesforce: Optional[Mapping[str, Any]] = None,
                 salesforce_api: Optional[Mapping[str, Any]] = None,
                 salesforce_sandbox_api: Optional[Mapping[str, Any]] = None,
                 samlp: Optional['outputs.ClientAddonsSamlp'] = None,
                 sap_api: Optional[Mapping[str, Any]] = None,
                 sentry: Optional[Mapping[str, Any]] = None,
                 sharepoint: Optional[Mapping[str, Any]] = None,
                 slack: Optional[Mapping[str, Any]] = None,
                 springcm: Optional[Mapping[str, Any]] = None,
                 wams: Optional[Mapping[str, Any]] = None,
                 wsfed: Optional[Mapping[str, Any]] = None,
                 zendesk: Optional[Mapping[str, Any]] = None,
                 zoom: Optional[Mapping[str, Any]] = None):
        """
        :param Mapping[str, Any] aws: String
        :param Mapping[str, Any] azure_blob: String
        :param Mapping[str, Any] azure_sb: String
        :param Mapping[str, Any] box: String
        :param Mapping[str, Any] cloudbees: String
        :param Mapping[str, Any] concur: String
        :param Mapping[str, Any] dropbox: String
        :param Mapping[str, Any] echosign: String
        :param Mapping[str, Any] egnyte: String
        :param Mapping[str, Any] firebase: String
        :param Mapping[str, Any] layer: String
        :param Mapping[str, Any] mscrm: String
        :param Mapping[str, Any] newrelic: String
        :param Mapping[str, Any] office365: String
        :param Mapping[str, Any] rms: String
        :param Mapping[str, Any] salesforce: String
        :param Mapping[str, Any] salesforce_api: String
        :param Mapping[str, Any] salesforce_sandbox_api: String
        :param 'ClientAddonsSamlpArgs' samlp: List(Resource). Configuration settings for a SAML add-on. For details, see SAML.
        :param Mapping[str, Any] sap_api: String
        :param Mapping[str, Any] sentry: String
        :param Mapping[str, Any] sharepoint: String
        :param Mapping[str, Any] slack: String
        :param Mapping[str, Any] springcm: String
        :param Mapping[str, Any] wams: String
        :param Mapping[str, Any] wsfed: String
        :param Mapping[str, Any] zendesk: String
        :param Mapping[str, Any] zoom: String
        """
        if aws is not None:
            pulumi.set(__self__, "aws", aws)
        if azure_blob is not None:
            pulumi.set(__self__, "azure_blob", azure_blob)
        if azure_sb is not None:
            pulumi.set(__self__, "azure_sb", azure_sb)
        if box is not None:
            pulumi.set(__self__, "box", box)
        if cloudbees is not None:
            pulumi.set(__self__, "cloudbees", cloudbees)
        if concur is not None:
            pulumi.set(__self__, "concur", concur)
        if dropbox is not None:
            pulumi.set(__self__, "dropbox", dropbox)
        if echosign is not None:
            pulumi.set(__self__, "echosign", echosign)
        if egnyte is not None:
            pulumi.set(__self__, "egnyte", egnyte)
        if firebase is not None:
            pulumi.set(__self__, "firebase", firebase)
        if layer is not None:
            pulumi.set(__self__, "layer", layer)
        if mscrm is not None:
            pulumi.set(__self__, "mscrm", mscrm)
        if newrelic is not None:
            pulumi.set(__self__, "newrelic", newrelic)
        if office365 is not None:
            pulumi.set(__self__, "office365", office365)
        if rms is not None:
            pulumi.set(__self__, "rms", rms)
        if salesforce is not None:
            pulumi.set(__self__, "salesforce", salesforce)
        if salesforce_api is not None:
            pulumi.set(__self__, "salesforce_api", salesforce_api)
        if salesforce_sandbox_api is not None:
            pulumi.set(__self__, "salesforce_sandbox_api", salesforce_sandbox_api)
        if samlp is not None:
            pulumi.set(__self__, "samlp", samlp)
        if sap_api is not None:
            pulumi.set(__self__, "sap_api", sap_api)
        if sentry is not None:
            pulumi.set(__self__, "sentry", sentry)
        if sharepoint is not None:
            pulumi.set(__self__, "sharepoint", sharepoint)
        if slack is not None:
            pulumi.set(__self__, "slack", slack)
        if springcm is not None:
            pulumi.set(__self__, "springcm", springcm)
        if wams is not None:
            pulumi.set(__self__, "wams", wams)
        if wsfed is not None:
            pulumi.set(__self__, "wsfed", wsfed)
        if zendesk is not None:
            pulumi.set(__self__, "zendesk", zendesk)
        if zoom is not None:
            pulumi.set(__self__, "zoom", zoom)

    @property
    @pulumi.getter
    def aws(self) -> Optional[Mapping[str, Any]]:
        """
        String
        """
        return pulumi.get(self, "aws")

    @property
    @pulumi.getter(name="azureBlob")
    def azure_blob(self) -> Optional[Mapping[str, Any]]:
        """
        String
        """
        return pulumi.get(self, "azure_blob")

    @property
    @pulumi.getter(name="azureSb")
    def azure_sb(self) -> Optional[Mapping[str, Any]]:
        """
        String
        """
        return pulumi.get(self, "azure_sb")

    @property
    @pulumi.getter
    def box(self) -> Optional[Mapping[str, Any]]:
        """
        String
        """
        return pulumi.get(self, "box")

    @property
    @pulumi.getter
    def cloudbees(self) -> Optional[Mapping[str, Any]]:
        """
        String
        """
        return pulumi.get(self, "cloudbees")

    @property
    @pulumi.getter
    def concur(self) -> Optional[Mapping[str, Any]]:
        """
        String
        """
        return pulumi.get(self, "concur")

    @property
    @pulumi.getter
    def dropbox(self) -> Optional[Mapping[str, Any]]:
        """
        String
        """
        return pulumi.get(self, "dropbox")

    @property
    @pulumi.getter
    def echosign(self) -> Optional[Mapping[str, Any]]:
        """
        String
        """
        return pulumi.get(self, "echosign")

    @property
    @pulumi.getter
    def egnyte(self) -> Optional[Mapping[str, Any]]:
        """
        String
        """
        return pulumi.get(self, "egnyte")

    @property
    @pulumi.getter
    def firebase(self) -> Optional[Mapping[str, Any]]:
        """
        String
        """
        return pulumi.get(self, "firebase")

    @property
    @pulumi.getter
    def layer(self) -> Optional[Mapping[str, Any]]:
        """
        String
        """
        return pulumi.get(self, "layer")

    @property
    @pulumi.getter
    def mscrm(self) -> Optional[Mapping[str, Any]]:
        """
        String
        """
        return pulumi.get(self, "mscrm")

    @property
    @pulumi.getter
    def newrelic(self) -> Optional[Mapping[str, Any]]:
        """
        String
        """
        return pulumi.get(self, "newrelic")

    @property
    @pulumi.getter
    def office365(self) -> Optional[Mapping[str, Any]]:
        """
        String
        """
        return pulumi.get(self, "office365")

    @property
    @pulumi.getter
    def rms(self) -> Optional[Mapping[str, Any]]:
        """
        String
        """
        return pulumi.get(self, "rms")

    @property
    @pulumi.getter
    def salesforce(self) -> Optional[Mapping[str, Any]]:
        """
        String
        """
        return pulumi.get(self, "salesforce")

    @property
    @pulumi.getter(name="salesforceApi")
    def salesforce_api(self) -> Optional[Mapping[str, Any]]:
        """
        String
        """
        return pulumi.get(self, "salesforce_api")

    @property
    @pulumi.getter(name="salesforceSandboxApi")
    def salesforce_sandbox_api(self) -> Optional[Mapping[str, Any]]:
        """
        String
        """
        return pulumi.get(self, "salesforce_sandbox_api")

    @property
    @pulumi.getter
    def samlp(self) -> Optional['outputs.ClientAddonsSamlp']:
        """
        List(Resource). Configuration settings for a SAML add-on. For details, see SAML.
        """
        return pulumi.get(self, "samlp")

    @property
    @pulumi.getter(name="sapApi")
    def sap_api(self) -> Optional[Mapping[str, Any]]:
        """
        String
        """
        return pulumi.get(self, "sap_api")

    @property
    @pulumi.getter
    def sentry(self) -> Optional[Mapping[str, Any]]:
        """
        String
        """
        return pulumi.get(self, "sentry")

    @property
    @pulumi.getter
    def sharepoint(self) -> Optional[Mapping[str, Any]]:
        """
        String
        """
        return pulumi.get(self, "sharepoint")

    @property
    @pulumi.getter
    def slack(self) -> Optional[Mapping[str, Any]]:
        """
        String
        """
        return pulumi.get(self, "slack")

    @property
    @pulumi.getter
    def springcm(self) -> Optional[Mapping[str, Any]]:
        """
        String
        """
        return pulumi.get(self, "springcm")

    @property
    @pulumi.getter
    def wams(self) -> Optional[Mapping[str, Any]]:
        """
        String
        """
        return pulumi.get(self, "wams")

    @property
    @pulumi.getter
    def wsfed(self) -> Optional[Mapping[str, Any]]:
        """
        String
        """
        return pulumi.get(self, "wsfed")

    @property
    @pulumi.getter
    def zendesk(self) -> Optional[Mapping[str, Any]]:
        """
        String
        """
        return pulumi.get(self, "zendesk")

    @property
    @pulumi.getter
    def zoom(self) -> Optional[Mapping[str, Any]]:
        """
        String
        """
        return pulumi.get(self, "zoom")


@pulumi.output_type
class ClientAddonsSamlp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authnContextClassRef":
            suggest = "authn_context_class_ref"
        elif key == "createUpnClaim":
            suggest = "create_upn_claim"
        elif key == "digestAlgorithm":
            suggest = "digest_algorithm"
        elif key == "includeAttributeNameFormat":
            suggest = "include_attribute_name_format"
        elif key == "lifetimeInSeconds":
            suggest = "lifetime_in_seconds"
        elif key == "mapIdentities":
            suggest = "map_identities"
        elif key == "mapUnknownClaimsAsIs":
            suggest = "map_unknown_claims_as_is"
        elif key == "nameIdentifierFormat":
            suggest = "name_identifier_format"
        elif key == "nameIdentifierProbes":
            suggest = "name_identifier_probes"
        elif key == "passthroughClaimsWithNoMapping":
            suggest = "passthrough_claims_with_no_mapping"
        elif key == "signResponse":
            suggest = "sign_response"
        elif key == "signatureAlgorithm":
            suggest = "signature_algorithm"
        elif key == "signingCert":
            suggest = "signing_cert"
        elif key == "typedAttributes":
            suggest = "typed_attributes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClientAddonsSamlp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClientAddonsSamlp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClientAddonsSamlp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 audience: Optional[str] = None,
                 authn_context_class_ref: Optional[str] = None,
                 binding: Optional[str] = None,
                 create_upn_claim: Optional[bool] = None,
                 destination: Optional[str] = None,
                 digest_algorithm: Optional[str] = None,
                 include_attribute_name_format: Optional[bool] = None,
                 lifetime_in_seconds: Optional[int] = None,
                 logout: Optional['outputs.ClientAddonsSamlpLogout'] = None,
                 map_identities: Optional[bool] = None,
                 map_unknown_claims_as_is: Optional[bool] = None,
                 mappings: Optional[Mapping[str, Any]] = None,
                 name_identifier_format: Optional[str] = None,
                 name_identifier_probes: Optional[Sequence[str]] = None,
                 passthrough_claims_with_no_mapping: Optional[bool] = None,
                 recipient: Optional[str] = None,
                 sign_response: Optional[bool] = None,
                 signature_algorithm: Optional[str] = None,
                 signing_cert: Optional[str] = None,
                 typed_attributes: Optional[bool] = None):
        """
        :param str audience: String. Audience of the SAML Assertion. Default will be the Issuer on SAMLRequest.
        :param str authn_context_class_ref: String. Class reference of the authentication context.
        :param str binding: String. Protocol binding used for SAML logout responses.
        :param bool create_upn_claim: Boolean, (Default=true) Indicates whether or not a UPN claim should be created.
        :param str destination: String. Destination of the SAML Response. If not specified, it will be AssertionConsumerUrlof SAMLRequest or Callback URL if there was no SAMLRequest.
        :param str digest_algorithm: String, (Default=`sha1`). Algorithm used to calculate the digest of the SAML Assertion or response. Options include `defaultsha1` and `sha256`.
        :param bool include_attribute_name_format: Boolean,(Default=true). Indicates whether or not we should infer the NameFormat based on the attribute name. If set to false, the attribute NameFormat is not set in the assertion.
        :param int lifetime_in_seconds: Integer, (Default=3600). Number of seconds during which the token is valid.
        :param 'ClientAddonsSamlpLogoutArgs' logout: Map(Resource). Configuration settings for logout. For details, see Logout.
        :param bool map_identities: Boolean, (Default=true). Indicates whether or not to add additional identity information in the token, such as the provider used and the access_token, if available.
        :param bool map_unknown_claims_as_is: Boolean, (Default=false). Indicates whether or not to add a prefix of `http://schema.auth0.com` to any claims that are not mapped to the common profile when passed through in the output assertion.
        :param Mapping[str, Any] mappings: Map(String). Mappings between the Auth0 user profile property name (`name`) and the output attributes on the SAML attribute in the assertion (`value`).
        :param str name_identifier_format: String, (Default=`urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified`). Format of the name identifier.
        :param Sequence[str] name_identifier_probes: List(String). Attributes that can be used for Subject/NameID. Auth0 will try each of the attributes of this array in order and use the first value it finds.
        :param bool passthrough_claims_with_no_mapping: Boolean, (Default=true). Indicates whether or not to passthrough claims that are not mapped to the common profile in the output assertion.
        :param str recipient: String. Recipient of the SAML Assertion (SubjectConfirmationData). Default is AssertionConsumerUrl on SAMLRequest or Callback URL if no SAMLRequest was sent.
        :param bool sign_response: Boolean. Indicates whether or not the SAML Response should be signed instead of the SAML Assertion.
        :param str signature_algorithm: String, (Default=`rsa-sha1`). Algorithm used to sign the SAML Assertion or response. Options include `rsa-sha1` and `rsa-sha256`.
        :param str signing_cert: String. Optionally indicates the public key certificate used to validate SAML requests. If set, SAML requests will be required to be signed. A sample value would be `-----BEGIN PUBLIC KEY-----\nMIGf...bpP/t3\n+JGNGIRMj1hF1rnb6QIDAQAB\n-----END PUBLIC KEY-----\n`.
        :param bool typed_attributes: Boolean, (Default=true). Indicates whether or not we should infer the `xs:type` of the element. Types include `xs:string`, `xs:boolean`, `xs:double`, and `xs:anyType`. When set to false, all `xs:type` are `xs:anyType`.
        """
        if audience is not None:
            pulumi.set(__self__, "audience", audience)
        if authn_context_class_ref is not None:
            pulumi.set(__self__, "authn_context_class_ref", authn_context_class_ref)
        if binding is not None:
            pulumi.set(__self__, "binding", binding)
        if create_upn_claim is not None:
            pulumi.set(__self__, "create_upn_claim", create_upn_claim)
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if digest_algorithm is not None:
            pulumi.set(__self__, "digest_algorithm", digest_algorithm)
        if include_attribute_name_format is not None:
            pulumi.set(__self__, "include_attribute_name_format", include_attribute_name_format)
        if lifetime_in_seconds is not None:
            pulumi.set(__self__, "lifetime_in_seconds", lifetime_in_seconds)
        if logout is not None:
            pulumi.set(__self__, "logout", logout)
        if map_identities is not None:
            pulumi.set(__self__, "map_identities", map_identities)
        if map_unknown_claims_as_is is not None:
            pulumi.set(__self__, "map_unknown_claims_as_is", map_unknown_claims_as_is)
        if mappings is not None:
            pulumi.set(__self__, "mappings", mappings)
        if name_identifier_format is not None:
            pulumi.set(__self__, "name_identifier_format", name_identifier_format)
        if name_identifier_probes is not None:
            pulumi.set(__self__, "name_identifier_probes", name_identifier_probes)
        if passthrough_claims_with_no_mapping is not None:
            pulumi.set(__self__, "passthrough_claims_with_no_mapping", passthrough_claims_with_no_mapping)
        if recipient is not None:
            pulumi.set(__self__, "recipient", recipient)
        if sign_response is not None:
            pulumi.set(__self__, "sign_response", sign_response)
        if signature_algorithm is not None:
            pulumi.set(__self__, "signature_algorithm", signature_algorithm)
        if signing_cert is not None:
            pulumi.set(__self__, "signing_cert", signing_cert)
        if typed_attributes is not None:
            pulumi.set(__self__, "typed_attributes", typed_attributes)

    @property
    @pulumi.getter
    def audience(self) -> Optional[str]:
        """
        String. Audience of the SAML Assertion. Default will be the Issuer on SAMLRequest.
        """
        return pulumi.get(self, "audience")

    @property
    @pulumi.getter(name="authnContextClassRef")
    def authn_context_class_ref(self) -> Optional[str]:
        """
        String. Class reference of the authentication context.
        """
        return pulumi.get(self, "authn_context_class_ref")

    @property
    @pulumi.getter
    def binding(self) -> Optional[str]:
        """
        String. Protocol binding used for SAML logout responses.
        """
        return pulumi.get(self, "binding")

    @property
    @pulumi.getter(name="createUpnClaim")
    def create_upn_claim(self) -> Optional[bool]:
        """
        Boolean, (Default=true) Indicates whether or not a UPN claim should be created.
        """
        return pulumi.get(self, "create_upn_claim")

    @property
    @pulumi.getter
    def destination(self) -> Optional[str]:
        """
        String. Destination of the SAML Response. If not specified, it will be AssertionConsumerUrlof SAMLRequest or Callback URL if there was no SAMLRequest.
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="digestAlgorithm")
    def digest_algorithm(self) -> Optional[str]:
        """
        String, (Default=`sha1`). Algorithm used to calculate the digest of the SAML Assertion or response. Options include `defaultsha1` and `sha256`.
        """
        return pulumi.get(self, "digest_algorithm")

    @property
    @pulumi.getter(name="includeAttributeNameFormat")
    def include_attribute_name_format(self) -> Optional[bool]:
        """
        Boolean,(Default=true). Indicates whether or not we should infer the NameFormat based on the attribute name. If set to false, the attribute NameFormat is not set in the assertion.
        """
        return pulumi.get(self, "include_attribute_name_format")

    @property
    @pulumi.getter(name="lifetimeInSeconds")
    def lifetime_in_seconds(self) -> Optional[int]:
        """
        Integer, (Default=3600). Number of seconds during which the token is valid.
        """
        return pulumi.get(self, "lifetime_in_seconds")

    @property
    @pulumi.getter
    def logout(self) -> Optional['outputs.ClientAddonsSamlpLogout']:
        """
        Map(Resource). Configuration settings for logout. For details, see Logout.
        """
        return pulumi.get(self, "logout")

    @property
    @pulumi.getter(name="mapIdentities")
    def map_identities(self) -> Optional[bool]:
        """
        Boolean, (Default=true). Indicates whether or not to add additional identity information in the token, such as the provider used and the access_token, if available.
        """
        return pulumi.get(self, "map_identities")

    @property
    @pulumi.getter(name="mapUnknownClaimsAsIs")
    def map_unknown_claims_as_is(self) -> Optional[bool]:
        """
        Boolean, (Default=false). Indicates whether or not to add a prefix of `http://schema.auth0.com` to any claims that are not mapped to the common profile when passed through in the output assertion.
        """
        return pulumi.get(self, "map_unknown_claims_as_is")

    @property
    @pulumi.getter
    def mappings(self) -> Optional[Mapping[str, Any]]:
        """
        Map(String). Mappings between the Auth0 user profile property name (`name`) and the output attributes on the SAML attribute in the assertion (`value`).
        """
        return pulumi.get(self, "mappings")

    @property
    @pulumi.getter(name="nameIdentifierFormat")
    def name_identifier_format(self) -> Optional[str]:
        """
        String, (Default=`urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified`). Format of the name identifier.
        """
        return pulumi.get(self, "name_identifier_format")

    @property
    @pulumi.getter(name="nameIdentifierProbes")
    def name_identifier_probes(self) -> Optional[Sequence[str]]:
        """
        List(String). Attributes that can be used for Subject/NameID. Auth0 will try each of the attributes of this array in order and use the first value it finds.
        """
        return pulumi.get(self, "name_identifier_probes")

    @property
    @pulumi.getter(name="passthroughClaimsWithNoMapping")
    def passthrough_claims_with_no_mapping(self) -> Optional[bool]:
        """
        Boolean, (Default=true). Indicates whether or not to passthrough claims that are not mapped to the common profile in the output assertion.
        """
        return pulumi.get(self, "passthrough_claims_with_no_mapping")

    @property
    @pulumi.getter
    def recipient(self) -> Optional[str]:
        """
        String. Recipient of the SAML Assertion (SubjectConfirmationData). Default is AssertionConsumerUrl on SAMLRequest or Callback URL if no SAMLRequest was sent.
        """
        return pulumi.get(self, "recipient")

    @property
    @pulumi.getter(name="signResponse")
    def sign_response(self) -> Optional[bool]:
        """
        Boolean. Indicates whether or not the SAML Response should be signed instead of the SAML Assertion.
        """
        return pulumi.get(self, "sign_response")

    @property
    @pulumi.getter(name="signatureAlgorithm")
    def signature_algorithm(self) -> Optional[str]:
        """
        String, (Default=`rsa-sha1`). Algorithm used to sign the SAML Assertion or response. Options include `rsa-sha1` and `rsa-sha256`.
        """
        return pulumi.get(self, "signature_algorithm")

    @property
    @pulumi.getter(name="signingCert")
    def signing_cert(self) -> Optional[str]:
        """
        String. Optionally indicates the public key certificate used to validate SAML requests. If set, SAML requests will be required to be signed. A sample value would be `-----BEGIN PUBLIC KEY-----\nMIGf...bpP/t3\n+JGNGIRMj1hF1rnb6QIDAQAB\n-----END PUBLIC KEY-----\n`.
        """
        return pulumi.get(self, "signing_cert")

    @property
    @pulumi.getter(name="typedAttributes")
    def typed_attributes(self) -> Optional[bool]:
        """
        Boolean, (Default=true). Indicates whether or not we should infer the `xs:type` of the element. Types include `xs:string`, `xs:boolean`, `xs:double`, and `xs:anyType`. When set to false, all `xs:type` are `xs:anyType`.
        """
        return pulumi.get(self, "typed_attributes")


@pulumi.output_type
class ClientAddonsSamlpLogout(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sloEnabled":
            suggest = "slo_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClientAddonsSamlpLogout. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClientAddonsSamlpLogout.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClientAddonsSamlpLogout.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 callback: Optional[str] = None,
                 slo_enabled: Optional[bool] = None):
        """
        :param str callback: String. Service provider's Single Logout Service URL, to which Auth0 will send logout requests and responses.
        :param bool slo_enabled: Boolean. Indicates whether or not Auth0 should notify service providers of session termination.
        """
        if callback is not None:
            pulumi.set(__self__, "callback", callback)
        if slo_enabled is not None:
            pulumi.set(__self__, "slo_enabled", slo_enabled)

    @property
    @pulumi.getter
    def callback(self) -> Optional[str]:
        """
        String. Service provider's Single Logout Service URL, to which Auth0 will send logout requests and responses.
        """
        return pulumi.get(self, "callback")

    @property
    @pulumi.getter(name="sloEnabled")
    def slo_enabled(self) -> Optional[bool]:
        """
        Boolean. Indicates whether or not Auth0 should notify service providers of session termination.
        """
        return pulumi.get(self, "slo_enabled")


@pulumi.output_type
class ClientJwtConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lifetimeInSeconds":
            suggest = "lifetime_in_seconds"
        elif key == "secretEncoded":
            suggest = "secret_encoded"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClientJwtConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClientJwtConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClientJwtConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 alg: Optional[str] = None,
                 lifetime_in_seconds: Optional[int] = None,
                 scopes: Optional[Mapping[str, str]] = None,
                 secret_encoded: Optional[bool] = None):
        """
        :param str alg: String. Algorithm used to sign JWTs.
        :param int lifetime_in_seconds: Integer. Number of seconds during which the JWT will be valid.
        :param Mapping[str, str] scopes: Map(String). Permissions (scopes) included in JWTs.
        :param bool secret_encoded: Boolean. Indicates whether or not the client secret is base64 encoded.
        """
        if alg is not None:
            pulumi.set(__self__, "alg", alg)
        if lifetime_in_seconds is not None:
            pulumi.set(__self__, "lifetime_in_seconds", lifetime_in_seconds)
        if scopes is not None:
            pulumi.set(__self__, "scopes", scopes)
        if secret_encoded is not None:
            pulumi.set(__self__, "secret_encoded", secret_encoded)

    @property
    @pulumi.getter
    def alg(self) -> Optional[str]:
        """
        String. Algorithm used to sign JWTs.
        """
        return pulumi.get(self, "alg")

    @property
    @pulumi.getter(name="lifetimeInSeconds")
    def lifetime_in_seconds(self) -> Optional[int]:
        """
        Integer. Number of seconds during which the JWT will be valid.
        """
        return pulumi.get(self, "lifetime_in_seconds")

    @property
    @pulumi.getter
    def scopes(self) -> Optional[Mapping[str, str]]:
        """
        Map(String). Permissions (scopes) included in JWTs.
        """
        return pulumi.get(self, "scopes")

    @property
    @pulumi.getter(name="secretEncoded")
    def secret_encoded(self) -> Optional[bool]:
        """
        Boolean. Indicates whether or not the client secret is base64 encoded.
        """
        return pulumi.get(self, "secret_encoded")


@pulumi.output_type
class ClientMobile(dict):
    def __init__(__self__, *,
                 android: Optional['outputs.ClientMobileAndroid'] = None,
                 ios: Optional['outputs.ClientMobileIos'] = None):
        """
        :param 'ClientMobileAndroidArgs' android: List(Resource). Configuration settings for Android native apps. For details, see Android.
        :param 'ClientMobileIosArgs' ios: List(Resource). Configuration settings for i0S native apps. For details, see iOS.
        """
        if android is not None:
            pulumi.set(__self__, "android", android)
        if ios is not None:
            pulumi.set(__self__, "ios", ios)

    @property
    @pulumi.getter
    def android(self) -> Optional['outputs.ClientMobileAndroid']:
        """
        List(Resource). Configuration settings for Android native apps. For details, see Android.
        """
        return pulumi.get(self, "android")

    @property
    @pulumi.getter
    def ios(self) -> Optional['outputs.ClientMobileIos']:
        """
        List(Resource). Configuration settings for i0S native apps. For details, see iOS.
        """
        return pulumi.get(self, "ios")


@pulumi.output_type
class ClientMobileAndroid(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "appPackageName":
            suggest = "app_package_name"
        elif key == "sha256CertFingerprints":
            suggest = "sha256_cert_fingerprints"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClientMobileAndroid. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClientMobileAndroid.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClientMobileAndroid.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 app_package_name: Optional[str] = None,
                 sha256_cert_fingerprints: Optional[Sequence[str]] = None):
        """
        :param str app_package_name: String
        :param Sequence[str] sha256_cert_fingerprints: List(String)
        """
        if app_package_name is not None:
            pulumi.set(__self__, "app_package_name", app_package_name)
        if sha256_cert_fingerprints is not None:
            pulumi.set(__self__, "sha256_cert_fingerprints", sha256_cert_fingerprints)

    @property
    @pulumi.getter(name="appPackageName")
    def app_package_name(self) -> Optional[str]:
        """
        String
        """
        return pulumi.get(self, "app_package_name")

    @property
    @pulumi.getter(name="sha256CertFingerprints")
    def sha256_cert_fingerprints(self) -> Optional[Sequence[str]]:
        """
        List(String)
        """
        return pulumi.get(self, "sha256_cert_fingerprints")


@pulumi.output_type
class ClientMobileIos(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "appBundleIdentifier":
            suggest = "app_bundle_identifier"
        elif key == "teamId":
            suggest = "team_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClientMobileIos. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClientMobileIos.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClientMobileIos.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 app_bundle_identifier: Optional[str] = None,
                 team_id: Optional[str] = None):
        """
        :param str app_bundle_identifier: String
        :param str team_id: String
        """
        if app_bundle_identifier is not None:
            pulumi.set(__self__, "app_bundle_identifier", app_bundle_identifier)
        if team_id is not None:
            pulumi.set(__self__, "team_id", team_id)

    @property
    @pulumi.getter(name="appBundleIdentifier")
    def app_bundle_identifier(self) -> Optional[str]:
        """
        String
        """
        return pulumi.get(self, "app_bundle_identifier")

    @property
    @pulumi.getter(name="teamId")
    def team_id(self) -> Optional[str]:
        """
        String
        """
        return pulumi.get(self, "team_id")


@pulumi.output_type
class ClientNativeSocialLogin(dict):
    def __init__(__self__, *,
                 apple: Optional['outputs.ClientNativeSocialLoginApple'] = None,
                 facebook: Optional['outputs.ClientNativeSocialLoginFacebook'] = None):
        """
        :param 'ClientNativeSocialLoginAppleArgs' apple: Resource:
        :param 'ClientNativeSocialLoginFacebookArgs' facebook: Resources:
        """
        if apple is not None:
            pulumi.set(__self__, "apple", apple)
        if facebook is not None:
            pulumi.set(__self__, "facebook", facebook)

    @property
    @pulumi.getter
    def apple(self) -> Optional['outputs.ClientNativeSocialLoginApple']:
        """
        Resource:
        """
        return pulumi.get(self, "apple")

    @property
    @pulumi.getter
    def facebook(self) -> Optional['outputs.ClientNativeSocialLoginFacebook']:
        """
        Resources:
        """
        return pulumi.get(self, "facebook")


@pulumi.output_type
class ClientNativeSocialLoginApple(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        """
        :param bool enabled: Boolean
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Boolean
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class ClientNativeSocialLoginFacebook(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        """
        :param bool enabled: Boolean
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Boolean
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class ClientRefreshToken(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "expirationType":
            suggest = "expiration_type"
        elif key == "rotationType":
            suggest = "rotation_type"
        elif key == "idleTokenLifetime":
            suggest = "idle_token_lifetime"
        elif key == "infiniteIdleTokenLifetime":
            suggest = "infinite_idle_token_lifetime"
        elif key == "infiniteTokenLifetime":
            suggest = "infinite_token_lifetime"
        elif key == "tokenLifetime":
            suggest = "token_lifetime"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClientRefreshToken. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClientRefreshToken.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClientRefreshToken.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 expiration_type: str,
                 rotation_type: str,
                 idle_token_lifetime: Optional[int] = None,
                 infinite_idle_token_lifetime: Optional[bool] = None,
                 infinite_token_lifetime: Optional[bool] = None,
                 leeway: Optional[int] = None,
                 token_lifetime: Optional[int] = None):
        """
        :param str expiration_type: String. Options include `expiring`, `non-expiring`. Whether a refresh token will expire based on an absolute lifetime, after which the token can no longer be used. If rotation is `rotating`, this must be set to `expiring`.
        :param str rotation_type: String. Options include `rotating`, `non-rotating`. When `rotating`, exchanging a refresh token will cause a new refresh token to be issued and the existing token will be invalidated. This allows for automatic detection of token reuse if the token is leaked.
        :param int idle_token_lifetime: Integer. The time in seconds after which inactive refresh tokens will expire.
        :param bool infinite_idle_token_lifetime: Boolean, (Default=false) Whether or not inactive refresh tokens should be remain valid indefinitely.
        :param bool infinite_token_lifetime: Boolean, (Default=false) Whether or not refresh tokens should remain valid indefinitely. If false, `token_lifetime` should also be set
        :param int leeway: Integer. The amount of time in seconds in which a refresh token may be reused without trigging reuse detection.
        :param int token_lifetime: Integer. The absolute lifetime of a refresh token in seconds.
        """
        pulumi.set(__self__, "expiration_type", expiration_type)
        pulumi.set(__self__, "rotation_type", rotation_type)
        if idle_token_lifetime is not None:
            pulumi.set(__self__, "idle_token_lifetime", idle_token_lifetime)
        if infinite_idle_token_lifetime is not None:
            pulumi.set(__self__, "infinite_idle_token_lifetime", infinite_idle_token_lifetime)
        if infinite_token_lifetime is not None:
            pulumi.set(__self__, "infinite_token_lifetime", infinite_token_lifetime)
        if leeway is not None:
            pulumi.set(__self__, "leeway", leeway)
        if token_lifetime is not None:
            pulumi.set(__self__, "token_lifetime", token_lifetime)

    @property
    @pulumi.getter(name="expirationType")
    def expiration_type(self) -> str:
        """
        String. Options include `expiring`, `non-expiring`. Whether a refresh token will expire based on an absolute lifetime, after which the token can no longer be used. If rotation is `rotating`, this must be set to `expiring`.
        """
        return pulumi.get(self, "expiration_type")

    @property
    @pulumi.getter(name="rotationType")
    def rotation_type(self) -> str:
        """
        String. Options include `rotating`, `non-rotating`. When `rotating`, exchanging a refresh token will cause a new refresh token to be issued and the existing token will be invalidated. This allows for automatic detection of token reuse if the token is leaked.
        """
        return pulumi.get(self, "rotation_type")

    @property
    @pulumi.getter(name="idleTokenLifetime")
    def idle_token_lifetime(self) -> Optional[int]:
        """
        Integer. The time in seconds after which inactive refresh tokens will expire.
        """
        return pulumi.get(self, "idle_token_lifetime")

    @property
    @pulumi.getter(name="infiniteIdleTokenLifetime")
    def infinite_idle_token_lifetime(self) -> Optional[bool]:
        """
        Boolean, (Default=false) Whether or not inactive refresh tokens should be remain valid indefinitely.
        """
        return pulumi.get(self, "infinite_idle_token_lifetime")

    @property
    @pulumi.getter(name="infiniteTokenLifetime")
    def infinite_token_lifetime(self) -> Optional[bool]:
        """
        Boolean, (Default=false) Whether or not refresh tokens should remain valid indefinitely. If false, `token_lifetime` should also be set
        """
        return pulumi.get(self, "infinite_token_lifetime")

    @property
    @pulumi.getter
    def leeway(self) -> Optional[int]:
        """
        Integer. The amount of time in seconds in which a refresh token may be reused without trigging reuse detection.
        """
        return pulumi.get(self, "leeway")

    @property
    @pulumi.getter(name="tokenLifetime")
    def token_lifetime(self) -> Optional[int]:
        """
        Integer. The absolute lifetime of a refresh token in seconds.
        """
        return pulumi.get(self, "token_lifetime")


@pulumi.output_type
class ConnectionOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "adfsServer":
            suggest = "adfs_server"
        elif key == "allowedAudiences":
            suggest = "allowed_audiences"
        elif key == "apiEnableUsers":
            suggest = "api_enable_users"
        elif key == "appDomain":
            suggest = "app_domain"
        elif key == "appId":
            suggest = "app_id"
        elif key == "authorizationEndpoint":
            suggest = "authorization_endpoint"
        elif key == "bruteForceProtection":
            suggest = "brute_force_protection"
        elif key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"
        elif key == "communityBaseUrl":
            suggest = "community_base_url"
        elif key == "customScripts":
            suggest = "custom_scripts"
        elif key == "digestAlgorithm":
            suggest = "digest_algorithm"
        elif key == "disableCache":
            suggest = "disable_cache"
        elif key == "disableSignup":
            suggest = "disable_signup"
        elif key == "discoveryUrl":
            suggest = "discovery_url"
        elif key == "domainAliases":
            suggest = "domain_aliases"
        elif key == "enabledDatabaseCustomization":
            suggest = "enabled_database_customization"
        elif key == "entityId":
            suggest = "entity_id"
        elif key == "fieldsMap":
            suggest = "fields_map"
        elif key == "forwardRequestInfo":
            suggest = "forward_request_info"
        elif key == "from":
            suggest = "from_"
        elif key == "gatewayAuthentication":
            suggest = "gateway_authentication"
        elif key == "gatewayUrl":
            suggest = "gateway_url"
        elif key == "iconUrl":
            suggest = "icon_url"
        elif key == "identityApi":
            suggest = "identity_api"
        elif key == "idpInitiated":
            suggest = "idp_initiated"
        elif key == "importMode":
            suggest = "import_mode"
        elif key == "jwksUri":
            suggest = "jwks_uri"
        elif key == "keyId":
            suggest = "key_id"
        elif key == "maxGroupsToRetrieve":
            suggest = "max_groups_to_retrieve"
        elif key == "messagingServiceSid":
            suggest = "messaging_service_sid"
        elif key == "nonPersistentAttrs":
            suggest = "non_persistent_attrs"
        elif key == "passwordComplexityOptions":
            suggest = "password_complexity_options"
        elif key == "passwordDictionary":
            suggest = "password_dictionary"
        elif key == "passwordHistories":
            suggest = "password_histories"
        elif key == "passwordNoPersonalInfo":
            suggest = "password_no_personal_info"
        elif key == "passwordPolicy":
            suggest = "password_policy"
        elif key == "protocolBinding":
            suggest = "protocol_binding"
        elif key == "requestTemplate":
            suggest = "request_template"
        elif key == "requiresUsername":
            suggest = "requires_username"
        elif key == "setUserRootAttributes":
            suggest = "set_user_root_attributes"
        elif key == "shouldTrustEmailVerifiedConnection":
            suggest = "should_trust_email_verified_connection"
        elif key == "signInEndpoint":
            suggest = "sign_in_endpoint"
        elif key == "signOutEndpoint":
            suggest = "sign_out_endpoint"
        elif key == "signSamlRequest":
            suggest = "sign_saml_request"
        elif key == "signatureAlgorithm":
            suggest = "signature_algorithm"
        elif key == "signingCert":
            suggest = "signing_cert"
        elif key == "strategyVersion":
            suggest = "strategy_version"
        elif key == "teamId":
            suggest = "team_id"
        elif key == "tenantDomain":
            suggest = "tenant_domain"
        elif key == "tokenEndpoint":
            suggest = "token_endpoint"
        elif key == "twilioSid":
            suggest = "twilio_sid"
        elif key == "twilioToken":
            suggest = "twilio_token"
        elif key == "useCertAuth":
            suggest = "use_cert_auth"
        elif key == "useKerberos":
            suggest = "use_kerberos"
        elif key == "useWsfed":
            suggest = "use_wsfed"
        elif key == "userIdAttribute":
            suggest = "user_id_attribute"
        elif key == "userinfoEndpoint":
            suggest = "userinfo_endpoint"
        elif key == "waadCommonEndpoint":
            suggest = "waad_common_endpoint"
        elif key == "waadProtocol":
            suggest = "waad_protocol"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConnectionOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConnectionOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConnectionOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 adfs_server: Optional[str] = None,
                 allowed_audiences: Optional[Sequence[str]] = None,
                 api_enable_users: Optional[bool] = None,
                 app_domain: Optional[str] = None,
                 app_id: Optional[str] = None,
                 authorization_endpoint: Optional[str] = None,
                 brute_force_protection: Optional[bool] = None,
                 client_id: Optional[str] = None,
                 client_secret: Optional[str] = None,
                 community_base_url: Optional[str] = None,
                 configuration: Optional[Mapping[str, str]] = None,
                 custom_scripts: Optional[Mapping[str, str]] = None,
                 debug: Optional[bool] = None,
                 digest_algorithm: Optional[str] = None,
                 disable_cache: Optional[bool] = None,
                 disable_signup: Optional[bool] = None,
                 discovery_url: Optional[str] = None,
                 domain: Optional[str] = None,
                 domain_aliases: Optional[Sequence[str]] = None,
                 enabled_database_customization: Optional[bool] = None,
                 entity_id: Optional[str] = None,
                 fields_map: Optional[Mapping[str, str]] = None,
                 forward_request_info: Optional[bool] = None,
                 from_: Optional[str] = None,
                 gateway_authentication: Optional['outputs.ConnectionOptionsGatewayAuthentication'] = None,
                 gateway_url: Optional[str] = None,
                 icon_url: Optional[str] = None,
                 identity_api: Optional[str] = None,
                 idp_initiated: Optional['outputs.ConnectionOptionsIdpInitiated'] = None,
                 import_mode: Optional[bool] = None,
                 ips: Optional[Sequence[str]] = None,
                 issuer: Optional[str] = None,
                 jwks_uri: Optional[str] = None,
                 key_id: Optional[str] = None,
                 max_groups_to_retrieve: Optional[str] = None,
                 messaging_service_sid: Optional[str] = None,
                 mfa: Optional['outputs.ConnectionOptionsMfa'] = None,
                 name: Optional[str] = None,
                 non_persistent_attrs: Optional[Sequence[str]] = None,
                 password_complexity_options: Optional['outputs.ConnectionOptionsPasswordComplexityOptions'] = None,
                 password_dictionary: Optional['outputs.ConnectionOptionsPasswordDictionary'] = None,
                 password_histories: Optional[Sequence['outputs.ConnectionOptionsPasswordHistory']] = None,
                 password_no_personal_info: Optional['outputs.ConnectionOptionsPasswordNoPersonalInfo'] = None,
                 password_policy: Optional[str] = None,
                 protocol_binding: Optional[str] = None,
                 provider: Optional[str] = None,
                 request_template: Optional[str] = None,
                 requires_username: Optional[bool] = None,
                 scopes: Optional[Sequence[str]] = None,
                 scripts: Optional[Mapping[str, str]] = None,
                 set_user_root_attributes: Optional[str] = None,
                 should_trust_email_verified_connection: Optional[str] = None,
                 sign_in_endpoint: Optional[str] = None,
                 sign_out_endpoint: Optional[str] = None,
                 sign_saml_request: Optional[bool] = None,
                 signature_algorithm: Optional[str] = None,
                 signing_cert: Optional[str] = None,
                 strategy_version: Optional[int] = None,
                 subject: Optional[str] = None,
                 syntax: Optional[str] = None,
                 team_id: Optional[str] = None,
                 template: Optional[str] = None,
                 tenant_domain: Optional[str] = None,
                 token_endpoint: Optional[str] = None,
                 totp: Optional['outputs.ConnectionOptionsTotp'] = None,
                 twilio_sid: Optional[str] = None,
                 twilio_token: Optional[str] = None,
                 type: Optional[str] = None,
                 use_cert_auth: Optional[bool] = None,
                 use_kerberos: Optional[bool] = None,
                 use_wsfed: Optional[bool] = None,
                 user_id_attribute: Optional[str] = None,
                 userinfo_endpoint: Optional[str] = None,
                 validation: Optional['outputs.ConnectionOptionsValidation'] = None,
                 waad_common_endpoint: Optional[bool] = None,
                 waad_protocol: Optional[str] = None):
        """
        :param str adfs_server: ADFS Metadata source.
        :param Sequence[str] allowed_audiences: List of allowed audiences.
        :param str app_domain: Azure AD domain name.
        :param str app_id: Azure AD app ID.
        :param bool brute_force_protection: Indicates whether or not to enable brute force protection, which will limit the number of signups and failed logins from a suspicious IP address.
        :param str client_id: OIDC provider client ID.
        :param str client_secret: OIDC provider client secret.
        :param str community_base_url: String.
        :param Mapping[str, str] configuration: A case-sensitive map of key value pairs used as configuration variables for the `custom_script`.
        :param Mapping[str, str] custom_scripts: Custom database action scripts. For more information, read [Custom Database Action Script Templates](https://auth0.com/docs/connections/database/custom-db/templates).
        :param bool debug: (Boolean) When enabled additional debugging information will be generated.
        :param str digest_algorithm: Sign Request Algorithm Digest
        :param bool disable_signup: Boolean. Indicates whether or not to allow user sign-ups to your application.
        :param str discovery_url: OpenID discovery URL. E.g. `https://auth.example.com/.well-known/openid-configuration`.
        :param Sequence[str] domain_aliases: List of the domains that can be authenticated using the Identity Provider. Only needed for Identifier First authentication flows.
        :param str entity_id: Custom Entity ID for the connection.
        :param Mapping[str, str] fields_map: SAML Attributes mapping. If you're configuring a SAML enterprise connection for a non-standard PingFederate Server, you must update the attribute mappings.
        :param str from_: SMS number for the sender. Used when SMS Source is From.
        :param 'ConnectionOptionsIdpInitiatedArgs' idp_initiated: Configuration Options for IDP Initiated Authentication.  This is an object with the properties: `client_id`, `client_protocol`, and `client_authorize_query`
        :param bool import_mode: Indicates whether or not you have a legacy user store and want to gradually migrate those users to the Auth0 user store. [Learn more](https://auth0.com/docs/users/guides/configure-automatic-migration).
        :param str issuer: Issuer URL. E.g. `https://auth.example.com`
        :param str key_id: Key ID.
        :param str max_groups_to_retrieve: Maximum number of groups to retrieve.
        :param str messaging_service_sid: SID for Copilot. Used when SMS Source is Copilot.
        :param 'ConnectionOptionsMfaArgs' mfa: Configuration settings Options for multifactor authentication. For details, see MFA Options.
        :param str name: Name of the connection.
        :param Sequence[str] non_persistent_attrs: If there are user fields that should not be stored in Auth0 databases due to privacy reasons, you can add them to the denylist. See [here](https://auth0.com/docs/security/denylist-user-attributes) for more info.
        :param 'ConnectionOptionsPasswordComplexityOptionsArgs' password_complexity_options: Configuration settings for password complexity. For details, see Password Complexity Options.
        :param 'ConnectionOptionsPasswordDictionaryArgs' password_dictionary: Configuration settings for the password dictionary check, which does not allow passwords that are part of the password dictionary. For details, see Password Dictionary.
        :param Sequence['ConnectionOptionsPasswordHistoryArgs'] password_histories: Configuration settings for the password history that is maintained for each user to prevent the reuse of passwords. For details, see Password History.
        :param 'ConnectionOptionsPasswordNoPersonalInfoArgs' password_no_personal_info: Configuration settings for the password personal info check, which does not allow passwords that contain any part of the user's personal data, including user's name, username, nickname, user_metadata.name, user_metadata.first, user_metadata.last, user's email, or first part of the user's email. For details, see Password No Personal Info.
        :param str password_policy: Indicates level of password strength to enforce during authentication. A strong password policy will make it difficult, if not improbable, for someone to guess a password through either manual or automated means. Options include `none`, `low`, `fair`, `good`, `excellent`.
        :param str protocol_binding: The SAML Response Binding - how the SAML token is received by Auth0 from IdP. Two possible values are `urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect` (default) and `urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST`
        :param str request_template: Template that formats the SAML request
        :param bool requires_username: Indicates whether or not the user is required to provide a username in addition to an email address.
        :param Sequence[str] scopes: Scopes required by the connection. The value must be a list, for example `["openid", "profile", "email"]`.
        :param str set_user_root_attributes: Determines whether the 'name', 'given_name', 'family_name', 'nickname', and 'picture' attributes can be independently updated when using the external IdP. Default is `on_each_login` and can be set to `on_first_login`.
        :param str should_trust_email_verified_connection: Determines how Auth0 sets the email_verified field in the user profile. Can either be set to `never_set_emails_as_verified` or `always_set_emails_as_verified`.
        :param str sign_in_endpoint: SAML single login URL for the connection.
        :param str sign_out_endpoint: SAML single logout URL for the connection.
        :param bool sign_saml_request: (Boolean) When enabled, the SAML authentication request will be signed.
        :param str signature_algorithm: Sign Request Algorithm
        :param str signing_cert: The X.509 signing certificate (encoded in PEM or CER) you retrieved from the IdP, Base64-encoded
        :param int strategy_version: Version 1 is deprecated, use version 2.
        :param str syntax: Syntax of the SMS. Options include `markdown` and `liquid`.
        :param str team_id: Team ID.
        :param str template: Template for the SMS. You can use `@@password@@` as a placeholder for the password value.
        :param 'ConnectionOptionsTotpArgs' totp: Configuration options for one-time passwords. For details, see TOTP.
        :param str twilio_sid: SID for your Twilio account.
        :param str twilio_token: AuthToken for your Twilio account.
        :param str type: Value can be `back_channel` or `front_channel`.
        :param str user_id_attribute: Attribute in the SAML token that will be mapped to the user_id property in Auth0.
        :param 'ConnectionOptionsValidationArgs' validation: Validation of the minimum and maximum values allowed for a user to have as username. For details, see Validation.
        :param bool waad_common_endpoint: Indicates whether or not to use the common endpoint rather than the default endpoint. Typically enabled if you're using this for a multi-tenant application in Azure AD.
        """
        if adfs_server is not None:
            pulumi.set(__self__, "adfs_server", adfs_server)
        if allowed_audiences is not None:
            pulumi.set(__self__, "allowed_audiences", allowed_audiences)
        if api_enable_users is not None:
            pulumi.set(__self__, "api_enable_users", api_enable_users)
        if app_domain is not None:
            pulumi.set(__self__, "app_domain", app_domain)
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if authorization_endpoint is not None:
            pulumi.set(__self__, "authorization_endpoint", authorization_endpoint)
        if brute_force_protection is not None:
            pulumi.set(__self__, "brute_force_protection", brute_force_protection)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if community_base_url is not None:
            pulumi.set(__self__, "community_base_url", community_base_url)
        if configuration is not None:
            pulumi.set(__self__, "configuration", configuration)
        if custom_scripts is not None:
            pulumi.set(__self__, "custom_scripts", custom_scripts)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if digest_algorithm is not None:
            pulumi.set(__self__, "digest_algorithm", digest_algorithm)
        if disable_cache is not None:
            pulumi.set(__self__, "disable_cache", disable_cache)
        if disable_signup is not None:
            pulumi.set(__self__, "disable_signup", disable_signup)
        if discovery_url is not None:
            pulumi.set(__self__, "discovery_url", discovery_url)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if domain_aliases is not None:
            pulumi.set(__self__, "domain_aliases", domain_aliases)
        if enabled_database_customization is not None:
            pulumi.set(__self__, "enabled_database_customization", enabled_database_customization)
        if entity_id is not None:
            pulumi.set(__self__, "entity_id", entity_id)
        if fields_map is not None:
            pulumi.set(__self__, "fields_map", fields_map)
        if forward_request_info is not None:
            pulumi.set(__self__, "forward_request_info", forward_request_info)
        if from_ is not None:
            pulumi.set(__self__, "from_", from_)
        if gateway_authentication is not None:
            pulumi.set(__self__, "gateway_authentication", gateway_authentication)
        if gateway_url is not None:
            pulumi.set(__self__, "gateway_url", gateway_url)
        if icon_url is not None:
            pulumi.set(__self__, "icon_url", icon_url)
        if identity_api is not None:
            pulumi.set(__self__, "identity_api", identity_api)
        if idp_initiated is not None:
            pulumi.set(__self__, "idp_initiated", idp_initiated)
        if import_mode is not None:
            pulumi.set(__self__, "import_mode", import_mode)
        if ips is not None:
            pulumi.set(__self__, "ips", ips)
        if issuer is not None:
            pulumi.set(__self__, "issuer", issuer)
        if jwks_uri is not None:
            pulumi.set(__self__, "jwks_uri", jwks_uri)
        if key_id is not None:
            pulumi.set(__self__, "key_id", key_id)
        if max_groups_to_retrieve is not None:
            pulumi.set(__self__, "max_groups_to_retrieve", max_groups_to_retrieve)
        if messaging_service_sid is not None:
            pulumi.set(__self__, "messaging_service_sid", messaging_service_sid)
        if mfa is not None:
            pulumi.set(__self__, "mfa", mfa)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if non_persistent_attrs is not None:
            pulumi.set(__self__, "non_persistent_attrs", non_persistent_attrs)
        if password_complexity_options is not None:
            pulumi.set(__self__, "password_complexity_options", password_complexity_options)
        if password_dictionary is not None:
            pulumi.set(__self__, "password_dictionary", password_dictionary)
        if password_histories is not None:
            pulumi.set(__self__, "password_histories", password_histories)
        if password_no_personal_info is not None:
            pulumi.set(__self__, "password_no_personal_info", password_no_personal_info)
        if password_policy is not None:
            pulumi.set(__self__, "password_policy", password_policy)
        if protocol_binding is not None:
            pulumi.set(__self__, "protocol_binding", protocol_binding)
        if provider is not None:
            pulumi.set(__self__, "provider", provider)
        if request_template is not None:
            pulumi.set(__self__, "request_template", request_template)
        if requires_username is not None:
            pulumi.set(__self__, "requires_username", requires_username)
        if scopes is not None:
            pulumi.set(__self__, "scopes", scopes)
        if scripts is not None:
            pulumi.set(__self__, "scripts", scripts)
        if set_user_root_attributes is not None:
            pulumi.set(__self__, "set_user_root_attributes", set_user_root_attributes)
        if should_trust_email_verified_connection is not None:
            pulumi.set(__self__, "should_trust_email_verified_connection", should_trust_email_verified_connection)
        if sign_in_endpoint is not None:
            pulumi.set(__self__, "sign_in_endpoint", sign_in_endpoint)
        if sign_out_endpoint is not None:
            pulumi.set(__self__, "sign_out_endpoint", sign_out_endpoint)
        if sign_saml_request is not None:
            pulumi.set(__self__, "sign_saml_request", sign_saml_request)
        if signature_algorithm is not None:
            pulumi.set(__self__, "signature_algorithm", signature_algorithm)
        if signing_cert is not None:
            pulumi.set(__self__, "signing_cert", signing_cert)
        if strategy_version is not None:
            pulumi.set(__self__, "strategy_version", strategy_version)
        if subject is not None:
            pulumi.set(__self__, "subject", subject)
        if syntax is not None:
            pulumi.set(__self__, "syntax", syntax)
        if team_id is not None:
            pulumi.set(__self__, "team_id", team_id)
        if template is not None:
            pulumi.set(__self__, "template", template)
        if tenant_domain is not None:
            pulumi.set(__self__, "tenant_domain", tenant_domain)
        if token_endpoint is not None:
            pulumi.set(__self__, "token_endpoint", token_endpoint)
        if totp is not None:
            pulumi.set(__self__, "totp", totp)
        if twilio_sid is not None:
            pulumi.set(__self__, "twilio_sid", twilio_sid)
        if twilio_token is not None:
            pulumi.set(__self__, "twilio_token", twilio_token)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if use_cert_auth is not None:
            pulumi.set(__self__, "use_cert_auth", use_cert_auth)
        if use_kerberos is not None:
            pulumi.set(__self__, "use_kerberos", use_kerberos)
        if use_wsfed is not None:
            pulumi.set(__self__, "use_wsfed", use_wsfed)
        if user_id_attribute is not None:
            pulumi.set(__self__, "user_id_attribute", user_id_attribute)
        if userinfo_endpoint is not None:
            pulumi.set(__self__, "userinfo_endpoint", userinfo_endpoint)
        if validation is not None:
            pulumi.set(__self__, "validation", validation)
        if waad_common_endpoint is not None:
            pulumi.set(__self__, "waad_common_endpoint", waad_common_endpoint)
        if waad_protocol is not None:
            pulumi.set(__self__, "waad_protocol", waad_protocol)

    @property
    @pulumi.getter(name="adfsServer")
    def adfs_server(self) -> Optional[str]:
        """
        ADFS Metadata source.
        """
        return pulumi.get(self, "adfs_server")

    @property
    @pulumi.getter(name="allowedAudiences")
    def allowed_audiences(self) -> Optional[Sequence[str]]:
        """
        List of allowed audiences.
        """
        return pulumi.get(self, "allowed_audiences")

    @property
    @pulumi.getter(name="apiEnableUsers")
    def api_enable_users(self) -> Optional[bool]:
        return pulumi.get(self, "api_enable_users")

    @property
    @pulumi.getter(name="appDomain")
    def app_domain(self) -> Optional[str]:
        """
        Azure AD domain name.
        """
        return pulumi.get(self, "app_domain")

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> Optional[str]:
        """
        Azure AD app ID.
        """
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="authorizationEndpoint")
    def authorization_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "authorization_endpoint")

    @property
    @pulumi.getter(name="bruteForceProtection")
    def brute_force_protection(self) -> Optional[bool]:
        """
        Indicates whether or not to enable brute force protection, which will limit the number of signups and failed logins from a suspicious IP address.
        """
        return pulumi.get(self, "brute_force_protection")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[str]:
        """
        OIDC provider client ID.
        """
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[str]:
        """
        OIDC provider client secret.
        """
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="communityBaseUrl")
    def community_base_url(self) -> Optional[str]:
        """
        String.
        """
        return pulumi.get(self, "community_base_url")

    @property
    @pulumi.getter
    def configuration(self) -> Optional[Mapping[str, str]]:
        """
        A case-sensitive map of key value pairs used as configuration variables for the `custom_script`.
        """
        return pulumi.get(self, "configuration")

    @property
    @pulumi.getter(name="customScripts")
    def custom_scripts(self) -> Optional[Mapping[str, str]]:
        """
        Custom database action scripts. For more information, read [Custom Database Action Script Templates](https://auth0.com/docs/connections/database/custom-db/templates).
        """
        return pulumi.get(self, "custom_scripts")

    @property
    @pulumi.getter
    def debug(self) -> Optional[bool]:
        """
        (Boolean) When enabled additional debugging information will be generated.
        """
        return pulumi.get(self, "debug")

    @property
    @pulumi.getter(name="digestAlgorithm")
    def digest_algorithm(self) -> Optional[str]:
        """
        Sign Request Algorithm Digest
        """
        return pulumi.get(self, "digest_algorithm")

    @property
    @pulumi.getter(name="disableCache")
    def disable_cache(self) -> Optional[bool]:
        return pulumi.get(self, "disable_cache")

    @property
    @pulumi.getter(name="disableSignup")
    def disable_signup(self) -> Optional[bool]:
        """
        Boolean. Indicates whether or not to allow user sign-ups to your application.
        """
        return pulumi.get(self, "disable_signup")

    @property
    @pulumi.getter(name="discoveryUrl")
    def discovery_url(self) -> Optional[str]:
        """
        OpenID discovery URL. E.g. `https://auth.example.com/.well-known/openid-configuration`.
        """
        return pulumi.get(self, "discovery_url")

    @property
    @pulumi.getter
    def domain(self) -> Optional[str]:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="domainAliases")
    def domain_aliases(self) -> Optional[Sequence[str]]:
        """
        List of the domains that can be authenticated using the Identity Provider. Only needed for Identifier First authentication flows.
        """
        return pulumi.get(self, "domain_aliases")

    @property
    @pulumi.getter(name="enabledDatabaseCustomization")
    def enabled_database_customization(self) -> Optional[bool]:
        return pulumi.get(self, "enabled_database_customization")

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> Optional[str]:
        """
        Custom Entity ID for the connection.
        """
        return pulumi.get(self, "entity_id")

    @property
    @pulumi.getter(name="fieldsMap")
    def fields_map(self) -> Optional[Mapping[str, str]]:
        """
        SAML Attributes mapping. If you're configuring a SAML enterprise connection for a non-standard PingFederate Server, you must update the attribute mappings.
        """
        return pulumi.get(self, "fields_map")

    @property
    @pulumi.getter(name="forwardRequestInfo")
    def forward_request_info(self) -> Optional[bool]:
        return pulumi.get(self, "forward_request_info")

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[str]:
        """
        SMS number for the sender. Used when SMS Source is From.
        """
        return pulumi.get(self, "from_")

    @property
    @pulumi.getter(name="gatewayAuthentication")
    def gateway_authentication(self) -> Optional['outputs.ConnectionOptionsGatewayAuthentication']:
        return pulumi.get(self, "gateway_authentication")

    @property
    @pulumi.getter(name="gatewayUrl")
    def gateway_url(self) -> Optional[str]:
        return pulumi.get(self, "gateway_url")

    @property
    @pulumi.getter(name="iconUrl")
    def icon_url(self) -> Optional[str]:
        return pulumi.get(self, "icon_url")

    @property
    @pulumi.getter(name="identityApi")
    def identity_api(self) -> Optional[str]:
        return pulumi.get(self, "identity_api")

    @property
    @pulumi.getter(name="idpInitiated")
    def idp_initiated(self) -> Optional['outputs.ConnectionOptionsIdpInitiated']:
        """
        Configuration Options for IDP Initiated Authentication.  This is an object with the properties: `client_id`, `client_protocol`, and `client_authorize_query`
        """
        return pulumi.get(self, "idp_initiated")

    @property
    @pulumi.getter(name="importMode")
    def import_mode(self) -> Optional[bool]:
        """
        Indicates whether or not you have a legacy user store and want to gradually migrate those users to the Auth0 user store. [Learn more](https://auth0.com/docs/users/guides/configure-automatic-migration).
        """
        return pulumi.get(self, "import_mode")

    @property
    @pulumi.getter
    def ips(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ips")

    @property
    @pulumi.getter
    def issuer(self) -> Optional[str]:
        """
        Issuer URL. E.g. `https://auth.example.com`
        """
        return pulumi.get(self, "issuer")

    @property
    @pulumi.getter(name="jwksUri")
    def jwks_uri(self) -> Optional[str]:
        return pulumi.get(self, "jwks_uri")

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> Optional[str]:
        """
        Key ID.
        """
        return pulumi.get(self, "key_id")

    @property
    @pulumi.getter(name="maxGroupsToRetrieve")
    def max_groups_to_retrieve(self) -> Optional[str]:
        """
        Maximum number of groups to retrieve.
        """
        return pulumi.get(self, "max_groups_to_retrieve")

    @property
    @pulumi.getter(name="messagingServiceSid")
    def messaging_service_sid(self) -> Optional[str]:
        """
        SID for Copilot. Used when SMS Source is Copilot.
        """
        return pulumi.get(self, "messaging_service_sid")

    @property
    @pulumi.getter
    def mfa(self) -> Optional['outputs.ConnectionOptionsMfa']:
        """
        Configuration settings Options for multifactor authentication. For details, see MFA Options.
        """
        return pulumi.get(self, "mfa")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the connection.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nonPersistentAttrs")
    def non_persistent_attrs(self) -> Optional[Sequence[str]]:
        """
        If there are user fields that should not be stored in Auth0 databases due to privacy reasons, you can add them to the denylist. See [here](https://auth0.com/docs/security/denylist-user-attributes) for more info.
        """
        return pulumi.get(self, "non_persistent_attrs")

    @property
    @pulumi.getter(name="passwordComplexityOptions")
    def password_complexity_options(self) -> Optional['outputs.ConnectionOptionsPasswordComplexityOptions']:
        """
        Configuration settings for password complexity. For details, see Password Complexity Options.
        """
        return pulumi.get(self, "password_complexity_options")

    @property
    @pulumi.getter(name="passwordDictionary")
    def password_dictionary(self) -> Optional['outputs.ConnectionOptionsPasswordDictionary']:
        """
        Configuration settings for the password dictionary check, which does not allow passwords that are part of the password dictionary. For details, see Password Dictionary.
        """
        return pulumi.get(self, "password_dictionary")

    @property
    @pulumi.getter(name="passwordHistories")
    def password_histories(self) -> Optional[Sequence['outputs.ConnectionOptionsPasswordHistory']]:
        """
        Configuration settings for the password history that is maintained for each user to prevent the reuse of passwords. For details, see Password History.
        """
        return pulumi.get(self, "password_histories")

    @property
    @pulumi.getter(name="passwordNoPersonalInfo")
    def password_no_personal_info(self) -> Optional['outputs.ConnectionOptionsPasswordNoPersonalInfo']:
        """
        Configuration settings for the password personal info check, which does not allow passwords that contain any part of the user's personal data, including user's name, username, nickname, user_metadata.name, user_metadata.first, user_metadata.last, user's email, or first part of the user's email. For details, see Password No Personal Info.
        """
        return pulumi.get(self, "password_no_personal_info")

    @property
    @pulumi.getter(name="passwordPolicy")
    def password_policy(self) -> Optional[str]:
        """
        Indicates level of password strength to enforce during authentication. A strong password policy will make it difficult, if not improbable, for someone to guess a password through either manual or automated means. Options include `none`, `low`, `fair`, `good`, `excellent`.
        """
        return pulumi.get(self, "password_policy")

    @property
    @pulumi.getter(name="protocolBinding")
    def protocol_binding(self) -> Optional[str]:
        """
        The SAML Response Binding - how the SAML token is received by Auth0 from IdP. Two possible values are `urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect` (default) and `urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST`
        """
        return pulumi.get(self, "protocol_binding")

    @property
    @pulumi.getter
    def provider(self) -> Optional[str]:
        return pulumi.get(self, "provider")

    @property
    @pulumi.getter(name="requestTemplate")
    def request_template(self) -> Optional[str]:
        """
        Template that formats the SAML request
        """
        return pulumi.get(self, "request_template")

    @property
    @pulumi.getter(name="requiresUsername")
    def requires_username(self) -> Optional[bool]:
        """
        Indicates whether or not the user is required to provide a username in addition to an email address.
        """
        return pulumi.get(self, "requires_username")

    @property
    @pulumi.getter
    def scopes(self) -> Optional[Sequence[str]]:
        """
        Scopes required by the connection. The value must be a list, for example `["openid", "profile", "email"]`.
        """
        return pulumi.get(self, "scopes")

    @property
    @pulumi.getter
    def scripts(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "scripts")

    @property
    @pulumi.getter(name="setUserRootAttributes")
    def set_user_root_attributes(self) -> Optional[str]:
        """
        Determines whether the 'name', 'given_name', 'family_name', 'nickname', and 'picture' attributes can be independently updated when using the external IdP. Default is `on_each_login` and can be set to `on_first_login`.
        """
        return pulumi.get(self, "set_user_root_attributes")

    @property
    @pulumi.getter(name="shouldTrustEmailVerifiedConnection")
    def should_trust_email_verified_connection(self) -> Optional[str]:
        """
        Determines how Auth0 sets the email_verified field in the user profile. Can either be set to `never_set_emails_as_verified` or `always_set_emails_as_verified`.
        """
        return pulumi.get(self, "should_trust_email_verified_connection")

    @property
    @pulumi.getter(name="signInEndpoint")
    def sign_in_endpoint(self) -> Optional[str]:
        """
        SAML single login URL for the connection.
        """
        return pulumi.get(self, "sign_in_endpoint")

    @property
    @pulumi.getter(name="signOutEndpoint")
    def sign_out_endpoint(self) -> Optional[str]:
        """
        SAML single logout URL for the connection.
        """
        return pulumi.get(self, "sign_out_endpoint")

    @property
    @pulumi.getter(name="signSamlRequest")
    def sign_saml_request(self) -> Optional[bool]:
        """
        (Boolean) When enabled, the SAML authentication request will be signed.
        """
        return pulumi.get(self, "sign_saml_request")

    @property
    @pulumi.getter(name="signatureAlgorithm")
    def signature_algorithm(self) -> Optional[str]:
        """
        Sign Request Algorithm
        """
        return pulumi.get(self, "signature_algorithm")

    @property
    @pulumi.getter(name="signingCert")
    def signing_cert(self) -> Optional[str]:
        """
        The X.509 signing certificate (encoded in PEM or CER) you retrieved from the IdP, Base64-encoded
        """
        return pulumi.get(self, "signing_cert")

    @property
    @pulumi.getter(name="strategyVersion")
    def strategy_version(self) -> Optional[int]:
        """
        Version 1 is deprecated, use version 2.
        """
        return pulumi.get(self, "strategy_version")

    @property
    @pulumi.getter
    def subject(self) -> Optional[str]:
        return pulumi.get(self, "subject")

    @property
    @pulumi.getter
    def syntax(self) -> Optional[str]:
        """
        Syntax of the SMS. Options include `markdown` and `liquid`.
        """
        return pulumi.get(self, "syntax")

    @property
    @pulumi.getter(name="teamId")
    def team_id(self) -> Optional[str]:
        """
        Team ID.
        """
        return pulumi.get(self, "team_id")

    @property
    @pulumi.getter
    def template(self) -> Optional[str]:
        """
        Template for the SMS. You can use `@@password@@` as a placeholder for the password value.
        """
        return pulumi.get(self, "template")

    @property
    @pulumi.getter(name="tenantDomain")
    def tenant_domain(self) -> Optional[str]:
        return pulumi.get(self, "tenant_domain")

    @property
    @pulumi.getter(name="tokenEndpoint")
    def token_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "token_endpoint")

    @property
    @pulumi.getter
    def totp(self) -> Optional['outputs.ConnectionOptionsTotp']:
        """
        Configuration options for one-time passwords. For details, see TOTP.
        """
        return pulumi.get(self, "totp")

    @property
    @pulumi.getter(name="twilioSid")
    def twilio_sid(self) -> Optional[str]:
        """
        SID for your Twilio account.
        """
        return pulumi.get(self, "twilio_sid")

    @property
    @pulumi.getter(name="twilioToken")
    def twilio_token(self) -> Optional[str]:
        """
        AuthToken for your Twilio account.
        """
        return pulumi.get(self, "twilio_token")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Value can be `back_channel` or `front_channel`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="useCertAuth")
    def use_cert_auth(self) -> Optional[bool]:
        return pulumi.get(self, "use_cert_auth")

    @property
    @pulumi.getter(name="useKerberos")
    def use_kerberos(self) -> Optional[bool]:
        return pulumi.get(self, "use_kerberos")

    @property
    @pulumi.getter(name="useWsfed")
    def use_wsfed(self) -> Optional[bool]:
        return pulumi.get(self, "use_wsfed")

    @property
    @pulumi.getter(name="userIdAttribute")
    def user_id_attribute(self) -> Optional[str]:
        """
        Attribute in the SAML token that will be mapped to the user_id property in Auth0.
        """
        return pulumi.get(self, "user_id_attribute")

    @property
    @pulumi.getter(name="userinfoEndpoint")
    def userinfo_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "userinfo_endpoint")

    @property
    @pulumi.getter
    def validation(self) -> Optional['outputs.ConnectionOptionsValidation']:
        """
        Validation of the minimum and maximum values allowed for a user to have as username. For details, see Validation.
        """
        return pulumi.get(self, "validation")

    @property
    @pulumi.getter(name="waadCommonEndpoint")
    def waad_common_endpoint(self) -> Optional[bool]:
        """
        Indicates whether or not to use the common endpoint rather than the default endpoint. Typically enabled if you're using this for a multi-tenant application in Azure AD.
        """
        return pulumi.get(self, "waad_common_endpoint")

    @property
    @pulumi.getter(name="waadProtocol")
    def waad_protocol(self) -> Optional[str]:
        return pulumi.get(self, "waad_protocol")


@pulumi.output_type
class ConnectionOptionsGatewayAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretBase64Encoded":
            suggest = "secret_base64_encoded"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConnectionOptionsGatewayAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConnectionOptionsGatewayAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConnectionOptionsGatewayAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 audience: Optional[str] = None,
                 method: Optional[str] = None,
                 secret: Optional[str] = None,
                 secret_base64_encoded: Optional[bool] = None,
                 subject: Optional[str] = None):
        if audience is not None:
            pulumi.set(__self__, "audience", audience)
        if method is not None:
            pulumi.set(__self__, "method", method)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if secret_base64_encoded is not None:
            pulumi.set(__self__, "secret_base64_encoded", secret_base64_encoded)
        if subject is not None:
            pulumi.set(__self__, "subject", subject)

    @property
    @pulumi.getter
    def audience(self) -> Optional[str]:
        return pulumi.get(self, "audience")

    @property
    @pulumi.getter
    def method(self) -> Optional[str]:
        return pulumi.get(self, "method")

    @property
    @pulumi.getter
    def secret(self) -> Optional[str]:
        return pulumi.get(self, "secret")

    @property
    @pulumi.getter(name="secretBase64Encoded")
    def secret_base64_encoded(self) -> Optional[bool]:
        return pulumi.get(self, "secret_base64_encoded")

    @property
    @pulumi.getter
    def subject(self) -> Optional[str]:
        return pulumi.get(self, "subject")


@pulumi.output_type
class ConnectionOptionsIdpInitiated(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientAuthorizeQuery":
            suggest = "client_authorize_query"
        elif key == "clientId":
            suggest = "client_id"
        elif key == "clientProtocol":
            suggest = "client_protocol"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConnectionOptionsIdpInitiated. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConnectionOptionsIdpInitiated.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConnectionOptionsIdpInitiated.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_authorize_query: Optional[str] = None,
                 client_id: Optional[str] = None,
                 client_protocol: Optional[str] = None):
        """
        :param str client_id: Google client ID.
        """
        if client_authorize_query is not None:
            pulumi.set(__self__, "client_authorize_query", client_authorize_query)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_protocol is not None:
            pulumi.set(__self__, "client_protocol", client_protocol)

    @property
    @pulumi.getter(name="clientAuthorizeQuery")
    def client_authorize_query(self) -> Optional[str]:
        return pulumi.get(self, "client_authorize_query")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[str]:
        """
        Google client ID.
        """
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientProtocol")
    def client_protocol(self) -> Optional[str]:
        return pulumi.get(self, "client_protocol")


@pulumi.output_type
class ConnectionOptionsMfa(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "returnEnrollSettings":
            suggest = "return_enroll_settings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConnectionOptionsMfa. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConnectionOptionsMfa.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConnectionOptionsMfa.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 active: Optional[bool] = None,
                 return_enroll_settings: Optional[bool] = None):
        """
        :param bool active: Indicates whether multifactor authentication is enabled for this connection.
        :param bool return_enroll_settings: Indicates whether multifactor authentication enrollment settings will be returned.
        """
        if active is not None:
            pulumi.set(__self__, "active", active)
        if return_enroll_settings is not None:
            pulumi.set(__self__, "return_enroll_settings", return_enroll_settings)

    @property
    @pulumi.getter
    def active(self) -> Optional[bool]:
        """
        Indicates whether multifactor authentication is enabled for this connection.
        """
        return pulumi.get(self, "active")

    @property
    @pulumi.getter(name="returnEnrollSettings")
    def return_enroll_settings(self) -> Optional[bool]:
        """
        Indicates whether multifactor authentication enrollment settings will be returned.
        """
        return pulumi.get(self, "return_enroll_settings")


@pulumi.output_type
class ConnectionOptionsPasswordComplexityOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "minLength":
            suggest = "min_length"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConnectionOptionsPasswordComplexityOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConnectionOptionsPasswordComplexityOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConnectionOptionsPasswordComplexityOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 min_length: Optional[int] = None):
        """
        :param int min_length: Minimum number of characters allowed in passwords.
        """
        if min_length is not None:
            pulumi.set(__self__, "min_length", min_length)

    @property
    @pulumi.getter(name="minLength")
    def min_length(self) -> Optional[int]:
        """
        Minimum number of characters allowed in passwords.
        """
        return pulumi.get(self, "min_length")


@pulumi.output_type
class ConnectionOptionsPasswordDictionary(dict):
    def __init__(__self__, *,
                 dictionaries: Optional[Sequence[str]] = None,
                 enable: Optional[bool] = None):
        """
        :param Sequence[str] dictionaries: Customized contents of the password dictionary. By default, the password dictionary contains a list of the [10,000 most common passwords](https://github.com/danielmiessler/SecLists/blob/master/Passwords/Common-Credentials/10k-most-common.txt); your customized content is used in addition to the default password dictionary. Matching is not case-sensitive.
        :param bool enable: Indicates whether the password dictionary check is enabled for this connection.
        """
        if dictionaries is not None:
            pulumi.set(__self__, "dictionaries", dictionaries)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)

    @property
    @pulumi.getter
    def dictionaries(self) -> Optional[Sequence[str]]:
        """
        Customized contents of the password dictionary. By default, the password dictionary contains a list of the [10,000 most common passwords](https://github.com/danielmiessler/SecLists/blob/master/Passwords/Common-Credentials/10k-most-common.txt); your customized content is used in addition to the default password dictionary. Matching is not case-sensitive.
        """
        return pulumi.get(self, "dictionaries")

    @property
    @pulumi.getter
    def enable(self) -> Optional[bool]:
        """
        Indicates whether the password dictionary check is enabled for this connection.
        """
        return pulumi.get(self, "enable")


@pulumi.output_type
class ConnectionOptionsPasswordHistory(dict):
    def __init__(__self__, *,
                 enable: Optional[bool] = None,
                 size: Optional[int] = None):
        """
        :param bool enable: Indicates whether password history is enabled for the connection. When enabled, any existing users in this connection will be unaffected; the system will maintain their password history going forward.
        :param int size: Indicates the number of passwords to keep in history with a maximum of 24.
        """
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if size is not None:
            pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def enable(self) -> Optional[bool]:
        """
        Indicates whether password history is enabled for the connection. When enabled, any existing users in this connection will be unaffected; the system will maintain their password history going forward.
        """
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter
    def size(self) -> Optional[int]:
        """
        Indicates the number of passwords to keep in history with a maximum of 24.
        """
        return pulumi.get(self, "size")


@pulumi.output_type
class ConnectionOptionsPasswordNoPersonalInfo(dict):
    def __init__(__self__, *,
                 enable: Optional[bool] = None):
        """
        :param bool enable: Indicates whether the password personal info check is enabled for this connection.
        """
        if enable is not None:
            pulumi.set(__self__, "enable", enable)

    @property
    @pulumi.getter
    def enable(self) -> Optional[bool]:
        """
        Indicates whether the password personal info check is enabled for this connection.
        """
        return pulumi.get(self, "enable")


@pulumi.output_type
class ConnectionOptionsTotp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "timeStep":
            suggest = "time_step"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConnectionOptionsTotp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConnectionOptionsTotp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConnectionOptionsTotp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 length: Optional[int] = None,
                 time_step: Optional[int] = None):
        """
        :param int length: Integer. Length of the one-time password.
        :param int time_step: Integer. Seconds between allowed generation of new passwords.
        """
        if length is not None:
            pulumi.set(__self__, "length", length)
        if time_step is not None:
            pulumi.set(__self__, "time_step", time_step)

    @property
    @pulumi.getter
    def length(self) -> Optional[int]:
        """
        Integer. Length of the one-time password.
        """
        return pulumi.get(self, "length")

    @property
    @pulumi.getter(name="timeStep")
    def time_step(self) -> Optional[int]:
        """
        Integer. Seconds between allowed generation of new passwords.
        """
        return pulumi.get(self, "time_step")


@pulumi.output_type
class ConnectionOptionsValidation(dict):
    def __init__(__self__, *,
                 username: Optional['outputs.ConnectionOptionsValidationUsername'] = None):
        """
        :param 'ConnectionOptionsValidationUsernameArgs' username: Specifies the `min` and `max` values of username length. `min` and `max` are integers.
        """
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def username(self) -> Optional['outputs.ConnectionOptionsValidationUsername']:
        """
        Specifies the `min` and `max` values of username length. `min` and `max` are integers.
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class ConnectionOptionsValidationUsername(dict):
    def __init__(__self__, *,
                 max: Optional[int] = None,
                 min: Optional[int] = None):
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)

    @property
    @pulumi.getter
    def max(self) -> Optional[int]:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> Optional[int]:
        return pulumi.get(self, "min")


@pulumi.output_type
class CustomDomainVerification(dict):
    def __init__(__self__, *,
                 methods: Optional[Sequence[Any]] = None):
        """
        :param Sequence[Any] methods: List(Map). Verification methods for the domain.
        """
        if methods is not None:
            pulumi.set(__self__, "methods", methods)

    @property
    @pulumi.getter
    def methods(self) -> Optional[Sequence[Any]]:
        """
        List(Map). Verification methods for the domain.
        """
        return pulumi.get(self, "methods")


@pulumi.output_type
class EmailCredentials(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessKeyId":
            suggest = "access_key_id"
        elif key == "apiKey":
            suggest = "api_key"
        elif key == "apiUser":
            suggest = "api_user"
        elif key == "secretAccessKey":
            suggest = "secret_access_key"
        elif key == "smtpHost":
            suggest = "smtp_host"
        elif key == "smtpPass":
            suggest = "smtp_pass"
        elif key == "smtpPort":
            suggest = "smtp_port"
        elif key == "smtpUser":
            suggest = "smtp_user"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EmailCredentials. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EmailCredentials.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EmailCredentials.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_key_id: Optional[str] = None,
                 api_key: Optional[str] = None,
                 api_user: Optional[str] = None,
                 domain: Optional[str] = None,
                 region: Optional[str] = None,
                 secret_access_key: Optional[str] = None,
                 smtp_host: Optional[str] = None,
                 smtp_pass: Optional[str] = None,
                 smtp_port: Optional[int] = None,
                 smtp_user: Optional[str] = None):
        """
        :param str access_key_id: String, Case-sensitive. AWS Access Key ID. Used only for AWS.
        :param str api_key: String, Case-sensitive. API Key for your email service. Will always be encrypted in our database.
        :param str api_user: String. API User for your email service.
        :param str region: String. Default region. Used only for AWS, Mailgun, and SparkPost.
        :param str secret_access_key: String, Case-sensitive. AWS Secret Key. Will always be encrypted in our database. Used only for AWS.
        :param str smtp_host: String. Hostname or IP address of your SMTP server. Used only for SMTP.
        :param str smtp_pass: String, Case-sensitive. SMTP password. Used only for SMTP.
        :param int smtp_port: Integer. Port used by your SMTP server. Please avoid using port 25 if possible because many providers have limitations on this port. Used only for SMTP.
        :param str smtp_user: String. SMTP username. Used only for SMTP.
        """
        if access_key_id is not None:
            pulumi.set(__self__, "access_key_id", access_key_id)
        if api_key is not None:
            pulumi.set(__self__, "api_key", api_key)
        if api_user is not None:
            pulumi.set(__self__, "api_user", api_user)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if secret_access_key is not None:
            pulumi.set(__self__, "secret_access_key", secret_access_key)
        if smtp_host is not None:
            pulumi.set(__self__, "smtp_host", smtp_host)
        if smtp_pass is not None:
            pulumi.set(__self__, "smtp_pass", smtp_pass)
        if smtp_port is not None:
            pulumi.set(__self__, "smtp_port", smtp_port)
        if smtp_user is not None:
            pulumi.set(__self__, "smtp_user", smtp_user)

    @property
    @pulumi.getter(name="accessKeyId")
    def access_key_id(self) -> Optional[str]:
        """
        String, Case-sensitive. AWS Access Key ID. Used only for AWS.
        """
        return pulumi.get(self, "access_key_id")

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> Optional[str]:
        """
        String, Case-sensitive. API Key for your email service. Will always be encrypted in our database.
        """
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="apiUser")
    def api_user(self) -> Optional[str]:
        """
        String. API User for your email service.
        """
        return pulumi.get(self, "api_user")

    @property
    @pulumi.getter
    def domain(self) -> Optional[str]:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        String. Default region. Used only for AWS, Mailgun, and SparkPost.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="secretAccessKey")
    def secret_access_key(self) -> Optional[str]:
        """
        String, Case-sensitive. AWS Secret Key. Will always be encrypted in our database. Used only for AWS.
        """
        return pulumi.get(self, "secret_access_key")

    @property
    @pulumi.getter(name="smtpHost")
    def smtp_host(self) -> Optional[str]:
        """
        String. Hostname or IP address of your SMTP server. Used only for SMTP.
        """
        return pulumi.get(self, "smtp_host")

    @property
    @pulumi.getter(name="smtpPass")
    def smtp_pass(self) -> Optional[str]:
        """
        String, Case-sensitive. SMTP password. Used only for SMTP.
        """
        return pulumi.get(self, "smtp_pass")

    @property
    @pulumi.getter(name="smtpPort")
    def smtp_port(self) -> Optional[int]:
        """
        Integer. Port used by your SMTP server. Please avoid using port 25 if possible because many providers have limitations on this port. Used only for SMTP.
        """
        return pulumi.get(self, "smtp_port")

    @property
    @pulumi.getter(name="smtpUser")
    def smtp_user(self) -> Optional[str]:
        """
        String. SMTP username. Used only for SMTP.
        """
        return pulumi.get(self, "smtp_user")


@pulumi.output_type
class GlobalClientAddons(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "azureBlob":
            suggest = "azure_blob"
        elif key == "azureSb":
            suggest = "azure_sb"
        elif key == "salesforceApi":
            suggest = "salesforce_api"
        elif key == "salesforceSandboxApi":
            suggest = "salesforce_sandbox_api"
        elif key == "sapApi":
            suggest = "sap_api"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GlobalClientAddons. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GlobalClientAddons.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GlobalClientAddons.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aws: Optional[Mapping[str, Any]] = None,
                 azure_blob: Optional[Mapping[str, Any]] = None,
                 azure_sb: Optional[Mapping[str, Any]] = None,
                 box: Optional[Mapping[str, Any]] = None,
                 cloudbees: Optional[Mapping[str, Any]] = None,
                 concur: Optional[Mapping[str, Any]] = None,
                 dropbox: Optional[Mapping[str, Any]] = None,
                 echosign: Optional[Mapping[str, Any]] = None,
                 egnyte: Optional[Mapping[str, Any]] = None,
                 firebase: Optional[Mapping[str, Any]] = None,
                 layer: Optional[Mapping[str, Any]] = None,
                 mscrm: Optional[Mapping[str, Any]] = None,
                 newrelic: Optional[Mapping[str, Any]] = None,
                 office365: Optional[Mapping[str, Any]] = None,
                 rms: Optional[Mapping[str, Any]] = None,
                 salesforce: Optional[Mapping[str, Any]] = None,
                 salesforce_api: Optional[Mapping[str, Any]] = None,
                 salesforce_sandbox_api: Optional[Mapping[str, Any]] = None,
                 samlp: Optional['outputs.GlobalClientAddonsSamlp'] = None,
                 sap_api: Optional[Mapping[str, Any]] = None,
                 sentry: Optional[Mapping[str, Any]] = None,
                 sharepoint: Optional[Mapping[str, Any]] = None,
                 slack: Optional[Mapping[str, Any]] = None,
                 springcm: Optional[Mapping[str, Any]] = None,
                 wams: Optional[Mapping[str, Any]] = None,
                 wsfed: Optional[Mapping[str, Any]] = None,
                 zendesk: Optional[Mapping[str, Any]] = None,
                 zoom: Optional[Mapping[str, Any]] = None):
        if aws is not None:
            pulumi.set(__self__, "aws", aws)
        if azure_blob is not None:
            pulumi.set(__self__, "azure_blob", azure_blob)
        if azure_sb is not None:
            pulumi.set(__self__, "azure_sb", azure_sb)
        if box is not None:
            pulumi.set(__self__, "box", box)
        if cloudbees is not None:
            pulumi.set(__self__, "cloudbees", cloudbees)
        if concur is not None:
            pulumi.set(__self__, "concur", concur)
        if dropbox is not None:
            pulumi.set(__self__, "dropbox", dropbox)
        if echosign is not None:
            pulumi.set(__self__, "echosign", echosign)
        if egnyte is not None:
            pulumi.set(__self__, "egnyte", egnyte)
        if firebase is not None:
            pulumi.set(__self__, "firebase", firebase)
        if layer is not None:
            pulumi.set(__self__, "layer", layer)
        if mscrm is not None:
            pulumi.set(__self__, "mscrm", mscrm)
        if newrelic is not None:
            pulumi.set(__self__, "newrelic", newrelic)
        if office365 is not None:
            pulumi.set(__self__, "office365", office365)
        if rms is not None:
            pulumi.set(__self__, "rms", rms)
        if salesforce is not None:
            pulumi.set(__self__, "salesforce", salesforce)
        if salesforce_api is not None:
            pulumi.set(__self__, "salesforce_api", salesforce_api)
        if salesforce_sandbox_api is not None:
            pulumi.set(__self__, "salesforce_sandbox_api", salesforce_sandbox_api)
        if samlp is not None:
            pulumi.set(__self__, "samlp", samlp)
        if sap_api is not None:
            pulumi.set(__self__, "sap_api", sap_api)
        if sentry is not None:
            pulumi.set(__self__, "sentry", sentry)
        if sharepoint is not None:
            pulumi.set(__self__, "sharepoint", sharepoint)
        if slack is not None:
            pulumi.set(__self__, "slack", slack)
        if springcm is not None:
            pulumi.set(__self__, "springcm", springcm)
        if wams is not None:
            pulumi.set(__self__, "wams", wams)
        if wsfed is not None:
            pulumi.set(__self__, "wsfed", wsfed)
        if zendesk is not None:
            pulumi.set(__self__, "zendesk", zendesk)
        if zoom is not None:
            pulumi.set(__self__, "zoom", zoom)

    @property
    @pulumi.getter
    def aws(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "aws")

    @property
    @pulumi.getter(name="azureBlob")
    def azure_blob(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "azure_blob")

    @property
    @pulumi.getter(name="azureSb")
    def azure_sb(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "azure_sb")

    @property
    @pulumi.getter
    def box(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "box")

    @property
    @pulumi.getter
    def cloudbees(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "cloudbees")

    @property
    @pulumi.getter
    def concur(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "concur")

    @property
    @pulumi.getter
    def dropbox(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "dropbox")

    @property
    @pulumi.getter
    def echosign(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "echosign")

    @property
    @pulumi.getter
    def egnyte(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "egnyte")

    @property
    @pulumi.getter
    def firebase(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "firebase")

    @property
    @pulumi.getter
    def layer(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "layer")

    @property
    @pulumi.getter
    def mscrm(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "mscrm")

    @property
    @pulumi.getter
    def newrelic(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "newrelic")

    @property
    @pulumi.getter
    def office365(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "office365")

    @property
    @pulumi.getter
    def rms(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "rms")

    @property
    @pulumi.getter
    def salesforce(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "salesforce")

    @property
    @pulumi.getter(name="salesforceApi")
    def salesforce_api(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "salesforce_api")

    @property
    @pulumi.getter(name="salesforceSandboxApi")
    def salesforce_sandbox_api(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "salesforce_sandbox_api")

    @property
    @pulumi.getter
    def samlp(self) -> Optional['outputs.GlobalClientAddonsSamlp']:
        return pulumi.get(self, "samlp")

    @property
    @pulumi.getter(name="sapApi")
    def sap_api(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "sap_api")

    @property
    @pulumi.getter
    def sentry(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "sentry")

    @property
    @pulumi.getter
    def sharepoint(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "sharepoint")

    @property
    @pulumi.getter
    def slack(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "slack")

    @property
    @pulumi.getter
    def springcm(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "springcm")

    @property
    @pulumi.getter
    def wams(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "wams")

    @property
    @pulumi.getter
    def wsfed(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "wsfed")

    @property
    @pulumi.getter
    def zendesk(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "zendesk")

    @property
    @pulumi.getter
    def zoom(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "zoom")


@pulumi.output_type
class GlobalClientAddonsSamlp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authnContextClassRef":
            suggest = "authn_context_class_ref"
        elif key == "createUpnClaim":
            suggest = "create_upn_claim"
        elif key == "digestAlgorithm":
            suggest = "digest_algorithm"
        elif key == "includeAttributeNameFormat":
            suggest = "include_attribute_name_format"
        elif key == "lifetimeInSeconds":
            suggest = "lifetime_in_seconds"
        elif key == "mapIdentities":
            suggest = "map_identities"
        elif key == "mapUnknownClaimsAsIs":
            suggest = "map_unknown_claims_as_is"
        elif key == "nameIdentifierFormat":
            suggest = "name_identifier_format"
        elif key == "nameIdentifierProbes":
            suggest = "name_identifier_probes"
        elif key == "passthroughClaimsWithNoMapping":
            suggest = "passthrough_claims_with_no_mapping"
        elif key == "signResponse":
            suggest = "sign_response"
        elif key == "signatureAlgorithm":
            suggest = "signature_algorithm"
        elif key == "signingCert":
            suggest = "signing_cert"
        elif key == "typedAttributes":
            suggest = "typed_attributes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GlobalClientAddonsSamlp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GlobalClientAddonsSamlp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GlobalClientAddonsSamlp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 audience: Optional[str] = None,
                 authn_context_class_ref: Optional[str] = None,
                 binding: Optional[str] = None,
                 create_upn_claim: Optional[bool] = None,
                 destination: Optional[str] = None,
                 digest_algorithm: Optional[str] = None,
                 include_attribute_name_format: Optional[bool] = None,
                 lifetime_in_seconds: Optional[int] = None,
                 logout: Optional['outputs.GlobalClientAddonsSamlpLogout'] = None,
                 map_identities: Optional[bool] = None,
                 map_unknown_claims_as_is: Optional[bool] = None,
                 mappings: Optional[Mapping[str, Any]] = None,
                 name_identifier_format: Optional[str] = None,
                 name_identifier_probes: Optional[Sequence[str]] = None,
                 passthrough_claims_with_no_mapping: Optional[bool] = None,
                 recipient: Optional[str] = None,
                 sign_response: Optional[bool] = None,
                 signature_algorithm: Optional[str] = None,
                 signing_cert: Optional[str] = None,
                 typed_attributes: Optional[bool] = None):
        if audience is not None:
            pulumi.set(__self__, "audience", audience)
        if authn_context_class_ref is not None:
            pulumi.set(__self__, "authn_context_class_ref", authn_context_class_ref)
        if binding is not None:
            pulumi.set(__self__, "binding", binding)
        if create_upn_claim is not None:
            pulumi.set(__self__, "create_upn_claim", create_upn_claim)
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if digest_algorithm is not None:
            pulumi.set(__self__, "digest_algorithm", digest_algorithm)
        if include_attribute_name_format is not None:
            pulumi.set(__self__, "include_attribute_name_format", include_attribute_name_format)
        if lifetime_in_seconds is not None:
            pulumi.set(__self__, "lifetime_in_seconds", lifetime_in_seconds)
        if logout is not None:
            pulumi.set(__self__, "logout", logout)
        if map_identities is not None:
            pulumi.set(__self__, "map_identities", map_identities)
        if map_unknown_claims_as_is is not None:
            pulumi.set(__self__, "map_unknown_claims_as_is", map_unknown_claims_as_is)
        if mappings is not None:
            pulumi.set(__self__, "mappings", mappings)
        if name_identifier_format is not None:
            pulumi.set(__self__, "name_identifier_format", name_identifier_format)
        if name_identifier_probes is not None:
            pulumi.set(__self__, "name_identifier_probes", name_identifier_probes)
        if passthrough_claims_with_no_mapping is not None:
            pulumi.set(__self__, "passthrough_claims_with_no_mapping", passthrough_claims_with_no_mapping)
        if recipient is not None:
            pulumi.set(__self__, "recipient", recipient)
        if sign_response is not None:
            pulumi.set(__self__, "sign_response", sign_response)
        if signature_algorithm is not None:
            pulumi.set(__self__, "signature_algorithm", signature_algorithm)
        if signing_cert is not None:
            pulumi.set(__self__, "signing_cert", signing_cert)
        if typed_attributes is not None:
            pulumi.set(__self__, "typed_attributes", typed_attributes)

    @property
    @pulumi.getter
    def audience(self) -> Optional[str]:
        return pulumi.get(self, "audience")

    @property
    @pulumi.getter(name="authnContextClassRef")
    def authn_context_class_ref(self) -> Optional[str]:
        return pulumi.get(self, "authn_context_class_ref")

    @property
    @pulumi.getter
    def binding(self) -> Optional[str]:
        return pulumi.get(self, "binding")

    @property
    @pulumi.getter(name="createUpnClaim")
    def create_upn_claim(self) -> Optional[bool]:
        return pulumi.get(self, "create_upn_claim")

    @property
    @pulumi.getter
    def destination(self) -> Optional[str]:
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="digestAlgorithm")
    def digest_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "digest_algorithm")

    @property
    @pulumi.getter(name="includeAttributeNameFormat")
    def include_attribute_name_format(self) -> Optional[bool]:
        return pulumi.get(self, "include_attribute_name_format")

    @property
    @pulumi.getter(name="lifetimeInSeconds")
    def lifetime_in_seconds(self) -> Optional[int]:
        return pulumi.get(self, "lifetime_in_seconds")

    @property
    @pulumi.getter
    def logout(self) -> Optional['outputs.GlobalClientAddonsSamlpLogout']:
        return pulumi.get(self, "logout")

    @property
    @pulumi.getter(name="mapIdentities")
    def map_identities(self) -> Optional[bool]:
        return pulumi.get(self, "map_identities")

    @property
    @pulumi.getter(name="mapUnknownClaimsAsIs")
    def map_unknown_claims_as_is(self) -> Optional[bool]:
        return pulumi.get(self, "map_unknown_claims_as_is")

    @property
    @pulumi.getter
    def mappings(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "mappings")

    @property
    @pulumi.getter(name="nameIdentifierFormat")
    def name_identifier_format(self) -> Optional[str]:
        return pulumi.get(self, "name_identifier_format")

    @property
    @pulumi.getter(name="nameIdentifierProbes")
    def name_identifier_probes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "name_identifier_probes")

    @property
    @pulumi.getter(name="passthroughClaimsWithNoMapping")
    def passthrough_claims_with_no_mapping(self) -> Optional[bool]:
        return pulumi.get(self, "passthrough_claims_with_no_mapping")

    @property
    @pulumi.getter
    def recipient(self) -> Optional[str]:
        return pulumi.get(self, "recipient")

    @property
    @pulumi.getter(name="signResponse")
    def sign_response(self) -> Optional[bool]:
        return pulumi.get(self, "sign_response")

    @property
    @pulumi.getter(name="signatureAlgorithm")
    def signature_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "signature_algorithm")

    @property
    @pulumi.getter(name="signingCert")
    def signing_cert(self) -> Optional[str]:
        return pulumi.get(self, "signing_cert")

    @property
    @pulumi.getter(name="typedAttributes")
    def typed_attributes(self) -> Optional[bool]:
        return pulumi.get(self, "typed_attributes")


@pulumi.output_type
class GlobalClientAddonsSamlpLogout(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sloEnabled":
            suggest = "slo_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GlobalClientAddonsSamlpLogout. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GlobalClientAddonsSamlpLogout.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GlobalClientAddonsSamlpLogout.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 callback: Optional[str] = None,
                 slo_enabled: Optional[bool] = None):
        if callback is not None:
            pulumi.set(__self__, "callback", callback)
        if slo_enabled is not None:
            pulumi.set(__self__, "slo_enabled", slo_enabled)

    @property
    @pulumi.getter
    def callback(self) -> Optional[str]:
        return pulumi.get(self, "callback")

    @property
    @pulumi.getter(name="sloEnabled")
    def slo_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "slo_enabled")


@pulumi.output_type
class GlobalClientJwtConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lifetimeInSeconds":
            suggest = "lifetime_in_seconds"
        elif key == "secretEncoded":
            suggest = "secret_encoded"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GlobalClientJwtConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GlobalClientJwtConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GlobalClientJwtConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 alg: Optional[str] = None,
                 lifetime_in_seconds: Optional[int] = None,
                 scopes: Optional[Mapping[str, str]] = None,
                 secret_encoded: Optional[bool] = None):
        if alg is not None:
            pulumi.set(__self__, "alg", alg)
        if lifetime_in_seconds is not None:
            pulumi.set(__self__, "lifetime_in_seconds", lifetime_in_seconds)
        if scopes is not None:
            pulumi.set(__self__, "scopes", scopes)
        if secret_encoded is not None:
            pulumi.set(__self__, "secret_encoded", secret_encoded)

    @property
    @pulumi.getter
    def alg(self) -> Optional[str]:
        return pulumi.get(self, "alg")

    @property
    @pulumi.getter(name="lifetimeInSeconds")
    def lifetime_in_seconds(self) -> Optional[int]:
        return pulumi.get(self, "lifetime_in_seconds")

    @property
    @pulumi.getter
    def scopes(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "scopes")

    @property
    @pulumi.getter(name="secretEncoded")
    def secret_encoded(self) -> Optional[bool]:
        return pulumi.get(self, "secret_encoded")


@pulumi.output_type
class GlobalClientMobile(dict):
    def __init__(__self__, *,
                 android: Optional['outputs.GlobalClientMobileAndroid'] = None,
                 ios: Optional['outputs.GlobalClientMobileIos'] = None):
        if android is not None:
            pulumi.set(__self__, "android", android)
        if ios is not None:
            pulumi.set(__self__, "ios", ios)

    @property
    @pulumi.getter
    def android(self) -> Optional['outputs.GlobalClientMobileAndroid']:
        return pulumi.get(self, "android")

    @property
    @pulumi.getter
    def ios(self) -> Optional['outputs.GlobalClientMobileIos']:
        return pulumi.get(self, "ios")


@pulumi.output_type
class GlobalClientMobileAndroid(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "appPackageName":
            suggest = "app_package_name"
        elif key == "sha256CertFingerprints":
            suggest = "sha256_cert_fingerprints"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GlobalClientMobileAndroid. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GlobalClientMobileAndroid.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GlobalClientMobileAndroid.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 app_package_name: Optional[str] = None,
                 sha256_cert_fingerprints: Optional[Sequence[str]] = None):
        if app_package_name is not None:
            pulumi.set(__self__, "app_package_name", app_package_name)
        if sha256_cert_fingerprints is not None:
            pulumi.set(__self__, "sha256_cert_fingerprints", sha256_cert_fingerprints)

    @property
    @pulumi.getter(name="appPackageName")
    def app_package_name(self) -> Optional[str]:
        return pulumi.get(self, "app_package_name")

    @property
    @pulumi.getter(name="sha256CertFingerprints")
    def sha256_cert_fingerprints(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "sha256_cert_fingerprints")


@pulumi.output_type
class GlobalClientMobileIos(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "appBundleIdentifier":
            suggest = "app_bundle_identifier"
        elif key == "teamId":
            suggest = "team_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GlobalClientMobileIos. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GlobalClientMobileIos.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GlobalClientMobileIos.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 app_bundle_identifier: Optional[str] = None,
                 team_id: Optional[str] = None):
        if app_bundle_identifier is not None:
            pulumi.set(__self__, "app_bundle_identifier", app_bundle_identifier)
        if team_id is not None:
            pulumi.set(__self__, "team_id", team_id)

    @property
    @pulumi.getter(name="appBundleIdentifier")
    def app_bundle_identifier(self) -> Optional[str]:
        return pulumi.get(self, "app_bundle_identifier")

    @property
    @pulumi.getter(name="teamId")
    def team_id(self) -> Optional[str]:
        return pulumi.get(self, "team_id")


@pulumi.output_type
class GlobalClientNativeSocialLogin(dict):
    def __init__(__self__, *,
                 apple: Optional['outputs.GlobalClientNativeSocialLoginApple'] = None,
                 facebook: Optional['outputs.GlobalClientNativeSocialLoginFacebook'] = None):
        if apple is not None:
            pulumi.set(__self__, "apple", apple)
        if facebook is not None:
            pulumi.set(__self__, "facebook", facebook)

    @property
    @pulumi.getter
    def apple(self) -> Optional['outputs.GlobalClientNativeSocialLoginApple']:
        return pulumi.get(self, "apple")

    @property
    @pulumi.getter
    def facebook(self) -> Optional['outputs.GlobalClientNativeSocialLoginFacebook']:
        return pulumi.get(self, "facebook")


@pulumi.output_type
class GlobalClientNativeSocialLoginApple(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class GlobalClientNativeSocialLoginFacebook(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class GlobalClientRefreshToken(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "expirationType":
            suggest = "expiration_type"
        elif key == "rotationType":
            suggest = "rotation_type"
        elif key == "idleTokenLifetime":
            suggest = "idle_token_lifetime"
        elif key == "infiniteIdleTokenLifetime":
            suggest = "infinite_idle_token_lifetime"
        elif key == "infiniteTokenLifetime":
            suggest = "infinite_token_lifetime"
        elif key == "tokenLifetime":
            suggest = "token_lifetime"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GlobalClientRefreshToken. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GlobalClientRefreshToken.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GlobalClientRefreshToken.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 expiration_type: str,
                 rotation_type: str,
                 idle_token_lifetime: Optional[int] = None,
                 infinite_idle_token_lifetime: Optional[bool] = None,
                 infinite_token_lifetime: Optional[bool] = None,
                 leeway: Optional[int] = None,
                 token_lifetime: Optional[int] = None):
        pulumi.set(__self__, "expiration_type", expiration_type)
        pulumi.set(__self__, "rotation_type", rotation_type)
        if idle_token_lifetime is not None:
            pulumi.set(__self__, "idle_token_lifetime", idle_token_lifetime)
        if infinite_idle_token_lifetime is not None:
            pulumi.set(__self__, "infinite_idle_token_lifetime", infinite_idle_token_lifetime)
        if infinite_token_lifetime is not None:
            pulumi.set(__self__, "infinite_token_lifetime", infinite_token_lifetime)
        if leeway is not None:
            pulumi.set(__self__, "leeway", leeway)
        if token_lifetime is not None:
            pulumi.set(__self__, "token_lifetime", token_lifetime)

    @property
    @pulumi.getter(name="expirationType")
    def expiration_type(self) -> str:
        return pulumi.get(self, "expiration_type")

    @property
    @pulumi.getter(name="rotationType")
    def rotation_type(self) -> str:
        return pulumi.get(self, "rotation_type")

    @property
    @pulumi.getter(name="idleTokenLifetime")
    def idle_token_lifetime(self) -> Optional[int]:
        return pulumi.get(self, "idle_token_lifetime")

    @property
    @pulumi.getter(name="infiniteIdleTokenLifetime")
    def infinite_idle_token_lifetime(self) -> Optional[bool]:
        return pulumi.get(self, "infinite_idle_token_lifetime")

    @property
    @pulumi.getter(name="infiniteTokenLifetime")
    def infinite_token_lifetime(self) -> Optional[bool]:
        return pulumi.get(self, "infinite_token_lifetime")

    @property
    @pulumi.getter
    def leeway(self) -> Optional[int]:
        return pulumi.get(self, "leeway")

    @property
    @pulumi.getter(name="tokenLifetime")
    def token_lifetime(self) -> Optional[int]:
        return pulumi.get(self, "token_lifetime")


@pulumi.output_type
class GuardianPhone(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "messageTypes":
            suggest = "message_types"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GuardianPhone. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GuardianPhone.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GuardianPhone.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 message_types: Sequence[str],
                 provider: str,
                 options: Optional['outputs.GuardianPhoneOptions'] = None):
        """
        :param Sequence[str] message_types: List(String). Message types to use, array of `sms` and or `voice`. Adding both to array should enable the user to choose.
        :param str provider: String, Case-sensitive. Provider to use, one of `auth0`, `twilio` or `phone-message-hook`.
        :param 'GuardianPhoneOptionsArgs' options: List(Resource). Options for the various providers. See Options.
        """
        pulumi.set(__self__, "message_types", message_types)
        pulumi.set(__self__, "provider", provider)
        if options is not None:
            pulumi.set(__self__, "options", options)

    @property
    @pulumi.getter(name="messageTypes")
    def message_types(self) -> Sequence[str]:
        """
        List(String). Message types to use, array of `sms` and or `voice`. Adding both to array should enable the user to choose.
        """
        return pulumi.get(self, "message_types")

    @property
    @pulumi.getter
    def provider(self) -> str:
        """
        String, Case-sensitive. Provider to use, one of `auth0`, `twilio` or `phone-message-hook`.
        """
        return pulumi.get(self, "provider")

    @property
    @pulumi.getter
    def options(self) -> Optional['outputs.GuardianPhoneOptions']:
        """
        List(Resource). Options for the various providers. See Options.
        """
        return pulumi.get(self, "options")


@pulumi.output_type
class GuardianPhoneOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authToken":
            suggest = "auth_token"
        elif key == "enrollmentMessage":
            suggest = "enrollment_message"
        elif key == "from":
            suggest = "from_"
        elif key == "messagingServiceSid":
            suggest = "messaging_service_sid"
        elif key == "verificationMessage":
            suggest = "verification_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GuardianPhoneOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GuardianPhoneOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GuardianPhoneOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_token: Optional[str] = None,
                 enrollment_message: Optional[str] = None,
                 from_: Optional[str] = None,
                 messaging_service_sid: Optional[str] = None,
                 sid: Optional[str] = None,
                 verification_message: Optional[str] = None):
        """
        :param str auth_token: String.
        :param str enrollment_message: String. This message will be sent whenever a user enrolls a new device for the first time using MFA. Supports liquid syntax, see [Auth0 docs](https://auth0.com/docs/mfa/customize-sms-or-voice-messages).
        :param str from_: String.
        :param str messaging_service_sid: String.
        :param str sid: String.
        :param str verification_message: String. This message will be sent whenever a user logs in after the enrollment. Supports liquid syntax, see [Auth0 docs](https://auth0.com/docs/mfa/customize-sms-or-voice-messages).
        """
        if auth_token is not None:
            pulumi.set(__self__, "auth_token", auth_token)
        if enrollment_message is not None:
            pulumi.set(__self__, "enrollment_message", enrollment_message)
        if from_ is not None:
            pulumi.set(__self__, "from_", from_)
        if messaging_service_sid is not None:
            pulumi.set(__self__, "messaging_service_sid", messaging_service_sid)
        if sid is not None:
            pulumi.set(__self__, "sid", sid)
        if verification_message is not None:
            pulumi.set(__self__, "verification_message", verification_message)

    @property
    @pulumi.getter(name="authToken")
    def auth_token(self) -> Optional[str]:
        """
        String.
        """
        return pulumi.get(self, "auth_token")

    @property
    @pulumi.getter(name="enrollmentMessage")
    def enrollment_message(self) -> Optional[str]:
        """
        String. This message will be sent whenever a user enrolls a new device for the first time using MFA. Supports liquid syntax, see [Auth0 docs](https://auth0.com/docs/mfa/customize-sms-or-voice-messages).
        """
        return pulumi.get(self, "enrollment_message")

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[str]:
        """
        String.
        """
        return pulumi.get(self, "from_")

    @property
    @pulumi.getter(name="messagingServiceSid")
    def messaging_service_sid(self) -> Optional[str]:
        """
        String.
        """
        return pulumi.get(self, "messaging_service_sid")

    @property
    @pulumi.getter
    def sid(self) -> Optional[str]:
        """
        String.
        """
        return pulumi.get(self, "sid")

    @property
    @pulumi.getter(name="verificationMessage")
    def verification_message(self) -> Optional[str]:
        """
        String. This message will be sent whenever a user logs in after the enrollment. Supports liquid syntax, see [Auth0 docs](https://auth0.com/docs/mfa/customize-sms-or-voice-messages).
        """
        return pulumi.get(self, "verification_message")


@pulumi.output_type
class LogStreamSink(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "awsAccountId":
            suggest = "aws_account_id"
        elif key == "awsPartnerEventSource":
            suggest = "aws_partner_event_source"
        elif key == "awsRegion":
            suggest = "aws_region"
        elif key == "azurePartnerTopic":
            suggest = "azure_partner_topic"
        elif key == "azureRegion":
            suggest = "azure_region"
        elif key == "azureResourceGroup":
            suggest = "azure_resource_group"
        elif key == "azureSubscriptionId":
            suggest = "azure_subscription_id"
        elif key == "datadogApiKey":
            suggest = "datadog_api_key"
        elif key == "datadogRegion":
            suggest = "datadog_region"
        elif key == "httpAuthorization":
            suggest = "http_authorization"
        elif key == "httpContentFormat":
            suggest = "http_content_format"
        elif key == "httpContentType":
            suggest = "http_content_type"
        elif key == "httpCustomHeaders":
            suggest = "http_custom_headers"
        elif key == "httpEndpoint":
            suggest = "http_endpoint"
        elif key == "splunkDomain":
            suggest = "splunk_domain"
        elif key == "splunkPort":
            suggest = "splunk_port"
        elif key == "splunkSecure":
            suggest = "splunk_secure"
        elif key == "splunkToken":
            suggest = "splunk_token"
        elif key == "sumoSourceAddress":
            suggest = "sumo_source_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogStreamSink. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogStreamSink.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogStreamSink.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aws_account_id: Optional[str] = None,
                 aws_partner_event_source: Optional[str] = None,
                 aws_region: Optional[str] = None,
                 azure_partner_topic: Optional[str] = None,
                 azure_region: Optional[str] = None,
                 azure_resource_group: Optional[str] = None,
                 azure_subscription_id: Optional[str] = None,
                 datadog_api_key: Optional[str] = None,
                 datadog_region: Optional[str] = None,
                 http_authorization: Optional[str] = None,
                 http_content_format: Optional[str] = None,
                 http_content_type: Optional[str] = None,
                 http_custom_headers: Optional[Sequence[str]] = None,
                 http_endpoint: Optional[str] = None,
                 splunk_domain: Optional[str] = None,
                 splunk_port: Optional[str] = None,
                 splunk_secure: Optional[bool] = None,
                 splunk_token: Optional[str] = None,
                 sumo_source_address: Optional[str] = None):
        """
        :param str aws_account_id: The AWS Account ID
        :param str aws_partner_event_source: Name of the Partner Event Source to be used with AWS. Generally generated by Auth0 and passed to AWS so this should generally be an output attribute.
        :param str aws_region: The AWS Region (i.e "us-east-2")
        :param str azure_partner_topic: Name of the Partner Topic to be used with Azure.  Generally should not be specified.
        :param str azure_region: The Azure region code (i.e. "ne")
        :param str azure_resource_group: The Azure EventGrid resource group which allows you to manage all Azure assets within one subscription
        :param str azure_subscription_id: The unique alphanumeric string that identifies your Azure subscription
        :param str datadog_api_key: The Datadog API key
        :param str datadog_region: The Datadog region
        :param str http_authorization: Sent in the HTTP "Authorization" header with each request
        :param str http_content_format: The format of data sent over HTTP. Options are "JSONLINES", "JSONARRAY" or "JSONOBJECT"
        :param str http_content_type: The ContentType header to send over HTTP.  Common value is "application/json"
        :param Sequence[str] http_custom_headers: Additional HTTP headers to be included as part of the HTTP request
        :param str http_endpoint: The HTTP endpoint to send streaming logs
        :param str splunk_domain: The Splunk domain name
        :param bool splunk_secure: This toggle should be turned off when using self-signed certificates
        :param str splunk_token: The Splunk access token
        :param str sumo_source_address: Generated URL for your defined HTTP source in Sumo Logic for collecting streaming data from Auth0
        """
        if aws_account_id is not None:
            pulumi.set(__self__, "aws_account_id", aws_account_id)
        if aws_partner_event_source is not None:
            pulumi.set(__self__, "aws_partner_event_source", aws_partner_event_source)
        if aws_region is not None:
            pulumi.set(__self__, "aws_region", aws_region)
        if azure_partner_topic is not None:
            pulumi.set(__self__, "azure_partner_topic", azure_partner_topic)
        if azure_region is not None:
            pulumi.set(__self__, "azure_region", azure_region)
        if azure_resource_group is not None:
            pulumi.set(__self__, "azure_resource_group", azure_resource_group)
        if azure_subscription_id is not None:
            pulumi.set(__self__, "azure_subscription_id", azure_subscription_id)
        if datadog_api_key is not None:
            pulumi.set(__self__, "datadog_api_key", datadog_api_key)
        if datadog_region is not None:
            pulumi.set(__self__, "datadog_region", datadog_region)
        if http_authorization is not None:
            pulumi.set(__self__, "http_authorization", http_authorization)
        if http_content_format is not None:
            pulumi.set(__self__, "http_content_format", http_content_format)
        if http_content_type is not None:
            pulumi.set(__self__, "http_content_type", http_content_type)
        if http_custom_headers is not None:
            pulumi.set(__self__, "http_custom_headers", http_custom_headers)
        if http_endpoint is not None:
            pulumi.set(__self__, "http_endpoint", http_endpoint)
        if splunk_domain is not None:
            pulumi.set(__self__, "splunk_domain", splunk_domain)
        if splunk_port is not None:
            pulumi.set(__self__, "splunk_port", splunk_port)
        if splunk_secure is not None:
            pulumi.set(__self__, "splunk_secure", splunk_secure)
        if splunk_token is not None:
            pulumi.set(__self__, "splunk_token", splunk_token)
        if sumo_source_address is not None:
            pulumi.set(__self__, "sumo_source_address", sumo_source_address)

    @property
    @pulumi.getter(name="awsAccountId")
    def aws_account_id(self) -> Optional[str]:
        """
        The AWS Account ID
        """
        return pulumi.get(self, "aws_account_id")

    @property
    @pulumi.getter(name="awsPartnerEventSource")
    def aws_partner_event_source(self) -> Optional[str]:
        """
        Name of the Partner Event Source to be used with AWS. Generally generated by Auth0 and passed to AWS so this should generally be an output attribute.
        """
        return pulumi.get(self, "aws_partner_event_source")

    @property
    @pulumi.getter(name="awsRegion")
    def aws_region(self) -> Optional[str]:
        """
        The AWS Region (i.e "us-east-2")
        """
        return pulumi.get(self, "aws_region")

    @property
    @pulumi.getter(name="azurePartnerTopic")
    def azure_partner_topic(self) -> Optional[str]:
        """
        Name of the Partner Topic to be used with Azure.  Generally should not be specified.
        """
        return pulumi.get(self, "azure_partner_topic")

    @property
    @pulumi.getter(name="azureRegion")
    def azure_region(self) -> Optional[str]:
        """
        The Azure region code (i.e. "ne")
        """
        return pulumi.get(self, "azure_region")

    @property
    @pulumi.getter(name="azureResourceGroup")
    def azure_resource_group(self) -> Optional[str]:
        """
        The Azure EventGrid resource group which allows you to manage all Azure assets within one subscription
        """
        return pulumi.get(self, "azure_resource_group")

    @property
    @pulumi.getter(name="azureSubscriptionId")
    def azure_subscription_id(self) -> Optional[str]:
        """
        The unique alphanumeric string that identifies your Azure subscription
        """
        return pulumi.get(self, "azure_subscription_id")

    @property
    @pulumi.getter(name="datadogApiKey")
    def datadog_api_key(self) -> Optional[str]:
        """
        The Datadog API key
        """
        return pulumi.get(self, "datadog_api_key")

    @property
    @pulumi.getter(name="datadogRegion")
    def datadog_region(self) -> Optional[str]:
        """
        The Datadog region
        """
        return pulumi.get(self, "datadog_region")

    @property
    @pulumi.getter(name="httpAuthorization")
    def http_authorization(self) -> Optional[str]:
        """
        Sent in the HTTP "Authorization" header with each request
        """
        return pulumi.get(self, "http_authorization")

    @property
    @pulumi.getter(name="httpContentFormat")
    def http_content_format(self) -> Optional[str]:
        """
        The format of data sent over HTTP. Options are "JSONLINES", "JSONARRAY" or "JSONOBJECT"
        """
        return pulumi.get(self, "http_content_format")

    @property
    @pulumi.getter(name="httpContentType")
    def http_content_type(self) -> Optional[str]:
        """
        The ContentType header to send over HTTP.  Common value is "application/json"
        """
        return pulumi.get(self, "http_content_type")

    @property
    @pulumi.getter(name="httpCustomHeaders")
    def http_custom_headers(self) -> Optional[Sequence[str]]:
        """
        Additional HTTP headers to be included as part of the HTTP request
        """
        return pulumi.get(self, "http_custom_headers")

    @property
    @pulumi.getter(name="httpEndpoint")
    def http_endpoint(self) -> Optional[str]:
        """
        The HTTP endpoint to send streaming logs
        """
        return pulumi.get(self, "http_endpoint")

    @property
    @pulumi.getter(name="splunkDomain")
    def splunk_domain(self) -> Optional[str]:
        """
        The Splunk domain name
        """
        return pulumi.get(self, "splunk_domain")

    @property
    @pulumi.getter(name="splunkPort")
    def splunk_port(self) -> Optional[str]:
        return pulumi.get(self, "splunk_port")

    @property
    @pulumi.getter(name="splunkSecure")
    def splunk_secure(self) -> Optional[bool]:
        """
        This toggle should be turned off when using self-signed certificates
        """
        return pulumi.get(self, "splunk_secure")

    @property
    @pulumi.getter(name="splunkToken")
    def splunk_token(self) -> Optional[str]:
        """
        The Splunk access token
        """
        return pulumi.get(self, "splunk_token")

    @property
    @pulumi.getter(name="sumoSourceAddress")
    def sumo_source_address(self) -> Optional[str]:
        """
        Generated URL for your defined HTTP source in Sumo Logic for collecting streaming data from Auth0
        """
        return pulumi.get(self, "sumo_source_address")


@pulumi.output_type
class OrganizationBranding(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "logoUrl":
            suggest = "logo_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OrganizationBranding. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OrganizationBranding.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OrganizationBranding.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 colors: Optional[Mapping[str, str]] = None,
                 logo_url: Optional[str] = None):
        """
        :param Mapping[str, str] colors: Color scheme used to customize the login pages
        :param str logo_url: URL of logo to display on login page
        """
        if colors is not None:
            pulumi.set(__self__, "colors", colors)
        if logo_url is not None:
            pulumi.set(__self__, "logo_url", logo_url)

    @property
    @pulumi.getter
    def colors(self) -> Optional[Mapping[str, str]]:
        """
        Color scheme used to customize the login pages
        """
        return pulumi.get(self, "colors")

    @property
    @pulumi.getter(name="logoUrl")
    def logo_url(self) -> Optional[str]:
        """
        URL of logo to display on login page
        """
        return pulumi.get(self, "logo_url")


@pulumi.output_type
class OrganizationConnection(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "connectionId":
            suggest = "connection_id"
        elif key == "assignMembershipOnLogin":
            suggest = "assign_membership_on_login"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OrganizationConnection. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OrganizationConnection.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OrganizationConnection.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 connection_id: str,
                 assign_membership_on_login: Optional[bool] = None):
        """
        :param str connection_id: The connection ID of the connection to add to the
               organization
        :param bool assign_membership_on_login: When true, all users that log in
               with this connection will be automatically granted membership in the
               organization. When false, users must be granted membership in the organization
               before logging in with this connection.
        """
        pulumi.set(__self__, "connection_id", connection_id)
        if assign_membership_on_login is not None:
            pulumi.set(__self__, "assign_membership_on_login", assign_membership_on_login)

    @property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> str:
        """
        The connection ID of the connection to add to the
        organization
        """
        return pulumi.get(self, "connection_id")

    @property
    @pulumi.getter(name="assignMembershipOnLogin")
    def assign_membership_on_login(self) -> Optional[bool]:
        """
        When true, all users that log in
        with this connection will be automatically granted membership in the
        organization. When false, users must be granted membership in the organization
        before logging in with this connection.
        """
        return pulumi.get(self, "assign_membership_on_login")


@pulumi.output_type
class ResourceServerScope(dict):
    def __init__(__self__, *,
                 value: str,
                 description: Optional[str] = None):
        """
        :param str value: String. Name of the permission (scope). Examples include `read:appointments` or `delete:appointments`.
        :param str description: String. Description of the permission (scope).
        """
        pulumi.set(__self__, "value", value)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        String. Name of the permission (scope). Examples include `read:appointments` or `delete:appointments`.
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        String. Description of the permission (scope).
        """
        return pulumi.get(self, "description")


@pulumi.output_type
class RolePermission(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceServerIdentifier":
            suggest = "resource_server_identifier"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RolePermission. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RolePermission.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RolePermission.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 resource_server_identifier: str):
        """
        :param str name: String. Name of the permission (scope).
        :param str resource_server_identifier: String. Unique identifier for the resource server.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "resource_server_identifier", resource_server_identifier)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        String. Name of the permission (scope).
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="resourceServerIdentifier")
    def resource_server_identifier(self) -> str:
        """
        String. Unique identifier for the resource server.
        """
        return pulumi.get(self, "resource_server_identifier")


@pulumi.output_type
class TenantChangePassword(dict):
    def __init__(__self__, *,
                 enabled: bool,
                 html: str):
        """
        :param bool enabled: Boolean. Indicates whether or not to use the custom change password page.
        :param str html: String, HTML format with supported Liquid syntax. Customized content of the change password page.
        """
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "html", html)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Boolean. Indicates whether or not to use the custom change password page.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def html(self) -> str:
        """
        String, HTML format with supported Liquid syntax. Customized content of the change password page.
        """
        return pulumi.get(self, "html")


@pulumi.output_type
class TenantErrorPage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "showLogLink":
            suggest = "show_log_link"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TenantErrorPage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TenantErrorPage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TenantErrorPage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 html: str,
                 show_log_link: bool,
                 url: str):
        """
        :param str html: String, HTML format with supported Liquid syntax. Customized content of the error page.
        :param bool show_log_link: Boolean. Indicates whether or not to show the link to logs as part of the default error page.
        :param str url: String. URL to redirect to when an error occurs rather than showing the default error page.
        """
        pulumi.set(__self__, "html", html)
        pulumi.set(__self__, "show_log_link", show_log_link)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def html(self) -> str:
        """
        String, HTML format with supported Liquid syntax. Customized content of the error page.
        """
        return pulumi.get(self, "html")

    @property
    @pulumi.getter(name="showLogLink")
    def show_log_link(self) -> bool:
        """
        Boolean. Indicates whether or not to show the link to logs as part of the default error page.
        """
        return pulumi.get(self, "show_log_link")

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        String. URL to redirect to when an error occurs rather than showing the default error page.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class TenantFlags(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "changePwdFlowV1":
            suggest = "change_pwd_flow_v1"
        elif key == "disableClickjackProtectionHeaders":
            suggest = "disable_clickjack_protection_headers"
        elif key == "enableApisSection":
            suggest = "enable_apis_section"
        elif key == "enableClientConnections":
            suggest = "enable_client_connections"
        elif key == "enableCustomDomainInEmails":
            suggest = "enable_custom_domain_in_emails"
        elif key == "enableDynamicClientRegistration":
            suggest = "enable_dynamic_client_registration"
        elif key == "enableLegacyLogsSearchV2":
            suggest = "enable_legacy_logs_search_v2"
        elif key == "enablePipeline2":
            suggest = "enable_pipeline2"
        elif key == "enablePublicSignupUserExistsError":
            suggest = "enable_public_signup_user_exists_error"
        elif key == "universalLogin":
            suggest = "universal_login"
        elif key == "useScopeDescriptionsForConsent":
            suggest = "use_scope_descriptions_for_consent"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TenantFlags. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TenantFlags.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TenantFlags.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 change_pwd_flow_v1: Optional[bool] = None,
                 disable_clickjack_protection_headers: Optional[bool] = None,
                 enable_apis_section: Optional[bool] = None,
                 enable_client_connections: Optional[bool] = None,
                 enable_custom_domain_in_emails: Optional[bool] = None,
                 enable_dynamic_client_registration: Optional[bool] = None,
                 enable_legacy_logs_search_v2: Optional[bool] = None,
                 enable_pipeline2: Optional[bool] = None,
                 enable_public_signup_user_exists_error: Optional[bool] = None,
                 universal_login: Optional[bool] = None,
                 use_scope_descriptions_for_consent: Optional[bool] = None):
        """
        :param bool change_pwd_flow_v1: Boolean. Indicates whether or not to use the older v1 change password flow. Not recommended except for backward compatibility.
        :param bool disable_clickjack_protection_headers: Boolean. Indicated whether or not classic Universal Login prompts include additional security headers to prevent clickjacking.
        :param bool enable_apis_section: Boolean. Indicates whether or not the APIs section is enabled for the tenant.
        :param bool enable_client_connections: Boolean. Indicates whether or not all current connections should be enabled when a new client is created.
        :param bool enable_custom_domain_in_emails: Boolean. Indicates whether or not the tenant allows custom domains in emails.
        :param bool enable_dynamic_client_registration: Boolean. Indicates whether or not the tenant allows dynamic client registration.
        :param bool enable_legacy_logs_search_v2: Boolean. Indicates whether or not to use the older v2 legacy logs search.
        :param bool enable_pipeline2: Boolean. Indicates whether or not advanced API Authorization scenarios are enabled.
        :param bool enable_public_signup_user_exists_error: Boolean. Indicates whether or not the public sign up process shows a user_exists error if the user already exists.
        :param bool universal_login: Boolean. Indicates whether or not the tenant uses universal login.
        """
        if change_pwd_flow_v1 is not None:
            pulumi.set(__self__, "change_pwd_flow_v1", change_pwd_flow_v1)
        if disable_clickjack_protection_headers is not None:
            pulumi.set(__self__, "disable_clickjack_protection_headers", disable_clickjack_protection_headers)
        if enable_apis_section is not None:
            pulumi.set(__self__, "enable_apis_section", enable_apis_section)
        if enable_client_connections is not None:
            pulumi.set(__self__, "enable_client_connections", enable_client_connections)
        if enable_custom_domain_in_emails is not None:
            pulumi.set(__self__, "enable_custom_domain_in_emails", enable_custom_domain_in_emails)
        if enable_dynamic_client_registration is not None:
            pulumi.set(__self__, "enable_dynamic_client_registration", enable_dynamic_client_registration)
        if enable_legacy_logs_search_v2 is not None:
            pulumi.set(__self__, "enable_legacy_logs_search_v2", enable_legacy_logs_search_v2)
        if enable_pipeline2 is not None:
            pulumi.set(__self__, "enable_pipeline2", enable_pipeline2)
        if enable_public_signup_user_exists_error is not None:
            pulumi.set(__self__, "enable_public_signup_user_exists_error", enable_public_signup_user_exists_error)
        if universal_login is not None:
            pulumi.set(__self__, "universal_login", universal_login)
        if use_scope_descriptions_for_consent is not None:
            pulumi.set(__self__, "use_scope_descriptions_for_consent", use_scope_descriptions_for_consent)

    @property
    @pulumi.getter(name="changePwdFlowV1")
    def change_pwd_flow_v1(self) -> Optional[bool]:
        """
        Boolean. Indicates whether or not to use the older v1 change password flow. Not recommended except for backward compatibility.
        """
        return pulumi.get(self, "change_pwd_flow_v1")

    @property
    @pulumi.getter(name="disableClickjackProtectionHeaders")
    def disable_clickjack_protection_headers(self) -> Optional[bool]:
        """
        Boolean. Indicated whether or not classic Universal Login prompts include additional security headers to prevent clickjacking.
        """
        return pulumi.get(self, "disable_clickjack_protection_headers")

    @property
    @pulumi.getter(name="enableApisSection")
    def enable_apis_section(self) -> Optional[bool]:
        """
        Boolean. Indicates whether or not the APIs section is enabled for the tenant.
        """
        return pulumi.get(self, "enable_apis_section")

    @property
    @pulumi.getter(name="enableClientConnections")
    def enable_client_connections(self) -> Optional[bool]:
        """
        Boolean. Indicates whether or not all current connections should be enabled when a new client is created.
        """
        return pulumi.get(self, "enable_client_connections")

    @property
    @pulumi.getter(name="enableCustomDomainInEmails")
    def enable_custom_domain_in_emails(self) -> Optional[bool]:
        """
        Boolean. Indicates whether or not the tenant allows custom domains in emails.
        """
        return pulumi.get(self, "enable_custom_domain_in_emails")

    @property
    @pulumi.getter(name="enableDynamicClientRegistration")
    def enable_dynamic_client_registration(self) -> Optional[bool]:
        """
        Boolean. Indicates whether or not the tenant allows dynamic client registration.
        """
        return pulumi.get(self, "enable_dynamic_client_registration")

    @property
    @pulumi.getter(name="enableLegacyLogsSearchV2")
    def enable_legacy_logs_search_v2(self) -> Optional[bool]:
        """
        Boolean. Indicates whether or not to use the older v2 legacy logs search.
        """
        return pulumi.get(self, "enable_legacy_logs_search_v2")

    @property
    @pulumi.getter(name="enablePipeline2")
    def enable_pipeline2(self) -> Optional[bool]:
        """
        Boolean. Indicates whether or not advanced API Authorization scenarios are enabled.
        """
        return pulumi.get(self, "enable_pipeline2")

    @property
    @pulumi.getter(name="enablePublicSignupUserExistsError")
    def enable_public_signup_user_exists_error(self) -> Optional[bool]:
        """
        Boolean. Indicates whether or not the public sign up process shows a user_exists error if the user already exists.
        """
        return pulumi.get(self, "enable_public_signup_user_exists_error")

    @property
    @pulumi.getter(name="universalLogin")
    def universal_login(self) -> Optional[bool]:
        """
        Boolean. Indicates whether or not the tenant uses universal login.
        """
        return pulumi.get(self, "universal_login")

    @property
    @pulumi.getter(name="useScopeDescriptionsForConsent")
    def use_scope_descriptions_for_consent(self) -> Optional[bool]:
        return pulumi.get(self, "use_scope_descriptions_for_consent")


@pulumi.output_type
class TenantGuardianMfaPage(dict):
    def __init__(__self__, *,
                 enabled: bool,
                 html: str):
        """
        :param bool enabled: Boolean. Indicates whether or not to use the custom Guardian page.
        :param str html: String, HTML format with supported Liquid syntax. Customized content of the Guardian page.
        """
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "html", html)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Boolean. Indicates whether or not to use the custom Guardian page.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def html(self) -> str:
        """
        String, HTML format with supported Liquid syntax. Customized content of the Guardian page.
        """
        return pulumi.get(self, "html")


@pulumi.output_type
class TenantUniversalLogin(dict):
    def __init__(__self__, *,
                 colors: Optional['outputs.TenantUniversalLoginColors'] = None):
        """
        :param 'TenantUniversalLoginColorsArgs' colors: List(Resource). Configuration settings for Universal Login colors. See Universal Login - Colors.
        """
        if colors is not None:
            pulumi.set(__self__, "colors", colors)

    @property
    @pulumi.getter
    def colors(self) -> Optional['outputs.TenantUniversalLoginColors']:
        """
        List(Resource). Configuration settings for Universal Login colors. See Universal Login - Colors.
        """
        return pulumi.get(self, "colors")


@pulumi.output_type
class TenantUniversalLoginColors(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "pageBackground":
            suggest = "page_background"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TenantUniversalLoginColors. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TenantUniversalLoginColors.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TenantUniversalLoginColors.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 page_background: Optional[str] = None,
                 primary: Optional[str] = None):
        """
        :param str page_background: String, Hexadecimal. Background color of login pages.
        :param str primary: String, Hexadecimal. Primary button background color.
        """
        if page_background is not None:
            pulumi.set(__self__, "page_background", page_background)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)

    @property
    @pulumi.getter(name="pageBackground")
    def page_background(self) -> Optional[str]:
        """
        String, Hexadecimal. Background color of login pages.
        """
        return pulumi.get(self, "page_background")

    @property
    @pulumi.getter
    def primary(self) -> Optional[str]:
        """
        String, Hexadecimal. Primary button background color.
        """
        return pulumi.get(self, "primary")


@pulumi.output_type
class TriggerBindingAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TriggerBindingAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TriggerBindingAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TriggerBindingAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_name: str,
                 id: str):
        """
        :param str display_name: The name of an action.
        :param str id: Trigger ID.
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        The name of an action.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Trigger ID.
        """
        return pulumi.get(self, "id")


