# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['RiskAssessmentsNewDeviceArgs', 'RiskAssessmentsNewDevice']

@pulumi.input_type
class RiskAssessmentsNewDeviceArgs:
    def __init__(__self__, *,
                 remember_for: pulumi.Input[_builtins.int]):
        """
        The set of arguments for constructing a RiskAssessmentsNewDevice resource.
        :param pulumi.Input[_builtins.int] remember_for: Length of time to remember devices for, in days
        """
        pulumi.set(__self__, "remember_for", remember_for)

    @_builtins.property
    @pulumi.getter(name="rememberFor")
    def remember_for(self) -> pulumi.Input[_builtins.int]:
        """
        Length of time to remember devices for, in days
        """
        return pulumi.get(self, "remember_for")

    @remember_for.setter
    def remember_for(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "remember_for", value)


@pulumi.input_type
class _RiskAssessmentsNewDeviceState:
    def __init__(__self__, *,
                 remember_for: Optional[pulumi.Input[_builtins.int]] = None):
        """
        Input properties used for looking up and filtering RiskAssessmentsNewDevice resources.
        :param pulumi.Input[_builtins.int] remember_for: Length of time to remember devices for, in days
        """
        if remember_for is not None:
            pulumi.set(__self__, "remember_for", remember_for)

    @_builtins.property
    @pulumi.getter(name="rememberFor")
    def remember_for(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Length of time to remember devices for, in days
        """
        return pulumi.get(self, "remember_for")

    @remember_for.setter
    def remember_for(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "remember_for", value)


@pulumi.type_token("auth0:index/riskAssessmentsNewDevice:RiskAssessmentsNewDevice")
class RiskAssessmentsNewDevice(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 remember_for: Optional[pulumi.Input[_builtins.int]] = None,
                 __props__=None):
        """
        Resource for managing Risk Assessment settings for new devices.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.int] remember_for: Length of time to remember devices for, in days
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RiskAssessmentsNewDeviceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Resource for managing Risk Assessment settings for new devices.

        :param str resource_name: The name of the resource.
        :param RiskAssessmentsNewDeviceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RiskAssessmentsNewDeviceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 remember_for: Optional[pulumi.Input[_builtins.int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RiskAssessmentsNewDeviceArgs.__new__(RiskAssessmentsNewDeviceArgs)

            if remember_for is None and not opts.urn:
                raise TypeError("Missing required property 'remember_for'")
            __props__.__dict__["remember_for"] = remember_for
        super(RiskAssessmentsNewDevice, __self__).__init__(
            'auth0:index/riskAssessmentsNewDevice:RiskAssessmentsNewDevice',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            remember_for: Optional[pulumi.Input[_builtins.int]] = None) -> 'RiskAssessmentsNewDevice':
        """
        Get an existing RiskAssessmentsNewDevice resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.int] remember_for: Length of time to remember devices for, in days
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RiskAssessmentsNewDeviceState.__new__(_RiskAssessmentsNewDeviceState)

        __props__.__dict__["remember_for"] = remember_for
        return RiskAssessmentsNewDevice(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="rememberFor")
    def remember_for(self) -> pulumi.Output[_builtins.int]:
        """
        Length of time to remember devices for, in days
        """
        return pulumi.get(self, "remember_for")

