# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from . import _utilities, _tables
from . import outputs
from ._inputs import *

__all__ = ['GlobalClient']


class GlobalClient(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 addons: Optional[pulumi.Input[pulumi.InputType['GlobalClientAddonsArgs']]] = None,
                 allowed_logout_urls: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 allowed_origins: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 app_type: Optional[pulumi.Input[str]] = None,
                 callbacks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_metadata: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 client_secret: Optional[pulumi.Input[str]] = None,
                 client_secret_rotation_trigger: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 cross_origin_auth: Optional[pulumi.Input[bool]] = None,
                 cross_origin_loc: Optional[pulumi.Input[str]] = None,
                 custom_login_page: Optional[pulumi.Input[str]] = None,
                 custom_login_page_on: Optional[pulumi.Input[bool]] = None,
                 custom_login_page_preview: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 encryption_key: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 form_template: Optional[pulumi.Input[str]] = None,
                 grant_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 initiate_login_uri: Optional[pulumi.Input[str]] = None,
                 is_first_party: Optional[pulumi.Input[bool]] = None,
                 is_token_endpoint_ip_header_trusted: Optional[pulumi.Input[bool]] = None,
                 jwt_configuration: Optional[pulumi.Input[pulumi.InputType['GlobalClientJwtConfigurationArgs']]] = None,
                 logo_uri: Optional[pulumi.Input[str]] = None,
                 mobile: Optional[pulumi.Input[pulumi.InputType['GlobalClientMobileArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 oidc_conformant: Optional[pulumi.Input[bool]] = None,
                 refresh_token: Optional[pulumi.Input[pulumi.InputType['GlobalClientRefreshTokenArgs']]] = None,
                 sso: Optional[pulumi.Input[bool]] = None,
                 sso_disabled: Optional[pulumi.Input[bool]] = None,
                 token_endpoint_auth_method: Optional[pulumi.Input[str]] = None,
                 web_origins: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        Create a GlobalClient resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['addons'] = addons
            __props__['allowed_logout_urls'] = allowed_logout_urls
            __props__['allowed_origins'] = allowed_origins
            __props__['app_type'] = app_type
            __props__['callbacks'] = callbacks
            __props__['client_id'] = client_id
            __props__['client_metadata'] = client_metadata
            __props__['client_secret'] = client_secret
            __props__['client_secret_rotation_trigger'] = client_secret_rotation_trigger
            __props__['cross_origin_auth'] = cross_origin_auth
            __props__['cross_origin_loc'] = cross_origin_loc
            __props__['custom_login_page'] = custom_login_page
            __props__['custom_login_page_on'] = custom_login_page_on
            __props__['custom_login_page_preview'] = custom_login_page_preview
            __props__['description'] = description
            __props__['encryption_key'] = encryption_key
            __props__['form_template'] = form_template
            __props__['grant_types'] = grant_types
            __props__['initiate_login_uri'] = initiate_login_uri
            __props__['is_first_party'] = is_first_party
            __props__['is_token_endpoint_ip_header_trusted'] = is_token_endpoint_ip_header_trusted
            __props__['jwt_configuration'] = jwt_configuration
            __props__['logo_uri'] = logo_uri
            __props__['mobile'] = mobile
            __props__['name'] = name
            __props__['oidc_conformant'] = oidc_conformant
            __props__['refresh_token'] = refresh_token
            __props__['sso'] = sso
            __props__['sso_disabled'] = sso_disabled
            __props__['token_endpoint_auth_method'] = token_endpoint_auth_method
            __props__['web_origins'] = web_origins
        super(GlobalClient, __self__).__init__(
            'auth0:index/globalClient:GlobalClient',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            addons: Optional[pulumi.Input[pulumi.InputType['GlobalClientAddonsArgs']]] = None,
            allowed_logout_urls: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            allowed_origins: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            app_type: Optional[pulumi.Input[str]] = None,
            callbacks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            client_id: Optional[pulumi.Input[str]] = None,
            client_metadata: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            client_secret: Optional[pulumi.Input[str]] = None,
            client_secret_rotation_trigger: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            cross_origin_auth: Optional[pulumi.Input[bool]] = None,
            cross_origin_loc: Optional[pulumi.Input[str]] = None,
            custom_login_page: Optional[pulumi.Input[str]] = None,
            custom_login_page_on: Optional[pulumi.Input[bool]] = None,
            custom_login_page_preview: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            encryption_key: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            form_template: Optional[pulumi.Input[str]] = None,
            grant_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            initiate_login_uri: Optional[pulumi.Input[str]] = None,
            is_first_party: Optional[pulumi.Input[bool]] = None,
            is_token_endpoint_ip_header_trusted: Optional[pulumi.Input[bool]] = None,
            jwt_configuration: Optional[pulumi.Input[pulumi.InputType['GlobalClientJwtConfigurationArgs']]] = None,
            logo_uri: Optional[pulumi.Input[str]] = None,
            mobile: Optional[pulumi.Input[pulumi.InputType['GlobalClientMobileArgs']]] = None,
            name: Optional[pulumi.Input[str]] = None,
            oidc_conformant: Optional[pulumi.Input[bool]] = None,
            refresh_token: Optional[pulumi.Input[pulumi.InputType['GlobalClientRefreshTokenArgs']]] = None,
            sso: Optional[pulumi.Input[bool]] = None,
            sso_disabled: Optional[pulumi.Input[bool]] = None,
            token_endpoint_auth_method: Optional[pulumi.Input[str]] = None,
            web_origins: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None) -> 'GlobalClient':
        """
        Get an existing GlobalClient resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["addons"] = addons
        __props__["allowed_logout_urls"] = allowed_logout_urls
        __props__["allowed_origins"] = allowed_origins
        __props__["app_type"] = app_type
        __props__["callbacks"] = callbacks
        __props__["client_id"] = client_id
        __props__["client_metadata"] = client_metadata
        __props__["client_secret"] = client_secret
        __props__["client_secret_rotation_trigger"] = client_secret_rotation_trigger
        __props__["cross_origin_auth"] = cross_origin_auth
        __props__["cross_origin_loc"] = cross_origin_loc
        __props__["custom_login_page"] = custom_login_page
        __props__["custom_login_page_on"] = custom_login_page_on
        __props__["custom_login_page_preview"] = custom_login_page_preview
        __props__["description"] = description
        __props__["encryption_key"] = encryption_key
        __props__["form_template"] = form_template
        __props__["grant_types"] = grant_types
        __props__["initiate_login_uri"] = initiate_login_uri
        __props__["is_first_party"] = is_first_party
        __props__["is_token_endpoint_ip_header_trusted"] = is_token_endpoint_ip_header_trusted
        __props__["jwt_configuration"] = jwt_configuration
        __props__["logo_uri"] = logo_uri
        __props__["mobile"] = mobile
        __props__["name"] = name
        __props__["oidc_conformant"] = oidc_conformant
        __props__["refresh_token"] = refresh_token
        __props__["sso"] = sso
        __props__["sso_disabled"] = sso_disabled
        __props__["token_endpoint_auth_method"] = token_endpoint_auth_method
        __props__["web_origins"] = web_origins
        return GlobalClient(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def addons(self) -> pulumi.Output['outputs.GlobalClientAddons']:
        return pulumi.get(self, "addons")

    @property
    @pulumi.getter(name="allowedLogoutUrls")
    def allowed_logout_urls(self) -> pulumi.Output[Sequence[str]]:
        return pulumi.get(self, "allowed_logout_urls")

    @property
    @pulumi.getter(name="allowedOrigins")
    def allowed_origins(self) -> pulumi.Output[Sequence[str]]:
        return pulumi.get(self, "allowed_origins")

    @property
    @pulumi.getter(name="appType")
    def app_type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "app_type")

    @property
    @pulumi.getter
    def callbacks(self) -> pulumi.Output[Sequence[str]]:
        return pulumi.get(self, "callbacks")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientMetadata")
    def client_metadata(self) -> pulumi.Output[Mapping[str, Any]]:
        return pulumi.get(self, "client_metadata")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Output[str]:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="clientSecretRotationTrigger")
    def client_secret_rotation_trigger(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        return pulumi.get(self, "client_secret_rotation_trigger")

    @property
    @pulumi.getter(name="crossOriginAuth")
    def cross_origin_auth(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "cross_origin_auth")

    @property
    @pulumi.getter(name="crossOriginLoc")
    def cross_origin_loc(self) -> pulumi.Output[str]:
        return pulumi.get(self, "cross_origin_loc")

    @property
    @pulumi.getter(name="customLoginPage")
    def custom_login_page(self) -> pulumi.Output[str]:
        return pulumi.get(self, "custom_login_page")

    @property
    @pulumi.getter(name="customLoginPageOn")
    def custom_login_page_on(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "custom_login_page_on")

    @property
    @pulumi.getter(name="customLoginPagePreview")
    def custom_login_page_preview(self) -> pulumi.Output[str]:
        return pulumi.get(self, "custom_login_page_preview")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="encryptionKey")
    def encryption_key(self) -> pulumi.Output[Mapping[str, str]]:
        return pulumi.get(self, "encryption_key")

    @property
    @pulumi.getter(name="formTemplate")
    def form_template(self) -> pulumi.Output[str]:
        return pulumi.get(self, "form_template")

    @property
    @pulumi.getter(name="grantTypes")
    def grant_types(self) -> pulumi.Output[Sequence[str]]:
        return pulumi.get(self, "grant_types")

    @property
    @pulumi.getter(name="initiateLoginUri")
    def initiate_login_uri(self) -> pulumi.Output[str]:
        return pulumi.get(self, "initiate_login_uri")

    @property
    @pulumi.getter(name="isFirstParty")
    def is_first_party(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "is_first_party")

    @property
    @pulumi.getter(name="isTokenEndpointIpHeaderTrusted")
    def is_token_endpoint_ip_header_trusted(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "is_token_endpoint_ip_header_trusted")

    @property
    @pulumi.getter(name="jwtConfiguration")
    def jwt_configuration(self) -> pulumi.Output['outputs.GlobalClientJwtConfiguration']:
        return pulumi.get(self, "jwt_configuration")

    @property
    @pulumi.getter(name="logoUri")
    def logo_uri(self) -> pulumi.Output[str]:
        return pulumi.get(self, "logo_uri")

    @property
    @pulumi.getter
    def mobile(self) -> pulumi.Output['outputs.GlobalClientMobile']:
        return pulumi.get(self, "mobile")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="oidcConformant")
    def oidc_conformant(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "oidc_conformant")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> pulumi.Output['outputs.GlobalClientRefreshToken']:
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter
    def sso(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "sso")

    @property
    @pulumi.getter(name="ssoDisabled")
    def sso_disabled(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "sso_disabled")

    @property
    @pulumi.getter(name="tokenEndpointAuthMethod")
    def token_endpoint_auth_method(self) -> pulumi.Output[str]:
        return pulumi.get(self, "token_endpoint_auth_method")

    @property
    @pulumi.getter(name="webOrigins")
    def web_origins(self) -> pulumi.Output[Sequence[str]]:
        return pulumi.get(self, "web_origins")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

