# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetUserAttributeProfileResult',
    'AwaitableGetUserAttributeProfileResult',
    'get_user_attribute_profile',
    'get_user_attribute_profile_output',
]

@pulumi.output_type
class GetUserAttributeProfileResult:
    """
    A collection of values returned by getUserAttributeProfile.
    """
    def __init__(__self__, id=None, name=None, user_attribute_profile_id=None, user_attributes=None, user_ids=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if user_attribute_profile_id and not isinstance(user_attribute_profile_id, str):
            raise TypeError("Expected argument 'user_attribute_profile_id' to be a str")
        pulumi.set(__self__, "user_attribute_profile_id", user_attribute_profile_id)
        if user_attributes and not isinstance(user_attributes, list):
            raise TypeError("Expected argument 'user_attributes' to be a list")
        pulumi.set(__self__, "user_attributes", user_attributes)
        if user_ids and not isinstance(user_ids, list):
            raise TypeError("Expected argument 'user_ids' to be a list")
        pulumi.set(__self__, "user_ids", user_ids)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of the User Attribute Profile.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="userAttributeProfileId")
    def user_attribute_profile_id(self) -> Optional[_builtins.str]:
        """
        The ID of the User Attribute Profile.
        """
        return pulumi.get(self, "user_attribute_profile_id")

    @_builtins.property
    @pulumi.getter(name="userAttributes")
    def user_attributes(self) -> Sequence['outputs.GetUserAttributeProfileUserAttributeResult']:
        """
        List of user attribute configurations.
        """
        return pulumi.get(self, "user_attributes")

    @_builtins.property
    @pulumi.getter(name="userIds")
    def user_ids(self) -> Sequence['outputs.GetUserAttributeProfileUserIdResult']:
        """
        Configuration for mapping the user ID from identity providers.
        """
        return pulumi.get(self, "user_ids")


class AwaitableGetUserAttributeProfileResult(GetUserAttributeProfileResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetUserAttributeProfileResult(
            id=self.id,
            name=self.name,
            user_attribute_profile_id=self.user_attribute_profile_id,
            user_attributes=self.user_attributes,
            user_ids=self.user_ids)


def get_user_attribute_profile(name: Optional[_builtins.str] = None,
                               user_attribute_profile_id: Optional[_builtins.str] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetUserAttributeProfileResult:
    """
    Data source to retrieve a specific Auth0 User Attribute Profile by `user_attribute_profile_id` or `name`.


    :param _builtins.str name: The name of the User Attribute Profile.
    :param _builtins.str user_attribute_profile_id: The ID of the User Attribute Profile.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['userAttributeProfileId'] = user_attribute_profile_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('auth0:index/getUserAttributeProfile:getUserAttributeProfile', __args__, opts=opts, typ=GetUserAttributeProfileResult).value

    return AwaitableGetUserAttributeProfileResult(
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        user_attribute_profile_id=pulumi.get(__ret__, 'user_attribute_profile_id'),
        user_attributes=pulumi.get(__ret__, 'user_attributes'),
        user_ids=pulumi.get(__ret__, 'user_ids'))
def get_user_attribute_profile_output(name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                      user_attribute_profile_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                      opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetUserAttributeProfileResult]:
    """
    Data source to retrieve a specific Auth0 User Attribute Profile by `user_attribute_profile_id` or `name`.


    :param _builtins.str name: The name of the User Attribute Profile.
    :param _builtins.str user_attribute_profile_id: The ID of the User Attribute Profile.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['userAttributeProfileId'] = user_attribute_profile_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('auth0:index/getUserAttributeProfile:getUserAttributeProfile', __args__, opts=opts, typ=GetUserAttributeProfileResult)
    return __ret__.apply(lambda __response__: GetUserAttributeProfileResult(
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        user_attribute_profile_id=pulumi.get(__response__, 'user_attribute_profile_id'),
        user_attributes=pulumi.get(__response__, 'user_attributes'),
        user_ids=pulumi.get(__response__, 'user_ids')))
