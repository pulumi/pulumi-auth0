# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetPromptScreenRendererResult',
    'AwaitableGetPromptScreenRendererResult',
    'get_prompt_screen_renderer',
    'get_prompt_screen_renderer_output',
]

@pulumi.output_type
class GetPromptScreenRendererResult:
    """
    A collection of values returned by getPromptScreenRenderer.
    """
    def __init__(__self__, context_configurations=None, default_head_tags_disabled=None, head_tags=None, id=None, prompt_type=None, rendering_mode=None, screen_name=None, tenant=None):
        if context_configurations and not isinstance(context_configurations, list):
            raise TypeError("Expected argument 'context_configurations' to be a list")
        pulumi.set(__self__, "context_configurations", context_configurations)
        if default_head_tags_disabled and not isinstance(default_head_tags_disabled, bool):
            raise TypeError("Expected argument 'default_head_tags_disabled' to be a bool")
        pulumi.set(__self__, "default_head_tags_disabled", default_head_tags_disabled)
        if head_tags and not isinstance(head_tags, str):
            raise TypeError("Expected argument 'head_tags' to be a str")
        pulumi.set(__self__, "head_tags", head_tags)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if prompt_type and not isinstance(prompt_type, str):
            raise TypeError("Expected argument 'prompt_type' to be a str")
        pulumi.set(__self__, "prompt_type", prompt_type)
        if rendering_mode and not isinstance(rendering_mode, str):
            raise TypeError("Expected argument 'rendering_mode' to be a str")
        pulumi.set(__self__, "rendering_mode", rendering_mode)
        if screen_name and not isinstance(screen_name, str):
            raise TypeError("Expected argument 'screen_name' to be a str")
        pulumi.set(__self__, "screen_name", screen_name)
        if tenant and not isinstance(tenant, str):
            raise TypeError("Expected argument 'tenant' to be a str")
        pulumi.set(__self__, "tenant", tenant)

    @property
    @pulumi.getter(name="contextConfigurations")
    def context_configurations(self) -> Sequence[str]:
        """
        Context values to make available
        """
        return pulumi.get(self, "context_configurations")

    @property
    @pulumi.getter(name="defaultHeadTagsDisabled")
    def default_head_tags_disabled(self) -> bool:
        """
        Override Universal Login default head tags
        """
        return pulumi.get(self, "default_head_tags_disabled")

    @property
    @pulumi.getter(name="headTags")
    def head_tags(self) -> str:
        """
        An array of head tags
        """
        return pulumi.get(self, "head_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="promptType")
    def prompt_type(self) -> str:
        """
        The type of prompt to customize.
        """
        return pulumi.get(self, "prompt_type")

    @property
    @pulumi.getter(name="renderingMode")
    def rendering_mode(self) -> str:
        """
        Rendering modeOptions are: `standard`, `advanced`.
        """
        return pulumi.get(self, "rendering_mode")

    @property
    @pulumi.getter(name="screenName")
    def screen_name(self) -> str:
        """
        The screen name associated with the prompt type.
        """
        return pulumi.get(self, "screen_name")

    @property
    @pulumi.getter
    def tenant(self) -> str:
        """
        Tenant ID
        """
        return pulumi.get(self, "tenant")


class AwaitableGetPromptScreenRendererResult(GetPromptScreenRendererResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPromptScreenRendererResult(
            context_configurations=self.context_configurations,
            default_head_tags_disabled=self.default_head_tags_disabled,
            head_tags=self.head_tags,
            id=self.id,
            prompt_type=self.prompt_type,
            rendering_mode=self.rendering_mode,
            screen_name=self.screen_name,
            tenant=self.tenant)


def get_prompt_screen_renderer(prompt_type: Optional[str] = None,
                               screen_name: Optional[str] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPromptScreenRendererResult:
    """
    Data source to retrieve a specific Auth0 prompt screen settings by `prompt_type` and `screen_name`


    :param str prompt_type: The type of prompt to customize.
    :param str screen_name: The screen name associated with the prompt type.
    """
    __args__ = dict()
    __args__['promptType'] = prompt_type
    __args__['screenName'] = screen_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('auth0:index/getPromptScreenRenderer:getPromptScreenRenderer', __args__, opts=opts, typ=GetPromptScreenRendererResult).value

    return AwaitableGetPromptScreenRendererResult(
        context_configurations=pulumi.get(__ret__, 'context_configurations'),
        default_head_tags_disabled=pulumi.get(__ret__, 'default_head_tags_disabled'),
        head_tags=pulumi.get(__ret__, 'head_tags'),
        id=pulumi.get(__ret__, 'id'),
        prompt_type=pulumi.get(__ret__, 'prompt_type'),
        rendering_mode=pulumi.get(__ret__, 'rendering_mode'),
        screen_name=pulumi.get(__ret__, 'screen_name'),
        tenant=pulumi.get(__ret__, 'tenant'))
def get_prompt_screen_renderer_output(prompt_type: Optional[pulumi.Input[str]] = None,
                                      screen_name: Optional[pulumi.Input[str]] = None,
                                      opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPromptScreenRendererResult]:
    """
    Data source to retrieve a specific Auth0 prompt screen settings by `prompt_type` and `screen_name`


    :param str prompt_type: The type of prompt to customize.
    :param str screen_name: The screen name associated with the prompt type.
    """
    __args__ = dict()
    __args__['promptType'] = prompt_type
    __args__['screenName'] = screen_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('auth0:index/getPromptScreenRenderer:getPromptScreenRenderer', __args__, opts=opts, typ=GetPromptScreenRendererResult)
    return __ret__.apply(lambda __response__: GetPromptScreenRendererResult(
        context_configurations=pulumi.get(__response__, 'context_configurations'),
        default_head_tags_disabled=pulumi.get(__response__, 'default_head_tags_disabled'),
        head_tags=pulumi.get(__response__, 'head_tags'),
        id=pulumi.get(__response__, 'id'),
        prompt_type=pulumi.get(__response__, 'prompt_type'),
        rendering_mode=pulumi.get(__response__, 'rendering_mode'),
        screen_name=pulumi.get(__response__, 'screen_name'),
        tenant=pulumi.get(__response__, 'tenant')))
