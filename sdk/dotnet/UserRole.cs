// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Auth0
{
    /// <summary>
    /// With this resource, you can manage assigned roles for a user.
    /// 
    /// !&gt; This resource appends a role to a user. In contrast, the `auth0.UserRoles` resource manages all the roles assigned
    /// to a user. To avoid potential issues, it is recommended not to use this resource in conjunction with the
    /// `auth0.UserRoles` resource when managing roles for the same user id.
    /// 
    /// ## Import
    /// 
    /// This resource can be imported by specifying the user ID and role ID separated by "::" (note the double colon) &lt;userID&gt;::&lt;roleID&gt; # Example
    /// 
    /// ```sh
    ///  $ pulumi import auth0:index/userRole:UserRole user_role "auth0|111111111111111111111111::role_123"
    /// ```
    /// </summary>
    [Auth0ResourceType("auth0:index/userRole:UserRole")]
    public partial class UserRole : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Description of the role.
        /// </summary>
        [Output("roleDescription")]
        public Output<string> RoleDescription { get; private set; } = null!;

        /// <summary>
        /// ID of the role assigned to the user.
        /// </summary>
        [Output("roleId")]
        public Output<string> RoleId { get; private set; } = null!;

        /// <summary>
        /// Name of the role.
        /// </summary>
        [Output("roleName")]
        public Output<string> RoleName { get; private set; } = null!;

        /// <summary>
        /// ID of the user.
        /// </summary>
        [Output("userId")]
        public Output<string> UserId { get; private set; } = null!;


        /// <summary>
        /// Create a UserRole resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public UserRole(string name, UserRoleArgs args, CustomResourceOptions? options = null)
            : base("auth0:index/userRole:UserRole", name, args ?? new UserRoleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private UserRole(string name, Input<string> id, UserRoleState? state = null, CustomResourceOptions? options = null)
            : base("auth0:index/userRole:UserRole", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing UserRole resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static UserRole Get(string name, Input<string> id, UserRoleState? state = null, CustomResourceOptions? options = null)
        {
            return new UserRole(name, id, state, options);
        }
    }

    public sealed class UserRoleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// ID of the role assigned to the user.
        /// </summary>
        [Input("roleId", required: true)]
        public Input<string> RoleId { get; set; } = null!;

        /// <summary>
        /// ID of the user.
        /// </summary>
        [Input("userId", required: true)]
        public Input<string> UserId { get; set; } = null!;

        public UserRoleArgs()
        {
        }
        public static new UserRoleArgs Empty => new UserRoleArgs();
    }

    public sealed class UserRoleState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Description of the role.
        /// </summary>
        [Input("roleDescription")]
        public Input<string>? RoleDescription { get; set; }

        /// <summary>
        /// ID of the role assigned to the user.
        /// </summary>
        [Input("roleId")]
        public Input<string>? RoleId { get; set; }

        /// <summary>
        /// Name of the role.
        /// </summary>
        [Input("roleName")]
        public Input<string>? RoleName { get; set; }

        /// <summary>
        /// ID of the user.
        /// </summary>
        [Input("userId")]
        public Input<string>? UserId { get; set; }

        public UserRoleState()
        {
        }
        public static new UserRoleState Empty => new UserRoleState();
    }
}
