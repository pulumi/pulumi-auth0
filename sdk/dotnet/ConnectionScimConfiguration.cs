// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Auth0
{
    /// <summary>
    /// With this resource, you can configure [SCIM(System for Cross-domain Identity Management)](https://simplecloud.info/) support for `SAML` and `OpenID Connect` Enterprise connections.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Auth0 = Pulumi.Auth0;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var myEnterpriseConnection = new Auth0.Connection("my_enterprise_connection", new()
    ///     {
    ///         Name = "my-enterprise-connection",
    ///         DisplayName = "My Enterprise Connection",
    ///         Strategy = "okta",
    ///         Options = new Auth0.Inputs.ConnectionOptionsArgs
    ///         {
    ///             ClientId = "1234567",
    ///             ClientSecret = "1234567",
    ///             Issuer = "https://example.okta.com",
    ///             JwksUri = "https://example.okta.com/oauth2/v1/keys",
    ///             TokenEndpoint = "https://example.okta.com/oauth2/v1/token",
    ///             AuthorizationEndpoint = "https://example.okta.com/oauth2/v1/authorize",
    ///         },
    ///     });
    /// 
    ///     var myEnterpriseConnection2 = new Auth0.Connection("my_enterprise_connection_2", new()
    ///     {
    ///         Name = "my-enterprise-connection-2",
    ///         DisplayName = "My Enterprise Connection 2",
    ///         Strategy = "okta",
    ///         Options = new Auth0.Inputs.ConnectionOptionsArgs
    ///         {
    ///             ClientId = "1234567",
    ///             ClientSecret = "1234567",
    ///             Issuer = "https://example.okta.com",
    ///             JwksUri = "https://example.okta.com/oauth2/v1/keys",
    ///             TokenEndpoint = "https://example.okta.com/oauth2/v1/token",
    ///             AuthorizationEndpoint = "https://example.okta.com/oauth2/v1/authorize",
    ///         },
    ///     });
    /// 
    ///     // A resource for configuring an Auth0 Connection SCIM Configuration, using default values.
    ///     // Only one can be specified for a connection.
    ///     var myConnScimConfigurationDefault = new Auth0.ConnectionScimConfiguration("my_conn_scim_configuration_default", new()
    ///     {
    ///         ConnectionId = myEnterpriseConnection.Id,
    ///     });
    /// 
    ///     // A resource for configuring an Auth0 Connection SCIM Configuration, specifying `user_id_attribute` and `mapping`.
    ///     // Only one can be specified for a connection.
    ///     var myConnScimConfiguration = new Auth0.ConnectionScimConfiguration("my_conn_scim_configuration", new()
    ///     {
    ///         ConnectionId = myEnterpriseConnection2.Id,
    ///         UserIdAttribute = "attribute1",
    ///         Mappings = new[]
    ///         {
    ///             new Auth0.Inputs.ConnectionScimConfigurationMappingArgs
    ///             {
    ///                 Auth0 = "auth0_attribute1",
    ///                 Scim = "sacim_attribute1",
    ///             },
    ///             new Auth0.Inputs.ConnectionScimConfigurationMappingArgs
    ///             {
    ///                 Auth0 = "auth0_attribute2",
    ///                 Scim = "sacim_attribute2",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// This resource can be imported by specifying the connection ID &lt;connectionID&gt;
    /// 
    /// # 
    /// 
    /// Example:
    /// 
    /// ```sh
    /// $ pulumi import auth0:index/connectionScimConfiguration:ConnectionScimConfiguration my_conn_scim_conf "con_XXXXX"
    /// ```
    /// </summary>
    [Auth0ResourceType("auth0:index/connectionScimConfiguration:ConnectionScimConfiguration")]
    public partial class ConnectionScimConfiguration : global::Pulumi.CustomResource
    {
        /// <summary>
        /// ID of the connection for this SCIM configuration.
        /// </summary>
        [Output("connectionId")]
        public Output<string> ConnectionId { get; private set; } = null!;

        /// <summary>
        /// Name of the connection for this SCIM configuration.
        /// </summary>
        [Output("connectionName")]
        public Output<string> ConnectionName { get; private set; } = null!;

        /// <summary>
        /// Mapping between Auth0 attributes and SCIM attributes. If `user_id_attribute` is set, `mapping` must be set as well.
        /// </summary>
        [Output("mappings")]
        public Output<ImmutableArray<Outputs.ConnectionScimConfigurationMapping>> Mappings { get; private set; } = null!;

        /// <summary>
        /// Schema of the connection for this SCIM configuration.
        /// </summary>
        [Output("strategy")]
        public Output<string> Strategy { get; private set; } = null!;

        /// <summary>
        /// Name of the tenant for this SCIM configuration.
        /// </summary>
        [Output("tenantName")]
        public Output<string> TenantName { get; private set; } = null!;

        /// <summary>
        /// User ID attribute for generation unique of user ids. If `user_id_attribute` is set, `mapping` must be set as well. Defaults to `userName` for SAML connections and `externalId` for OIDC connections.
        /// </summary>
        [Output("userIdAttribute")]
        public Output<string> UserIdAttribute { get; private set; } = null!;


        /// <summary>
        /// Create a ConnectionScimConfiguration resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ConnectionScimConfiguration(string name, ConnectionScimConfigurationArgs args, CustomResourceOptions? options = null)
            : base("auth0:index/connectionScimConfiguration:ConnectionScimConfiguration", name, args ?? new ConnectionScimConfigurationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ConnectionScimConfiguration(string name, Input<string> id, ConnectionScimConfigurationState? state = null, CustomResourceOptions? options = null)
            : base("auth0:index/connectionScimConfiguration:ConnectionScimConfiguration", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ConnectionScimConfiguration resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ConnectionScimConfiguration Get(string name, Input<string> id, ConnectionScimConfigurationState? state = null, CustomResourceOptions? options = null)
        {
            return new ConnectionScimConfiguration(name, id, state, options);
        }
    }

    public sealed class ConnectionScimConfigurationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// ID of the connection for this SCIM configuration.
        /// </summary>
        [Input("connectionId", required: true)]
        public Input<string> ConnectionId { get; set; } = null!;

        [Input("mappings")]
        private InputList<Inputs.ConnectionScimConfigurationMappingArgs>? _mappings;

        /// <summary>
        /// Mapping between Auth0 attributes and SCIM attributes. If `user_id_attribute` is set, `mapping` must be set as well.
        /// </summary>
        public InputList<Inputs.ConnectionScimConfigurationMappingArgs> Mappings
        {
            get => _mappings ?? (_mappings = new InputList<Inputs.ConnectionScimConfigurationMappingArgs>());
            set => _mappings = value;
        }

        /// <summary>
        /// User ID attribute for generation unique of user ids. If `user_id_attribute` is set, `mapping` must be set as well. Defaults to `userName` for SAML connections and `externalId` for OIDC connections.
        /// </summary>
        [Input("userIdAttribute")]
        public Input<string>? UserIdAttribute { get; set; }

        public ConnectionScimConfigurationArgs()
        {
        }
        public static new ConnectionScimConfigurationArgs Empty => new ConnectionScimConfigurationArgs();
    }

    public sealed class ConnectionScimConfigurationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// ID of the connection for this SCIM configuration.
        /// </summary>
        [Input("connectionId")]
        public Input<string>? ConnectionId { get; set; }

        /// <summary>
        /// Name of the connection for this SCIM configuration.
        /// </summary>
        [Input("connectionName")]
        public Input<string>? ConnectionName { get; set; }

        [Input("mappings")]
        private InputList<Inputs.ConnectionScimConfigurationMappingGetArgs>? _mappings;

        /// <summary>
        /// Mapping between Auth0 attributes and SCIM attributes. If `user_id_attribute` is set, `mapping` must be set as well.
        /// </summary>
        public InputList<Inputs.ConnectionScimConfigurationMappingGetArgs> Mappings
        {
            get => _mappings ?? (_mappings = new InputList<Inputs.ConnectionScimConfigurationMappingGetArgs>());
            set => _mappings = value;
        }

        /// <summary>
        /// Schema of the connection for this SCIM configuration.
        /// </summary>
        [Input("strategy")]
        public Input<string>? Strategy { get; set; }

        /// <summary>
        /// Name of the tenant for this SCIM configuration.
        /// </summary>
        [Input("tenantName")]
        public Input<string>? TenantName { get; set; }

        /// <summary>
        /// User ID attribute for generation unique of user ids. If `user_id_attribute` is set, `mapping` must be set as well. Defaults to `userName` for SAML connections and `externalId` for OIDC connections.
        /// </summary>
        [Input("userIdAttribute")]
        public Input<string>? UserIdAttribute { get; set; }

        public ConnectionScimConfigurationState()
        {
        }
        public static new ConnectionScimConfigurationState Empty => new ConnectionScimConfigurationState();
    }
}
