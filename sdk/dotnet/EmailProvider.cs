// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Auth0
{
    /// <summary>
    /// With Auth0, you can have standard welcome, password reset, and account verification email-based workflows built right into Auth0. This resource allows you to configure email providers, so you can route all emails that are part of Auth0's authentication workflows through the supported high-volume email service of your choice.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Auth0 = Pulumi.Auth0;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // This is an example on how to set up the email provider with Amazon SES.
    ///     var amazonSesEmailProvider = new Auth0.EmailProvider("amazonSesEmailProvider", new()
    ///     {
    ///         Credentials = new Auth0.Inputs.EmailProviderCredentialsArgs
    ///         {
    ///             AccessKeyId = "AKIAXXXXXXXXXXXXXXXX",
    ///             Region = "us-east-1",
    ///             SecretAccessKey = "7e8c2148xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
    ///         },
    ///         DefaultFromAddress = "accounts@example.com",
    ///         Enabled = true,
    ///     });
    /// 
    ///     // This is an example on how to set up the email provider with Sendgrid.
    ///     var sendgridEmailProvider = new Auth0.EmailProvider("sendgridEmailProvider", new()
    ///     {
    ///         Credentials = new Auth0.Inputs.EmailProviderCredentialsArgs
    ///         {
    ///             ApiKey = "secretAPIKey",
    ///         },
    ///         DefaultFromAddress = "accounts@example.com",
    ///         Enabled = true,
    ///     });
    /// 
    ///     // This is an example on how to set up the email provider with MS365.
    ///     var smtpEmailProvider = new Auth0.EmailProvider("smtpEmailProvider", new()
    ///     {
    ///         Credentials = new Auth0.Inputs.EmailProviderCredentialsArgs
    ///         {
    ///             Ms365ClientId = "ms365_client_id",
    ///             Ms365ClientSecret = "ms365_client_secret",
    ///             Ms365TenantId = "ms365_tenant_id",
    ///         },
    ///         DefaultFromAddress = "accounts@example.com",
    ///         Enabled = true,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// As this is not a resource identifiable by an ID within the Auth0 Management API,
    /// 
    ///  email can be imported using a random string.
    /// 
    /// # 
    /// 
    ///  We recommend [Version 4 UUID](https://www.uuidgenerator.net/version4)
    /// 
    /// # 
    /// 
    ///  Example:
    /// 
    /// ```sh
    /// $ pulumi import auth0:index/emailProvider:EmailProvider my_email_provider "b4213dc2-2eed-42c3-9516-c6131a9ce0b0"
    /// ```
    /// </summary>
    [Auth0ResourceType("auth0:index/emailProvider:EmailProvider")]
    public partial class EmailProvider : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Configuration settings for the credentials for the email provider.
        /// </summary>
        [Output("credentials")]
        public Output<Outputs.EmailProviderCredentials> Credentials { get; private set; } = null!;

        /// <summary>
        /// Email address to use as the sender when no other "from" address is specified.
        /// </summary>
        [Output("defaultFromAddress")]
        public Output<string> DefaultFromAddress { get; private set; } = null!;

        /// <summary>
        /// Indicates whether the email provider is enabled.
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// Name of the email provider. Options include `azure_cs`, `mailgun`, `mandrill`, `ms365`, `sendgrid`, `ses`, `smtp` and `sparkpost`.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Specific email provider settings.
        /// </summary>
        [Output("settings")]
        public Output<Outputs.EmailProviderSettings> Settings { get; private set; } = null!;


        /// <summary>
        /// Create a EmailProvider resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public EmailProvider(string name, EmailProviderArgs args, CustomResourceOptions? options = null)
            : base("auth0:index/emailProvider:EmailProvider", name, args ?? new EmailProviderArgs(), MakeResourceOptions(options, ""))
        {
        }

        private EmailProvider(string name, Input<string> id, EmailProviderState? state = null, CustomResourceOptions? options = null)
            : base("auth0:index/emailProvider:EmailProvider", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing EmailProvider resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static EmailProvider Get(string name, Input<string> id, EmailProviderState? state = null, CustomResourceOptions? options = null)
        {
            return new EmailProvider(name, id, state, options);
        }
    }

    public sealed class EmailProviderArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Configuration settings for the credentials for the email provider.
        /// </summary>
        [Input("credentials", required: true)]
        public Input<Inputs.EmailProviderCredentialsArgs> Credentials { get; set; } = null!;

        /// <summary>
        /// Email address to use as the sender when no other "from" address is specified.
        /// </summary>
        [Input("defaultFromAddress", required: true)]
        public Input<string> DefaultFromAddress { get; set; } = null!;

        /// <summary>
        /// Indicates whether the email provider is enabled.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Name of the email provider. Options include `azure_cs`, `mailgun`, `mandrill`, `ms365`, `sendgrid`, `ses`, `smtp` and `sparkpost`.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Specific email provider settings.
        /// </summary>
        [Input("settings")]
        public Input<Inputs.EmailProviderSettingsArgs>? Settings { get; set; }

        public EmailProviderArgs()
        {
        }
        public static new EmailProviderArgs Empty => new EmailProviderArgs();
    }

    public sealed class EmailProviderState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Configuration settings for the credentials for the email provider.
        /// </summary>
        [Input("credentials")]
        public Input<Inputs.EmailProviderCredentialsGetArgs>? Credentials { get; set; }

        /// <summary>
        /// Email address to use as the sender when no other "from" address is specified.
        /// </summary>
        [Input("defaultFromAddress")]
        public Input<string>? DefaultFromAddress { get; set; }

        /// <summary>
        /// Indicates whether the email provider is enabled.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Name of the email provider. Options include `azure_cs`, `mailgun`, `mandrill`, `ms365`, `sendgrid`, `ses`, `smtp` and `sparkpost`.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Specific email provider settings.
        /// </summary>
        [Input("settings")]
        public Input<Inputs.EmailProviderSettingsGetArgs>? Settings { get; set; }

        public EmailProviderState()
        {
        }
        public static new EmailProviderState Empty => new EmailProviderState();
    }
}
