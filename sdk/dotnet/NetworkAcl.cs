// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Auth0
{
    /// <summary>
    /// With this resource, you can create and manage NetworkACLs for a tenant.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Auth0 = Pulumi.Auth0;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Example of auth0_network_acl with match criteria
    ///     var myNetworkAclMatch = new Auth0.NetworkAcl("my_network_acl_match", new()
    ///     {
    ///         Description = "Example with match network ACL",
    ///         Active = true,
    ///         Priority = 1,
    ///         Rule = new Auth0.Inputs.NetworkAclRuleArgs
    ///         {
    ///             Action = new Auth0.Inputs.NetworkAclRuleActionArgs
    ///             {
    ///                 Allow = true,
    ///             },
    ///             Scope = "management",
    ///             Match = new Auth0.Inputs.NetworkAclRuleMatchArgs
    ///             {
    ///                 GeoCountryCodes = new[]
    ///                 {
    ///                     "US",
    ///                     "CA",
    ///                 },
    ///                 GeoSubdivisionCodes = new[]
    ///                 {
    ///                     "US-NY",
    ///                     "CA-ON",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     // Example of auth0_network_acl with not-match criteria
    ///     var myNetworkAclNotMatch = new Auth0.NetworkAcl("my_network_acl_not_match", new()
    ///     {
    ///         Description = "Example with not match network ACL",
    ///         Active = true,
    ///         Priority = 3,
    ///         Rule = new Auth0.Inputs.NetworkAclRuleArgs
    ///         {
    ///             Action = new Auth0.Inputs.NetworkAclRuleActionArgs
    ///             {
    ///                 Log = true,
    ///             },
    ///             Scope = "authentication",
    ///             NotMatch = new Auth0.Inputs.NetworkAclRuleNotMatchArgs
    ///             {
    ///                 Asns = new[]
    ///                 {
    ///                     9876,
    ///                 },
    ///                 Ipv4Cidrs = new[]
    ///                 {
    ///                     "192.168.1.0/24",
    ///                     "10.0.0.0/8",
    ///                 },
    ///                 Ipv6Cidrs = new[]
    ///                 {
    ///                     "2001:db8::/32",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// This resource can be imported using the network acl ID.
    /// 
    /// Example:
    /// 
    /// ```sh
    /// $ pulumi import auth0:index/networkAcl:NetworkAcl my_network_acl "167f9a50-4444-3333-1111-ndfdaf953ab4"
    /// ```
    /// </summary>
    [Auth0ResourceType("auth0:index/networkAcl:NetworkAcl")]
    public partial class NetworkAcl : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Whether the Network ACL is active
        /// </summary>
        [Output("active")]
        public Output<bool> Active { get; private set; } = null!;

        /// <summary>
        /// The description of the Network ACL
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// The priority of the Network ACL. Must be unique between 1 and 10.
        /// </summary>
        [Output("priority")]
        public Output<int> Priority { get; private set; } = null!;

        /// <summary>
        /// The rule of the Network ACL
        /// </summary>
        [Output("rule")]
        public Output<Outputs.NetworkAclRule> Rule { get; private set; } = null!;


        /// <summary>
        /// Create a NetworkAcl resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NetworkAcl(string name, NetworkAclArgs args, CustomResourceOptions? options = null)
            : base("auth0:index/networkAcl:NetworkAcl", name, args ?? new NetworkAclArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NetworkAcl(string name, Input<string> id, NetworkAclState? state = null, CustomResourceOptions? options = null)
            : base("auth0:index/networkAcl:NetworkAcl", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NetworkAcl resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NetworkAcl Get(string name, Input<string> id, NetworkAclState? state = null, CustomResourceOptions? options = null)
        {
            return new NetworkAcl(name, id, state, options);
        }
    }

    public sealed class NetworkAclArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether the Network ACL is active
        /// </summary>
        [Input("active", required: true)]
        public Input<bool> Active { get; set; } = null!;

        /// <summary>
        /// The description of the Network ACL
        /// </summary>
        [Input("description", required: true)]
        public Input<string> Description { get; set; } = null!;

        /// <summary>
        /// The priority of the Network ACL. Must be unique between 1 and 10.
        /// </summary>
        [Input("priority", required: true)]
        public Input<int> Priority { get; set; } = null!;

        /// <summary>
        /// The rule of the Network ACL
        /// </summary>
        [Input("rule", required: true)]
        public Input<Inputs.NetworkAclRuleArgs> Rule { get; set; } = null!;

        public NetworkAclArgs()
        {
        }
        public static new NetworkAclArgs Empty => new NetworkAclArgs();
    }

    public sealed class NetworkAclState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether the Network ACL is active
        /// </summary>
        [Input("active")]
        public Input<bool>? Active { get; set; }

        /// <summary>
        /// The description of the Network ACL
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The priority of the Network ACL. Must be unique between 1 and 10.
        /// </summary>
        [Input("priority")]
        public Input<int>? Priority { get; set; }

        /// <summary>
        /// The rule of the Network ACL
        /// </summary>
        [Input("rule")]
        public Input<Inputs.NetworkAclRuleGetArgs>? Rule { get; set; }

        public NetworkAclState()
        {
        }
        public static new NetworkAclState Empty => new NetworkAclState();
    }
}
