// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Auth0
{
    /// <summary>
    /// With this resource, you can manage user identities, including resetting passwords, and creating, provisioning, blocking, and deleting users.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Auth0 = Pulumi.Auth0;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var admin = new Auth0.Role("admin", new()
    ///     {
    ///         Description = "Administrator",
    ///     });
    /// 
    ///     var user = new Auth0.User("user", new()
    ///     {
    ///         ConnectionName = "Username-Password-Authentication",
    ///         UserId = "12345",
    ///         Username = "unique_username",
    ///         Nickname = "some.nickname",
    ///         Email = "test@test.com",
    ///         EmailVerified = true,
    ///         Password = "passpass$12$12",
    ///         Picture = "https://www.example.com/a-valid-picture-url.jpg",
    ///         Roles = new[]
    ///         {
    ///             admin.Id,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// This resource can be imported using the user ID. # Example
    /// 
    /// ```sh
    ///  $ pulumi import auth0:index/user:User user auth0|111111111111111111111111
    /// ```
    /// </summary>
    [Auth0ResourceType("auth0:index/user:User")]
    public partial class User : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Custom fields that store info about the user that impact the user's core functionality, such as how an application functions or what the user can access. Examples include support plans and IDs for external accounts.
        /// </summary>
        [Output("appMetadata")]
        public Output<string?> AppMetadata { get; private set; } = null!;

        /// <summary>
        /// Indicates whether the user is blocked or not.
        /// </summary>
        [Output("blocked")]
        public Output<bool?> Blocked { get; private set; } = null!;

        /// <summary>
        /// Name of the connection from which the user information was sourced.
        /// </summary>
        [Output("connectionName")]
        public Output<string> ConnectionName { get; private set; } = null!;

        /// <summary>
        /// Email address of the user.
        /// </summary>
        [Output("email")]
        public Output<string?> Email { get; private set; } = null!;

        /// <summary>
        /// Indicates whether the email address has been verified.
        /// </summary>
        [Output("emailVerified")]
        public Output<bool?> EmailVerified { get; private set; } = null!;

        /// <summary>
        /// Family name of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled 'Sync user profile attributes at each login'. For more information, see: [Configure Identity Provider Connection for User Profile Updates](https://auth0.com/docs/manage-users/user-accounts/user-profiles/configure-connection-sync-with-auth0).
        /// </summary>
        [Output("familyName")]
        public Output<string?> FamilyName { get; private set; } = null!;

        /// <summary>
        /// Given name of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled 'Sync user profile attributes at each login'. For more information, see: [Configure Identity Provider Connection for User Profile Updates](https://auth0.com/docs/manage-users/user-accounts/user-profiles/configure-connection-sync-with-auth0).
        /// </summary>
        [Output("givenName")]
        public Output<string?> GivenName { get; private set; } = null!;

        /// <summary>
        /// Name of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled 'Sync user profile attributes at each login'. For more information, see: [Configure Identity Provider Connection for User Profile Updates](https://auth0.com/docs/manage-users/user-accounts/user-profiles/configure-connection-sync-with-auth0).
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Preferred nickname or alias of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled 'Sync user profile attributes at each login'. For more information, see: [Configure Identity Provider Connection for User Profile Updates](https://auth0.com/docs/manage-users/user-accounts/user-profiles/configure-connection-sync-with-auth0).
        /// </summary>
        [Output("nickname")]
        public Output<string> Nickname { get; private set; } = null!;

        /// <summary>
        /// Initial password for this user. Required for non-passwordless connections (SMS and email).
        /// </summary>
        [Output("password")]
        public Output<string?> Password { get; private set; } = null!;

        /// <summary>
        /// List of API permissions granted to the user.
        /// </summary>
        [Output("permissions")]
        public Output<ImmutableArray<Outputs.UserPermission>> Permissions { get; private set; } = null!;

        /// <summary>
        /// Phone number for the user; follows the E.164 recommendation. Used for SMS connections.
        /// </summary>
        [Output("phoneNumber")]
        public Output<string?> PhoneNumber { get; private set; } = null!;

        /// <summary>
        /// Indicates whether the phone number has been verified.
        /// </summary>
        [Output("phoneVerified")]
        public Output<bool?> PhoneVerified { get; private set; } = null!;

        /// <summary>
        /// Picture of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled 'Sync user profile attributes at each login'. For more information, see: [Configure Identity Provider Connection for User Profile Updates](https://auth0.com/docs/manage-users/user-accounts/user-profiles/configure-connection-sync-with-auth0).
        /// </summary>
        [Output("picture")]
        public Output<string> Picture { get; private set; } = null!;

        /// <summary>
        /// Set of IDs of roles assigned to the user.
        /// </summary>
        [Output("roles")]
        public Output<ImmutableArray<string>> Roles { get; private set; } = null!;

        /// <summary>
        /// ID of the user.
        /// </summary>
        [Output("userId")]
        public Output<string> UserId { get; private set; } = null!;

        /// <summary>
        /// Custom fields that store info about the user that does not impact a user's core functionality. Examples include work address, home address, and user preferences.
        /// </summary>
        [Output("userMetadata")]
        public Output<string?> UserMetadata { get; private set; } = null!;

        /// <summary>
        /// Username of the user. Only valid if the connection requires a username.
        /// </summary>
        [Output("username")]
        public Output<string?> Username { get; private set; } = null!;

        /// <summary>
        /// Indicates whether the user will receive a verification email after creation. Overrides behavior of `email_verified` parameter.
        /// </summary>
        [Output("verifyEmail")]
        public Output<bool?> VerifyEmail { get; private set; } = null!;


        /// <summary>
        /// Create a User resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public User(string name, UserArgs args, CustomResourceOptions? options = null)
            : base("auth0:index/user:User", name, args ?? new UserArgs(), MakeResourceOptions(options, ""))
        {
        }

        private User(string name, Input<string> id, UserState? state = null, CustomResourceOptions? options = null)
            : base("auth0:index/user:User", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "password",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing User resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static User Get(string name, Input<string> id, UserState? state = null, CustomResourceOptions? options = null)
        {
            return new User(name, id, state, options);
        }
    }

    public sealed class UserArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Custom fields that store info about the user that impact the user's core functionality, such as how an application functions or what the user can access. Examples include support plans and IDs for external accounts.
        /// </summary>
        [Input("appMetadata")]
        public Input<string>? AppMetadata { get; set; }

        /// <summary>
        /// Indicates whether the user is blocked or not.
        /// </summary>
        [Input("blocked")]
        public Input<bool>? Blocked { get; set; }

        /// <summary>
        /// Name of the connection from which the user information was sourced.
        /// </summary>
        [Input("connectionName", required: true)]
        public Input<string> ConnectionName { get; set; } = null!;

        /// <summary>
        /// Email address of the user.
        /// </summary>
        [Input("email")]
        public Input<string>? Email { get; set; }

        /// <summary>
        /// Indicates whether the email address has been verified.
        /// </summary>
        [Input("emailVerified")]
        public Input<bool>? EmailVerified { get; set; }

        /// <summary>
        /// Family name of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled 'Sync user profile attributes at each login'. For more information, see: [Configure Identity Provider Connection for User Profile Updates](https://auth0.com/docs/manage-users/user-accounts/user-profiles/configure-connection-sync-with-auth0).
        /// </summary>
        [Input("familyName")]
        public Input<string>? FamilyName { get; set; }

        /// <summary>
        /// Given name of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled 'Sync user profile attributes at each login'. For more information, see: [Configure Identity Provider Connection for User Profile Updates](https://auth0.com/docs/manage-users/user-accounts/user-profiles/configure-connection-sync-with-auth0).
        /// </summary>
        [Input("givenName")]
        public Input<string>? GivenName { get; set; }

        /// <summary>
        /// Name of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled 'Sync user profile attributes at each login'. For more information, see: [Configure Identity Provider Connection for User Profile Updates](https://auth0.com/docs/manage-users/user-accounts/user-profiles/configure-connection-sync-with-auth0).
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Preferred nickname or alias of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled 'Sync user profile attributes at each login'. For more information, see: [Configure Identity Provider Connection for User Profile Updates](https://auth0.com/docs/manage-users/user-accounts/user-profiles/configure-connection-sync-with-auth0).
        /// </summary>
        [Input("nickname")]
        public Input<string>? Nickname { get; set; }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// Initial password for this user. Required for non-passwordless connections (SMS and email).
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Phone number for the user; follows the E.164 recommendation. Used for SMS connections.
        /// </summary>
        [Input("phoneNumber")]
        public Input<string>? PhoneNumber { get; set; }

        /// <summary>
        /// Indicates whether the phone number has been verified.
        /// </summary>
        [Input("phoneVerified")]
        public Input<bool>? PhoneVerified { get; set; }

        /// <summary>
        /// Picture of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled 'Sync user profile attributes at each login'. For more information, see: [Configure Identity Provider Connection for User Profile Updates](https://auth0.com/docs/manage-users/user-accounts/user-profiles/configure-connection-sync-with-auth0).
        /// </summary>
        [Input("picture")]
        public Input<string>? Picture { get; set; }

        [Input("roles")]
        private InputList<string>? _roles;

        /// <summary>
        /// Set of IDs of roles assigned to the user.
        /// </summary>
        [Obsolete(@"Managing roles through this attribute is deprecated and it will be changed to read-only in a future version. Migrate to the `auth0_user_roles` or the `auth0_user_role` resource to manage user roles instead. Check the [MIGRATION GUIDE](https://github.com/auth0/terraform-provider-auth0/blob/main/MIGRATION_GUIDE.md) on how to do that.")]
        public InputList<string> Roles
        {
            get => _roles ?? (_roles = new InputList<string>());
            set => _roles = value;
        }

        /// <summary>
        /// ID of the user.
        /// </summary>
        [Input("userId")]
        public Input<string>? UserId { get; set; }

        /// <summary>
        /// Custom fields that store info about the user that does not impact a user's core functionality. Examples include work address, home address, and user preferences.
        /// </summary>
        [Input("userMetadata")]
        public Input<string>? UserMetadata { get; set; }

        /// <summary>
        /// Username of the user. Only valid if the connection requires a username.
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        /// <summary>
        /// Indicates whether the user will receive a verification email after creation. Overrides behavior of `email_verified` parameter.
        /// </summary>
        [Input("verifyEmail")]
        public Input<bool>? VerifyEmail { get; set; }

        public UserArgs()
        {
        }
        public static new UserArgs Empty => new UserArgs();
    }

    public sealed class UserState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Custom fields that store info about the user that impact the user's core functionality, such as how an application functions or what the user can access. Examples include support plans and IDs for external accounts.
        /// </summary>
        [Input("appMetadata")]
        public Input<string>? AppMetadata { get; set; }

        /// <summary>
        /// Indicates whether the user is blocked or not.
        /// </summary>
        [Input("blocked")]
        public Input<bool>? Blocked { get; set; }

        /// <summary>
        /// Name of the connection from which the user information was sourced.
        /// </summary>
        [Input("connectionName")]
        public Input<string>? ConnectionName { get; set; }

        /// <summary>
        /// Email address of the user.
        /// </summary>
        [Input("email")]
        public Input<string>? Email { get; set; }

        /// <summary>
        /// Indicates whether the email address has been verified.
        /// </summary>
        [Input("emailVerified")]
        public Input<bool>? EmailVerified { get; set; }

        /// <summary>
        /// Family name of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled 'Sync user profile attributes at each login'. For more information, see: [Configure Identity Provider Connection for User Profile Updates](https://auth0.com/docs/manage-users/user-accounts/user-profiles/configure-connection-sync-with-auth0).
        /// </summary>
        [Input("familyName")]
        public Input<string>? FamilyName { get; set; }

        /// <summary>
        /// Given name of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled 'Sync user profile attributes at each login'. For more information, see: [Configure Identity Provider Connection for User Profile Updates](https://auth0.com/docs/manage-users/user-accounts/user-profiles/configure-connection-sync-with-auth0).
        /// </summary>
        [Input("givenName")]
        public Input<string>? GivenName { get; set; }

        /// <summary>
        /// Name of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled 'Sync user profile attributes at each login'. For more information, see: [Configure Identity Provider Connection for User Profile Updates](https://auth0.com/docs/manage-users/user-accounts/user-profiles/configure-connection-sync-with-auth0).
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Preferred nickname or alias of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled 'Sync user profile attributes at each login'. For more information, see: [Configure Identity Provider Connection for User Profile Updates](https://auth0.com/docs/manage-users/user-accounts/user-profiles/configure-connection-sync-with-auth0).
        /// </summary>
        [Input("nickname")]
        public Input<string>? Nickname { get; set; }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// Initial password for this user. Required for non-passwordless connections (SMS and email).
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("permissions")]
        private InputList<Inputs.UserPermissionGetArgs>? _permissions;

        /// <summary>
        /// List of API permissions granted to the user.
        /// </summary>
        public InputList<Inputs.UserPermissionGetArgs> Permissions
        {
            get => _permissions ?? (_permissions = new InputList<Inputs.UserPermissionGetArgs>());
            set => _permissions = value;
        }

        /// <summary>
        /// Phone number for the user; follows the E.164 recommendation. Used for SMS connections.
        /// </summary>
        [Input("phoneNumber")]
        public Input<string>? PhoneNumber { get; set; }

        /// <summary>
        /// Indicates whether the phone number has been verified.
        /// </summary>
        [Input("phoneVerified")]
        public Input<bool>? PhoneVerified { get; set; }

        /// <summary>
        /// Picture of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled 'Sync user profile attributes at each login'. For more information, see: [Configure Identity Provider Connection for User Profile Updates](https://auth0.com/docs/manage-users/user-accounts/user-profiles/configure-connection-sync-with-auth0).
        /// </summary>
        [Input("picture")]
        public Input<string>? Picture { get; set; }

        [Input("roles")]
        private InputList<string>? _roles;

        /// <summary>
        /// Set of IDs of roles assigned to the user.
        /// </summary>
        [Obsolete(@"Managing roles through this attribute is deprecated and it will be changed to read-only in a future version. Migrate to the `auth0_user_roles` or the `auth0_user_role` resource to manage user roles instead. Check the [MIGRATION GUIDE](https://github.com/auth0/terraform-provider-auth0/blob/main/MIGRATION_GUIDE.md) on how to do that.")]
        public InputList<string> Roles
        {
            get => _roles ?? (_roles = new InputList<string>());
            set => _roles = value;
        }

        /// <summary>
        /// ID of the user.
        /// </summary>
        [Input("userId")]
        public Input<string>? UserId { get; set; }

        /// <summary>
        /// Custom fields that store info about the user that does not impact a user's core functionality. Examples include work address, home address, and user preferences.
        /// </summary>
        [Input("userMetadata")]
        public Input<string>? UserMetadata { get; set; }

        /// <summary>
        /// Username of the user. Only valid if the connection requires a username.
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        /// <summary>
        /// Indicates whether the user will receive a verification email after creation. Overrides behavior of `email_verified` parameter.
        /// </summary>
        [Input("verifyEmail")]
        public Input<bool>? VerifyEmail { get; set; }

        public UserState()
        {
        }
        public static new UserState Empty => new UserState();
    }
}
