// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Auth0
{
    /// <summary>
    /// With Auth0, you can use a custom domain to maintain a consistent user experience. This is a three-step process; you must configure the custom domain in Auth0, then create a DNS record for the domain, then verify the DNS record in Auth0. This resource allows for automating the verification part of the process.
    /// 
    /// ## Import
    /// 
    /// You can import this resource using the custom domain ID.
    /// 
    /// # 
    /// 
    ///  Example:
    /// 
    /// ```sh
    /// $ pulumi import auth0:index/customDomainVerification:CustomDomainVerification my_custom_domain_verification "cd_XXXXXXXXXXXXXXXX"
    /// ```
    /// </summary>
    [Auth0ResourceType("auth0:index/customDomainVerification:CustomDomainVerification")]
    public partial class CustomDomainVerification : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The value of the `cname-api-key` header to send when forwarding requests. Only present if the type of the custom domain
        /// is `self_managed_certs` and Terraform originally managed the domain's verification.
        /// </summary>
        [Output("cnameApiKey")]
        public Output<string> CnameApiKey { get; private set; } = null!;

        /// <summary>
        /// ID of the custom domain resource.
        /// </summary>
        [Output("customDomainId")]
        public Output<string> CustomDomainId { get; private set; } = null!;

        /// <summary>
        /// The DNS name of the Auth0 origin server that handles traffic for the custom domain.
        /// </summary>
        [Output("originDomainName")]
        public Output<string> OriginDomainName { get; private set; } = null!;


        /// <summary>
        /// Create a CustomDomainVerification resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CustomDomainVerification(string name, CustomDomainVerificationArgs args, CustomResourceOptions? options = null)
            : base("auth0:index/customDomainVerification:CustomDomainVerification", name, args ?? new CustomDomainVerificationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CustomDomainVerification(string name, Input<string> id, CustomDomainVerificationState? state = null, CustomResourceOptions? options = null)
            : base("auth0:index/customDomainVerification:CustomDomainVerification", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "cnameApiKey",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CustomDomainVerification resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CustomDomainVerification Get(string name, Input<string> id, CustomDomainVerificationState? state = null, CustomResourceOptions? options = null)
        {
            return new CustomDomainVerification(name, id, state, options);
        }
    }

    public sealed class CustomDomainVerificationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// ID of the custom domain resource.
        /// </summary>
        [Input("customDomainId", required: true)]
        public Input<string> CustomDomainId { get; set; } = null!;

        public CustomDomainVerificationArgs()
        {
        }
        public static new CustomDomainVerificationArgs Empty => new CustomDomainVerificationArgs();
    }

    public sealed class CustomDomainVerificationState : global::Pulumi.ResourceArgs
    {
        [Input("cnameApiKey")]
        private Input<string>? _cnameApiKey;

        /// <summary>
        /// The value of the `cname-api-key` header to send when forwarding requests. Only present if the type of the custom domain
        /// is `self_managed_certs` and Terraform originally managed the domain's verification.
        /// </summary>
        public Input<string>? CnameApiKey
        {
            get => _cnameApiKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _cnameApiKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// ID of the custom domain resource.
        /// </summary>
        [Input("customDomainId")]
        public Input<string>? CustomDomainId { get; set; }

        /// <summary>
        /// The DNS name of the Auth0 origin server that handles traffic for the custom domain.
        /// </summary>
        [Input("originDomainName")]
        public Input<string>? OriginDomainName { get; set; }

        public CustomDomainVerificationState()
        {
        }
        public static new CustomDomainVerificationState Empty => new CustomDomainVerificationState();
    }
}
