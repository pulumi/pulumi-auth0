// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Auth0.Outputs
{

    [OutputType]
    public sealed class GetClientRefreshTokenResult
    {
        /// <summary>
        /// Options include `expiring`, `non-expiring`. Whether a refresh token will expire based on an absolute lifetime, after which the token can no longer be used. If rotation is `rotating`, this must be set to `expiring`.
        /// </summary>
        public readonly string ExpirationType;
        /// <summary>
        /// The time in seconds after which inactive refresh tokens will expire.
        /// </summary>
        public readonly int IdleTokenLifetime;
        /// <summary>
        /// Whether inactive refresh tokens should remain valid indefinitely.
        /// </summary>
        public readonly bool InfiniteIdleTokenLifetime;
        /// <summary>
        /// Whether refresh tokens should remain valid indefinitely. If false, `token_lifetime` should also be set.
        /// </summary>
        public readonly bool InfiniteTokenLifetime;
        /// <summary>
        /// The amount of time in seconds in which a refresh token may be reused without triggering reuse detection.
        /// </summary>
        public readonly int Leeway;
        /// <summary>
        /// Options include `rotating`, `non-rotating`. When `rotating`, exchanging a refresh token will cause a new refresh token to be issued and the existing token will be invalidated. This allows for automatic detection of token reuse if the token is leaked.
        /// </summary>
        public readonly string RotationType;
        /// <summary>
        /// The absolute lifetime of a refresh token in seconds.
        /// </summary>
        public readonly int TokenLifetime;

        [OutputConstructor]
        private GetClientRefreshTokenResult(
            string expirationType,

            int idleTokenLifetime,

            bool infiniteIdleTokenLifetime,

            bool infiniteTokenLifetime,

            int leeway,

            string rotationType,

            int tokenLifetime)
        {
            ExpirationType = expirationType;
            IdleTokenLifetime = idleTokenLifetime;
            InfiniteIdleTokenLifetime = infiniteIdleTokenLifetime;
            InfiniteTokenLifetime = infiniteTokenLifetime;
            Leeway = leeway;
            RotationType = rotationType;
            TokenLifetime = tokenLifetime;
        }
    }
}
