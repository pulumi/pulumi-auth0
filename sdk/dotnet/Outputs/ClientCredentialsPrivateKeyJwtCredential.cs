// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Auth0.Outputs
{

    [OutputType]
    public sealed class ClientCredentialsPrivateKeyJwtCredential
    {
        /// <summary>
        /// Algorithm which will be used with the credential. Can be one of `RS256`, `RS384`, `PS256`. If not specified, `RS256` will be used.
        /// </summary>
        public readonly string? Algorithm;
        /// <summary>
        /// The ISO 8601 formatted date the credential was created.
        /// </summary>
        public readonly string? CreatedAt;
        /// <summary>
        /// Credential type. Supported types: `public_key`.
        /// </summary>
        public readonly string CredentialType;
        /// <summary>
        /// The ISO 8601 formatted date representing the expiration of the credential. It is not possible to set this to never expire after it has been set. Recreate the certificate if needed.
        /// </summary>
        public readonly string? ExpiresAt;
        /// <summary>
        /// The ID of the client credential.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// The key identifier of the credential, generated on creation.
        /// </summary>
        public readonly string? KeyId;
        /// <summary>
        /// Friendly name for a credential.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// Parse expiry from x509 certificate. If true, attempts to parse the expiry date from the provided PEM. If also the `expires_at` is set the credential expiry will be set to the explicit `expires_at` value.
        /// </summary>
        public readonly bool? ParseExpiryFromCert;
        /// <summary>
        /// PEM-formatted public key (SPKI and PKCS1) or X509 certificate. Must be JSON escaped.
        /// </summary>
        public readonly string Pem;
        /// <summary>
        /// The ISO 8601 formatted date the credential was updated.
        /// </summary>
        public readonly string? UpdatedAt;

        [OutputConstructor]
        private ClientCredentialsPrivateKeyJwtCredential(
            string? algorithm,

            string? createdAt,

            string credentialType,

            string? expiresAt,

            string? id,

            string? keyId,

            string? name,

            bool? parseExpiryFromCert,

            string pem,

            string? updatedAt)
        {
            Algorithm = algorithm;
            CreatedAt = createdAt;
            CredentialType = credentialType;
            ExpiresAt = expiresAt;
            Id = id;
            KeyId = keyId;
            Name = name;
            ParseExpiryFromCert = parseExpiryFromCert;
            Pem = pem;
            UpdatedAt = updatedAt;
        }
    }
}
