// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Auth0.Outputs
{

    [OutputType]
    public sealed class GetClientAddonAzureBlobResult
    {
        /// <summary>
        /// Your Azure storage account name. Usually first segment in your Azure storage URL, for example `https://acme-org.blob.core.windows.net` would be the account name `acme-org`.
        /// </summary>
        public readonly string AccountName;
        /// <summary>
        /// Indicates if the issued token has permission to delete the blob.
        /// </summary>
        public readonly bool BlobDelete;
        /// <summary>
        /// Entity to request a token for, such as `my-blob`. If blank the computed SAS will apply to the entire storage container.
        /// </summary>
        public readonly string BlobName;
        /// <summary>
        /// Indicates if the issued token has permission to read the content, properties, metadata and block list. Use the blob as the source of a copy operation.
        /// </summary>
        public readonly bool BlobRead;
        /// <summary>
        /// Indicates if the issued token has permission to create or write content, properties, metadata, or block list. Snapshot or lease the blob. Resize the blob (page blob only). Use the blob as the destination of a copy operation within the same account.
        /// </summary>
        public readonly bool BlobWrite;
        /// <summary>
        /// Indicates if issued token has permission to delete any blob in the container.
        /// </summary>
        public readonly bool ContainerDelete;
        /// <summary>
        /// Indicates if the issued token has permission to list blobs in the container.
        /// </summary>
        public readonly bool ContainerList;
        /// <summary>
        /// Container to request a token for, such as `my-container`.
        /// </summary>
        public readonly string ContainerName;
        /// <summary>
        /// Indicates if the issued token has permission to read the content, properties, metadata or block list of any blob in the container. Use any blob in the container as the source of a copy operation.
        /// </summary>
        public readonly bool ContainerRead;
        /// <summary>
        /// Indicates that for any blob in the container if the issued token has permission to create or write content, properties, metadata, or block list. Snapshot or lease the blob. Resize the blob (page blob only). Use the blob as the destination of a copy operation within the same account.
        /// </summary>
        public readonly bool ContainerWrite;
        /// <summary>
        /// Expiration in minutes for the generated token (default of 5 minutes).
        /// </summary>
        public readonly int Expiration;
        /// <summary>
        /// Shared access policy identifier defined in your storage account resource.
        /// </summary>
        public readonly string SignedIdentifier;
        /// <summary>
        /// Access key associated with this storage account.
        /// </summary>
        public readonly string StorageAccessKey;

        [OutputConstructor]
        private GetClientAddonAzureBlobResult(
            string accountName,

            bool blobDelete,

            string blobName,

            bool blobRead,

            bool blobWrite,

            bool containerDelete,

            bool containerList,

            string containerName,

            bool containerRead,

            bool containerWrite,

            int expiration,

            string signedIdentifier,

            string storageAccessKey)
        {
            AccountName = accountName;
            BlobDelete = blobDelete;
            BlobName = blobName;
            BlobRead = blobRead;
            BlobWrite = blobWrite;
            ContainerDelete = containerDelete;
            ContainerList = containerList;
            ContainerName = containerName;
            ContainerRead = containerRead;
            ContainerWrite = containerWrite;
            Expiration = expiration;
            SignedIdentifier = signedIdentifier;
            StorageAccessKey = storageAccessKey;
        }
    }
}
