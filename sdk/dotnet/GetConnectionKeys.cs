// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Auth0
{
    public static class GetConnectionKeys
    {
        /// <summary>
        /// Retrieve the list of signing keys for a specific Auth0 connection. (Okta/OIDC only)
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Auth0 = Pulumi.Auth0;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // An Auth0 Connection Keys loaded using its Connection ID.
        ///     var myKeys = Auth0.GetConnectionKeys.Invoke(new()
        ///     {
        ///         ConnectionId = "con_xxxxxxxxxxxxx",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetConnectionKeysResult> InvokeAsync(GetConnectionKeysArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetConnectionKeysResult>("auth0:index/getConnectionKeys:getConnectionKeys", args ?? new GetConnectionKeysArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieve the list of signing keys for a specific Auth0 connection. (Okta/OIDC only)
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Auth0 = Pulumi.Auth0;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // An Auth0 Connection Keys loaded using its Connection ID.
        ///     var myKeys = Auth0.GetConnectionKeys.Invoke(new()
        ///     {
        ///         ConnectionId = "con_xxxxxxxxxxxxx",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetConnectionKeysResult> Invoke(GetConnectionKeysInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetConnectionKeysResult>("auth0:index/getConnectionKeys:getConnectionKeys", args ?? new GetConnectionKeysInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieve the list of signing keys for a specific Auth0 connection. (Okta/OIDC only)
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Auth0 = Pulumi.Auth0;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // An Auth0 Connection Keys loaded using its Connection ID.
        ///     var myKeys = Auth0.GetConnectionKeys.Invoke(new()
        ///     {
        ///         ConnectionId = "con_xxxxxxxxxxxxx",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetConnectionKeysResult> Invoke(GetConnectionKeysInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetConnectionKeysResult>("auth0:index/getConnectionKeys:getConnectionKeys", args ?? new GetConnectionKeysInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetConnectionKeysArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the connection to retrieve keys for.
        /// </summary>
        [Input("connectionId", required: true)]
        public string ConnectionId { get; set; } = null!;

        public GetConnectionKeysArgs()
        {
        }
        public static new GetConnectionKeysArgs Empty => new GetConnectionKeysArgs();
    }

    public sealed class GetConnectionKeysInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the connection to retrieve keys for.
        /// </summary>
        [Input("connectionId", required: true)]
        public Input<string> ConnectionId { get; set; } = null!;

        public GetConnectionKeysInvokeArgs()
        {
        }
        public static new GetConnectionKeysInvokeArgs Empty => new GetConnectionKeysInvokeArgs();
    }


    [OutputType]
    public sealed class GetConnectionKeysResult
    {
        /// <summary>
        /// The ID of the connection to retrieve keys for.
        /// </summary>
        public readonly string ConnectionId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// List of signing keys associated with the connection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetConnectionKeysKeyResult> Keys;

        [OutputConstructor]
        private GetConnectionKeysResult(
            string connectionId,

            string id,

            ImmutableArray<Outputs.GetConnectionKeysKeyResult> keys)
        {
            ConnectionId = connectionId;
            Id = id;
            Keys = keys;
        }
    }
}
