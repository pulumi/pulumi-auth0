// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Auth0
{
    /// <summary>
    /// With Auth0, you can define sources of users, otherwise known as connections, which may include identity providers (such as Google or LinkedIn), databases, or passwordless authentication methods. This resource allows you to configure and manage connections to be used with your clients and users.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Auth0 = Pulumi.Auth0;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var myConnection = new Auth0.Connection("myConnection", new Auth0.ConnectionArgs
    ///         {
    ///             Options = new Auth0.Inputs.ConnectionOptionsArgs
    ///             {
    ///                 BruteForceProtection = true,
    ///                 Configuration = 
    ///                 {
    ///                     { "bar", "baz" },
    ///                     { "foo", "bar" },
    ///                 },
    ///                 CustomScripts = 
    ///                 {
    ///                     { "getUser", @"function getByEmail (email, callback) {
    ///   return callback(new Error(""Whoops!""))
    /// }
    /// 
    /// " },
    ///                 },
    ///                 EnabledDatabaseCustomization = true,
    ///                 PasswordHistories = 
    ///                 {
    ///                     new Auth0.Inputs.ConnectionOptionsPasswordHistoryArgs
    ///                     {
    ///                         Enable = true,
    ///                         Size = 3,
    ///                     },
    ///                 },
    ///                 PasswordPolicy = "excellent",
    ///             },
    ///             Strategy = "auth0",
    ///         });
    ///         var myWaadConnection = new Auth0.Connection("myWaadConnection", new Auth0.ConnectionArgs
    ///         {
    ///             Options = new Auth0.Inputs.ConnectionOptionsArgs
    ///             {
    ///                 ApiEnableUsers = true,
    ///                 AppDomain = "my-auth0-app.eu.auth0.com",
    ///                 BasicProfile = true,
    ///                 ClientId = "1234",
    ///                 ClientSecret = "1234",
    ///                 DomainAliases = 
    ///                 {
    ///                     "example.io",
    ///                 },
    ///                 ExtGroups = true,
    ///                 ExtProfile = true,
    ///                 TenantDomain = "exmaple.onmicrosoft.com",
    ///                 UseWsfed = false,
    ///                 WaadCommonEndpoint = false,
    ///                 WaadProtocol = "openid-connect",
    ///             },
    ///             Strategy = "waad",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// </summary>
    public partial class Connection : Pulumi.CustomResource
    {
        /// <summary>
        /// Name used in login screen
        /// </summary>
        [Output("displayName")]
        public Output<string?> DisplayName { get; private set; } = null!;

        /// <summary>
        /// Set(String). IDs of the clients for which the connection is enabled. If not specified, no clients are enabled.
        /// </summary>
        [Output("enabledClients")]
        public Output<ImmutableArray<string>> EnabledClients { get; private set; } = null!;

        /// <summary>
        /// Boolean. Indicates whether or not the connection is domain level.
        /// </summary>
        [Output("isDomainConnection")]
        public Output<bool> IsDomainConnection { get; private set; } = null!;

        /// <summary>
        /// String. Name of the connection.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// List(Resource). Configuration settings for connection options. For details, see Options.
        /// </summary>
        [Output("options")]
        public Output<Outputs.ConnectionOptions?> Options { get; private set; } = null!;

        /// <summary>
        /// List(String). Defines the realms for which the connection will be used (i.e., email domains). If not specified, the connection name is added as the realm.
        /// </summary>
        [Output("realms")]
        public Output<ImmutableArray<string>> Realms { get; private set; } = null!;

        /// <summary>
        /// String. Type of the connection, which indicates the identity provider. Options include `ad`, `adfs`, `amazon`, `aol`, `apple`, `auth0`, `auth0-adldap`, `auth0-oidc`, `baidu`, `bitbucket`, `bitly`, `box`, `custom`, `daccount`, `dropbox`, `dwolla`, `email`, `evernote`, `evernote-sandbox`, `exact`, `facebook`, `fitbit`, `flickr`, `github`, `google-apps`, `google-oauth2`, `guardian`, `instagram`, `ip`, `line`, `linkedin`, `miicard`, `oauth1`, `oauth2`, `office365`, `oidc`, `paypal`, `paypal-sandbox`, `pingfederate`, `planningcenter`, `renren`, `salesforce`, `salesforce-community`, `salesforce-sandbox` `samlp`, `sharepoint`, `shopify`, `sms`, `soundcloud`, `thecity`, `thecity-sandbox`, `thirtysevensignals`, `twitter`, `untappd`, `vkontakte`, `waad`, `weibo`, `windowslive`, `wordpress`, `yahoo`, `yammer`, `yandex`.
        /// </summary>
        [Output("strategy")]
        public Output<string> Strategy { get; private set; } = null!;

        /// <summary>
        /// Int. Version 1 is deprecated, use version 2.
        /// </summary>
        [Output("strategyVersion")]
        public Output<string> StrategyVersion { get; private set; } = null!;


        /// <summary>
        /// Create a Connection resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Connection(string name, ConnectionArgs args, CustomResourceOptions? options = null)
            : base("auth0:index/connection:Connection", name, args ?? new ConnectionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Connection(string name, Input<string> id, ConnectionState? state = null, CustomResourceOptions? options = null)
            : base("auth0:index/connection:Connection", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Connection resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Connection Get(string name, Input<string> id, ConnectionState? state = null, CustomResourceOptions? options = null)
        {
            return new Connection(name, id, state, options);
        }
    }

    public sealed class ConnectionArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name used in login screen
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("enabledClients")]
        private InputList<string>? _enabledClients;

        /// <summary>
        /// Set(String). IDs of the clients for which the connection is enabled. If not specified, no clients are enabled.
        /// </summary>
        public InputList<string> EnabledClients
        {
            get => _enabledClients ?? (_enabledClients = new InputList<string>());
            set => _enabledClients = value;
        }

        /// <summary>
        /// Boolean. Indicates whether or not the connection is domain level.
        /// </summary>
        [Input("isDomainConnection")]
        public Input<bool>? IsDomainConnection { get; set; }

        /// <summary>
        /// String. Name of the connection.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// List(Resource). Configuration settings for connection options. For details, see Options.
        /// </summary>
        [Input("options")]
        public Input<Inputs.ConnectionOptionsArgs>? Options { get; set; }

        [Input("realms")]
        private InputList<string>? _realms;

        /// <summary>
        /// List(String). Defines the realms for which the connection will be used (i.e., email domains). If not specified, the connection name is added as the realm.
        /// </summary>
        public InputList<string> Realms
        {
            get => _realms ?? (_realms = new InputList<string>());
            set => _realms = value;
        }

        /// <summary>
        /// String. Type of the connection, which indicates the identity provider. Options include `ad`, `adfs`, `amazon`, `aol`, `apple`, `auth0`, `auth0-adldap`, `auth0-oidc`, `baidu`, `bitbucket`, `bitly`, `box`, `custom`, `daccount`, `dropbox`, `dwolla`, `email`, `evernote`, `evernote-sandbox`, `exact`, `facebook`, `fitbit`, `flickr`, `github`, `google-apps`, `google-oauth2`, `guardian`, `instagram`, `ip`, `line`, `linkedin`, `miicard`, `oauth1`, `oauth2`, `office365`, `oidc`, `paypal`, `paypal-sandbox`, `pingfederate`, `planningcenter`, `renren`, `salesforce`, `salesforce-community`, `salesforce-sandbox` `samlp`, `sharepoint`, `shopify`, `sms`, `soundcloud`, `thecity`, `thecity-sandbox`, `thirtysevensignals`, `twitter`, `untappd`, `vkontakte`, `waad`, `weibo`, `windowslive`, `wordpress`, `yahoo`, `yammer`, `yandex`.
        /// </summary>
        [Input("strategy", required: true)]
        public Input<string> Strategy { get; set; } = null!;

        /// <summary>
        /// Int. Version 1 is deprecated, use version 2.
        /// </summary>
        [Input("strategyVersion")]
        public Input<string>? StrategyVersion { get; set; }

        public ConnectionArgs()
        {
        }
    }

    public sealed class ConnectionState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name used in login screen
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("enabledClients")]
        private InputList<string>? _enabledClients;

        /// <summary>
        /// Set(String). IDs of the clients for which the connection is enabled. If not specified, no clients are enabled.
        /// </summary>
        public InputList<string> EnabledClients
        {
            get => _enabledClients ?? (_enabledClients = new InputList<string>());
            set => _enabledClients = value;
        }

        /// <summary>
        /// Boolean. Indicates whether or not the connection is domain level.
        /// </summary>
        [Input("isDomainConnection")]
        public Input<bool>? IsDomainConnection { get; set; }

        /// <summary>
        /// String. Name of the connection.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// List(Resource). Configuration settings for connection options. For details, see Options.
        /// </summary>
        [Input("options")]
        public Input<Inputs.ConnectionOptionsGetArgs>? Options { get; set; }

        [Input("realms")]
        private InputList<string>? _realms;

        /// <summary>
        /// List(String). Defines the realms for which the connection will be used (i.e., email domains). If not specified, the connection name is added as the realm.
        /// </summary>
        public InputList<string> Realms
        {
            get => _realms ?? (_realms = new InputList<string>());
            set => _realms = value;
        }

        /// <summary>
        /// String. Type of the connection, which indicates the identity provider. Options include `ad`, `adfs`, `amazon`, `aol`, `apple`, `auth0`, `auth0-adldap`, `auth0-oidc`, `baidu`, `bitbucket`, `bitly`, `box`, `custom`, `daccount`, `dropbox`, `dwolla`, `email`, `evernote`, `evernote-sandbox`, `exact`, `facebook`, `fitbit`, `flickr`, `github`, `google-apps`, `google-oauth2`, `guardian`, `instagram`, `ip`, `line`, `linkedin`, `miicard`, `oauth1`, `oauth2`, `office365`, `oidc`, `paypal`, `paypal-sandbox`, `pingfederate`, `planningcenter`, `renren`, `salesforce`, `salesforce-community`, `salesforce-sandbox` `samlp`, `sharepoint`, `shopify`, `sms`, `soundcloud`, `thecity`, `thecity-sandbox`, `thirtysevensignals`, `twitter`, `untappd`, `vkontakte`, `waad`, `weibo`, `windowslive`, `wordpress`, `yahoo`, `yammer`, `yandex`.
        /// </summary>
        [Input("strategy")]
        public Input<string>? Strategy { get; set; }

        /// <summary>
        /// Int. Version 1 is deprecated, use version 2.
        /// </summary>
        [Input("strategyVersion")]
        public Input<string>? StrategyVersion { get; set; }

        public ConnectionState()
        {
        }
    }
}
