// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Auth0
{
    /// <summary>
    /// With Auth0, you can define sources of users, otherwise known as connections, which may include identity providers (such as Google or LinkedIn), databases, or passwordless authentication methods. This resource allows you to configure and manage connections to be used with your clients and users.
    /// 
    /// &gt; The Auth0 dashboard displays only one connection per social provider. Although the Auth0 Management API allows the
    /// creation of multiple connections per strategy, the additional connections may not be visible in the Auth0 dashboard.
    /// 
    /// ## Example Usage
    /// ### Google OAuth2 Connection
    /// 
    /// &gt; Your Auth0 account may be pre-configured with a `google-oauth2` connection.
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Auth0 = Pulumi.Auth0;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var googleOauth2 = new Auth0.Connection("googleOauth2", new()
    ///     {
    ///         Options = new Auth0.Inputs.ConnectionOptionsArgs
    ///         {
    ///             AllowedAudiences = new[]
    ///             {
    ///                 "example.com",
    ///                 "api.example.com",
    ///             },
    ///             ClientId = "&lt;client-id&gt;",
    ///             ClientSecret = "&lt;client-secret&gt;",
    ///             NonPersistentAttrs = new[]
    ///             {
    ///                 "ethnicity",
    ///                 "gender",
    ///             },
    ///             Scopes = new[]
    ///             {
    ///                 "email",
    ///                 "profile",
    ///                 "gmail",
    ///                 "youtube",
    ///             },
    ///             SetUserRootAttributes = "on_each_login",
    ///         },
    ///         Strategy = "google-oauth2",
    ///     });
    /// 
    /// });
    /// ```
    /// ### Facebook Connection
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Auth0 = Pulumi.Auth0;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var facebook = new Auth0.Connection("facebook", new()
    ///     {
    ///         Options = new Auth0.Inputs.ConnectionOptionsArgs
    ///         {
    ///             ClientId = "&lt;client-id&gt;",
    ///             ClientSecret = "&lt;client-secret&gt;",
    ///             NonPersistentAttrs = new[]
    ///             {
    ///                 "ethnicity",
    ///                 "gender",
    ///             },
    ///             Scopes = new[]
    ///             {
    ///                 "public_profile",
    ///                 "email",
    ///                 "groups_access_member_info",
    ///                 "user_birthday",
    ///             },
    ///             SetUserRootAttributes = "on_each_login",
    ///         },
    ///         Strategy = "facebook",
    ///     });
    /// 
    /// });
    /// ```
    /// ### Apple Connection
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Auth0 = Pulumi.Auth0;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var apple = new Auth0.Connection("apple", new()
    ///     {
    ///         Options = new Auth0.Inputs.ConnectionOptionsArgs
    ///         {
    ///             ClientId = "&lt;client-id&gt;",
    ///             ClientSecret = @"-----BEGIN PRIVATE KEY-----
    /// MIHBAgEAMA0GCSqGSIb3DQEBAQUABIGsMIGpAgEAA
    /// -----END PRIVATE KEY-----
    /// ",
    ///             KeyId = "&lt;key-id&gt;",
    ///             NonPersistentAttrs = new[]
    ///             {
    ///                 "ethnicity",
    ///                 "gender",
    ///             },
    ///             Scopes = new[]
    ///             {
    ///                 "email",
    ///                 "name",
    ///             },
    ///             SetUserRootAttributes = "on_first_login",
    ///             TeamId = "&lt;team-id&gt;",
    ///         },
    ///         Strategy = "apple",
    ///     });
    /// 
    /// });
    /// ```
    /// ### LinkedIn Connection
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Auth0 = Pulumi.Auth0;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var linkedin = new Auth0.Connection("linkedin", new()
    ///     {
    ///         Options = new Auth0.Inputs.ConnectionOptionsArgs
    ///         {
    ///             ClientId = "&lt;client-id&gt;",
    ///             ClientSecret = "&lt;client-secret&gt;",
    ///             NonPersistentAttrs = new[]
    ///             {
    ///                 "ethnicity",
    ///                 "gender",
    ///             },
    ///             Scopes = new[]
    ///             {
    ///                 "basic_profile",
    ///                 "profile",
    ///                 "email",
    ///             },
    ///             SetUserRootAttributes = "on_each_login",
    ///             StrategyVersion = 2,
    ///         },
    ///         Strategy = "linkedin",
    ///     });
    /// 
    /// });
    /// ```
    /// ### GitHub Connection
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Auth0 = Pulumi.Auth0;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var github = new Auth0.Connection("github", new()
    ///     {
    ///         Options = new Auth0.Inputs.ConnectionOptionsArgs
    ///         {
    ///             ClientId = "&lt;client-id&gt;",
    ///             ClientSecret = "&lt;client-secret&gt;",
    ///             NonPersistentAttrs = new[]
    ///             {
    ///                 "ethnicity",
    ///                 "gender",
    ///             },
    ///             Scopes = new[]
    ///             {
    ///                 "email",
    ///                 "profile",
    ///                 "public_repo",
    ///                 "repo",
    ///             },
    ///             SetUserRootAttributes = "on_each_login",
    ///         },
    ///         Strategy = "github",
    ///     });
    /// 
    /// });
    /// ```
    /// ### SalesForce Connection
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Auth0 = Pulumi.Auth0;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var salesforce = new Auth0.Connection("salesforce", new()
    ///     {
    ///         Options = new Auth0.Inputs.ConnectionOptionsArgs
    ///         {
    ///             ClientId = "&lt;client-id&gt;",
    ///             ClientSecret = "&lt;client-secret&gt;",
    ///             CommunityBaseUrl = "https://salesforce.example.com",
    ///             NonPersistentAttrs = new[]
    ///             {
    ///                 "ethnicity",
    ///                 "gender",
    ///             },
    ///             Scopes = new[]
    ///             {
    ///                 "openid",
    ///                 "email",
    ///             },
    ///             SetUserRootAttributes = "on_first_login",
    ///         },
    ///         Strategy = "salesforce",
    ///     });
    /// 
    /// });
    /// ```
    /// ### OAuth2 Connection
    /// 
    /// Also applies to following connection strategies: `dropbox`, `bitbucket`, `paypal`, `twitter`, `amazon`, `yahoo`, `box`, `wordpress`, `discord`, `imgur`, `spotify`, `shopify`, `figma`, `slack-oauth-2`, `digitalocean`, `twitch`, `vimeo`, `custom`
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Auth0 = Pulumi.Auth0;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var oauth2 = new Auth0.Connection("oauth2", new()
    ///     {
    ///         Options = new Auth0.Inputs.ConnectionOptionsArgs
    ///         {
    ///             AuthorizationEndpoint = "https://auth.example.com/oauth2/authorize",
    ///             ClientId = "&lt;client-id&gt;",
    ///             ClientSecret = "&lt;client-secret&gt;",
    ///             IconUrl = "https://auth.example.com/assets/logo.png",
    ///             NonPersistentAttrs = new[]
    ///             {
    ///                 "ethnicity",
    ///                 "gender",
    ///             },
    ///             PkceEnabled = true,
    ///             Scopes = new[]
    ///             {
    ///                 "basic_profile",
    ///                 "profile",
    ///                 "email",
    ///             },
    ///             Scripts = 
    ///             {
    ///                 { "fetchUserProfile", @"        function fetchUserProfile(accessToken, context, callback) {
    ///           return callback(new Error(""Whoops!""));
    ///         }
    ///       
    /// " },
    ///             },
    ///             SetUserRootAttributes = "on_each_login",
    ///             TokenEndpoint = "https://auth.example.com/oauth2/token",
    ///         },
    ///         Strategy = "oauth2",
    ///     });
    /// 
    /// });
    /// ```
    /// ### SMS Connection
    /// 
    /// &gt; To be able to see this in the management dashboard as well, the name of the connection must be set to "sms".
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Auth0 = Pulumi.Auth0;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var sms = new Auth0.Connection("sms", new()
    ///     {
    ///         IsDomainConnection = false,
    ///         Options = new Auth0.Inputs.ConnectionOptionsArgs
    ///         {
    ///             BruteForceProtection = true,
    ///             DisableSignup = false,
    ///             ForwardRequestInfo = true,
    ///             From = "+15555555555",
    ///             GatewayAuthentication = new Auth0.Inputs.ConnectionOptionsGatewayAuthenticationArgs
    ///             {
    ///                 Audience = "https://somewhere.com/sms-gateway",
    ///                 Method = "bearer",
    ///                 Secret = "4e2680bb74ec2ae24736476dd37ed6c2",
    ///                 SecretBase64Encoded = false,
    ///                 Subject = "test.us.auth0.com:sms",
    ///             },
    ///             GatewayUrl = "https://somewhere.com/sms-gateway",
    ///             Name = "sms",
    ///             Provider = "sms_gateway",
    ///             Syntax = "md_with_macros",
    ///             Template = "@@password@@",
    ///             Totp = new Auth0.Inputs.ConnectionOptionsTotpArgs
    ///             {
    ///                 Length = 6,
    ///                 TimeStep = 300,
    ///             },
    ///         },
    ///         Strategy = "sms",
    ///     });
    /// 
    /// });
    /// ```
    /// ### Email Connection
    /// 
    /// &gt; To be able to see this in the management dashboard as well, the name of the connection must be set to "email".
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Auth0 = Pulumi.Auth0;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var passwordlessEmail = new Auth0.Connection("passwordlessEmail", new()
    ///     {
    ///         Options = new Auth0.Inputs.ConnectionOptionsArgs
    ///         {
    ///             AuthParams = 
    ///             {
    ///                 { "responseType", "code" },
    ///                 { "scope", "openid email profile offline_access" },
    ///             },
    ///             BruteForceProtection = true,
    ///             DisableSignup = false,
    ///             From = "{{ application.name }} &lt;root@auth0.com&gt;",
    ///             Name = "email",
    ///             NonPersistentAttrs = new[] {},
    ///             SetUserRootAttributes = "on_each_login",
    ///             Subject = "Welcome to {{ application.name }}",
    ///             Syntax = "liquid",
    ///             Template = "&lt;html&gt;This is the body of the email&lt;/html&gt;",
    ///             Totp = new Auth0.Inputs.ConnectionOptionsTotpArgs
    ///             {
    ///                 Length = 6,
    ///                 TimeStep = 300,
    ///             },
    ///         },
    ///         Strategy = "email",
    ///     });
    /// 
    /// });
    /// ```
    /// ### WindowsLive Connection
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Auth0 = Pulumi.Auth0;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var windowslive = new Auth0.Connection("windowslive", new()
    ///     {
    ///         Options = new Auth0.Inputs.ConnectionOptionsArgs
    ///         {
    ///             ClientId = "&lt;client-id&gt;",
    ///             ClientSecret = "&lt;client-secret&gt;",
    ///             NonPersistentAttrs = new[]
    ///             {
    ///                 "ethnicity",
    ///                 "gender",
    ///             },
    ///             Scopes = new[]
    ///             {
    ///                 "signin",
    ///                 "graph_user",
    ///             },
    ///             SetUserRootAttributes = "on_first_login",
    ///             StrategyVersion = 2,
    ///         },
    ///         Strategy = "windowslive",
    ///     });
    /// 
    /// });
    /// ```
    /// ### OIDC Connection
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Auth0 = Pulumi.Auth0;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var oidc = new Auth0.Connection("oidc", new()
    ///     {
    ///         DisplayName = "OIDC Connection",
    ///         Options = new Auth0.Inputs.ConnectionOptionsArgs
    ///         {
    ///             AuthorizationEndpoint = "https://www.paypal.com/signin/authorize",
    ///             ClientId = "1234567",
    ///             ClientSecret = "1234567",
    ///             DiscoveryUrl = "https://www.paypalobjects.com/.well-known/openid-configuration",
    ///             DomainAliases = new[]
    ///             {
    ///                 "example.com",
    ///             },
    ///             IconUrl = "https://example.com/assets/logo.png",
    ///             Issuer = "https://www.paypalobjects.com",
    ///             JwksUri = "https://api.paypal.com/v1/oauth2/certs",
    ///             NonPersistentAttrs = new[]
    ///             {
    ///                 "ethnicity",
    ///                 "gender",
    ///             },
    ///             Scopes = new[]
    ///             {
    ///                 "openid",
    ///                 "email",
    ///             },
    ///             SetUserRootAttributes = "on_first_login",
    ///             TenantDomain = "",
    ///             TokenEndpoint = "https://api.paypal.com/v1/oauth2/token",
    ///             Type = "front_channel",
    ///             UserinfoEndpoint = "https://api.paypal.com/v1/oauth2/token/userinfo",
    ///         },
    ///         ShowAsButton = false,
    ///         Strategy = "oidc",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Connections can be imported using their ID. # Example
    /// 
    /// ```sh
    ///  $ pulumi import auth0:index/connection:Connection google con_a17f21fdb24d48a0
    /// ```
    /// </summary>
    [Auth0ResourceType("auth0:index/connection:Connection")]
    public partial class Connection : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Name used in login screen.
        /// </summary>
        [Output("displayName")]
        public Output<string?> DisplayName { get; private set; } = null!;

        /// <summary>
        /// IDs of the clients for which the connection is enabled.
        /// </summary>
        [Output("enabledClients")]
        public Output<ImmutableArray<string>> EnabledClients { get; private set; } = null!;

        /// <summary>
        /// Indicates whether the connection is domain level.
        /// </summary>
        [Output("isDomainConnection")]
        public Output<bool> IsDomainConnection { get; private set; } = null!;

        /// <summary>
        /// Metadata associated with the connection, in the form of a map of string values (max 255 chars). Maximum of 10 metadata properties allowed.
        /// </summary>
        [Output("metadata")]
        public Output<ImmutableDictionary<string, string>?> Metadata { get; private set; } = null!;

        /// <summary>
        /// Name of the connection.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Configuration settings for connection options.
        /// </summary>
        [Output("options")]
        public Output<Outputs.ConnectionOptions> Options { get; private set; } = null!;

        /// <summary>
        /// Defines the realms for which the connection will be used (e.g., email domains). If not specified, the connection name is added as the realm.
        /// </summary>
        [Output("realms")]
        public Output<ImmutableArray<string>> Realms { get; private set; } = null!;

        /// <summary>
        /// Display connection as a button. Only available on enterprise connections.
        /// </summary>
        [Output("showAsButton")]
        public Output<bool?> ShowAsButton { get; private set; } = null!;

        /// <summary>
        /// Type of the connection, which indicates the identity provider.
        /// </summary>
        [Output("strategy")]
        public Output<string> Strategy { get; private set; } = null!;


        /// <summary>
        /// Create a Connection resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Connection(string name, ConnectionArgs args, CustomResourceOptions? options = null)
            : base("auth0:index/connection:Connection", name, args ?? new ConnectionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Connection(string name, Input<string> id, ConnectionState? state = null, CustomResourceOptions? options = null)
            : base("auth0:index/connection:Connection", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Connection resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Connection Get(string name, Input<string> id, ConnectionState? state = null, CustomResourceOptions? options = null)
        {
            return new Connection(name, id, state, options);
        }
    }

    public sealed class ConnectionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name used in login screen.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Indicates whether the connection is domain level.
        /// </summary>
        [Input("isDomainConnection")]
        public Input<bool>? IsDomainConnection { get; set; }

        [Input("metadata")]
        private InputMap<string>? _metadata;

        /// <summary>
        /// Metadata associated with the connection, in the form of a map of string values (max 255 chars). Maximum of 10 metadata properties allowed.
        /// </summary>
        public InputMap<string> Metadata
        {
            get => _metadata ?? (_metadata = new InputMap<string>());
            set => _metadata = value;
        }

        /// <summary>
        /// Name of the connection.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Configuration settings for connection options.
        /// </summary>
        [Input("options")]
        public Input<Inputs.ConnectionOptionsArgs>? Options { get; set; }

        [Input("realms")]
        private InputList<string>? _realms;

        /// <summary>
        /// Defines the realms for which the connection will be used (e.g., email domains). If not specified, the connection name is added as the realm.
        /// </summary>
        public InputList<string> Realms
        {
            get => _realms ?? (_realms = new InputList<string>());
            set => _realms = value;
        }

        /// <summary>
        /// Display connection as a button. Only available on enterprise connections.
        /// </summary>
        [Input("showAsButton")]
        public Input<bool>? ShowAsButton { get; set; }

        /// <summary>
        /// Type of the connection, which indicates the identity provider.
        /// </summary>
        [Input("strategy", required: true)]
        public Input<string> Strategy { get; set; } = null!;

        public ConnectionArgs()
        {
        }
        public static new ConnectionArgs Empty => new ConnectionArgs();
    }

    public sealed class ConnectionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name used in login screen.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("enabledClients")]
        private InputList<string>? _enabledClients;

        /// <summary>
        /// IDs of the clients for which the connection is enabled.
        /// </summary>
        public InputList<string> EnabledClients
        {
            get => _enabledClients ?? (_enabledClients = new InputList<string>());
            set => _enabledClients = value;
        }

        /// <summary>
        /// Indicates whether the connection is domain level.
        /// </summary>
        [Input("isDomainConnection")]
        public Input<bool>? IsDomainConnection { get; set; }

        [Input("metadata")]
        private InputMap<string>? _metadata;

        /// <summary>
        /// Metadata associated with the connection, in the form of a map of string values (max 255 chars). Maximum of 10 metadata properties allowed.
        /// </summary>
        public InputMap<string> Metadata
        {
            get => _metadata ?? (_metadata = new InputMap<string>());
            set => _metadata = value;
        }

        /// <summary>
        /// Name of the connection.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Configuration settings for connection options.
        /// </summary>
        [Input("options")]
        public Input<Inputs.ConnectionOptionsGetArgs>? Options { get; set; }

        [Input("realms")]
        private InputList<string>? _realms;

        /// <summary>
        /// Defines the realms for which the connection will be used (e.g., email domains). If not specified, the connection name is added as the realm.
        /// </summary>
        public InputList<string> Realms
        {
            get => _realms ?? (_realms = new InputList<string>());
            set => _realms = value;
        }

        /// <summary>
        /// Display connection as a button. Only available on enterprise connections.
        /// </summary>
        [Input("showAsButton")]
        public Input<bool>? ShowAsButton { get; set; }

        /// <summary>
        /// Type of the connection, which indicates the identity provider.
        /// </summary>
        [Input("strategy")]
        public Input<string>? Strategy { get; set; }

        public ConnectionState()
        {
        }
        public static new ConnectionState Empty => new ConnectionState();
    }
}
