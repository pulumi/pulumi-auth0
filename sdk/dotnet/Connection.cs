// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Auth0
{
    /// <summary>
    /// With Auth0, you can define sources of users, otherwise known as connections, which may include identity providers (such as Google or LinkedIn), databases, or passwordless authentication methods. This resource allows you to configure and manage connections to be used with your clients and users.
    /// 
    /// &gt; The Auth0 dashboard displays only one connection per social provider. Although the Auth0 Management API allows the
    /// creation of multiple connections per strategy, the additional connections may not be visible in the Auth0 dashboard.
    /// 
    /// &gt; When updating the `options` parameter, ensure that all nested fields within the `options` schema are explicitly defined. Failing to do so may result in the loss of existing configurations.
    /// 
    /// ## Example Usage
    /// 
    /// ### Auth0 Connection
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Auth0 = Pulumi.Auth0;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // This is an example of an Auth0 connection.
    ///     var myConnection = new Auth0.Connection("my_connection", new()
    ///     {
    ///         Name = "Example-Connection",
    ///         IsDomainConnection = true,
    ///         Strategy = "auth0",
    ///         Metadata = 
    ///         {
    ///             { "key1", "foo" },
    ///             { "key2", "bar" },
    ///         },
    ///         Options = new Auth0.Inputs.ConnectionOptionsArgs
    ///         {
    ///             PasswordPolicy = "excellent",
    ///             BruteForceProtection = true,
    ///             StrategyVersion = 2,
    ///             EnabledDatabaseCustomization = true,
    ///             ImportMode = false,
    ///             RequiresUsername = true,
    ///             DisableSignup = false,
    ///             CustomScripts = 
    ///             {
    ///                 { "get_user", @"        function getByEmail(email, callback) {
    ///           return callback(new Error(""Whoops!""));
    ///         }
    /// " },
    ///             },
    ///             Configuration = 
    ///             {
    ///                 { "foo", "bar" },
    ///                 { "bar", "baz" },
    ///             },
    ///             UpstreamParams = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///             {
    ///                 ["screen_name"] = new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["alias"] = "login_hint",
    ///                 },
    ///             }),
    ///             PasswordHistories = new[]
    ///             {
    ///                 new Auth0.Inputs.ConnectionOptionsPasswordHistoryArgs
    ///                 {
    ///                     Enable = true,
    ///                     Size = 3,
    ///                 },
    ///             },
    ///             PasswordNoPersonalInfo = new Auth0.Inputs.ConnectionOptionsPasswordNoPersonalInfoArgs
    ///             {
    ///                 Enable = true,
    ///             },
    ///             PasswordDictionary = new Auth0.Inputs.ConnectionOptionsPasswordDictionaryArgs
    ///             {
    ///                 Enable = true,
    ///                 Dictionaries = new[]
    ///                 {
    ///                     "password",
    ///                     "admin",
    ///                     "1234",
    ///                 },
    ///             },
    ///             PasswordComplexityOptions = new Auth0.Inputs.ConnectionOptionsPasswordComplexityOptionsArgs
    ///             {
    ///                 MinLength = 12,
    ///             },
    ///             Validation = new Auth0.Inputs.ConnectionOptionsValidationArgs
    ///             {
    ///                 Username = new Auth0.Inputs.ConnectionOptionsValidationUsernameArgs
    ///                 {
    ///                     Min = 10,
    ///                     Max = 40,
    ///                 },
    ///             },
    ///             Mfa = new Auth0.Inputs.ConnectionOptionsMfaArgs
    ///             {
    ///                 Active = true,
    ///                 ReturnEnrollSettings = true,
    ///             },
    ///             AuthenticationMethods = new[]
    ///             {
    ///                 new Auth0.Inputs.ConnectionOptionsAuthenticationMethodArgs
    ///                 {
    ///                     Passkey = new Auth0.Inputs.ConnectionOptionsAuthenticationMethodPasskeyArgs
    ///                     {
    ///                         Enabled = true,
    ///                     },
    ///                     Password = new Auth0.Inputs.ConnectionOptionsAuthenticationMethodPasswordArgs
    ///                     {
    ///                         Enabled = true,
    ///                     },
    ///                 },
    ///             },
    ///             PasskeyOptions = new Auth0.Inputs.ConnectionOptionsPasskeyOptionsArgs
    ///             {
    ///                 ChallengeUi = "both",
    ///                 LocalEnrollmentEnabled = true,
    ///                 ProgressiveEnrollmentEnabled = true,
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Google OAuth2 Connection
    /// 
    /// &gt; Your Auth0 account may be pre-configured with a `google-oauth2` connection.
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Auth0 = Pulumi.Auth0;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // This is an example of a Google OAuth2 connection.
    ///     var googleOauth2 = new Auth0.Connection("google_oauth2", new()
    ///     {
    ///         Name = "Google-OAuth2-Connection",
    ///         Strategy = "google-oauth2",
    ///         Options = new Auth0.Inputs.ConnectionOptionsArgs
    ///         {
    ///             ClientId = "&lt;client-id&gt;",
    ///             ClientSecret = "&lt;client-secret&gt;",
    ///             AllowedAudiences = new[]
    ///             {
    ///                 "example.com",
    ///                 "api.example.com",
    ///             },
    ///             Scopes = new[]
    ///             {
    ///                 "email",
    ///                 "profile",
    ///                 "gmail",
    ///                 "youtube",
    ///             },
    ///             SetUserRootAttributes = "on_each_login",
    ///             NonPersistentAttrs = new[]
    ///             {
    ///                 "ethnicity",
    ///                 "gender",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Google Apps
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Auth0 = Pulumi.Auth0;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var googleApps = new Auth0.Connection("google_apps", new()
    ///     {
    ///         Name = "connection-google-apps",
    ///         IsDomainConnection = false,
    ///         Strategy = "google-apps",
    ///         ShowAsButton = false,
    ///         Options = new Auth0.Inputs.ConnectionOptionsArgs
    ///         {
    ///             ClientId = "",
    ///             ClientSecret = "",
    ///             Domain = "example.com",
    ///             TenantDomain = "example.com",
    ///             DomainAliases = new[]
    ///             {
    ///                 "example.com",
    ///                 "api.example.com",
    ///             },
    ///             ApiEnableUsers = true,
    ///             Scopes = new[]
    ///             {
    ///                 "ext_profile",
    ///                 "ext_groups",
    ///             },
    ///             IconUrl = "https://example.com/assets/logo.png",
    ///             UpstreamParams = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///             {
    ///                 ["screen_name"] = new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["alias"] = "login_hint",
    ///                 },
    ///             }),
    ///             SetUserRootAttributes = "on_each_login",
    ///             NonPersistentAttrs = new[]
    ///             {
    ///                 "ethnicity",
    ///                 "gender",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Facebook Connection
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Auth0 = Pulumi.Auth0;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // This is an example of a Facebook connection.
    ///     var facebook = new Auth0.Connection("facebook", new()
    ///     {
    ///         Name = "Facebook-Connection",
    ///         Strategy = "facebook",
    ///         Options = new Auth0.Inputs.ConnectionOptionsArgs
    ///         {
    ///             ClientId = "&lt;client-id&gt;",
    ///             ClientSecret = "&lt;client-secret&gt;",
    ///             Scopes = new[]
    ///             {
    ///                 "public_profile",
    ///                 "email",
    ///                 "groups_access_member_info",
    ///                 "user_birthday",
    ///             },
    ///             SetUserRootAttributes = "on_each_login",
    ///             NonPersistentAttrs = new[]
    ///             {
    ///                 "ethnicity",
    ///                 "gender",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Apple Connection
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Auth0 = Pulumi.Auth0;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // This is an example of an Apple connection.
    ///     var apple = new Auth0.Connection("apple", new()
    ///     {
    ///         Name = "Apple-Connection",
    ///         Strategy = "apple",
    ///         Options = new Auth0.Inputs.ConnectionOptionsArgs
    ///         {
    ///             ClientId = "&lt;client-id&gt;",
    ///             ClientSecret = @"-----BEGIN PRIVATE KEY-----
    /// MIHBAgEAMA0GCSqGSIb3DQEBAQUABIGsMIGpAgEAA
    /// -----END PRIVATE KEY-----",
    ///             TeamId = "&lt;team-id&gt;",
    ///             KeyId = "&lt;key-id&gt;",
    ///             Scopes = new[]
    ///             {
    ///                 "email",
    ///                 "name",
    ///             },
    ///             SetUserRootAttributes = "on_first_login",
    ///             NonPersistentAttrs = new[]
    ///             {
    ///                 "ethnicity",
    ///                 "gender",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### LinkedIn Connection
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Auth0 = Pulumi.Auth0;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // This is an example of an LinkedIn connection.
    ///     var linkedin = new Auth0.Connection("linkedin", new()
    ///     {
    ///         Name = "Linkedin-Connection",
    ///         Strategy = "linkedin",
    ///         Options = new Auth0.Inputs.ConnectionOptionsArgs
    ///         {
    ///             ClientId = "&lt;client-id&gt;",
    ///             ClientSecret = "&lt;client-secret&gt;",
    ///             StrategyVersion = 2,
    ///             Scopes = new[]
    ///             {
    ///                 "basic_profile",
    ///                 "profile",
    ///                 "email",
    ///             },
    ///             SetUserRootAttributes = "on_each_login",
    ///             NonPersistentAttrs = new[]
    ///             {
    ///                 "ethnicity",
    ///                 "gender",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### GitHub Connection
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Auth0 = Pulumi.Auth0;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // This is an example of an GitHub connection.
    ///     var github = new Auth0.Connection("github", new()
    ///     {
    ///         Name = "GitHub-Connection",
    ///         Strategy = "github",
    ///         Options = new Auth0.Inputs.ConnectionOptionsArgs
    ///         {
    ///             ClientId = "&lt;client-id&gt;",
    ///             ClientSecret = "&lt;client-secret&gt;",
    ///             Scopes = new[]
    ///             {
    ///                 "email",
    ///                 "profile",
    ///                 "public_repo",
    ///                 "repo",
    ///             },
    ///             SetUserRootAttributes = "on_each_login",
    ///             NonPersistentAttrs = new[]
    ///             {
    ///                 "ethnicity",
    ///                 "gender",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### SalesForce Connection
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Auth0 = Pulumi.Auth0;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // This is an example of an SalesForce connection.
    ///     var salesforce = new Auth0.Connection("salesforce", new()
    ///     {
    ///         Name = "Salesforce-Connection",
    ///         Strategy = "salesforce",
    ///         Options = new Auth0.Inputs.ConnectionOptionsArgs
    ///         {
    ///             ClientId = "&lt;client-id&gt;",
    ///             ClientSecret = "&lt;client-secret&gt;",
    ///             CommunityBaseUrl = "https://salesforce.example.com",
    ///             Scopes = new[]
    ///             {
    ///                 "openid",
    ///                 "email",
    ///             },
    ///             SetUserRootAttributes = "on_first_login",
    ///             NonPersistentAttrs = new[]
    ///             {
    ///                 "ethnicity",
    ///                 "gender",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### OAuth2 Connection
    /// 
    /// Also applies to following connection strategies: `dropbox`, `bitbucket`, `paypal`, `twitter`, `amazon`, `yahoo`, `box`, `wordpress`, `shopify`, `custom`
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Auth0 = Pulumi.Auth0;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // This is an example of an OAuth2 connection.
    ///     var oauth2 = new Auth0.Connection("oauth2", new()
    ///     {
    ///         Name = "OAuth2-Connection",
    ///         Strategy = "oauth2",
    ///         Options = new Auth0.Inputs.ConnectionOptionsArgs
    ///         {
    ///             ClientId = "&lt;client-id&gt;",
    ///             ClientSecret = "&lt;client-secret&gt;",
    ///             StrategyVersion = 2,
    ///             Scopes = new[]
    ///             {
    ///                 "basic_profile",
    ///                 "profile",
    ///                 "email",
    ///             },
    ///             TokenEndpoint = "https://auth.example.com/oauth2/token",
    ///             AuthorizationEndpoint = "https://auth.example.com/oauth2/authorize",
    ///             PkceEnabled = true,
    ///             IconUrl = "https://auth.example.com/assets/logo.png",
    ///             CustomHeaders = new[]
    ///             {
    ///                 new Auth0.Inputs.ConnectionOptionsCustomHeaderArgs
    ///                 {
    ///                     Header = "bar",
    ///                     Value = "foo",
    ///                 },
    ///                 new Auth0.Inputs.ConnectionOptionsCustomHeaderArgs
    ///                 {
    ///                     Header = "foo",
    ///                     Value = "bar",
    ///                 },
    ///             },
    ///             Scripts = 
    ///             {
    ///                 { "fetchUserProfile", @"        function fetchUserProfile(accessToken, context, callback) {
    ///           return callback(new Error(""Whoops!""));
    ///         }
    /// " },
    ///             },
    ///             SetUserRootAttributes = "on_each_login",
    ///             NonPersistentAttrs = new[]
    ///             {
    ///                 "ethnicity",
    ///                 "gender",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Active Directory (AD)
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Auth0 = Pulumi.Auth0;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var ad = new Auth0.Connection("ad", new()
    ///     {
    ///         Name = "connection-active-directory",
    ///         DisplayName = "Active Directory Connection",
    ///         Strategy = "ad",
    ///         ShowAsButton = true,
    ///         Options = new Auth0.Inputs.ConnectionOptionsArgs
    ///         {
    ///             DisableSelfServiceChangePassword = true,
    ///             BruteForceProtection = true,
    ///             TenantDomain = "example.com",
    ///             StrategyVersion = 2,
    ///             IconUrl = "https://example.com/assets/logo.png",
    ///             DomainAliases = new[]
    ///             {
    ///                 "example.com",
    ///                 "api.example.com",
    ///             },
    ///             Ips = new[]
    ///             {
    ///                 "192.168.1.1",
    ///                 "192.168.1.2",
    ///             },
    ///             SetUserRootAttributes = "on_each_login",
    ///             NonPersistentAttrs = new[]
    ///             {
    ///                 "ethnicity",
    ///                 "gender",
    ///             },
    ///             UpstreamParams = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///             {
    ///                 ["screen_name"] = new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["alias"] = "login_hint",
    ///                 },
    ///             }),
    ///             UseCertAuth = false,
    ///             UseKerberos = false,
    ///             DisableCache = false,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Azure AD Connection
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Auth0 = Pulumi.Auth0;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var azureAd = new Auth0.Connection("azure_ad", new()
    ///     {
    ///         Name = "connection-azure-ad",
    ///         Strategy = "waad",
    ///         ShowAsButton = true,
    ///         Options = new Auth0.Inputs.ConnectionOptionsArgs
    ///         {
    ///             IdentityApi = "azure-active-directory-v1.0",
    ///             ClientId = "123456",
    ///             ClientSecret = "123456",
    ///             StrategyVersion = 2,
    ///             UserIdAttribute = "oid",
    ///             AppId = "app-id-123",
    ///             TenantDomain = "example.onmicrosoft.com",
    ///             Domain = "example.onmicrosoft.com",
    ///             DomainAliases = new[]
    ///             {
    ///                 "example.com",
    ///                 "api.example.com",
    ///             },
    ///             IconUrl = "https://example.onmicrosoft.com/assets/logo.png",
    ///             UseWsfed = false,
    ///             WaadProtocol = "openid-connect",
    ///             WaadCommonEndpoint = false,
    ///             MaxGroupsToRetrieve = "250",
    ///             ApiEnableUsers = true,
    ///             Scopes = new[]
    ///             {
    ///                 "basic_profile",
    ///                 "ext_groups",
    ///                 "ext_profile",
    ///             },
    ///             SetUserRootAttributes = "on_each_login",
    ///             ShouldTrustEmailVerifiedConnection = "never_set_emails_as_verified",
    ///             UpstreamParams = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///             {
    ///                 ["screen_name"] = new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["alias"] = "login_hint",
    ///                 },
    ///             }),
    ///             NonPersistentAttrs = new[]
    ///             {
    ///                 "ethnicity",
    ///                 "gender",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Email Connection
    /// 
    /// &gt; To be able to see this in the management dashboard as well, the name of the connection must be set to "email".
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Auth0 = Pulumi.Auth0;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // This is an example of an Email connection.
    ///     var passwordlessEmail = new Auth0.Connection("passwordless_email", new()
    ///     {
    ///         Strategy = "email",
    ///         Name = "email",
    ///         Options = new Auth0.Inputs.ConnectionOptionsArgs
    ///         {
    ///             Name = "email",
    ///             From = "{{ application.name }} &lt;root@auth0.com&gt;",
    ///             Subject = "Welcome to {{ application.name }}",
    ///             Syntax = "liquid",
    ///             Template = "&lt;html&gt;This is the body of the email&lt;/html&gt;",
    ///             DisableSignup = false,
    ///             BruteForceProtection = true,
    ///             SetUserRootAttributes = "on_each_login",
    ///             NonPersistentAttrs = new() { },
    ///             AuthParams = 
    ///             {
    ///                 { "scope", "openid email profile offline_access" },
    ///                 { "response_type", "code" },
    ///             },
    ///             Totp = new Auth0.Inputs.ConnectionOptionsTotpArgs
    ///             {
    ///                 TimeStep = 300,
    ///                 Length = 6,
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### SAML Connection
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Auth0 = Pulumi.Auth0;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // This is an example of a SAML connection.
    ///     var samlp = new Auth0.Connection("samlp", new()
    ///     {
    ///         Name = "SAML-Connection",
    ///         Strategy = "samlp",
    ///         Options = new Auth0.Inputs.ConnectionOptionsArgs
    ///         {
    ///             Debug = false,
    ///             SigningCert = "&lt;signing-certificate&gt;",
    ///             SignInEndpoint = "https://saml.provider/sign_in",
    ///             SignOutEndpoint = "https://saml.provider/sign_out",
    ///             GlobalTokenRevocationJwtIss = "issuer.example.com",
    ///             GlobalTokenRevocationJwtSub = "user123",
    ///             DisableSignOut = true,
    ///             StrategyVersion = 2,
    ///             TenantDomain = "example.com",
    ///             DomainAliases = new[]
    ///             {
    ///                 "example.com",
    ///                 "alias.example.com",
    ///             },
    ///             ProtocolBinding = "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
    ///             RequestTemplate = @"&lt;samlp:AuthnRequest xmlns:samlp=""urn:oasis:names:tc:SAML:2.0:protocol""
    /// @@AssertServiceURLAndDestination@@
    ///     ID=""@@ID@@""
    ///     IssueInstant=""@@IssueInstant@@""
    ///     ProtocolBinding=""@@ProtocolBinding@@"" Version=""2.0""&gt;
    ///     &lt;saml:Issuer xmlns:saml=""urn:oasis:names:tc:SAML:2.0:assertion""&gt;@@Issuer@@&lt;/saml:Issuer&gt;
    /// &lt;/samlp:AuthnRequest&gt;",
    ///             UserIdAttribute = "https://saml.provider/imi/ns/identity-200810",
    ///             SignatureAlgorithm = "rsa-sha256",
    ///             DigestAlgorithm = "sha256",
    ///             IconUrl = "https://saml.provider/assets/logo.png",
    ///             EntityId = "&lt;entity_id&gt;",
    ///             MetadataXml = @"    &lt;?xml version=""1.0""?&gt;
    ///     &lt;md:EntityDescriptor xmlns:md=""urn:oasis:names:tc:SAML:2.0:metadata"" xmlns:ds=""http://www.w3.org/2000/09/xmldsig#"" entityID=""https://example.com""&gt;
    ///       &lt;md:IDPSSODescriptor protocolSupportEnumeration=""urn:oasis:names:tc:SAML:2.0:protocol""&gt;
    ///         &lt;md:SingleLogoutService Binding=""urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect"" Location=""https://saml.provider/sign_out""/&gt;
    ///         &lt;md:SingleSignOnService Binding=""urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect"" Location=""https://saml.provider/sign_in""/&gt;
    ///       &lt;/md:IDPSSODescriptor&gt;
    ///     &lt;/md:EntityDescriptor&gt;
    /// ",
    ///             MetadataUrl = "https://saml.provider/imi/ns/FederationMetadata.xml",
    ///             FieldsMap = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///             {
    ///                 ["name"] = new[]
    ///                 {
    ///                     "name",
    ///                     "nameidentifier",
    ///                 },
    ///                 ["email"] = new[]
    ///                 {
    ///                     "emailaddress",
    ///                     "nameidentifier",
    ///                 },
    ///                 ["family_name"] = "surname",
    ///             }),
    ///             SigningKey = new Auth0.Inputs.ConnectionOptionsSigningKeyArgs
    ///             {
    ///                 Key = @"-----BEGIN PRIVATE KEY-----
    /// ...{your private key here}...
    /// -----END PRIVATE KEY-----",
    ///                 Cert = @"-----BEGIN CERTIFICATE-----
    /// ...{your public key cert here}...
    /// -----END CERTIFICATE-----",
    ///             },
    ///             DecryptionKey = new Auth0.Inputs.ConnectionOptionsDecryptionKeyArgs
    ///             {
    ///                 Key = @"-----BEGIN PRIVATE KEY-----
    /// ...{your private key here}...
    /// -----END PRIVATE KEY-----",
    ///                 Cert = @"-----BEGIN CERTIFICATE-----
    /// ...{your public key cert here}...
    /// -----END CERTIFICATE-----",
    ///             },
    ///             IdpInitiated = new Auth0.Inputs.ConnectionOptionsIdpInitiatedArgs
    ///             {
    ///                 ClientId = "client_id",
    ///                 ClientProtocol = "samlp",
    ///                 ClientAuthorizeQuery = "type=code&amp;timeout=30",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### WindowsLive Connection
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Auth0 = Pulumi.Auth0;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // This is an example of a WindowsLive connection.
    ///     var windowslive = new Auth0.Connection("windowslive", new()
    ///     {
    ///         Name = "Windowslive-Connection",
    ///         Strategy = "windowslive",
    ///         Options = new Auth0.Inputs.ConnectionOptionsArgs
    ///         {
    ///             ClientId = "&lt;client-id&gt;",
    ///             ClientSecret = "&lt;client-secret&gt;",
    ///             StrategyVersion = 2,
    ///             Scopes = new[]
    ///             {
    ///                 "signin",
    ///                 "graph_user",
    ///             },
    ///             SetUserRootAttributes = "on_first_login",
    ///             NonPersistentAttrs = new[]
    ///             {
    ///                 "ethnicity",
    ///                 "gender",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### OIDC Connection
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Auth0 = Pulumi.Auth0;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // This is an example of an OIDC connection.
    ///     var oidc = new Auth0.Connection("oidc", new()
    ///     {
    ///         Name = "oidc-connection",
    ///         DisplayName = "OIDC Connection",
    ///         Strategy = "oidc",
    ///         ShowAsButton = false,
    ///         Options = new Auth0.Inputs.ConnectionOptionsArgs
    ///         {
    ///             ClientId = "1234567",
    ///             ClientSecret = "1234567",
    ///             DomainAliases = new[]
    ///             {
    ///                 "example.com",
    ///             },
    ///             TenantDomain = "",
    ///             IconUrl = "https://example.com/assets/logo.png",
    ///             Type = "back_channel",
    ///             Issuer = "https://www.paypalobjects.com",
    ///             JwksUri = "https://api.paypal.com/v1/oauth2/certs",
    ///             DiscoveryUrl = "https://www.paypalobjects.com/.well-known/openid-configuration",
    ///             TokenEndpoint = "https://api.paypal.com/v1/oauth2/token",
    ///             UserinfoEndpoint = "https://api.paypal.com/v1/oauth2/token/userinfo",
    ///             AuthorizationEndpoint = "https://www.paypal.com/signin/authorize",
    ///             Scopes = new[]
    ///             {
    ///                 "openid",
    ///                 "email",
    ///             },
    ///             SetUserRootAttributes = "on_first_login",
    ///             NonPersistentAttrs = new[]
    ///             {
    ///                 "ethnicity",
    ///                 "gender",
    ///             },
    ///             ConnectionSettings = new Auth0.Inputs.ConnectionOptionsConnectionSettingsArgs
    ///             {
    ///                 Pkce = "auto",
    ///             },
    ///             AttributeMap = new Auth0.Inputs.ConnectionOptionsAttributeMapArgs
    ///             {
    ///                 MappingMode = "use_map",
    ///                 UserinfoScope = "openid email profile groups",
    ///                 Attributes = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["name"] = "${context.tokenset.name}",
    ///                     ["email"] = "${context.tokenset.email}",
    ///                     ["email_verified"] = "${context.tokenset.email_verified}",
    ///                     ["nickname"] = "${context.tokenset.nickname}",
    ///                     ["picture"] = "${context.tokenset.picture}",
    ///                     ["given_name"] = "${context.tokenset.given_name}",
    ///                     ["family_name"] = "${context.tokenset.family_name}",
    ///                 }),
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Okta Connection
    /// 
    /// !&gt; When configuring an Okta Workforce connection, the `scopes` attribute must be explicitly set. If omitted, the connection may not function correctly.
    /// To ensure proper behavior, always specify:  `scopes = ["openid", "profile", "email"]`
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Auth0 = Pulumi.Auth0;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // This is an example of an Okta Workforce connection.
    ///     var okta = new Auth0.Connection("okta", new()
    ///     {
    ///         Name = "okta-connection",
    ///         DisplayName = "Okta Workforce Connection",
    ///         Strategy = "okta",
    ///         ShowAsButton = false,
    ///         Options = new Auth0.Inputs.ConnectionOptionsArgs
    ///         {
    ///             ClientId = "1234567",
    ///             ClientSecret = "1234567",
    ///             Domain = "example.okta.com",
    ///             DomainAliases = new[]
    ///             {
    ///                 "example.com",
    ///             },
    ///             Issuer = "https://example.okta.com",
    ///             JwksUri = "https://example.okta.com/oauth2/v1/keys",
    ///             TokenEndpoint = "https://example.okta.com/oauth2/v1/token",
    ///             UserinfoEndpoint = "https://example.okta.com/oauth2/v1/userinfo",
    ///             AuthorizationEndpoint = "https://example.okta.com/oauth2/v1/authorize",
    ///             Scopes = new[]
    ///             {
    ///                 "openid",
    ///                 "profile",
    ///                 "email",
    ///             },
    ///             SetUserRootAttributes = "on_first_login",
    ///             NonPersistentAttrs = new[]
    ///             {
    ///                 "ethnicity",
    ///                 "gender",
    ///             },
    ///             UpstreamParams = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///             {
    ///                 ["screen_name"] = new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["alias"] = "login_hint",
    ///                 },
    ///             }),
    ///             ConnectionSettings = new Auth0.Inputs.ConnectionOptionsConnectionSettingsArgs
    ///             {
    ///                 Pkce = "auto",
    ///             },
    ///             AttributeMap = new Auth0.Inputs.ConnectionOptionsAttributeMapArgs
    ///             {
    ///                 MappingMode = "basic_profile",
    ///                 UserinfoScope = "openid email profile groups",
    ///                 Attributes = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["name"] = "${context.tokenset.name}",
    ///                     ["email"] = "${context.tokenset.email}",
    ///                     ["email_verified"] = "${context.tokenset.email_verified}",
    ///                     ["nickname"] = "${context.tokenset.nickname}",
    ///                     ["picture"] = "${context.tokenset.picture}",
    ///                     ["given_name"] = "${context.tokenset.given_name}",
    ///                     ["family_name"] = "${context.tokenset.family_name}",
    ///                 }),
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// This resource can be imported by specifying the connection ID.
    /// 
    /// Example:
    /// 
    /// ```sh
    /// $ pulumi import auth0:index/connection:Connection google "con_a17f21fdb24d48a0"
    /// ```
    /// </summary>
    [Auth0ResourceType("auth0:index/connection:Connection")]
    public partial class Connection : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Name used in login screen.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// Indicates whether the connection is domain level.
        /// </summary>
        [Output("isDomainConnection")]
        public Output<bool> IsDomainConnection { get; private set; } = null!;

        /// <summary>
        /// Metadata associated with the connection, in the form of a map of string values (max 255 chars).
        /// </summary>
        [Output("metadata")]
        public Output<ImmutableDictionary<string, string>?> Metadata { get; private set; } = null!;

        /// <summary>
        /// Name of the connection.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Configuration settings for connection options.
        /// </summary>
        [Output("options")]
        public Output<Outputs.ConnectionOptions> Options { get; private set; } = null!;

        /// <summary>
        /// Defines the realms for which the connection will be used (e.g., email domains). If not specified, the connection name is added as the realm.
        /// </summary>
        [Output("realms")]
        public Output<ImmutableArray<string>> Realms { get; private set; } = null!;

        /// <summary>
        /// Display connection as a button. Only available on enterprise connections.
        /// </summary>
        [Output("showAsButton")]
        public Output<bool?> ShowAsButton { get; private set; } = null!;

        /// <summary>
        /// Type of the connection, which indicates the identity provider.
        /// </summary>
        [Output("strategy")]
        public Output<string> Strategy { get; private set; } = null!;


        /// <summary>
        /// Create a Connection resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Connection(string name, ConnectionArgs args, CustomResourceOptions? options = null)
            : base("auth0:index/connection:Connection", name, args ?? new ConnectionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Connection(string name, Input<string> id, ConnectionState? state = null, CustomResourceOptions? options = null)
            : base("auth0:index/connection:Connection", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Connection resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Connection Get(string name, Input<string> id, ConnectionState? state = null, CustomResourceOptions? options = null)
        {
            return new Connection(name, id, state, options);
        }
    }

    public sealed class ConnectionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name used in login screen.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Indicates whether the connection is domain level.
        /// </summary>
        [Input("isDomainConnection")]
        public Input<bool>? IsDomainConnection { get; set; }

        [Input("metadata")]
        private InputMap<string>? _metadata;

        /// <summary>
        /// Metadata associated with the connection, in the form of a map of string values (max 255 chars).
        /// </summary>
        public InputMap<string> Metadata
        {
            get => _metadata ?? (_metadata = new InputMap<string>());
            set => _metadata = value;
        }

        /// <summary>
        /// Name of the connection.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Configuration settings for connection options.
        /// </summary>
        [Input("options")]
        public Input<Inputs.ConnectionOptionsArgs>? Options { get; set; }

        [Input("realms")]
        private InputList<string>? _realms;

        /// <summary>
        /// Defines the realms for which the connection will be used (e.g., email domains). If not specified, the connection name is added as the realm.
        /// </summary>
        public InputList<string> Realms
        {
            get => _realms ?? (_realms = new InputList<string>());
            set => _realms = value;
        }

        /// <summary>
        /// Display connection as a button. Only available on enterprise connections.
        /// </summary>
        [Input("showAsButton")]
        public Input<bool>? ShowAsButton { get; set; }

        /// <summary>
        /// Type of the connection, which indicates the identity provider.
        /// </summary>
        [Input("strategy", required: true)]
        public Input<string> Strategy { get; set; } = null!;

        public ConnectionArgs()
        {
        }
        public static new ConnectionArgs Empty => new ConnectionArgs();
    }

    public sealed class ConnectionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name used in login screen.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Indicates whether the connection is domain level.
        /// </summary>
        [Input("isDomainConnection")]
        public Input<bool>? IsDomainConnection { get; set; }

        [Input("metadata")]
        private InputMap<string>? _metadata;

        /// <summary>
        /// Metadata associated with the connection, in the form of a map of string values (max 255 chars).
        /// </summary>
        public InputMap<string> Metadata
        {
            get => _metadata ?? (_metadata = new InputMap<string>());
            set => _metadata = value;
        }

        /// <summary>
        /// Name of the connection.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Configuration settings for connection options.
        /// </summary>
        [Input("options")]
        public Input<Inputs.ConnectionOptionsGetArgs>? Options { get; set; }

        [Input("realms")]
        private InputList<string>? _realms;

        /// <summary>
        /// Defines the realms for which the connection will be used (e.g., email domains). If not specified, the connection name is added as the realm.
        /// </summary>
        public InputList<string> Realms
        {
            get => _realms ?? (_realms = new InputList<string>());
            set => _realms = value;
        }

        /// <summary>
        /// Display connection as a button. Only available on enterprise connections.
        /// </summary>
        [Input("showAsButton")]
        public Input<bool>? ShowAsButton { get; set; }

        /// <summary>
        /// Type of the connection, which indicates the identity provider.
        /// </summary>
        [Input("strategy")]
        public Input<string>? Strategy { get; set; }

        public ConnectionState()
        {
        }
        public static new ConnectionState Empty => new ConnectionState();
    }
}
