// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Auth0
{
    public static class GetConnection
    {
        /// <summary>
        /// Data source to retrieve a specific Auth0 connection by `connection_id` or `name`.
        /// </summary>
        public static Task<GetConnectionResult> InvokeAsync(GetConnectionArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetConnectionResult>("auth0:index/getConnection:getConnection", args ?? new GetConnectionArgs(), options.WithDefaults());

        /// <summary>
        /// Data source to retrieve a specific Auth0 connection by `connection_id` or `name`.
        /// </summary>
        public static Output<GetConnectionResult> Invoke(GetConnectionInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetConnectionResult>("auth0:index/getConnection:getConnection", args ?? new GetConnectionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetConnectionArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the connection. If not provided, `name` must be set.
        /// </summary>
        [Input("connectionId")]
        public string? ConnectionId { get; set; }

        [Input("name")]
        public string? Name { get; set; }

        public GetConnectionArgs()
        {
        }
        public static new GetConnectionArgs Empty => new GetConnectionArgs();
    }

    public sealed class GetConnectionInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the connection. If not provided, `name` must be set.
        /// </summary>
        [Input("connectionId")]
        public Input<string>? ConnectionId { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        public GetConnectionInvokeArgs()
        {
        }
        public static new GetConnectionInvokeArgs Empty => new GetConnectionInvokeArgs();
    }


    [OutputType]
    public sealed class GetConnectionResult
    {
        /// <summary>
        /// The ID of the connection. If not provided, `name` must be set.
        /// </summary>
        public readonly string? ConnectionId;
        /// <summary>
        /// Name used in login screen.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// IDs of the clients for which the connection is enabled.
        /// </summary>
        public readonly ImmutableArray<string> EnabledClients;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Indicates whether the connection is domain level.
        /// </summary>
        public readonly bool IsDomainConnection;
        /// <summary>
        /// Metadata associated with the connection, in the form of a map of string values (max 255 chars).
        /// </summary>
        public readonly ImmutableDictionary<string, string> Metadata;
        /// <summary>
        /// The name of the connection. If not provided, `connection_id` must be set.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// Configuration settings for connection options.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetConnectionOptionResult> Options;
        /// <summary>
        /// Defines the realms for which the connection will be used (e.g., email domains). If not specified, the connection name is added as the realm.
        /// </summary>
        public readonly ImmutableArray<string> Realms;
        /// <summary>
        /// Display connection as a button. Only available on enterprise connections.
        /// </summary>
        public readonly bool ShowAsButton;
        /// <summary>
        /// Type of the connection, which indicates the identity provider.
        /// </summary>
        public readonly string Strategy;

        [OutputConstructor]
        private GetConnectionResult(
            string? connectionId,

            string displayName,

            ImmutableArray<string> enabledClients,

            string id,

            bool isDomainConnection,

            ImmutableDictionary<string, string> metadata,

            string? name,

            ImmutableArray<Outputs.GetConnectionOptionResult> options,

            ImmutableArray<string> realms,

            bool showAsButton,

            string strategy)
        {
            ConnectionId = connectionId;
            DisplayName = displayName;
            EnabledClients = enabledClients;
            Id = id;
            IsDomainConnection = isDomainConnection;
            Metadata = metadata;
            Name = name;
            Options = options;
            Realms = realms;
            ShowAsButton = showAsButton;
            Strategy = strategy;
        }
    }
}
