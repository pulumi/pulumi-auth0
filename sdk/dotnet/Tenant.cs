// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Auth0
{
    /// <summary>
    /// With this resource, you can manage Auth0 tenants, including setting logos and support contact information, setting error pages, and configuring default tenant behaviors.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.IO;
    /// using Pulumi;
    /// using Auth0 = Pulumi.Auth0;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var tenant = new Auth0.Tenant("tenant", new Auth0.TenantArgs
    ///         {
    ///             AllowedLogoutUrls = 
    ///             {
    ///                 "http://mysite/logout",
    ///             },
    ///             ChangePassword = new Auth0.Inputs.TenantChangePasswordArgs
    ///             {
    ///                 Enabled = true,
    ///                 Html = File.ReadAllText("./password_reset.html"),
    ///             },
    ///             DefaultAudience = "&lt;client_id&gt;",
    ///             DefaultDirectory = "Connection-Name",
    ///             ErrorPage = new Auth0.Inputs.TenantErrorPageArgs
    ///             {
    ///                 Html = File.ReadAllText("./error.html"),
    ///                 ShowLogLink = true,
    ///                 Url = "http://mysite/errors",
    ///             },
    ///             FriendlyName = "Tenant Name",
    ///             GuardianMfaPage = new Auth0.Inputs.TenantGuardianMfaPageArgs
    ///             {
    ///                 Enabled = true,
    ///                 Html = File.ReadAllText("./guardian_multifactor.html"),
    ///             },
    ///             PictureUrl = "http://mysite/logo.png",
    ///             SandboxVersion = "8",
    ///             SessionLifetime = 46000,
    ///             SupportEmail = "support@mysite",
    ///             SupportUrl = "http://mysite/support",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// </summary>
    public partial class Tenant : Pulumi.CustomResource
    {
        /// <summary>
        /// List(String). URLs that Auth0 may redirect to after logout.
        /// </summary>
        [Output("allowedLogoutUrls")]
        public Output<ImmutableArray<string>> AllowedLogoutUrls { get; private set; } = null!;

        /// <summary>
        /// List(Resource). Configuration settings for change passsword page. For details, see Change Password Page.
        /// </summary>
        [Output("changePassword")]
        public Output<Outputs.TenantChangePassword> ChangePassword { get; private set; } = null!;

        /// <summary>
        /// String. API Audience to use by default for API Authorization flows. This setting is equivalent to appending the audience to every authorization request made to the tenant for every application.
        /// </summary>
        [Output("defaultAudience")]
        public Output<string> DefaultAudience { get; private set; } = null!;

        /// <summary>
        /// String. Name of the connection to be used for Password Grant exchanges. Options include `auth0-adldap`, `ad`, `auth0`, `email`, `sms`, `waad`, and `adfs`.
        /// </summary>
        [Output("defaultDirectory")]
        public Output<string> DefaultDirectory { get; private set; } = null!;

        /// <summary>
        /// String. The default absolute redirection uri, must be https and cannot contain a fragment.
        /// </summary>
        [Output("defaultRedirectionUri")]
        public Output<string> DefaultRedirectionUri { get; private set; } = null!;

        [Output("enabledLocales")]
        public Output<ImmutableArray<string>> EnabledLocales { get; private set; } = null!;

        /// <summary>
        /// List(Resource). Configuration settings for error pages. For details, see Error Page.
        /// </summary>
        [Output("errorPage")]
        public Output<Outputs.TenantErrorPage> ErrorPage { get; private set; } = null!;

        /// <summary>
        /// List(Resource). Configuration settings for tenant flags. For details, see Flags.
        /// </summary>
        [Output("flags")]
        public Output<Outputs.TenantFlags> Flags { get; private set; } = null!;

        /// <summary>
        /// String. Friendly name for the tenant.
        /// </summary>
        [Output("friendlyName")]
        public Output<string> FriendlyName { get; private set; } = null!;

        /// <summary>
        /// List(Resource). Configuration settings for the Guardian MFA page. For details, see Guardian MFA Page.
        /// </summary>
        [Output("guardianMfaPage")]
        public Output<Outputs.TenantGuardianMfaPage> GuardianMfaPage { get; private set; } = null!;

        /// <summary>
        /// Integer. Number of hours during which a session can be inactive before the user must log in again.
        /// </summary>
        [Output("idleSessionLifetime")]
        public Output<int> IdleSessionLifetime { get; private set; } = null!;

        /// <summary>
        /// . String URL of logo to be shown for the tenant. Recommended size is 150px x 150px. If no URL is provided, the Auth0 logo will be used.
        /// </summary>
        [Output("pictureUrl")]
        public Output<string> PictureUrl { get; private set; } = null!;

        /// <summary>
        /// String. Selected sandbox version for the extensibility environment, which allows you to use custom scripts to extend parts of Auth0's functionality.
        /// </summary>
        [Output("sandboxVersion")]
        public Output<string> SandboxVersion { get; private set; } = null!;

        /// <summary>
        /// Integer. Number of hours during which a session will stay valid.
        /// </summary>
        [Output("sessionLifetime")]
        public Output<int> SessionLifetime { get; private set; } = null!;

        /// <summary>
        /// String. Support email address for authenticating users.
        /// </summary>
        [Output("supportEmail")]
        public Output<string> SupportEmail { get; private set; } = null!;

        /// <summary>
        /// String. Support URL for authenticating users.
        /// </summary>
        [Output("supportUrl")]
        public Output<string> SupportUrl { get; private set; } = null!;

        /// <summary>
        /// List(Resource). Configuration settings for Universal Login. For details, see Universal Login.
        /// </summary>
        [Output("universalLogin")]
        public Output<Outputs.TenantUniversalLogin> UniversalLogin { get; private set; } = null!;


        /// <summary>
        /// Create a Tenant resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Tenant(string name, TenantArgs? args = null, CustomResourceOptions? options = null)
            : base("auth0:index/tenant:Tenant", name, args ?? new TenantArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Tenant(string name, Input<string> id, TenantState? state = null, CustomResourceOptions? options = null)
            : base("auth0:index/tenant:Tenant", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Tenant resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Tenant Get(string name, Input<string> id, TenantState? state = null, CustomResourceOptions? options = null)
        {
            return new Tenant(name, id, state, options);
        }
    }

    public sealed class TenantArgs : Pulumi.ResourceArgs
    {
        [Input("allowedLogoutUrls")]
        private InputList<string>? _allowedLogoutUrls;

        /// <summary>
        /// List(String). URLs that Auth0 may redirect to after logout.
        /// </summary>
        public InputList<string> AllowedLogoutUrls
        {
            get => _allowedLogoutUrls ?? (_allowedLogoutUrls = new InputList<string>());
            set => _allowedLogoutUrls = value;
        }

        /// <summary>
        /// List(Resource). Configuration settings for change passsword page. For details, see Change Password Page.
        /// </summary>
        [Input("changePassword")]
        public Input<Inputs.TenantChangePasswordArgs>? ChangePassword { get; set; }

        /// <summary>
        /// String. API Audience to use by default for API Authorization flows. This setting is equivalent to appending the audience to every authorization request made to the tenant for every application.
        /// </summary>
        [Input("defaultAudience")]
        public Input<string>? DefaultAudience { get; set; }

        /// <summary>
        /// String. Name of the connection to be used for Password Grant exchanges. Options include `auth0-adldap`, `ad`, `auth0`, `email`, `sms`, `waad`, and `adfs`.
        /// </summary>
        [Input("defaultDirectory")]
        public Input<string>? DefaultDirectory { get; set; }

        /// <summary>
        /// String. The default absolute redirection uri, must be https and cannot contain a fragment.
        /// </summary>
        [Input("defaultRedirectionUri")]
        public Input<string>? DefaultRedirectionUri { get; set; }

        [Input("enabledLocales")]
        private InputList<string>? _enabledLocales;
        public InputList<string> EnabledLocales
        {
            get => _enabledLocales ?? (_enabledLocales = new InputList<string>());
            set => _enabledLocales = value;
        }

        /// <summary>
        /// List(Resource). Configuration settings for error pages. For details, see Error Page.
        /// </summary>
        [Input("errorPage")]
        public Input<Inputs.TenantErrorPageArgs>? ErrorPage { get; set; }

        /// <summary>
        /// List(Resource). Configuration settings for tenant flags. For details, see Flags.
        /// </summary>
        [Input("flags")]
        public Input<Inputs.TenantFlagsArgs>? Flags { get; set; }

        /// <summary>
        /// String. Friendly name for the tenant.
        /// </summary>
        [Input("friendlyName")]
        public Input<string>? FriendlyName { get; set; }

        /// <summary>
        /// List(Resource). Configuration settings for the Guardian MFA page. For details, see Guardian MFA Page.
        /// </summary>
        [Input("guardianMfaPage")]
        public Input<Inputs.TenantGuardianMfaPageArgs>? GuardianMfaPage { get; set; }

        /// <summary>
        /// Integer. Number of hours during which a session can be inactive before the user must log in again.
        /// </summary>
        [Input("idleSessionLifetime")]
        public Input<int>? IdleSessionLifetime { get; set; }

        /// <summary>
        /// . String URL of logo to be shown for the tenant. Recommended size is 150px x 150px. If no URL is provided, the Auth0 logo will be used.
        /// </summary>
        [Input("pictureUrl")]
        public Input<string>? PictureUrl { get; set; }

        /// <summary>
        /// String. Selected sandbox version for the extensibility environment, which allows you to use custom scripts to extend parts of Auth0's functionality.
        /// </summary>
        [Input("sandboxVersion")]
        public Input<string>? SandboxVersion { get; set; }

        /// <summary>
        /// Integer. Number of hours during which a session will stay valid.
        /// </summary>
        [Input("sessionLifetime")]
        public Input<int>? SessionLifetime { get; set; }

        /// <summary>
        /// String. Support email address for authenticating users.
        /// </summary>
        [Input("supportEmail")]
        public Input<string>? SupportEmail { get; set; }

        /// <summary>
        /// String. Support URL for authenticating users.
        /// </summary>
        [Input("supportUrl")]
        public Input<string>? SupportUrl { get; set; }

        /// <summary>
        /// List(Resource). Configuration settings for Universal Login. For details, see Universal Login.
        /// </summary>
        [Input("universalLogin")]
        public Input<Inputs.TenantUniversalLoginArgs>? UniversalLogin { get; set; }

        public TenantArgs()
        {
        }
    }

    public sealed class TenantState : Pulumi.ResourceArgs
    {
        [Input("allowedLogoutUrls")]
        private InputList<string>? _allowedLogoutUrls;

        /// <summary>
        /// List(String). URLs that Auth0 may redirect to after logout.
        /// </summary>
        public InputList<string> AllowedLogoutUrls
        {
            get => _allowedLogoutUrls ?? (_allowedLogoutUrls = new InputList<string>());
            set => _allowedLogoutUrls = value;
        }

        /// <summary>
        /// List(Resource). Configuration settings for change passsword page. For details, see Change Password Page.
        /// </summary>
        [Input("changePassword")]
        public Input<Inputs.TenantChangePasswordGetArgs>? ChangePassword { get; set; }

        /// <summary>
        /// String. API Audience to use by default for API Authorization flows. This setting is equivalent to appending the audience to every authorization request made to the tenant for every application.
        /// </summary>
        [Input("defaultAudience")]
        public Input<string>? DefaultAudience { get; set; }

        /// <summary>
        /// String. Name of the connection to be used for Password Grant exchanges. Options include `auth0-adldap`, `ad`, `auth0`, `email`, `sms`, `waad`, and `adfs`.
        /// </summary>
        [Input("defaultDirectory")]
        public Input<string>? DefaultDirectory { get; set; }

        /// <summary>
        /// String. The default absolute redirection uri, must be https and cannot contain a fragment.
        /// </summary>
        [Input("defaultRedirectionUri")]
        public Input<string>? DefaultRedirectionUri { get; set; }

        [Input("enabledLocales")]
        private InputList<string>? _enabledLocales;
        public InputList<string> EnabledLocales
        {
            get => _enabledLocales ?? (_enabledLocales = new InputList<string>());
            set => _enabledLocales = value;
        }

        /// <summary>
        /// List(Resource). Configuration settings for error pages. For details, see Error Page.
        /// </summary>
        [Input("errorPage")]
        public Input<Inputs.TenantErrorPageGetArgs>? ErrorPage { get; set; }

        /// <summary>
        /// List(Resource). Configuration settings for tenant flags. For details, see Flags.
        /// </summary>
        [Input("flags")]
        public Input<Inputs.TenantFlagsGetArgs>? Flags { get; set; }

        /// <summary>
        /// String. Friendly name for the tenant.
        /// </summary>
        [Input("friendlyName")]
        public Input<string>? FriendlyName { get; set; }

        /// <summary>
        /// List(Resource). Configuration settings for the Guardian MFA page. For details, see Guardian MFA Page.
        /// </summary>
        [Input("guardianMfaPage")]
        public Input<Inputs.TenantGuardianMfaPageGetArgs>? GuardianMfaPage { get; set; }

        /// <summary>
        /// Integer. Number of hours during which a session can be inactive before the user must log in again.
        /// </summary>
        [Input("idleSessionLifetime")]
        public Input<int>? IdleSessionLifetime { get; set; }

        /// <summary>
        /// . String URL of logo to be shown for the tenant. Recommended size is 150px x 150px. If no URL is provided, the Auth0 logo will be used.
        /// </summary>
        [Input("pictureUrl")]
        public Input<string>? PictureUrl { get; set; }

        /// <summary>
        /// String. Selected sandbox version for the extensibility environment, which allows you to use custom scripts to extend parts of Auth0's functionality.
        /// </summary>
        [Input("sandboxVersion")]
        public Input<string>? SandboxVersion { get; set; }

        /// <summary>
        /// Integer. Number of hours during which a session will stay valid.
        /// </summary>
        [Input("sessionLifetime")]
        public Input<int>? SessionLifetime { get; set; }

        /// <summary>
        /// String. Support email address for authenticating users.
        /// </summary>
        [Input("supportEmail")]
        public Input<string>? SupportEmail { get; set; }

        /// <summary>
        /// String. Support URL for authenticating users.
        /// </summary>
        [Input("supportUrl")]
        public Input<string>? SupportUrl { get; set; }

        /// <summary>
        /// List(Resource). Configuration settings for Universal Login. For details, see Universal Login.
        /// </summary>
        [Input("universalLogin")]
        public Input<Inputs.TenantUniversalLoginGetArgs>? UniversalLogin { get; set; }

        public TenantState()
        {
        }
    }
}
