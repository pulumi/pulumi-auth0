// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Auth0.Inputs
{

    public sealed class ClientCredentialsPrivateKeyJwtCredentialGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Algorithm which will be used with the credential. Can be one of `RS256`, `RS384`, `PS256`. If not specified, `RS256` will be used.
        /// </summary>
        [Input("algorithm")]
        public Input<string>? Algorithm { get; set; }

        /// <summary>
        /// The ISO 8601 formatted date the credential was created.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// Credential type. Supported types: `public_key`.
        /// </summary>
        [Input("credentialType", required: true)]
        public Input<string> CredentialType { get; set; } = null!;

        /// <summary>
        /// The ISO 8601 formatted date representing the expiration of the credential. It is not possible to set this to never expire after it has been set. Recreate the certificate if needed.
        /// </summary>
        [Input("expiresAt")]
        public Input<string>? ExpiresAt { get; set; }

        /// <summary>
        /// The ID of the client credential.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// The key identifier of the credential, generated on creation.
        /// </summary>
        [Input("keyId")]
        public Input<string>? KeyId { get; set; }

        /// <summary>
        /// Friendly name for a credential.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Parse expiry from x509 certificate. If true, attempts to parse the expiry date from the provided PEM. If also the `expires_at` is set the credential expiry will be set to the explicit `expires_at` value.
        /// </summary>
        [Input("parseExpiryFromCert")]
        public Input<bool>? ParseExpiryFromCert { get; set; }

        /// <summary>
        /// PEM-formatted public key (SPKI and PKCS1) or X509 certificate. Must be JSON escaped.
        /// </summary>
        [Input("pem", required: true)]
        public Input<string> Pem { get; set; } = null!;

        /// <summary>
        /// The ISO 8601 formatted date the credential was updated.
        /// </summary>
        [Input("updatedAt")]
        public Input<string>? UpdatedAt { get; set; }

        public ClientCredentialsPrivateKeyJwtCredentialGetArgs()
        {
        }
        public static new ClientCredentialsPrivateKeyJwtCredentialGetArgs Empty => new ClientCredentialsPrivateKeyJwtCredentialGetArgs();
    }
}
