// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Auth0.Inputs
{

    public sealed class ClientAddonsAzureBlobArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Your Azure storage account name. Usually first segment in your Azure storage URL, for example `https://acme-org.blob.core.windows.net` would be the account name `acme-org`.
        /// </summary>
        [Input("accountName")]
        public Input<string>? AccountName { get; set; }

        /// <summary>
        /// Indicates if the issued token has permission to delete the blob.
        /// </summary>
        [Input("blobDelete")]
        public Input<bool>? BlobDelete { get; set; }

        /// <summary>
        /// Entity to request a token for, such as `my-blob`. If blank the computed SAS will apply to the entire storage container.
        /// </summary>
        [Input("blobName")]
        public Input<string>? BlobName { get; set; }

        /// <summary>
        /// Indicates if the issued token has permission to read the content, properties, metadata and block list. Use the blob as the source of a copy operation.
        /// </summary>
        [Input("blobRead")]
        public Input<bool>? BlobRead { get; set; }

        /// <summary>
        /// Indicates if the issued token has permission to create or write content, properties, metadata, or block list. Snapshot or lease the blob. Resize the blob (page blob only). Use the blob as the destination of a copy operation within the same account.
        /// </summary>
        [Input("blobWrite")]
        public Input<bool>? BlobWrite { get; set; }

        /// <summary>
        /// Indicates if issued token has permission to delete any blob in the container.
        /// </summary>
        [Input("containerDelete")]
        public Input<bool>? ContainerDelete { get; set; }

        /// <summary>
        /// Indicates if the issued token has permission to list blobs in the container.
        /// </summary>
        [Input("containerList")]
        public Input<bool>? ContainerList { get; set; }

        /// <summary>
        /// Container to request a token for, such as `my-container`.
        /// </summary>
        [Input("containerName")]
        public Input<string>? ContainerName { get; set; }

        /// <summary>
        /// Indicates if the issued token has permission to read the content, properties, metadata or block list of any blob in the container. Use any blob in the container as the source of a copy operation.
        /// </summary>
        [Input("containerRead")]
        public Input<bool>? ContainerRead { get; set; }

        /// <summary>
        /// Indicates that for any blob in the container if the issued token has permission to create or write content, properties, metadata, or block list. Snapshot or lease the blob. Resize the blob (page blob only). Use the blob as the destination of a copy operation within the same account.
        /// </summary>
        [Input("containerWrite")]
        public Input<bool>? ContainerWrite { get; set; }

        /// <summary>
        /// Expiration in minutes for the generated token (default of 5 minutes).
        /// </summary>
        [Input("expiration")]
        public Input<int>? Expiration { get; set; }

        /// <summary>
        /// Shared access policy identifier defined in your storage account resource.
        /// </summary>
        [Input("signedIdentifier")]
        public Input<string>? SignedIdentifier { get; set; }

        [Input("storageAccessKey")]
        private Input<string>? _storageAccessKey;

        /// <summary>
        /// Access key associated with this storage account.
        /// </summary>
        public Input<string>? StorageAccessKey
        {
            get => _storageAccessKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _storageAccessKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public ClientAddonsAzureBlobArgs()
        {
        }
        public static new ClientAddonsAzureBlobArgs Empty => new ClientAddonsAzureBlobArgs();
    }
}
