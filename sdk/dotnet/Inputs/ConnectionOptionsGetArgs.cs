// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Auth0.Inputs
{

    public sealed class ConnectionOptionsGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// String. ADFS Metadata source.
        /// </summary>
        [Input("adfsServer")]
        public Input<string>? AdfsServer { get; set; }

        [Input("allowedAudiences")]
        private InputList<string>? _allowedAudiences;
        public InputList<string> AllowedAudiences
        {
            get => _allowedAudiences ?? (_allowedAudiences = new InputList<string>());
            set => _allowedAudiences = value;
        }

        /// <summary>
        /// Boolean.
        /// </summary>
        [Input("apiEnableUsers")]
        public Input<bool>? ApiEnableUsers { get; set; }

        /// <summary>
        /// String. Azure AD domain name.
        /// </summary>
        [Input("appDomain")]
        public Input<string>? AppDomain { get; set; }

        /// <summary>
        /// String
        /// </summary>
        [Input("appId")]
        public Input<string>? AppId { get; set; }

        /// <summary>
        /// String.
        /// </summary>
        [Input("authorizationEndpoint")]
        public Input<string>? AuthorizationEndpoint { get; set; }

        /// <summary>
        /// Boolean. Indicates whether or not to enable brute force protection, which will limit the number of signups and failed logins from a suspicious IP address.
        /// </summary>
        [Input("bruteForceProtection")]
        public Input<bool>? BruteForceProtection { get; set; }

        /// <summary>
        /// String. Client ID given by your OIDC provider.
        /// </summary>
        [Input("clientId")]
        public Input<string>? ClientId { get; set; }

        /// <summary>
        /// String, Case-sensitive. Client secret given by your OIDC provider.
        /// </summary>
        [Input("clientSecret")]
        public Input<string>? ClientSecret { get; set; }

        /// <summary>
        /// String.
        /// </summary>
        [Input("communityBaseUrl")]
        public Input<string>? CommunityBaseUrl { get; set; }

        [Input("configuration")]
        private InputMap<string>? _configuration;

        /// <summary>
        /// Map(String), Case-sensitive.
        /// </summary>
        public InputMap<string> Configuration
        {
            get => _configuration ?? (_configuration = new InputMap<string>());
            set => _configuration = value;
        }

        [Input("customScripts")]
        private InputMap<string>? _customScripts;

        /// <summary>
        /// Map(String).
        /// </summary>
        public InputMap<string> CustomScripts
        {
            get => _customScripts ?? (_customScripts = new InputMap<string>());
            set => _customScripts = value;
        }

        [Input("disableCache")]
        public Input<bool>? DisableCache { get; set; }

        /// <summary>
        /// Boolean. Indicates whether or not to allow user sign-ups to your application.
        /// </summary>
        [Input("disableSignup")]
        public Input<bool>? DisableSignup { get; set; }

        /// <summary>
        /// String. Usually an URL ending with `/.well-known/openid-configuration`
        /// </summary>
        [Input("discoveryUrl")]
        public Input<string>? DiscoveryUrl { get; set; }

        [Input("domain")]
        public Input<string>? Domain { get; set; }

        [Input("domainAliases")]
        private InputList<string>? _domainAliases;

        /// <summary>
        /// List(String). List of the domains that can be authenticated using the Identity Provider. Only needed for Identifier First authentication flows.
        /// </summary>
        public InputList<string> DomainAliases
        {
            get => _domainAliases ?? (_domainAliases = new InputList<string>());
            set => _domainAliases = value;
        }

        /// <summary>
        /// Boolean.
        /// </summary>
        [Input("enabledDatabaseCustomization")]
        public Input<bool>? EnabledDatabaseCustomization { get; set; }

        /// <summary>
        /// String. SMS number for the sender. Used when SMS Source is From.
        /// </summary>
        [Input("from")]
        public Input<string>? From { get; set; }

        [Input("iconUrl")]
        public Input<string>? IconUrl { get; set; }

        [Input("identityApi")]
        public Input<string>? IdentityApi { get; set; }

        /// <summary>
        /// Boolean. Indicates whether or not you have a legacy user store and want to gradually migrate those users to the Auth0 user store. [Learn more](https://auth0.com/docs/users/guides/configure-automatic-migration).
        /// </summary>
        [Input("importMode")]
        public Input<bool>? ImportMode { get; set; }

        [Input("ips")]
        private InputList<string>? _ips;
        public InputList<string> Ips
        {
            get => _ips ?? (_ips = new InputList<string>());
            set => _ips = value;
        }

        /// <summary>
        /// String. URL of the issuer.
        /// </summary>
        [Input("issuer")]
        public Input<string>? Issuer { get; set; }

        /// <summary>
        /// String.
        /// </summary>
        [Input("jwksUri")]
        public Input<string>? JwksUri { get; set; }

        [Input("keyId")]
        public Input<string>? KeyId { get; set; }

        /// <summary>
        /// String. Maximum number of groups to retrieve.
        /// </summary>
        [Input("maxGroupsToRetrieve")]
        public Input<string>? MaxGroupsToRetrieve { get; set; }

        /// <summary>
        /// String. SID for Copilot. Used when SMS Source is Copilot.
        /// </summary>
        [Input("messagingServiceSid")]
        public Input<string>? MessagingServiceSid { get; set; }

        /// <summary>
        /// String.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// List(Resource). Configuration settings for password complexity. For details, see Password Complexity Options.
        /// </summary>
        [Input("passwordComplexityOptions")]
        public Input<Inputs.ConnectionOptionsPasswordComplexityOptionsGetArgs>? PasswordComplexityOptions { get; set; }

        /// <summary>
        /// List(Resource). Configuration settings for the password dictionary check, which does not allow passwords that are part of the password dictionary. For details, see Password Dictionary.
        /// </summary>
        [Input("passwordDictionary")]
        public Input<Inputs.ConnectionOptionsPasswordDictionaryGetArgs>? PasswordDictionary { get; set; }

        [Input("passwordHistories")]
        private InputList<Inputs.ConnectionOptionsPasswordHistoryGetArgs>? _passwordHistories;

        /// <summary>
        /// List(Resource). Configuration settings for the password history that is maintained for each user to prevent the reuse of passwords. For details, see Password History.
        /// </summary>
        public InputList<Inputs.ConnectionOptionsPasswordHistoryGetArgs> PasswordHistories
        {
            get => _passwordHistories ?? (_passwordHistories = new InputList<Inputs.ConnectionOptionsPasswordHistoryGetArgs>());
            set => _passwordHistories = value;
        }

        /// <summary>
        /// List(Resource). Configuration settings for the password personal info check, which does not allow passwords that contain any part of the user's personal data, including user's name, username, nickname, user_metadata.name, user_metadata.first, user_metadata.last, user's email, or first part of the user's email. For details, see Password No Personal Info.
        /// </summary>
        [Input("passwordNoPersonalInfo")]
        public Input<Inputs.ConnectionOptionsPasswordNoPersonalInfoGetArgs>? PasswordNoPersonalInfo { get; set; }

        /// <summary>
        /// String. Indicates level of password strength to enforce during authentication. A strong password policy will make it difficult, if not improbable, for someone to guess a password through either manual or automated means. Options include `none`, `low`, `fair`, `good`, `excellent`.
        /// </summary>
        [Input("passwordPolicy")]
        public Input<string>? PasswordPolicy { get; set; }

        /// <summary>
        /// Boolean. Indicates whether or not the user is required to provide a username in addition to an email address.
        /// </summary>
        [Input("requiresUsername")]
        public Input<bool>? RequiresUsername { get; set; }

        [Input("scopes")]
        private InputList<string>? _scopes;

        /// <summary>
        /// List(String). Value must be a list of scopes. For example `["openid", "profile", "email"]`
        /// </summary>
        public InputList<string> Scopes
        {
            get => _scopes ?? (_scopes = new InputList<string>());
            set => _scopes = value;
        }

        /// <summary>
        /// Int. Version 1 is deprecated, use version 2.
        /// </summary>
        [Input("strategyVersion")]
        public Input<int>? StrategyVersion { get; set; }

        [Input("subject")]
        public Input<string>? Subject { get; set; }

        /// <summary>
        /// String. Syntax of the SMS. Options include `markdown` and `liquid`.
        /// </summary>
        [Input("syntax")]
        public Input<string>? Syntax { get; set; }

        [Input("teamId")]
        public Input<string>? TeamId { get; set; }

        /// <summary>
        /// String. Template for the SMS. You can use `@@password@@` as a placeholder for the password value.
        /// </summary>
        [Input("template")]
        public Input<string>? Template { get; set; }

        /// <summary>
        /// String
        /// </summary>
        [Input("tenantDomain")]
        public Input<string>? TenantDomain { get; set; }

        /// <summary>
        /// String.
        /// </summary>
        [Input("tokenEndpoint")]
        public Input<string>? TokenEndpoint { get; set; }

        /// <summary>
        /// Map(Resource). Configuration options for one-time passwords. For details, see TOTP.
        /// </summary>
        [Input("totp")]
        public Input<Inputs.ConnectionOptionsTotpGetArgs>? Totp { get; set; }

        /// <summary>
        /// String. SID for your Twilio account.
        /// </summary>
        [Input("twilioSid")]
        public Input<string>? TwilioSid { get; set; }

        /// <summary>
        /// String, Case-sensitive. AuthToken for your Twilio account.
        /// </summary>
        [Input("twilioToken")]
        public Input<string>? TwilioToken { get; set; }

        /// <summary>
        /// String. Value must be `back_channel` or `front_channel`
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        [Input("useCertAuth")]
        public Input<bool>? UseCertAuth { get; set; }

        [Input("useKerberos")]
        public Input<bool>? UseKerberos { get; set; }

        /// <summary>
        /// Bool
        /// </summary>
        [Input("useWsfed")]
        public Input<bool>? UseWsfed { get; set; }

        /// <summary>
        /// String.
        /// </summary>
        [Input("userinfoEndpoint")]
        public Input<string>? UserinfoEndpoint { get; set; }

        [Input("validation")]
        private InputMap<string>? _validation;

        /// <summary>
        /// String.
        /// </summary>
        public InputMap<string> Validation
        {
            get => _validation ?? (_validation = new InputMap<string>());
            set => _validation = value;
        }

        /// <summary>
        /// Boolean. Indicates whether or not to use the common endpoint rather than the default endpoint. Typically enabled if you're using this for a multi-tenant application in Azure AD.
        /// </summary>
        [Input("waadCommonEndpoint")]
        public Input<bool>? WaadCommonEndpoint { get; set; }

        /// <summary>
        /// String
        /// </summary>
        [Input("waadProtocol")]
        public Input<string>? WaadProtocol { get; set; }

        public ConnectionOptionsGetArgs()
        {
        }
    }
}
