// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Auth0.Inputs
{

    public sealed class AttackProtectionBreachedPasswordDetectionGetArgs : global::Pulumi.ResourceArgs
    {
        [Input("adminNotificationFrequencies")]
        private InputList<string>? _adminNotificationFrequencies;

        /// <summary>
        /// When `admin_notification` is enabled within the `shields` property, determines how often email notifications are sent. Possible values: `immediately`, `daily`, `weekly`, `monthly`.
        /// </summary>
        public InputList<string> AdminNotificationFrequencies
        {
            get => _adminNotificationFrequencies ?? (_adminNotificationFrequencies = new InputList<string>());
            set => _adminNotificationFrequencies = value;
        }

        /// <summary>
        /// Whether breached password detection is active.
        /// </summary>
        [Input("enabled", required: true)]
        public Input<bool> Enabled { get; set; } = null!;

        /// <summary>
        /// The subscription level for breached password detection methods. Use "enhanced" to enable Credential Guard. Possible values: `standard`, `enhanced`.
        /// </summary>
        [Input("method")]
        public Input<string>? Method { get; set; }

        /// <summary>
        /// Configuration options that apply before every user registration attempt. Only available on public tenants.
        /// </summary>
        [Input("preUserRegistration")]
        public Input<Inputs.AttackProtectionBreachedPasswordDetectionPreUserRegistrationGetArgs>? PreUserRegistration { get; set; }

        [Input("shields")]
        private InputList<string>? _shields;

        /// <summary>
        /// Action to take when a breached password is detected. Options include: `block` (block compromised user accounts), `user_notification` (send an email to user when we detect that they are using compromised credentials) and `admin_notification` (send an email with a summary of the number of accounts logging in with compromised credentials).
        /// </summary>
        public InputList<string> Shields
        {
            get => _shields ?? (_shields = new InputList<string>());
            set => _shields = value;
        }

        public AttackProtectionBreachedPasswordDetectionGetArgs()
        {
        }
        public static new AttackProtectionBreachedPasswordDetectionGetArgs Empty => new AttackProtectionBreachedPasswordDetectionGetArgs();
    }
}
