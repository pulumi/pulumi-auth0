// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Auth0.Inputs
{

    public sealed class NetworkAclRuleNotMatchArgs : global::Pulumi.ResourceArgs
    {
        [Input("asns")]
        private InputList<int>? _asns;

        /// <summary>
        /// ASNs. Must contain between 1 and 10 unique items.
        /// </summary>
        public InputList<int> Asns
        {
            get => _asns ?? (_asns = new InputList<int>());
            set => _asns = value;
        }

        [Input("geoCountryCodes")]
        private InputList<string>? _geoCountryCodes;

        /// <summary>
        /// Geo Country Codes. Must contain between 1 and 10 unique items.
        /// </summary>
        public InputList<string> GeoCountryCodes
        {
            get => _geoCountryCodes ?? (_geoCountryCodes = new InputList<string>());
            set => _geoCountryCodes = value;
        }

        [Input("geoSubdivisionCodes")]
        private InputList<string>? _geoSubdivisionCodes;

        /// <summary>
        /// Geo Subdivision Codes. Must contain between 1 and 10 unique items.
        /// </summary>
        public InputList<string> GeoSubdivisionCodes
        {
            get => _geoSubdivisionCodes ?? (_geoSubdivisionCodes = new InputList<string>());
            set => _geoSubdivisionCodes = value;
        }

        [Input("ipv4Cidrs")]
        private InputList<string>? _ipv4Cidrs;

        /// <summary>
        /// IPv4 CIDRs. Must contain between 1 and 10 unique items. Can be IPv4 addresses or CIDR blocks.
        /// </summary>
        public InputList<string> Ipv4Cidrs
        {
            get => _ipv4Cidrs ?? (_ipv4Cidrs = new InputList<string>());
            set => _ipv4Cidrs = value;
        }

        [Input("ipv6Cidrs")]
        private InputList<string>? _ipv6Cidrs;

        /// <summary>
        /// IPv6 CIDRs. Must contain between 1 and 10 unique items. Can be IPv6 addresses or CIDR blocks.
        /// </summary>
        public InputList<string> Ipv6Cidrs
        {
            get => _ipv6Cidrs ?? (_ipv6Cidrs = new InputList<string>());
            set => _ipv6Cidrs = value;
        }

        [Input("ja3Fingerprints")]
        private InputList<string>? _ja3Fingerprints;

        /// <summary>
        /// JA3 Fingerprints. Must contain between 1 and 10 unique items.
        /// </summary>
        public InputList<string> Ja3Fingerprints
        {
            get => _ja3Fingerprints ?? (_ja3Fingerprints = new InputList<string>());
            set => _ja3Fingerprints = value;
        }

        [Input("ja4Fingerprints")]
        private InputList<string>? _ja4Fingerprints;

        /// <summary>
        /// JA4 Fingerprints. Must contain between 1 and 10 unique items.
        /// </summary>
        public InputList<string> Ja4Fingerprints
        {
            get => _ja4Fingerprints ?? (_ja4Fingerprints = new InputList<string>());
            set => _ja4Fingerprints = value;
        }

        [Input("userAgents")]
        private InputList<string>? _userAgents;

        /// <summary>
        /// User Agents. Must contain between 1 and 10 unique items.
        /// </summary>
        public InputList<string> UserAgents
        {
            get => _userAgents ?? (_userAgents = new InputList<string>());
            set => _userAgents = value;
        }

        public NetworkAclRuleNotMatchArgs()
        {
        }
        public static new NetworkAclRuleNotMatchArgs Empty => new NetworkAclRuleNotMatchArgs();
    }
}
