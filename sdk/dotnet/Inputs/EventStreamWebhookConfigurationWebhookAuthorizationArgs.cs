// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Auth0.Inputs
{

    public sealed class EventStreamWebhookConfigurationWebhookAuthorizationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The authorization method used to secure the webhook endpoint. Can be either `Basic` or `Bearer`.
        /// </summary>
        [Input("method", required: true)]
        public Input<string> Method { get; set; } = null!;

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// The password for `Basic` authentication. Required when `Method` is set to `Basic`.
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("token")]
        private Input<string>? _token;

        /// <summary>
        /// The token used for `Bearer` authentication. Required when `Method` is set to `Bearer`.
        /// </summary>
        public Input<string>? Token
        {
            get => _token;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _token = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The username for `Basic` authentication. Required when `Method` is set to `Basic`.
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        public EventStreamWebhookConfigurationWebhookAuthorizationArgs()
        {
        }
        public static new EventStreamWebhookConfigurationWebhookAuthorizationArgs Empty => new EventStreamWebhookConfigurationWebhookAuthorizationArgs();
    }
}
