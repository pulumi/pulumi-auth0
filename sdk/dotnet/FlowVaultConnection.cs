// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Auth0
{
    /// <summary>
    /// With this resource, you can create and manage flow vault connections for a tenant.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Auth0 = Pulumi.Auth0;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Example:
    ///     var myConnection = new Auth0.FlowVaultConnection("my_connection", new()
    ///     {
    ///         AppId = "AUTH0",
    ///         Name = "Auth0 M2M Connection",
    ///         Setup = 
    ///         {
    ///             { "client_id", "******************" },
    ///             { "client_secret", "*********************************" },
    ///             { "domain", "*****************************" },
    ///             { "type", "OAUTH_APP" },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// This resource can be imported using the flow vault connection ID.
    /// 
    /// Example:
    /// 
    /// ```sh
    /// $ pulumi import auth0:index/flowVaultConnection:FlowVaultConnection my_connection "ac_42HT5oiobDyUs8ASwEEWK0"
    /// ```
    /// </summary>
    [Auth0ResourceType("auth0:index/flowVaultConnection:FlowVaultConnection")]
    public partial class FlowVaultConnection : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Custom account name of the vault connection.
        /// </summary>
        [Output("accountName")]
        public Output<string?> AccountName { get; private set; } = null!;

        /// <summary>
        /// App identifier of the vault connection.
        /// </summary>
        [Output("appId")]
        public Output<string> AppId { get; private set; } = null!;

        /// <summary>
        /// Environment of the vault connection.
        /// </summary>
        [Output("environment")]
        public Output<string?> Environment { get; private set; } = null!;

        /// <summary>
        /// Fingerprint of the vault connection.
        /// </summary>
        [Output("fingerprint")]
        public Output<string> Fingerprint { get; private set; } = null!;

        /// <summary>
        /// Name of the vault connection.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Indicates if the vault connection is configured.
        /// </summary>
        [Output("ready")]
        public Output<bool> Ready { get; private set; } = null!;

        /// <summary>
        /// Configuration of the vault connection. (Mapping information must be provided as key/value pairs)
        /// </summary>
        [Output("setup")]
        public Output<ImmutableDictionary<string, string>?> Setup { get; private set; } = null!;


        /// <summary>
        /// Create a FlowVaultConnection resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public FlowVaultConnection(string name, FlowVaultConnectionArgs args, CustomResourceOptions? options = null)
            : base("auth0:index/flowVaultConnection:FlowVaultConnection", name, args ?? new FlowVaultConnectionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private FlowVaultConnection(string name, Input<string> id, FlowVaultConnectionState? state = null, CustomResourceOptions? options = null)
            : base("auth0:index/flowVaultConnection:FlowVaultConnection", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "setup",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing FlowVaultConnection resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static FlowVaultConnection Get(string name, Input<string> id, FlowVaultConnectionState? state = null, CustomResourceOptions? options = null)
        {
            return new FlowVaultConnection(name, id, state, options);
        }
    }

    public sealed class FlowVaultConnectionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Custom account name of the vault connection.
        /// </summary>
        [Input("accountName")]
        public Input<string>? AccountName { get; set; }

        /// <summary>
        /// App identifier of the vault connection.
        /// </summary>
        [Input("appId", required: true)]
        public Input<string> AppId { get; set; } = null!;

        /// <summary>
        /// Environment of the vault connection.
        /// </summary>
        [Input("environment")]
        public Input<string>? Environment { get; set; }

        /// <summary>
        /// Fingerprint of the vault connection.
        /// </summary>
        [Input("fingerprint")]
        public Input<string>? Fingerprint { get; set; }

        /// <summary>
        /// Name of the vault connection.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("setup")]
        private InputMap<string>? _setup;

        /// <summary>
        /// Configuration of the vault connection. (Mapping information must be provided as key/value pairs)
        /// </summary>
        public InputMap<string> Setup
        {
            get => _setup ?? (_setup = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _setup = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        public FlowVaultConnectionArgs()
        {
        }
        public static new FlowVaultConnectionArgs Empty => new FlowVaultConnectionArgs();
    }

    public sealed class FlowVaultConnectionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Custom account name of the vault connection.
        /// </summary>
        [Input("accountName")]
        public Input<string>? AccountName { get; set; }

        /// <summary>
        /// App identifier of the vault connection.
        /// </summary>
        [Input("appId")]
        public Input<string>? AppId { get; set; }

        /// <summary>
        /// Environment of the vault connection.
        /// </summary>
        [Input("environment")]
        public Input<string>? Environment { get; set; }

        /// <summary>
        /// Fingerprint of the vault connection.
        /// </summary>
        [Input("fingerprint")]
        public Input<string>? Fingerprint { get; set; }

        /// <summary>
        /// Name of the vault connection.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Indicates if the vault connection is configured.
        /// </summary>
        [Input("ready")]
        public Input<bool>? Ready { get; set; }

        [Input("setup")]
        private InputMap<string>? _setup;

        /// <summary>
        /// Configuration of the vault connection. (Mapping information must be provided as key/value pairs)
        /// </summary>
        public InputMap<string> Setup
        {
            get => _setup ?? (_setup = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _setup = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        public FlowVaultConnectionState()
        {
        }
        public static new FlowVaultConnectionState Empty => new FlowVaultConnectionState();
    }
}
