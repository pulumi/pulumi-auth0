// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Auth0
{
    /// <summary>
    /// With this resource, you can manage scopes (permissions) associated with a resource server (API).
    /// 
    /// !&gt; To prevent issues, avoid using this resource together with the `auth0.ResourceServerScope` resource.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Auth0 = Pulumi.Auth0;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var myApi = new Auth0.ResourceServer("myApi", new()
    ///     {
    ///         Identifier = "https://api.example.com",
    ///     });
    /// 
    ///     var myApiScopes = new Auth0.ResourceServerScopes("myApiScopes", new()
    ///     {
    ///         ResourceServerIdentifier = myApi.Identifier,
    ///         Scopes = new[]
    ///         {
    ///             new Auth0.Inputs.ResourceServerScopesScopeArgs
    ///             {
    ///                 Name = "create:appointments",
    ///                 Description = "Ability to create appointments",
    ///             },
    ///             new Auth0.Inputs.ResourceServerScopesScopeArgs
    ///             {
    ///                 Name = "read:appointments",
    ///                 Description = "Ability to read appointments",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// This resource can be imported by specifying the resource server identifier. # Example
    /// 
    /// ```sh
    ///  $ pulumi import auth0:index/resourceServerScopes:ResourceServerScopes my_api_scopes "https://api.travel0.com/v1"
    /// ```
    /// </summary>
    [Auth0ResourceType("auth0:index/resourceServerScopes:ResourceServerScopes")]
    public partial class ResourceServerScopes : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Identifier of the resource server that the scopes (permission) are associated with.
        /// </summary>
        [Output("resourceServerIdentifier")]
        public Output<string> ResourceServerIdentifier { get; private set; } = null!;

        [Output("scopes")]
        public Output<ImmutableArray<Outputs.ResourceServerScopesScope>> Scopes { get; private set; } = null!;


        /// <summary>
        /// Create a ResourceServerScopes resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ResourceServerScopes(string name, ResourceServerScopesArgs args, CustomResourceOptions? options = null)
            : base("auth0:index/resourceServerScopes:ResourceServerScopes", name, args ?? new ResourceServerScopesArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ResourceServerScopes(string name, Input<string> id, ResourceServerScopesState? state = null, CustomResourceOptions? options = null)
            : base("auth0:index/resourceServerScopes:ResourceServerScopes", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ResourceServerScopes resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ResourceServerScopes Get(string name, Input<string> id, ResourceServerScopesState? state = null, CustomResourceOptions? options = null)
        {
            return new ResourceServerScopes(name, id, state, options);
        }
    }

    public sealed class ResourceServerScopesArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Identifier of the resource server that the scopes (permission) are associated with.
        /// </summary>
        [Input("resourceServerIdentifier", required: true)]
        public Input<string> ResourceServerIdentifier { get; set; } = null!;

        [Input("scopes", required: true)]
        private InputList<Inputs.ResourceServerScopesScopeArgs>? _scopes;
        public InputList<Inputs.ResourceServerScopesScopeArgs> Scopes
        {
            get => _scopes ?? (_scopes = new InputList<Inputs.ResourceServerScopesScopeArgs>());
            set => _scopes = value;
        }

        public ResourceServerScopesArgs()
        {
        }
        public static new ResourceServerScopesArgs Empty => new ResourceServerScopesArgs();
    }

    public sealed class ResourceServerScopesState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Identifier of the resource server that the scopes (permission) are associated with.
        /// </summary>
        [Input("resourceServerIdentifier")]
        public Input<string>? ResourceServerIdentifier { get; set; }

        [Input("scopes")]
        private InputList<Inputs.ResourceServerScopesScopeGetArgs>? _scopes;
        public InputList<Inputs.ResourceServerScopesScopeGetArgs> Scopes
        {
            get => _scopes ?? (_scopes = new InputList<Inputs.ResourceServerScopesScopeGetArgs>());
            set => _scopes = value;
        }

        public ResourceServerScopesState()
        {
        }
        public static new ResourceServerScopesState Empty => new ResourceServerScopesState();
    }
}
