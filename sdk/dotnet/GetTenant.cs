// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Auth0
{
    public static class GetTenant
    {
        /// <summary>
        /// Use this data source to access information about the tenant this provider is configured to access.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Auth0 = Pulumi.Auth0;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myTenant = Auth0.GetTenant.Invoke();
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetTenantResult> InvokeAsync(InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetTenantResult>("auth0:index/getTenant:getTenant", InvokeArgs.Empty, options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about the tenant this provider is configured to access.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Auth0 = Pulumi.Auth0;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myTenant = Auth0.GetTenant.Invoke();
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetTenantResult> Invoke(InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetTenantResult>("auth0:index/getTenant:getTenant", InvokeArgs.Empty, options.WithDefaults());
    }


    [OutputType]
    public sealed class GetTenantResult
    {
        /// <summary>
        /// Whether to accept an organization name instead of an ID on auth endpoints.
        /// </summary>
        public readonly bool AllowOrganizationNameInAuthenticationApi;
        /// <summary>
        /// URLs that Auth0 may redirect to after logout.
        /// </summary>
        public readonly ImmutableArray<string> AllowedLogoutUrls;
        /// <summary>
        /// API Audience to use by default for API Authorization flows. This setting is equivalent to appending the audience to every authorization request made to the tenant for every application.
        /// </summary>
        public readonly string DefaultAudience;
        /// <summary>
        /// Name of the connection to be used for Password Grant exchanges. Options include `auth0-adldap`, `ad`, `auth0`, `email`, `sms`, `waad`, and `adfs`.
        /// </summary>
        public readonly string DefaultDirectory;
        /// <summary>
        /// The default absolute redirection URI. Must be HTTPS or an empty string.
        /// </summary>
        public readonly string DefaultRedirectionUri;
        /// <summary>
        /// Your Auth0 domain name.
        /// </summary>
        public readonly string Domain;
        /// <summary>
        /// Supported locales for the user interface. The first locale in the list will be used to set the default locale.
        /// </summary>
        public readonly ImmutableArray<string> EnabledLocales;
        /// <summary>
        /// Configuration settings for tenant flags.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetTenantFlagResult> Flags;
        /// <summary>
        /// Friendly name for the tenant.
        /// </summary>
        public readonly string FriendlyName;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Number of hours during which a session can be inactive before the user must log in again.
        /// </summary>
        public readonly double IdleSessionLifetime;
        /// <summary>
        /// The identifier value of the built-in Management API resource server, which can be used as an audience when configuring client grants.
        /// </summary>
        public readonly string ManagementApiIdentifier;
        /// <summary>
        /// URL of logo to be shown for the tenant. Recommended size is 150px x 150px. If no URL is provided, the Auth0 logo will be used.
        /// </summary>
        public readonly string PictureUrl;
        /// <summary>
        /// Selected sandbox version for the extensibility environment, which allows you to use custom scripts to extend parts of Auth0's functionality.
        /// </summary>
        public readonly string SandboxVersion;
        /// <summary>
        /// Alters behavior of tenant's session cookie. Contains a single `mode` property.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetTenantSessionCookyResult> SessionCookies;
        /// <summary>
        /// Number of hours during which a session will stay valid.
        /// </summary>
        public readonly double SessionLifetime;
        /// <summary>
        /// Sessions related settings for the tenant.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetTenantSessionResult> Sessions;
        /// <summary>
        /// Support email address for authenticating users.
        /// </summary>
        public readonly string SupportEmail;
        /// <summary>
        /// Support URL for authenticating users.
        /// </summary>
        public readonly string SupportUrl;

        [OutputConstructor]
        private GetTenantResult(
            bool allowOrganizationNameInAuthenticationApi,

            ImmutableArray<string> allowedLogoutUrls,

            string defaultAudience,

            string defaultDirectory,

            string defaultRedirectionUri,

            string domain,

            ImmutableArray<string> enabledLocales,

            ImmutableArray<Outputs.GetTenantFlagResult> flags,

            string friendlyName,

            string id,

            double idleSessionLifetime,

            string managementApiIdentifier,

            string pictureUrl,

            string sandboxVersion,

            ImmutableArray<Outputs.GetTenantSessionCookyResult> sessionCookies,

            double sessionLifetime,

            ImmutableArray<Outputs.GetTenantSessionResult> sessions,

            string supportEmail,

            string supportUrl)
        {
            AllowOrganizationNameInAuthenticationApi = allowOrganizationNameInAuthenticationApi;
            AllowedLogoutUrls = allowedLogoutUrls;
            DefaultAudience = defaultAudience;
            DefaultDirectory = defaultDirectory;
            DefaultRedirectionUri = defaultRedirectionUri;
            Domain = domain;
            EnabledLocales = enabledLocales;
            Flags = flags;
            FriendlyName = friendlyName;
            Id = id;
            IdleSessionLifetime = idleSessionLifetime;
            ManagementApiIdentifier = managementApiIdentifier;
            PictureUrl = pictureUrl;
            SandboxVersion = sandboxVersion;
            SessionCookies = sessionCookies;
            SessionLifetime = sessionLifetime;
            Sessions = sessions;
            SupportEmail = supportEmail;
            SupportUrl = supportUrl;
        }
    }
}
