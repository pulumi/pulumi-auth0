// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Auth0
{
    public static class GetPromptScreenRenderer
    {
        /// <summary>
        /// Data source to retrieve a specific Auth0 prompt screen settings by `prompt_type` and `screen_name`
        /// </summary>
        public static Task<GetPromptScreenRendererResult> InvokeAsync(GetPromptScreenRendererArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPromptScreenRendererResult>("auth0:index/getPromptScreenRenderer:getPromptScreenRenderer", args ?? new GetPromptScreenRendererArgs(), options.WithDefaults());

        /// <summary>
        /// Data source to retrieve a specific Auth0 prompt screen settings by `prompt_type` and `screen_name`
        /// </summary>
        public static Output<GetPromptScreenRendererResult> Invoke(GetPromptScreenRendererInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPromptScreenRendererResult>("auth0:index/getPromptScreenRenderer:getPromptScreenRenderer", args ?? new GetPromptScreenRendererInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Data source to retrieve a specific Auth0 prompt screen settings by `prompt_type` and `screen_name`
        /// </summary>
        public static Output<GetPromptScreenRendererResult> Invoke(GetPromptScreenRendererInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetPromptScreenRendererResult>("auth0:index/getPromptScreenRenderer:getPromptScreenRenderer", args ?? new GetPromptScreenRendererInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPromptScreenRendererArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The type of prompt to customize.
        /// </summary>
        [Input("promptType", required: true)]
        public string PromptType { get; set; } = null!;

        /// <summary>
        /// The screen name associated with the prompt type.
        /// </summary>
        [Input("screenName", required: true)]
        public string ScreenName { get; set; } = null!;

        public GetPromptScreenRendererArgs()
        {
        }
        public static new GetPromptScreenRendererArgs Empty => new GetPromptScreenRendererArgs();
    }

    public sealed class GetPromptScreenRendererInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The type of prompt to customize.
        /// </summary>
        [Input("promptType", required: true)]
        public Input<string> PromptType { get; set; } = null!;

        /// <summary>
        /// The screen name associated with the prompt type.
        /// </summary>
        [Input("screenName", required: true)]
        public Input<string> ScreenName { get; set; } = null!;

        public GetPromptScreenRendererInvokeArgs()
        {
        }
        public static new GetPromptScreenRendererInvokeArgs Empty => new GetPromptScreenRendererInvokeArgs();
    }


    [OutputType]
    public sealed class GetPromptScreenRendererResult
    {
        /// <summary>
        /// Context values to make available
        /// </summary>
        public readonly ImmutableArray<string> ContextConfigurations;
        /// <summary>
        /// Override Universal Login default head tags
        /// </summary>
        public readonly bool DefaultHeadTagsDisabled;
        /// <summary>
        /// An array of head tags
        /// </summary>
        public readonly string HeadTags;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The type of prompt to customize.
        /// </summary>
        public readonly string PromptType;
        /// <summary>
        /// Rendering modeOptions are: `standard`, `advanced`.
        /// </summary>
        public readonly string RenderingMode;
        /// <summary>
        /// The screen name associated with the prompt type.
        /// </summary>
        public readonly string ScreenName;
        /// <summary>
        /// Tenant ID
        /// </summary>
        public readonly string Tenant;

        [OutputConstructor]
        private GetPromptScreenRendererResult(
            ImmutableArray<string> contextConfigurations,

            bool defaultHeadTagsDisabled,

            string headTags,

            string id,

            string promptType,

            string renderingMode,

            string screenName,

            string tenant)
        {
            ContextConfigurations = contextConfigurations;
            DefaultHeadTagsDisabled = defaultHeadTagsDisabled;
            HeadTags = headTags;
            Id = id;
            PromptType = promptType;
            RenderingMode = renderingMode;
            ScreenName = screenName;
            Tenant = tenant;
        }
    }
}
