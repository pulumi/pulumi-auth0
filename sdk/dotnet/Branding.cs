// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Auth0
{
    /// <summary>
    /// This resource allows you to manage branding within your Auth0 tenant. Auth0 can be customized with a look and feel that aligns with your organization's brand requirements and user expectations.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.IO;
    /// using System.Linq;
    /// using Pulumi;
    /// using Auth0 = Pulumi.Auth0;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var myBrand = new Auth0.Branding("myBrand", new()
    ///     {
    ///         LogoUrl = "https://mycompany.org/logo.png",
    ///         Colors = new Auth0.Inputs.BrandingColorsArgs
    ///         {
    ///             Primary = "#0059d6",
    ///             PageBackground = "#000000",
    ///         },
    ///         UniversalLogin = new Auth0.Inputs.BrandingUniversalLoginArgs
    ///         {
    ///             Body = File.ReadAllText("universal_login_body.html"),
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// As this is not a resource identifiable by an ID within the Auth0 Management API, branding can be imported using a random string. # We recommend [Version 4 UUID](https://www.uuidgenerator.net/version4) # Example
    /// 
    /// ```sh
    ///  $ pulumi import auth0:index/branding:Branding my_brand "22f4f21b-017a-319d-92e7-2291c1ca36c4"
    /// ```
    /// </summary>
    [Auth0ResourceType("auth0:index/branding:Branding")]
    public partial class Branding : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Configuration settings for colors for branding.
        /// </summary>
        [Output("colors")]
        public Output<Outputs.BrandingColors> Colors { get; private set; } = null!;

        /// <summary>
        /// URL for the favicon.
        /// </summary>
        [Output("faviconUrl")]
        public Output<string> FaviconUrl { get; private set; } = null!;

        /// <summary>
        /// Configuration settings to customize the font.
        /// </summary>
        [Output("font")]
        public Output<Outputs.BrandingFont> Font { get; private set; } = null!;

        /// <summary>
        /// URL of logo for branding.
        /// </summary>
        [Output("logoUrl")]
        public Output<string> LogoUrl { get; private set; } = null!;

        /// <summary>
        /// Configuration settings for Universal Login.
        /// </summary>
        [Output("universalLogin")]
        public Output<Outputs.BrandingUniversalLogin?> UniversalLogin { get; private set; } = null!;


        /// <summary>
        /// Create a Branding resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Branding(string name, BrandingArgs? args = null, CustomResourceOptions? options = null)
            : base("auth0:index/branding:Branding", name, args ?? new BrandingArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Branding(string name, Input<string> id, BrandingState? state = null, CustomResourceOptions? options = null)
            : base("auth0:index/branding:Branding", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Branding resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Branding Get(string name, Input<string> id, BrandingState? state = null, CustomResourceOptions? options = null)
        {
            return new Branding(name, id, state, options);
        }
    }

    public sealed class BrandingArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Configuration settings for colors for branding.
        /// </summary>
        [Input("colors")]
        public Input<Inputs.BrandingColorsArgs>? Colors { get; set; }

        /// <summary>
        /// URL for the favicon.
        /// </summary>
        [Input("faviconUrl")]
        public Input<string>? FaviconUrl { get; set; }

        /// <summary>
        /// Configuration settings to customize the font.
        /// </summary>
        [Input("font")]
        public Input<Inputs.BrandingFontArgs>? Font { get; set; }

        /// <summary>
        /// URL of logo for branding.
        /// </summary>
        [Input("logoUrl")]
        public Input<string>? LogoUrl { get; set; }

        /// <summary>
        /// Configuration settings for Universal Login.
        /// </summary>
        [Input("universalLogin")]
        public Input<Inputs.BrandingUniversalLoginArgs>? UniversalLogin { get; set; }

        public BrandingArgs()
        {
        }
        public static new BrandingArgs Empty => new BrandingArgs();
    }

    public sealed class BrandingState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Configuration settings for colors for branding.
        /// </summary>
        [Input("colors")]
        public Input<Inputs.BrandingColorsGetArgs>? Colors { get; set; }

        /// <summary>
        /// URL for the favicon.
        /// </summary>
        [Input("faviconUrl")]
        public Input<string>? FaviconUrl { get; set; }

        /// <summary>
        /// Configuration settings to customize the font.
        /// </summary>
        [Input("font")]
        public Input<Inputs.BrandingFontGetArgs>? Font { get; set; }

        /// <summary>
        /// URL of logo for branding.
        /// </summary>
        [Input("logoUrl")]
        public Input<string>? LogoUrl { get; set; }

        /// <summary>
        /// Configuration settings for Universal Login.
        /// </summary>
        [Input("universalLogin")]
        public Input<Inputs.BrandingUniversalLoginGetArgs>? UniversalLogin { get; set; }

        public BrandingState()
        {
        }
        public static new BrandingState Empty => new BrandingState();
    }
}
