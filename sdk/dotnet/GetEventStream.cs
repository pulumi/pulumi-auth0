// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Auth0
{
    public static class GetEventStream
    {
        /// <summary>
        /// Data source to retrieve a specific Auth0 Event Stream by `id`.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Auth0 = Pulumi.Auth0;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // An Auth0 Event Stream loaded using its ID.
        ///     var test = Auth0.GetEventStream.Invoke(new()
        ///     {
        ///         Id = "est_XXXXXXXXXXXXXXX",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetEventStreamResult> InvokeAsync(GetEventStreamArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetEventStreamResult>("auth0:index/getEventStream:getEventStream", args ?? new GetEventStreamArgs(), options.WithDefaults());

        /// <summary>
        /// Data source to retrieve a specific Auth0 Event Stream by `id`.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Auth0 = Pulumi.Auth0;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // An Auth0 Event Stream loaded using its ID.
        ///     var test = Auth0.GetEventStream.Invoke(new()
        ///     {
        ///         Id = "est_XXXXXXXXXXXXXXX",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetEventStreamResult> Invoke(GetEventStreamInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetEventStreamResult>("auth0:index/getEventStream:getEventStream", args ?? new GetEventStreamInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Data source to retrieve a specific Auth0 Event Stream by `id`.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Auth0 = Pulumi.Auth0;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // An Auth0 Event Stream loaded using its ID.
        ///     var test = Auth0.GetEventStream.Invoke(new()
        ///     {
        ///         Id = "est_XXXXXXXXXXXXXXX",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetEventStreamResult> Invoke(GetEventStreamInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetEventStreamResult>("auth0:index/getEventStream:getEventStream", args ?? new GetEventStreamInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetEventStreamArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the Event Stream.
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetEventStreamArgs()
        {
        }
        public static new GetEventStreamArgs Empty => new GetEventStreamArgs();
    }

    public sealed class GetEventStreamInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the Event Stream.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetEventStreamInvokeArgs()
        {
        }
        public static new GetEventStreamInvokeArgs Empty => new GetEventStreamInvokeArgs();
    }


    [OutputType]
    public sealed class GetEventStreamResult
    {
        /// <summary>
        /// The ISO 8601 timestamp when the stream was created.
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// The type of event stream destination (either 'eventbridge' or 'webhook').
        /// </summary>
        public readonly string DestinationType;
        /// <summary>
        /// Configuration for the EventBridge destination. This block is only applicable when `destination_type` is set to `eventbridge`. EventBridge configurations **cannot** be updated after creation. Any change to this block will force the resource to be recreated.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetEventStreamEventbridgeConfigurationResult> EventbridgeConfigurations;
        /// <summary>
        /// The ID of the Event Stream.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the event stream.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The current status of the event stream.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// List of event types this stream is subscribed to.
        /// </summary>
        public readonly ImmutableArray<string> Subscriptions;
        /// <summary>
        /// The ISO 8601 timestamp when the stream was last updated.
        /// </summary>
        public readonly string UpdatedAt;
        /// <summary>
        /// Configuration for the Webhook destination. This block is only applicable when `destination_type` is set to `webhook`. Webhook configurations **can** be updated after creation, including the endpoint and authorization fields.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetEventStreamWebhookConfigurationResult> WebhookConfigurations;

        [OutputConstructor]
        private GetEventStreamResult(
            string createdAt,

            string destinationType,

            ImmutableArray<Outputs.GetEventStreamEventbridgeConfigurationResult> eventbridgeConfigurations,

            string id,

            string name,

            string status,

            ImmutableArray<string> subscriptions,

            string updatedAt,

            ImmutableArray<Outputs.GetEventStreamWebhookConfigurationResult> webhookConfigurations)
        {
            CreatedAt = createdAt;
            DestinationType = destinationType;
            EventbridgeConfigurations = eventbridgeConfigurations;
            Id = id;
            Name = name;
            Status = status;
            Subscriptions = subscriptions;
            UpdatedAt = updatedAt;
            WebhookConfigurations = webhookConfigurations;
        }
    }
}
