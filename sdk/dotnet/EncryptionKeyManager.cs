// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Auth0
{
    /// <summary>
    /// Resource to allow the rekeying of your tenant master key.
    /// </summary>
    [Auth0ResourceType("auth0:index/encryptionKeyManager:EncryptionKeyManager")]
    public partial class EncryptionKeyManager : global::Pulumi.CustomResource
    {
        /// <summary>
        /// This attribute is used for provisioning the customer provided root key. To initiate the provisioning process, create a new empty `customer_provided_root_key` block. After applying this, the `public_wrapping_key` can be retreived from the resource, and the new root key should be generated by the customer and wrapped with the wrapping key, then base64-encoded and added as the `wrapped_key` attribute.
        /// </summary>
        [Output("customerProvidedRootKey")]
        public Output<Outputs.EncryptionKeyManagerCustomerProvidedRootKey?> CustomerProvidedRootKey { get; private set; } = null!;

        /// <summary>
        /// All encryption keys.
        /// </summary>
        [Output("encryptionKeys")]
        public Output<ImmutableArray<Outputs.EncryptionKeyManagerEncryptionKey>> EncryptionKeys { get; private set; } = null!;

        /// <summary>
        /// If this value is changed, the encryption keys will be rotated. A UUID is recommended for the `key_rotation_id`.
        /// </summary>
        [Output("keyRotationId")]
        public Output<string?> KeyRotationId { get; private set; } = null!;


        /// <summary>
        /// Create a EncryptionKeyManager resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public EncryptionKeyManager(string name, EncryptionKeyManagerArgs? args = null, CustomResourceOptions? options = null)
            : base("auth0:index/encryptionKeyManager:EncryptionKeyManager", name, args ?? new EncryptionKeyManagerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private EncryptionKeyManager(string name, Input<string> id, EncryptionKeyManagerState? state = null, CustomResourceOptions? options = null)
            : base("auth0:index/encryptionKeyManager:EncryptionKeyManager", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing EncryptionKeyManager resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static EncryptionKeyManager Get(string name, Input<string> id, EncryptionKeyManagerState? state = null, CustomResourceOptions? options = null)
        {
            return new EncryptionKeyManager(name, id, state, options);
        }
    }

    public sealed class EncryptionKeyManagerArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// This attribute is used for provisioning the customer provided root key. To initiate the provisioning process, create a new empty `customer_provided_root_key` block. After applying this, the `public_wrapping_key` can be retreived from the resource, and the new root key should be generated by the customer and wrapped with the wrapping key, then base64-encoded and added as the `wrapped_key` attribute.
        /// </summary>
        [Input("customerProvidedRootKey")]
        public Input<Inputs.EncryptionKeyManagerCustomerProvidedRootKeyArgs>? CustomerProvidedRootKey { get; set; }

        /// <summary>
        /// If this value is changed, the encryption keys will be rotated. A UUID is recommended for the `key_rotation_id`.
        /// </summary>
        [Input("keyRotationId")]
        public Input<string>? KeyRotationId { get; set; }

        public EncryptionKeyManagerArgs()
        {
        }
        public static new EncryptionKeyManagerArgs Empty => new EncryptionKeyManagerArgs();
    }

    public sealed class EncryptionKeyManagerState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// This attribute is used for provisioning the customer provided root key. To initiate the provisioning process, create a new empty `customer_provided_root_key` block. After applying this, the `public_wrapping_key` can be retreived from the resource, and the new root key should be generated by the customer and wrapped with the wrapping key, then base64-encoded and added as the `wrapped_key` attribute.
        /// </summary>
        [Input("customerProvidedRootKey")]
        public Input<Inputs.EncryptionKeyManagerCustomerProvidedRootKeyGetArgs>? CustomerProvidedRootKey { get; set; }

        [Input("encryptionKeys")]
        private InputList<Inputs.EncryptionKeyManagerEncryptionKeyGetArgs>? _encryptionKeys;

        /// <summary>
        /// All encryption keys.
        /// </summary>
        public InputList<Inputs.EncryptionKeyManagerEncryptionKeyGetArgs> EncryptionKeys
        {
            get => _encryptionKeys ?? (_encryptionKeys = new InputList<Inputs.EncryptionKeyManagerEncryptionKeyGetArgs>());
            set => _encryptionKeys = value;
        }

        /// <summary>
        /// If this value is changed, the encryption keys will be rotated. A UUID is recommended for the `key_rotation_id`.
        /// </summary>
        [Input("keyRotationId")]
        public Input<string>? KeyRotationId { get; set; }

        public EncryptionKeyManagerState()
        {
        }
        public static new EncryptionKeyManagerState Empty => new EncryptionKeyManagerState();
    }
}
