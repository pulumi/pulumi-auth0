// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Auth0
{
    public static class GetUser
    {
        /// <summary>
        /// Data source to retrieve a specific Auth0 user by `user_id`.
        /// </summary>
        public static Task<GetUserResult> InvokeAsync(GetUserArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetUserResult>("auth0:index/getUser:getUser", args ?? new GetUserArgs(), options.WithDefaults());

        /// <summary>
        /// Data source to retrieve a specific Auth0 user by `user_id`.
        /// </summary>
        public static Output<GetUserResult> Invoke(GetUserInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetUserResult>("auth0:index/getUser:getUser", args ?? new GetUserInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetUserArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ID of the user.
        /// </summary>
        [Input("userId", required: true)]
        public string UserId { get; set; } = null!;

        public GetUserArgs()
        {
        }
        public static new GetUserArgs Empty => new GetUserArgs();
    }

    public sealed class GetUserInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ID of the user.
        /// </summary>
        [Input("userId", required: true)]
        public Input<string> UserId { get; set; } = null!;

        public GetUserInvokeArgs()
        {
        }
        public static new GetUserInvokeArgs Empty => new GetUserInvokeArgs();
    }


    [OutputType]
    public sealed class GetUserResult
    {
        /// <summary>
        /// Custom fields that store info about the user that impact the user's core functionality, such as how an application functions or what the user can access. Examples include support plans and IDs for external accounts.
        /// </summary>
        public readonly string AppMetadata;
        /// <summary>
        /// Indicates whether the user is blocked or not.
        /// </summary>
        public readonly bool Blocked;
        /// <summary>
        /// Name of the connection from which the user information was sourced.
        /// </summary>
        public readonly string ConnectionName;
        /// <summary>
        /// Email address of the user.
        /// </summary>
        public readonly string Email;
        /// <summary>
        /// Indicates whether the email address has been verified.
        /// </summary>
        public readonly bool EmailVerified;
        /// <summary>
        /// Family name of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled 'Sync user profile attributes at each login'. For more information, see: [Configure Identity Provider Connection for User Profile Updates](https://auth0.com/docs/manage-users/user-accounts/user-profiles/configure-connection-sync-with-auth0).
        /// </summary>
        public readonly string FamilyName;
        /// <summary>
        /// Given name of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled 'Sync user profile attributes at each login'. For more information, see: [Configure Identity Provider Connection for User Profile Updates](https://auth0.com/docs/manage-users/user-accounts/user-profiles/configure-connection-sync-with-auth0).
        /// </summary>
        public readonly string GivenName;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Name of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled 'Sync user profile attributes at each login'. For more information, see: [Configure Identity Provider Connection for User Profile Updates](https://auth0.com/docs/manage-users/user-accounts/user-profiles/configure-connection-sync-with-auth0).
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Preferred nickname or alias of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled 'Sync user profile attributes at each login'. For more information, see: [Configure Identity Provider Connection for User Profile Updates](https://auth0.com/docs/manage-users/user-accounts/user-profiles/configure-connection-sync-with-auth0).
        /// </summary>
        public readonly string Nickname;
        /// <summary>
        /// Initial password for this user. Required for non-passwordless connections (SMS and email).
        /// </summary>
        public readonly string Password;
        /// <summary>
        /// List of API permissions granted to the user.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetUserPermissionResult> Permissions;
        /// <summary>
        /// Phone number for the user; follows the E.164 recommendation. Used for SMS connections.
        /// </summary>
        public readonly string PhoneNumber;
        /// <summary>
        /// Indicates whether the phone number has been verified.
        /// </summary>
        public readonly bool PhoneVerified;
        /// <summary>
        /// Picture of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled 'Sync user profile attributes at each login'. For more information, see: [Configure Identity Provider Connection for User Profile Updates](https://auth0.com/docs/manage-users/user-accounts/user-profiles/configure-connection-sync-with-auth0).
        /// </summary>
        public readonly string Picture;
        /// <summary>
        /// Set of IDs of roles assigned to the user.
        /// </summary>
        public readonly ImmutableArray<string> Roles;
        /// <summary>
        /// ID of the user.
        /// </summary>
        public readonly string UserId;
        /// <summary>
        /// Custom fields that store info about the user that does not impact a user's core functionality. Examples include work address, home address, and user preferences.
        /// </summary>
        public readonly string UserMetadata;
        /// <summary>
        /// Username of the user. Only valid if the connection requires a username.
        /// </summary>
        public readonly string Username;
        /// <summary>
        /// Indicates whether the user will receive a verification email after creation. Overrides behavior of `email_verified` parameter.
        /// </summary>
        public readonly bool VerifyEmail;

        [OutputConstructor]
        private GetUserResult(
            string appMetadata,

            bool blocked,

            string connectionName,

            string email,

            bool emailVerified,

            string familyName,

            string givenName,

            string id,

            string name,

            string nickname,

            string password,

            ImmutableArray<Outputs.GetUserPermissionResult> permissions,

            string phoneNumber,

            bool phoneVerified,

            string picture,

            ImmutableArray<string> roles,

            string userId,

            string userMetadata,

            string username,

            bool verifyEmail)
        {
            AppMetadata = appMetadata;
            Blocked = blocked;
            ConnectionName = connectionName;
            Email = email;
            EmailVerified = emailVerified;
            FamilyName = familyName;
            GivenName = givenName;
            Id = id;
            Name = name;
            Nickname = nickname;
            Password = password;
            Permissions = permissions;
            PhoneNumber = phoneNumber;
            PhoneVerified = phoneVerified;
            Picture = picture;
            Roles = roles;
            UserId = userId;
            UserMetadata = userMetadata;
            Username = username;
            VerifyEmail = verifyEmail;
        }
    }
}
