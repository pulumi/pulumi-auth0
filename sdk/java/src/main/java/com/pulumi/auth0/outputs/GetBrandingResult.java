// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.auth0.outputs;

import com.pulumi.auth0.outputs.GetBrandingColor;
import com.pulumi.auth0.outputs.GetBrandingFont;
import com.pulumi.auth0.outputs.GetBrandingUniversalLogin;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetBrandingResult {
    /**
     * @return Configuration settings for colors for branding.
     * 
     */
    private List<GetBrandingColor> colors;
    /**
     * @return URL for the favicon.
     * 
     */
    private String faviconUrl;
    /**
     * @return Configuration settings to customize the font.
     * 
     */
    private List<GetBrandingFont> fonts;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return URL of logo for branding.
     * 
     */
    private String logoUrl;
    /**
     * @return Configuration settings for Universal Login.
     * 
     */
    private List<GetBrandingUniversalLogin> universalLogins;

    private GetBrandingResult() {}
    /**
     * @return Configuration settings for colors for branding.
     * 
     */
    public List<GetBrandingColor> colors() {
        return this.colors;
    }
    /**
     * @return URL for the favicon.
     * 
     */
    public String faviconUrl() {
        return this.faviconUrl;
    }
    /**
     * @return Configuration settings to customize the font.
     * 
     */
    public List<GetBrandingFont> fonts() {
        return this.fonts;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return URL of logo for branding.
     * 
     */
    public String logoUrl() {
        return this.logoUrl;
    }
    /**
     * @return Configuration settings for Universal Login.
     * 
     */
    public List<GetBrandingUniversalLogin> universalLogins() {
        return this.universalLogins;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBrandingResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetBrandingColor> colors;
        private String faviconUrl;
        private List<GetBrandingFont> fonts;
        private String id;
        private String logoUrl;
        private List<GetBrandingUniversalLogin> universalLogins;
        public Builder() {}
        public Builder(GetBrandingResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.colors = defaults.colors;
    	      this.faviconUrl = defaults.faviconUrl;
    	      this.fonts = defaults.fonts;
    	      this.id = defaults.id;
    	      this.logoUrl = defaults.logoUrl;
    	      this.universalLogins = defaults.universalLogins;
        }

        @CustomType.Setter
        public Builder colors(List<GetBrandingColor> colors) {
            if (colors == null) {
              throw new MissingRequiredPropertyException("GetBrandingResult", "colors");
            }
            this.colors = colors;
            return this;
        }
        public Builder colors(GetBrandingColor... colors) {
            return colors(List.of(colors));
        }
        @CustomType.Setter
        public Builder faviconUrl(String faviconUrl) {
            if (faviconUrl == null) {
              throw new MissingRequiredPropertyException("GetBrandingResult", "faviconUrl");
            }
            this.faviconUrl = faviconUrl;
            return this;
        }
        @CustomType.Setter
        public Builder fonts(List<GetBrandingFont> fonts) {
            if (fonts == null) {
              throw new MissingRequiredPropertyException("GetBrandingResult", "fonts");
            }
            this.fonts = fonts;
            return this;
        }
        public Builder fonts(GetBrandingFont... fonts) {
            return fonts(List.of(fonts));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetBrandingResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder logoUrl(String logoUrl) {
            if (logoUrl == null) {
              throw new MissingRequiredPropertyException("GetBrandingResult", "logoUrl");
            }
            this.logoUrl = logoUrl;
            return this;
        }
        @CustomType.Setter
        public Builder universalLogins(List<GetBrandingUniversalLogin> universalLogins) {
            if (universalLogins == null) {
              throw new MissingRequiredPropertyException("GetBrandingResult", "universalLogins");
            }
            this.universalLogins = universalLogins;
            return this;
        }
        public Builder universalLogins(GetBrandingUniversalLogin... universalLogins) {
            return universalLogins(List.of(universalLogins));
        }
        public GetBrandingResult build() {
            final var _resultValue = new GetBrandingResult();
            _resultValue.colors = colors;
            _resultValue.faviconUrl = faviconUrl;
            _resultValue.fonts = fonts;
            _resultValue.id = id;
            _resultValue.logoUrl = logoUrl;
            _resultValue.universalLogins = universalLogins;
            return _resultValue;
        }
    }
}
