// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.auth0.outputs;

import com.pulumi.auth0.outputs.GetClientAddonSamlpLogout;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetClientAddonSamlp {
    private String audience;
    private String authnContextClassRef;
    private String binding;
    private Boolean createUpnClaim;
    private String destination;
    private String digestAlgorithm;
    private Boolean includeAttributeNameFormat;
    private String issuer;
    private Integer lifetimeInSeconds;
    private List<GetClientAddonSamlpLogout> logouts;
    private Boolean mapIdentities;
    private Boolean mapUnknownClaimsAsIs;
    private Map<String,Object> mappings;
    private String nameIdentifierFormat;
    private List<String> nameIdentifierProbes;
    private Boolean passthroughClaimsWithNoMapping;
    private String recipient;
    private Boolean signResponse;
    private String signatureAlgorithm;
    private String signingCert;
    private Boolean typedAttributes;

    private GetClientAddonSamlp() {}
    public String audience() {
        return this.audience;
    }
    public String authnContextClassRef() {
        return this.authnContextClassRef;
    }
    public String binding() {
        return this.binding;
    }
    public Boolean createUpnClaim() {
        return this.createUpnClaim;
    }
    public String destination() {
        return this.destination;
    }
    public String digestAlgorithm() {
        return this.digestAlgorithm;
    }
    public Boolean includeAttributeNameFormat() {
        return this.includeAttributeNameFormat;
    }
    public String issuer() {
        return this.issuer;
    }
    public Integer lifetimeInSeconds() {
        return this.lifetimeInSeconds;
    }
    public List<GetClientAddonSamlpLogout> logouts() {
        return this.logouts;
    }
    public Boolean mapIdentities() {
        return this.mapIdentities;
    }
    public Boolean mapUnknownClaimsAsIs() {
        return this.mapUnknownClaimsAsIs;
    }
    public Map<String,Object> mappings() {
        return this.mappings;
    }
    public String nameIdentifierFormat() {
        return this.nameIdentifierFormat;
    }
    public List<String> nameIdentifierProbes() {
        return this.nameIdentifierProbes;
    }
    public Boolean passthroughClaimsWithNoMapping() {
        return this.passthroughClaimsWithNoMapping;
    }
    public String recipient() {
        return this.recipient;
    }
    public Boolean signResponse() {
        return this.signResponse;
    }
    public String signatureAlgorithm() {
        return this.signatureAlgorithm;
    }
    public String signingCert() {
        return this.signingCert;
    }
    public Boolean typedAttributes() {
        return this.typedAttributes;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetClientAddonSamlp defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String audience;
        private String authnContextClassRef;
        private String binding;
        private Boolean createUpnClaim;
        private String destination;
        private String digestAlgorithm;
        private Boolean includeAttributeNameFormat;
        private String issuer;
        private Integer lifetimeInSeconds;
        private List<GetClientAddonSamlpLogout> logouts;
        private Boolean mapIdentities;
        private Boolean mapUnknownClaimsAsIs;
        private Map<String,Object> mappings;
        private String nameIdentifierFormat;
        private List<String> nameIdentifierProbes;
        private Boolean passthroughClaimsWithNoMapping;
        private String recipient;
        private Boolean signResponse;
        private String signatureAlgorithm;
        private String signingCert;
        private Boolean typedAttributes;
        public Builder() {}
        public Builder(GetClientAddonSamlp defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.audience = defaults.audience;
    	      this.authnContextClassRef = defaults.authnContextClassRef;
    	      this.binding = defaults.binding;
    	      this.createUpnClaim = defaults.createUpnClaim;
    	      this.destination = defaults.destination;
    	      this.digestAlgorithm = defaults.digestAlgorithm;
    	      this.includeAttributeNameFormat = defaults.includeAttributeNameFormat;
    	      this.issuer = defaults.issuer;
    	      this.lifetimeInSeconds = defaults.lifetimeInSeconds;
    	      this.logouts = defaults.logouts;
    	      this.mapIdentities = defaults.mapIdentities;
    	      this.mapUnknownClaimsAsIs = defaults.mapUnknownClaimsAsIs;
    	      this.mappings = defaults.mappings;
    	      this.nameIdentifierFormat = defaults.nameIdentifierFormat;
    	      this.nameIdentifierProbes = defaults.nameIdentifierProbes;
    	      this.passthroughClaimsWithNoMapping = defaults.passthroughClaimsWithNoMapping;
    	      this.recipient = defaults.recipient;
    	      this.signResponse = defaults.signResponse;
    	      this.signatureAlgorithm = defaults.signatureAlgorithm;
    	      this.signingCert = defaults.signingCert;
    	      this.typedAttributes = defaults.typedAttributes;
        }

        @CustomType.Setter
        public Builder audience(String audience) {
            if (audience == null) {
              throw new MissingRequiredPropertyException("GetClientAddonSamlp", "audience");
            }
            this.audience = audience;
            return this;
        }
        @CustomType.Setter
        public Builder authnContextClassRef(String authnContextClassRef) {
            if (authnContextClassRef == null) {
              throw new MissingRequiredPropertyException("GetClientAddonSamlp", "authnContextClassRef");
            }
            this.authnContextClassRef = authnContextClassRef;
            return this;
        }
        @CustomType.Setter
        public Builder binding(String binding) {
            if (binding == null) {
              throw new MissingRequiredPropertyException("GetClientAddonSamlp", "binding");
            }
            this.binding = binding;
            return this;
        }
        @CustomType.Setter
        public Builder createUpnClaim(Boolean createUpnClaim) {
            if (createUpnClaim == null) {
              throw new MissingRequiredPropertyException("GetClientAddonSamlp", "createUpnClaim");
            }
            this.createUpnClaim = createUpnClaim;
            return this;
        }
        @CustomType.Setter
        public Builder destination(String destination) {
            if (destination == null) {
              throw new MissingRequiredPropertyException("GetClientAddonSamlp", "destination");
            }
            this.destination = destination;
            return this;
        }
        @CustomType.Setter
        public Builder digestAlgorithm(String digestAlgorithm) {
            if (digestAlgorithm == null) {
              throw new MissingRequiredPropertyException("GetClientAddonSamlp", "digestAlgorithm");
            }
            this.digestAlgorithm = digestAlgorithm;
            return this;
        }
        @CustomType.Setter
        public Builder includeAttributeNameFormat(Boolean includeAttributeNameFormat) {
            if (includeAttributeNameFormat == null) {
              throw new MissingRequiredPropertyException("GetClientAddonSamlp", "includeAttributeNameFormat");
            }
            this.includeAttributeNameFormat = includeAttributeNameFormat;
            return this;
        }
        @CustomType.Setter
        public Builder issuer(String issuer) {
            if (issuer == null) {
              throw new MissingRequiredPropertyException("GetClientAddonSamlp", "issuer");
            }
            this.issuer = issuer;
            return this;
        }
        @CustomType.Setter
        public Builder lifetimeInSeconds(Integer lifetimeInSeconds) {
            if (lifetimeInSeconds == null) {
              throw new MissingRequiredPropertyException("GetClientAddonSamlp", "lifetimeInSeconds");
            }
            this.lifetimeInSeconds = lifetimeInSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder logouts(List<GetClientAddonSamlpLogout> logouts) {
            if (logouts == null) {
              throw new MissingRequiredPropertyException("GetClientAddonSamlp", "logouts");
            }
            this.logouts = logouts;
            return this;
        }
        public Builder logouts(GetClientAddonSamlpLogout... logouts) {
            return logouts(List.of(logouts));
        }
        @CustomType.Setter
        public Builder mapIdentities(Boolean mapIdentities) {
            if (mapIdentities == null) {
              throw new MissingRequiredPropertyException("GetClientAddonSamlp", "mapIdentities");
            }
            this.mapIdentities = mapIdentities;
            return this;
        }
        @CustomType.Setter
        public Builder mapUnknownClaimsAsIs(Boolean mapUnknownClaimsAsIs) {
            if (mapUnknownClaimsAsIs == null) {
              throw new MissingRequiredPropertyException("GetClientAddonSamlp", "mapUnknownClaimsAsIs");
            }
            this.mapUnknownClaimsAsIs = mapUnknownClaimsAsIs;
            return this;
        }
        @CustomType.Setter
        public Builder mappings(Map<String,Object> mappings) {
            if (mappings == null) {
              throw new MissingRequiredPropertyException("GetClientAddonSamlp", "mappings");
            }
            this.mappings = mappings;
            return this;
        }
        @CustomType.Setter
        public Builder nameIdentifierFormat(String nameIdentifierFormat) {
            if (nameIdentifierFormat == null) {
              throw new MissingRequiredPropertyException("GetClientAddonSamlp", "nameIdentifierFormat");
            }
            this.nameIdentifierFormat = nameIdentifierFormat;
            return this;
        }
        @CustomType.Setter
        public Builder nameIdentifierProbes(List<String> nameIdentifierProbes) {
            if (nameIdentifierProbes == null) {
              throw new MissingRequiredPropertyException("GetClientAddonSamlp", "nameIdentifierProbes");
            }
            this.nameIdentifierProbes = nameIdentifierProbes;
            return this;
        }
        public Builder nameIdentifierProbes(String... nameIdentifierProbes) {
            return nameIdentifierProbes(List.of(nameIdentifierProbes));
        }
        @CustomType.Setter
        public Builder passthroughClaimsWithNoMapping(Boolean passthroughClaimsWithNoMapping) {
            if (passthroughClaimsWithNoMapping == null) {
              throw new MissingRequiredPropertyException("GetClientAddonSamlp", "passthroughClaimsWithNoMapping");
            }
            this.passthroughClaimsWithNoMapping = passthroughClaimsWithNoMapping;
            return this;
        }
        @CustomType.Setter
        public Builder recipient(String recipient) {
            if (recipient == null) {
              throw new MissingRequiredPropertyException("GetClientAddonSamlp", "recipient");
            }
            this.recipient = recipient;
            return this;
        }
        @CustomType.Setter
        public Builder signResponse(Boolean signResponse) {
            if (signResponse == null) {
              throw new MissingRequiredPropertyException("GetClientAddonSamlp", "signResponse");
            }
            this.signResponse = signResponse;
            return this;
        }
        @CustomType.Setter
        public Builder signatureAlgorithm(String signatureAlgorithm) {
            if (signatureAlgorithm == null) {
              throw new MissingRequiredPropertyException("GetClientAddonSamlp", "signatureAlgorithm");
            }
            this.signatureAlgorithm = signatureAlgorithm;
            return this;
        }
        @CustomType.Setter
        public Builder signingCert(String signingCert) {
            if (signingCert == null) {
              throw new MissingRequiredPropertyException("GetClientAddonSamlp", "signingCert");
            }
            this.signingCert = signingCert;
            return this;
        }
        @CustomType.Setter
        public Builder typedAttributes(Boolean typedAttributes) {
            if (typedAttributes == null) {
              throw new MissingRequiredPropertyException("GetClientAddonSamlp", "typedAttributes");
            }
            this.typedAttributes = typedAttributes;
            return this;
        }
        public GetClientAddonSamlp build() {
            final var _resultValue = new GetClientAddonSamlp();
            _resultValue.audience = audience;
            _resultValue.authnContextClassRef = authnContextClassRef;
            _resultValue.binding = binding;
            _resultValue.createUpnClaim = createUpnClaim;
            _resultValue.destination = destination;
            _resultValue.digestAlgorithm = digestAlgorithm;
            _resultValue.includeAttributeNameFormat = includeAttributeNameFormat;
            _resultValue.issuer = issuer;
            _resultValue.lifetimeInSeconds = lifetimeInSeconds;
            _resultValue.logouts = logouts;
            _resultValue.mapIdentities = mapIdentities;
            _resultValue.mapUnknownClaimsAsIs = mapUnknownClaimsAsIs;
            _resultValue.mappings = mappings;
            _resultValue.nameIdentifierFormat = nameIdentifierFormat;
            _resultValue.nameIdentifierProbes = nameIdentifierProbes;
            _resultValue.passthroughClaimsWithNoMapping = passthroughClaimsWithNoMapping;
            _resultValue.recipient = recipient;
            _resultValue.signResponse = signResponse;
            _resultValue.signatureAlgorithm = signatureAlgorithm;
            _resultValue.signingCert = signingCert;
            _resultValue.typedAttributes = typedAttributes;
            return _resultValue;
        }
    }
}
