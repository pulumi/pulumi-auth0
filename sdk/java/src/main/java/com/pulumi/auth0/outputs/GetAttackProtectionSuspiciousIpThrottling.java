// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.auth0.outputs;

import com.pulumi.auth0.outputs.GetAttackProtectionSuspiciousIpThrottlingPreLogin;
import com.pulumi.auth0.outputs.GetAttackProtectionSuspiciousIpThrottlingPreUserRegistration;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetAttackProtectionSuspiciousIpThrottling {
    /**
     * @return List of trusted IP addresses that will not have attack protection enforced against them. This field allows you to specify multiple IP addresses, or ranges. You can use IPv4 or IPv6 addresses and CIDR notation.
     * 
     */
    private List<String> allowlists;
    /**
     * @return Whether suspicious IP throttling attack protections are active.
     * 
     */
    private Boolean enabled;
    /**
     * @return Configuration options that apply before every login attempt. Only available on public tenants.
     * 
     */
    private List<GetAttackProtectionSuspiciousIpThrottlingPreLogin> preLogins;
    /**
     * @return Configuration options that apply before every user registration attempt. Only available on public tenants.
     * 
     */
    private List<GetAttackProtectionSuspiciousIpThrottlingPreUserRegistration> preUserRegistrations;
    /**
     * @return Action to take when a suspicious IP throttling threshold is violated. Possible values: `block` (throttle traffic from an IP address when there is a high number of login attempts targeting too many different accounts), `admin_notification` (send an email notification when traffic is throttled on one or more IP addresses due to high-velocity traffic).
     * 
     */
    private List<String> shields;

    private GetAttackProtectionSuspiciousIpThrottling() {}
    /**
     * @return List of trusted IP addresses that will not have attack protection enforced against them. This field allows you to specify multiple IP addresses, or ranges. You can use IPv4 or IPv6 addresses and CIDR notation.
     * 
     */
    public List<String> allowlists() {
        return this.allowlists;
    }
    /**
     * @return Whether suspicious IP throttling attack protections are active.
     * 
     */
    public Boolean enabled() {
        return this.enabled;
    }
    /**
     * @return Configuration options that apply before every login attempt. Only available on public tenants.
     * 
     */
    public List<GetAttackProtectionSuspiciousIpThrottlingPreLogin> preLogins() {
        return this.preLogins;
    }
    /**
     * @return Configuration options that apply before every user registration attempt. Only available on public tenants.
     * 
     */
    public List<GetAttackProtectionSuspiciousIpThrottlingPreUserRegistration> preUserRegistrations() {
        return this.preUserRegistrations;
    }
    /**
     * @return Action to take when a suspicious IP throttling threshold is violated. Possible values: `block` (throttle traffic from an IP address when there is a high number of login attempts targeting too many different accounts), `admin_notification` (send an email notification when traffic is throttled on one or more IP addresses due to high-velocity traffic).
     * 
     */
    public List<String> shields() {
        return this.shields;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAttackProtectionSuspiciousIpThrottling defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> allowlists;
        private Boolean enabled;
        private List<GetAttackProtectionSuspiciousIpThrottlingPreLogin> preLogins;
        private List<GetAttackProtectionSuspiciousIpThrottlingPreUserRegistration> preUserRegistrations;
        private List<String> shields;
        public Builder() {}
        public Builder(GetAttackProtectionSuspiciousIpThrottling defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowlists = defaults.allowlists;
    	      this.enabled = defaults.enabled;
    	      this.preLogins = defaults.preLogins;
    	      this.preUserRegistrations = defaults.preUserRegistrations;
    	      this.shields = defaults.shields;
        }

        @CustomType.Setter
        public Builder allowlists(List<String> allowlists) {
            if (allowlists == null) {
              throw new MissingRequiredPropertyException("GetAttackProtectionSuspiciousIpThrottling", "allowlists");
            }
            this.allowlists = allowlists;
            return this;
        }
        public Builder allowlists(String... allowlists) {
            return allowlists(List.of(allowlists));
        }
        @CustomType.Setter
        public Builder enabled(Boolean enabled) {
            if (enabled == null) {
              throw new MissingRequiredPropertyException("GetAttackProtectionSuspiciousIpThrottling", "enabled");
            }
            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder preLogins(List<GetAttackProtectionSuspiciousIpThrottlingPreLogin> preLogins) {
            if (preLogins == null) {
              throw new MissingRequiredPropertyException("GetAttackProtectionSuspiciousIpThrottling", "preLogins");
            }
            this.preLogins = preLogins;
            return this;
        }
        public Builder preLogins(GetAttackProtectionSuspiciousIpThrottlingPreLogin... preLogins) {
            return preLogins(List.of(preLogins));
        }
        @CustomType.Setter
        public Builder preUserRegistrations(List<GetAttackProtectionSuspiciousIpThrottlingPreUserRegistration> preUserRegistrations) {
            if (preUserRegistrations == null) {
              throw new MissingRequiredPropertyException("GetAttackProtectionSuspiciousIpThrottling", "preUserRegistrations");
            }
            this.preUserRegistrations = preUserRegistrations;
            return this;
        }
        public Builder preUserRegistrations(GetAttackProtectionSuspiciousIpThrottlingPreUserRegistration... preUserRegistrations) {
            return preUserRegistrations(List.of(preUserRegistrations));
        }
        @CustomType.Setter
        public Builder shields(List<String> shields) {
            if (shields == null) {
              throw new MissingRequiredPropertyException("GetAttackProtectionSuspiciousIpThrottling", "shields");
            }
            this.shields = shields;
            return this;
        }
        public Builder shields(String... shields) {
            return shields(List.of(shields));
        }
        public GetAttackProtectionSuspiciousIpThrottling build() {
            final var _resultValue = new GetAttackProtectionSuspiciousIpThrottling();
            _resultValue.allowlists = allowlists;
            _resultValue.enabled = enabled;
            _resultValue.preLogins = preLogins;
            _resultValue.preUserRegistrations = preUserRegistrations;
            _resultValue.shields = shields;
            return _resultValue;
        }
    }
}
