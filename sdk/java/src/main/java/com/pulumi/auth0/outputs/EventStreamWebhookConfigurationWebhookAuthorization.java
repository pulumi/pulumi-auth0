// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.auth0.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class EventStreamWebhookConfigurationWebhookAuthorization {
    /**
     * @return The authorization method used to secure the webhook endpoint. Can be either `basic` or `bearer`.
     * 
     */
    private String method;
    /**
     * @return The password for `basic` authentication. Required when `method` is set to `basic`.
     * 
     */
    private @Nullable String password;
    /**
     * @return The token used for `bearer` authentication. Required when `method` is set to `bearer`.
     * 
     */
    private @Nullable String token;
    /**
     * @return The username for `basic` authentication. Required when `method` is set to `basic`.
     * 
     */
    private @Nullable String username;

    private EventStreamWebhookConfigurationWebhookAuthorization() {}
    /**
     * @return The authorization method used to secure the webhook endpoint. Can be either `basic` or `bearer`.
     * 
     */
    public String method() {
        return this.method;
    }
    /**
     * @return The password for `basic` authentication. Required when `method` is set to `basic`.
     * 
     */
    public Optional<String> password() {
        return Optional.ofNullable(this.password);
    }
    /**
     * @return The token used for `bearer` authentication. Required when `method` is set to `bearer`.
     * 
     */
    public Optional<String> token() {
        return Optional.ofNullable(this.token);
    }
    /**
     * @return The username for `basic` authentication. Required when `method` is set to `basic`.
     * 
     */
    public Optional<String> username() {
        return Optional.ofNullable(this.username);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EventStreamWebhookConfigurationWebhookAuthorization defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String method;
        private @Nullable String password;
        private @Nullable String token;
        private @Nullable String username;
        public Builder() {}
        public Builder(EventStreamWebhookConfigurationWebhookAuthorization defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.method = defaults.method;
    	      this.password = defaults.password;
    	      this.token = defaults.token;
    	      this.username = defaults.username;
        }

        @CustomType.Setter
        public Builder method(String method) {
            if (method == null) {
              throw new MissingRequiredPropertyException("EventStreamWebhookConfigurationWebhookAuthorization", "method");
            }
            this.method = method;
            return this;
        }
        @CustomType.Setter
        public Builder password(@Nullable String password) {

            this.password = password;
            return this;
        }
        @CustomType.Setter
        public Builder token(@Nullable String token) {

            this.token = token;
            return this;
        }
        @CustomType.Setter
        public Builder username(@Nullable String username) {

            this.username = username;
            return this;
        }
        public EventStreamWebhookConfigurationWebhookAuthorization build() {
            final var _resultValue = new EventStreamWebhookConfigurationWebhookAuthorization();
            _resultValue.method = method;
            _resultValue.password = password;
            _resultValue.token = token;
            _resultValue.username = username;
            return _resultValue;
        }
    }
}
