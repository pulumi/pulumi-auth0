// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.auth0.outputs;

import com.pulumi.auth0.outputs.GetConnectionOptionAttributeMap;
import com.pulumi.auth0.outputs.GetConnectionOptionConnectionSetting;
import com.pulumi.auth0.outputs.GetConnectionOptionDecryptionKey;
import com.pulumi.auth0.outputs.GetConnectionOptionGatewayAuthentication;
import com.pulumi.auth0.outputs.GetConnectionOptionIdpInitiated;
import com.pulumi.auth0.outputs.GetConnectionOptionMfa;
import com.pulumi.auth0.outputs.GetConnectionOptionPasswordComplexityOption;
import com.pulumi.auth0.outputs.GetConnectionOptionPasswordDictionary;
import com.pulumi.auth0.outputs.GetConnectionOptionPasswordHistory;
import com.pulumi.auth0.outputs.GetConnectionOptionPasswordNoPersonalInfo;
import com.pulumi.auth0.outputs.GetConnectionOptionSigningKey;
import com.pulumi.auth0.outputs.GetConnectionOptionTotp;
import com.pulumi.auth0.outputs.GetConnectionOptionValidation;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetConnectionOption {
    private String adfsServer;
    private List<String> allowedAudiences;
    private Boolean apiEnableUsers;
    private String appId;
    private List<GetConnectionOptionAttributeMap> attributeMaps;
    private Map<String,String> authParams;
    private String authorizationEndpoint;
    private Boolean bruteForceProtection;
    private String clientId;
    private String clientSecret;
    private String communityBaseUrl;
    private Map<String,Object> configuration;
    private List<GetConnectionOptionConnectionSetting> connectionSettings;
    private Map<String,String> customScripts;
    private Boolean debug;
    private List<GetConnectionOptionDecryptionKey> decryptionKeys;
    private String digestAlgorithm;
    private Boolean disableCache;
    private Boolean disableSelfServiceChangePassword;
    private Boolean disableSignOut;
    private Boolean disableSignup;
    private String discoveryUrl;
    private String domain;
    private List<String> domainAliases;
    private Boolean enableScriptContext;
    private Boolean enabledDatabaseCustomization;
    private String entityId;
    private String fedMetadataXml;
    private String fieldsMap;
    private Boolean forwardRequestInfo;
    private String from;
    private List<GetConnectionOptionGatewayAuthentication> gatewayAuthentications;
    private String gatewayUrl;
    private String iconUrl;
    private String identityApi;
    private List<GetConnectionOptionIdpInitiated> idpInitiateds;
    private Boolean importMode;
    private List<String> ips;
    private String issuer;
    private String jwksUri;
    private String keyId;
    private Boolean mapUserIdToId;
    private String maxGroupsToRetrieve;
    private String messagingServiceSid;
    private String metadataUrl;
    private String metadataXml;
    private List<GetConnectionOptionMfa> mfas;
    private String name;
    private List<String> nonPersistentAttrs;
    private List<GetConnectionOptionPasswordComplexityOption> passwordComplexityOptions;
    private List<GetConnectionOptionPasswordDictionary> passwordDictionaries;
    private List<GetConnectionOptionPasswordHistory> passwordHistories;
    private List<GetConnectionOptionPasswordNoPersonalInfo> passwordNoPersonalInfos;
    private String passwordPolicy;
    private String pingFederateBaseUrl;
    private Boolean pkceEnabled;
    private String protocolBinding;
    private String provider;
    private String requestTemplate;
    private Boolean requiresUsername;
    private List<String> scopes;
    private Map<String,String> scripts;
    private String setUserRootAttributes;
    private String shouldTrustEmailVerifiedConnection;
    private String signInEndpoint;
    private String signOutEndpoint;
    private Boolean signSamlRequest;
    private String signatureAlgorithm;
    private String signingCert;
    private List<GetConnectionOptionSigningKey> signingKeys;
    private Integer strategyVersion;
    private String subject;
    private String syntax;
    private String teamId;
    private String template;
    private String tenantDomain;
    private String tokenEndpoint;
    private List<GetConnectionOptionTotp> totps;
    private String twilioSid;
    private String twilioToken;
    private String type;
    private String upstreamParams;
    private Boolean useCertAuth;
    private Boolean useKerberos;
    private Boolean useWsfed;
    private String userIdAttribute;
    private String userinfoEndpoint;
    private List<GetConnectionOptionValidation> validations;
    private Boolean waadCommonEndpoint;
    private String waadProtocol;

    private GetConnectionOption() {}
    public String adfsServer() {
        return this.adfsServer;
    }
    public List<String> allowedAudiences() {
        return this.allowedAudiences;
    }
    public Boolean apiEnableUsers() {
        return this.apiEnableUsers;
    }
    public String appId() {
        return this.appId;
    }
    public List<GetConnectionOptionAttributeMap> attributeMaps() {
        return this.attributeMaps;
    }
    public Map<String,String> authParams() {
        return this.authParams;
    }
    public String authorizationEndpoint() {
        return this.authorizationEndpoint;
    }
    public Boolean bruteForceProtection() {
        return this.bruteForceProtection;
    }
    public String clientId() {
        return this.clientId;
    }
    public String clientSecret() {
        return this.clientSecret;
    }
    public String communityBaseUrl() {
        return this.communityBaseUrl;
    }
    public Map<String,Object> configuration() {
        return this.configuration;
    }
    public List<GetConnectionOptionConnectionSetting> connectionSettings() {
        return this.connectionSettings;
    }
    public Map<String,String> customScripts() {
        return this.customScripts;
    }
    public Boolean debug() {
        return this.debug;
    }
    public List<GetConnectionOptionDecryptionKey> decryptionKeys() {
        return this.decryptionKeys;
    }
    public String digestAlgorithm() {
        return this.digestAlgorithm;
    }
    public Boolean disableCache() {
        return this.disableCache;
    }
    public Boolean disableSelfServiceChangePassword() {
        return this.disableSelfServiceChangePassword;
    }
    public Boolean disableSignOut() {
        return this.disableSignOut;
    }
    public Boolean disableSignup() {
        return this.disableSignup;
    }
    public String discoveryUrl() {
        return this.discoveryUrl;
    }
    public String domain() {
        return this.domain;
    }
    public List<String> domainAliases() {
        return this.domainAliases;
    }
    public Boolean enableScriptContext() {
        return this.enableScriptContext;
    }
    public Boolean enabledDatabaseCustomization() {
        return this.enabledDatabaseCustomization;
    }
    public String entityId() {
        return this.entityId;
    }
    public String fedMetadataXml() {
        return this.fedMetadataXml;
    }
    public String fieldsMap() {
        return this.fieldsMap;
    }
    public Boolean forwardRequestInfo() {
        return this.forwardRequestInfo;
    }
    public String from() {
        return this.from;
    }
    public List<GetConnectionOptionGatewayAuthentication> gatewayAuthentications() {
        return this.gatewayAuthentications;
    }
    public String gatewayUrl() {
        return this.gatewayUrl;
    }
    public String iconUrl() {
        return this.iconUrl;
    }
    public String identityApi() {
        return this.identityApi;
    }
    public List<GetConnectionOptionIdpInitiated> idpInitiateds() {
        return this.idpInitiateds;
    }
    public Boolean importMode() {
        return this.importMode;
    }
    public List<String> ips() {
        return this.ips;
    }
    public String issuer() {
        return this.issuer;
    }
    public String jwksUri() {
        return this.jwksUri;
    }
    public String keyId() {
        return this.keyId;
    }
    public Boolean mapUserIdToId() {
        return this.mapUserIdToId;
    }
    public String maxGroupsToRetrieve() {
        return this.maxGroupsToRetrieve;
    }
    public String messagingServiceSid() {
        return this.messagingServiceSid;
    }
    public String metadataUrl() {
        return this.metadataUrl;
    }
    public String metadataXml() {
        return this.metadataXml;
    }
    public List<GetConnectionOptionMfa> mfas() {
        return this.mfas;
    }
    public String name() {
        return this.name;
    }
    public List<String> nonPersistentAttrs() {
        return this.nonPersistentAttrs;
    }
    public List<GetConnectionOptionPasswordComplexityOption> passwordComplexityOptions() {
        return this.passwordComplexityOptions;
    }
    public List<GetConnectionOptionPasswordDictionary> passwordDictionaries() {
        return this.passwordDictionaries;
    }
    public List<GetConnectionOptionPasswordHistory> passwordHistories() {
        return this.passwordHistories;
    }
    public List<GetConnectionOptionPasswordNoPersonalInfo> passwordNoPersonalInfos() {
        return this.passwordNoPersonalInfos;
    }
    public String passwordPolicy() {
        return this.passwordPolicy;
    }
    public String pingFederateBaseUrl() {
        return this.pingFederateBaseUrl;
    }
    public Boolean pkceEnabled() {
        return this.pkceEnabled;
    }
    public String protocolBinding() {
        return this.protocolBinding;
    }
    public String provider() {
        return this.provider;
    }
    public String requestTemplate() {
        return this.requestTemplate;
    }
    public Boolean requiresUsername() {
        return this.requiresUsername;
    }
    public List<String> scopes() {
        return this.scopes;
    }
    public Map<String,String> scripts() {
        return this.scripts;
    }
    public String setUserRootAttributes() {
        return this.setUserRootAttributes;
    }
    public String shouldTrustEmailVerifiedConnection() {
        return this.shouldTrustEmailVerifiedConnection;
    }
    public String signInEndpoint() {
        return this.signInEndpoint;
    }
    public String signOutEndpoint() {
        return this.signOutEndpoint;
    }
    public Boolean signSamlRequest() {
        return this.signSamlRequest;
    }
    public String signatureAlgorithm() {
        return this.signatureAlgorithm;
    }
    public String signingCert() {
        return this.signingCert;
    }
    public List<GetConnectionOptionSigningKey> signingKeys() {
        return this.signingKeys;
    }
    public Integer strategyVersion() {
        return this.strategyVersion;
    }
    public String subject() {
        return this.subject;
    }
    public String syntax() {
        return this.syntax;
    }
    public String teamId() {
        return this.teamId;
    }
    public String template() {
        return this.template;
    }
    public String tenantDomain() {
        return this.tenantDomain;
    }
    public String tokenEndpoint() {
        return this.tokenEndpoint;
    }
    public List<GetConnectionOptionTotp> totps() {
        return this.totps;
    }
    public String twilioSid() {
        return this.twilioSid;
    }
    public String twilioToken() {
        return this.twilioToken;
    }
    public String type() {
        return this.type;
    }
    public String upstreamParams() {
        return this.upstreamParams;
    }
    public Boolean useCertAuth() {
        return this.useCertAuth;
    }
    public Boolean useKerberos() {
        return this.useKerberos;
    }
    public Boolean useWsfed() {
        return this.useWsfed;
    }
    public String userIdAttribute() {
        return this.userIdAttribute;
    }
    public String userinfoEndpoint() {
        return this.userinfoEndpoint;
    }
    public List<GetConnectionOptionValidation> validations() {
        return this.validations;
    }
    public Boolean waadCommonEndpoint() {
        return this.waadCommonEndpoint;
    }
    public String waadProtocol() {
        return this.waadProtocol;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetConnectionOption defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String adfsServer;
        private List<String> allowedAudiences;
        private Boolean apiEnableUsers;
        private String appId;
        private List<GetConnectionOptionAttributeMap> attributeMaps;
        private Map<String,String> authParams;
        private String authorizationEndpoint;
        private Boolean bruteForceProtection;
        private String clientId;
        private String clientSecret;
        private String communityBaseUrl;
        private Map<String,Object> configuration;
        private List<GetConnectionOptionConnectionSetting> connectionSettings;
        private Map<String,String> customScripts;
        private Boolean debug;
        private List<GetConnectionOptionDecryptionKey> decryptionKeys;
        private String digestAlgorithm;
        private Boolean disableCache;
        private Boolean disableSelfServiceChangePassword;
        private Boolean disableSignOut;
        private Boolean disableSignup;
        private String discoveryUrl;
        private String domain;
        private List<String> domainAliases;
        private Boolean enableScriptContext;
        private Boolean enabledDatabaseCustomization;
        private String entityId;
        private String fedMetadataXml;
        private String fieldsMap;
        private Boolean forwardRequestInfo;
        private String from;
        private List<GetConnectionOptionGatewayAuthentication> gatewayAuthentications;
        private String gatewayUrl;
        private String iconUrl;
        private String identityApi;
        private List<GetConnectionOptionIdpInitiated> idpInitiateds;
        private Boolean importMode;
        private List<String> ips;
        private String issuer;
        private String jwksUri;
        private String keyId;
        private Boolean mapUserIdToId;
        private String maxGroupsToRetrieve;
        private String messagingServiceSid;
        private String metadataUrl;
        private String metadataXml;
        private List<GetConnectionOptionMfa> mfas;
        private String name;
        private List<String> nonPersistentAttrs;
        private List<GetConnectionOptionPasswordComplexityOption> passwordComplexityOptions;
        private List<GetConnectionOptionPasswordDictionary> passwordDictionaries;
        private List<GetConnectionOptionPasswordHistory> passwordHistories;
        private List<GetConnectionOptionPasswordNoPersonalInfo> passwordNoPersonalInfos;
        private String passwordPolicy;
        private String pingFederateBaseUrl;
        private Boolean pkceEnabled;
        private String protocolBinding;
        private String provider;
        private String requestTemplate;
        private Boolean requiresUsername;
        private List<String> scopes;
        private Map<String,String> scripts;
        private String setUserRootAttributes;
        private String shouldTrustEmailVerifiedConnection;
        private String signInEndpoint;
        private String signOutEndpoint;
        private Boolean signSamlRequest;
        private String signatureAlgorithm;
        private String signingCert;
        private List<GetConnectionOptionSigningKey> signingKeys;
        private Integer strategyVersion;
        private String subject;
        private String syntax;
        private String teamId;
        private String template;
        private String tenantDomain;
        private String tokenEndpoint;
        private List<GetConnectionOptionTotp> totps;
        private String twilioSid;
        private String twilioToken;
        private String type;
        private String upstreamParams;
        private Boolean useCertAuth;
        private Boolean useKerberos;
        private Boolean useWsfed;
        private String userIdAttribute;
        private String userinfoEndpoint;
        private List<GetConnectionOptionValidation> validations;
        private Boolean waadCommonEndpoint;
        private String waadProtocol;
        public Builder() {}
        public Builder(GetConnectionOption defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.adfsServer = defaults.adfsServer;
    	      this.allowedAudiences = defaults.allowedAudiences;
    	      this.apiEnableUsers = defaults.apiEnableUsers;
    	      this.appId = defaults.appId;
    	      this.attributeMaps = defaults.attributeMaps;
    	      this.authParams = defaults.authParams;
    	      this.authorizationEndpoint = defaults.authorizationEndpoint;
    	      this.bruteForceProtection = defaults.bruteForceProtection;
    	      this.clientId = defaults.clientId;
    	      this.clientSecret = defaults.clientSecret;
    	      this.communityBaseUrl = defaults.communityBaseUrl;
    	      this.configuration = defaults.configuration;
    	      this.connectionSettings = defaults.connectionSettings;
    	      this.customScripts = defaults.customScripts;
    	      this.debug = defaults.debug;
    	      this.decryptionKeys = defaults.decryptionKeys;
    	      this.digestAlgorithm = defaults.digestAlgorithm;
    	      this.disableCache = defaults.disableCache;
    	      this.disableSelfServiceChangePassword = defaults.disableSelfServiceChangePassword;
    	      this.disableSignOut = defaults.disableSignOut;
    	      this.disableSignup = defaults.disableSignup;
    	      this.discoveryUrl = defaults.discoveryUrl;
    	      this.domain = defaults.domain;
    	      this.domainAliases = defaults.domainAliases;
    	      this.enableScriptContext = defaults.enableScriptContext;
    	      this.enabledDatabaseCustomization = defaults.enabledDatabaseCustomization;
    	      this.entityId = defaults.entityId;
    	      this.fedMetadataXml = defaults.fedMetadataXml;
    	      this.fieldsMap = defaults.fieldsMap;
    	      this.forwardRequestInfo = defaults.forwardRequestInfo;
    	      this.from = defaults.from;
    	      this.gatewayAuthentications = defaults.gatewayAuthentications;
    	      this.gatewayUrl = defaults.gatewayUrl;
    	      this.iconUrl = defaults.iconUrl;
    	      this.identityApi = defaults.identityApi;
    	      this.idpInitiateds = defaults.idpInitiateds;
    	      this.importMode = defaults.importMode;
    	      this.ips = defaults.ips;
    	      this.issuer = defaults.issuer;
    	      this.jwksUri = defaults.jwksUri;
    	      this.keyId = defaults.keyId;
    	      this.mapUserIdToId = defaults.mapUserIdToId;
    	      this.maxGroupsToRetrieve = defaults.maxGroupsToRetrieve;
    	      this.messagingServiceSid = defaults.messagingServiceSid;
    	      this.metadataUrl = defaults.metadataUrl;
    	      this.metadataXml = defaults.metadataXml;
    	      this.mfas = defaults.mfas;
    	      this.name = defaults.name;
    	      this.nonPersistentAttrs = defaults.nonPersistentAttrs;
    	      this.passwordComplexityOptions = defaults.passwordComplexityOptions;
    	      this.passwordDictionaries = defaults.passwordDictionaries;
    	      this.passwordHistories = defaults.passwordHistories;
    	      this.passwordNoPersonalInfos = defaults.passwordNoPersonalInfos;
    	      this.passwordPolicy = defaults.passwordPolicy;
    	      this.pingFederateBaseUrl = defaults.pingFederateBaseUrl;
    	      this.pkceEnabled = defaults.pkceEnabled;
    	      this.protocolBinding = defaults.protocolBinding;
    	      this.provider = defaults.provider;
    	      this.requestTemplate = defaults.requestTemplate;
    	      this.requiresUsername = defaults.requiresUsername;
    	      this.scopes = defaults.scopes;
    	      this.scripts = defaults.scripts;
    	      this.setUserRootAttributes = defaults.setUserRootAttributes;
    	      this.shouldTrustEmailVerifiedConnection = defaults.shouldTrustEmailVerifiedConnection;
    	      this.signInEndpoint = defaults.signInEndpoint;
    	      this.signOutEndpoint = defaults.signOutEndpoint;
    	      this.signSamlRequest = defaults.signSamlRequest;
    	      this.signatureAlgorithm = defaults.signatureAlgorithm;
    	      this.signingCert = defaults.signingCert;
    	      this.signingKeys = defaults.signingKeys;
    	      this.strategyVersion = defaults.strategyVersion;
    	      this.subject = defaults.subject;
    	      this.syntax = defaults.syntax;
    	      this.teamId = defaults.teamId;
    	      this.template = defaults.template;
    	      this.tenantDomain = defaults.tenantDomain;
    	      this.tokenEndpoint = defaults.tokenEndpoint;
    	      this.totps = defaults.totps;
    	      this.twilioSid = defaults.twilioSid;
    	      this.twilioToken = defaults.twilioToken;
    	      this.type = defaults.type;
    	      this.upstreamParams = defaults.upstreamParams;
    	      this.useCertAuth = defaults.useCertAuth;
    	      this.useKerberos = defaults.useKerberos;
    	      this.useWsfed = defaults.useWsfed;
    	      this.userIdAttribute = defaults.userIdAttribute;
    	      this.userinfoEndpoint = defaults.userinfoEndpoint;
    	      this.validations = defaults.validations;
    	      this.waadCommonEndpoint = defaults.waadCommonEndpoint;
    	      this.waadProtocol = defaults.waadProtocol;
        }

        @CustomType.Setter
        public Builder adfsServer(String adfsServer) {
            if (adfsServer == null) {
              throw new MissingRequiredPropertyException("GetConnectionOption", "adfsServer");
            }
            this.adfsServer = adfsServer;
            return this;
        }
        @CustomType.Setter
        public Builder allowedAudiences(List<String> allowedAudiences) {
            if (allowedAudiences == null) {
              throw new MissingRequiredPropertyException("GetConnectionOption", "allowedAudiences");
            }
            this.allowedAudiences = allowedAudiences;
            return this;
        }
        public Builder allowedAudiences(String... allowedAudiences) {
            return allowedAudiences(List.of(allowedAudiences));
        }
        @CustomType.Setter
        public Builder apiEnableUsers(Boolean apiEnableUsers) {
            if (apiEnableUsers == null) {
              throw new MissingRequiredPropertyException("GetConnectionOption", "apiEnableUsers");
            }
            this.apiEnableUsers = apiEnableUsers;
            return this;
        }
        @CustomType.Setter
        public Builder appId(String appId) {
            if (appId == null) {
              throw new MissingRequiredPropertyException("GetConnectionOption", "appId");
            }
            this.appId = appId;
            return this;
        }
        @CustomType.Setter
        public Builder attributeMaps(List<GetConnectionOptionAttributeMap> attributeMaps) {
            if (attributeMaps == null) {
              throw new MissingRequiredPropertyException("GetConnectionOption", "attributeMaps");
            }
            this.attributeMaps = attributeMaps;
            return this;
        }
        public Builder attributeMaps(GetConnectionOptionAttributeMap... attributeMaps) {
            return attributeMaps(List.of(attributeMaps));
        }
        @CustomType.Setter
        public Builder authParams(Map<String,String> authParams) {
            if (authParams == null) {
              throw new MissingRequiredPropertyException("GetConnectionOption", "authParams");
            }
            this.authParams = authParams;
            return this;
        }
        @CustomType.Setter
        public Builder authorizationEndpoint(String authorizationEndpoint) {
            if (authorizationEndpoint == null) {
              throw new MissingRequiredPropertyException("GetConnectionOption", "authorizationEndpoint");
            }
            this.authorizationEndpoint = authorizationEndpoint;
            return this;
        }
        @CustomType.Setter
        public Builder bruteForceProtection(Boolean bruteForceProtection) {
            if (bruteForceProtection == null) {
              throw new MissingRequiredPropertyException("GetConnectionOption", "bruteForceProtection");
            }
            this.bruteForceProtection = bruteForceProtection;
            return this;
        }
        @CustomType.Setter
        public Builder clientId(String clientId) {
            if (clientId == null) {
              throw new MissingRequiredPropertyException("GetConnectionOption", "clientId");
            }
            this.clientId = clientId;
            return this;
        }
        @CustomType.Setter
        public Builder clientSecret(String clientSecret) {
            if (clientSecret == null) {
              throw new MissingRequiredPropertyException("GetConnectionOption", "clientSecret");
            }
            this.clientSecret = clientSecret;
            return this;
        }
        @CustomType.Setter
        public Builder communityBaseUrl(String communityBaseUrl) {
            if (communityBaseUrl == null) {
              throw new MissingRequiredPropertyException("GetConnectionOption", "communityBaseUrl");
            }
            this.communityBaseUrl = communityBaseUrl;
            return this;
        }
        @CustomType.Setter
        public Builder configuration(Map<String,Object> configuration) {
            if (configuration == null) {
              throw new MissingRequiredPropertyException("GetConnectionOption", "configuration");
            }
            this.configuration = configuration;
            return this;
        }
        @CustomType.Setter
        public Builder connectionSettings(List<GetConnectionOptionConnectionSetting> connectionSettings) {
            if (connectionSettings == null) {
              throw new MissingRequiredPropertyException("GetConnectionOption", "connectionSettings");
            }
            this.connectionSettings = connectionSettings;
            return this;
        }
        public Builder connectionSettings(GetConnectionOptionConnectionSetting... connectionSettings) {
            return connectionSettings(List.of(connectionSettings));
        }
        @CustomType.Setter
        public Builder customScripts(Map<String,String> customScripts) {
            if (customScripts == null) {
              throw new MissingRequiredPropertyException("GetConnectionOption", "customScripts");
            }
            this.customScripts = customScripts;
            return this;
        }
        @CustomType.Setter
        public Builder debug(Boolean debug) {
            if (debug == null) {
              throw new MissingRequiredPropertyException("GetConnectionOption", "debug");
            }
            this.debug = debug;
            return this;
        }
        @CustomType.Setter
        public Builder decryptionKeys(List<GetConnectionOptionDecryptionKey> decryptionKeys) {
            if (decryptionKeys == null) {
              throw new MissingRequiredPropertyException("GetConnectionOption", "decryptionKeys");
            }
            this.decryptionKeys = decryptionKeys;
            return this;
        }
        public Builder decryptionKeys(GetConnectionOptionDecryptionKey... decryptionKeys) {
            return decryptionKeys(List.of(decryptionKeys));
        }
        @CustomType.Setter
        public Builder digestAlgorithm(String digestAlgorithm) {
            if (digestAlgorithm == null) {
              throw new MissingRequiredPropertyException("GetConnectionOption", "digestAlgorithm");
            }
            this.digestAlgorithm = digestAlgorithm;
            return this;
        }
        @CustomType.Setter
        public Builder disableCache(Boolean disableCache) {
            if (disableCache == null) {
              throw new MissingRequiredPropertyException("GetConnectionOption", "disableCache");
            }
            this.disableCache = disableCache;
            return this;
        }
        @CustomType.Setter
        public Builder disableSelfServiceChangePassword(Boolean disableSelfServiceChangePassword) {
            if (disableSelfServiceChangePassword == null) {
              throw new MissingRequiredPropertyException("GetConnectionOption", "disableSelfServiceChangePassword");
            }
            this.disableSelfServiceChangePassword = disableSelfServiceChangePassword;
            return this;
        }
        @CustomType.Setter
        public Builder disableSignOut(Boolean disableSignOut) {
            if (disableSignOut == null) {
              throw new MissingRequiredPropertyException("GetConnectionOption", "disableSignOut");
            }
            this.disableSignOut = disableSignOut;
            return this;
        }
        @CustomType.Setter
        public Builder disableSignup(Boolean disableSignup) {
            if (disableSignup == null) {
              throw new MissingRequiredPropertyException("GetConnectionOption", "disableSignup");
            }
            this.disableSignup = disableSignup;
            return this;
        }
        @CustomType.Setter
        public Builder discoveryUrl(String discoveryUrl) {
            if (discoveryUrl == null) {
              throw new MissingRequiredPropertyException("GetConnectionOption", "discoveryUrl");
            }
            this.discoveryUrl = discoveryUrl;
            return this;
        }
        @CustomType.Setter
        public Builder domain(String domain) {
            if (domain == null) {
              throw new MissingRequiredPropertyException("GetConnectionOption", "domain");
            }
            this.domain = domain;
            return this;
        }
        @CustomType.Setter
        public Builder domainAliases(List<String> domainAliases) {
            if (domainAliases == null) {
              throw new MissingRequiredPropertyException("GetConnectionOption", "domainAliases");
            }
            this.domainAliases = domainAliases;
            return this;
        }
        public Builder domainAliases(String... domainAliases) {
            return domainAliases(List.of(domainAliases));
        }
        @CustomType.Setter
        public Builder enableScriptContext(Boolean enableScriptContext) {
            if (enableScriptContext == null) {
              throw new MissingRequiredPropertyException("GetConnectionOption", "enableScriptContext");
            }
            this.enableScriptContext = enableScriptContext;
            return this;
        }
        @CustomType.Setter
        public Builder enabledDatabaseCustomization(Boolean enabledDatabaseCustomization) {
            if (enabledDatabaseCustomization == null) {
              throw new MissingRequiredPropertyException("GetConnectionOption", "enabledDatabaseCustomization");
            }
            this.enabledDatabaseCustomization = enabledDatabaseCustomization;
            return this;
        }
        @CustomType.Setter
        public Builder entityId(String entityId) {
            if (entityId == null) {
              throw new MissingRequiredPropertyException("GetConnectionOption", "entityId");
            }
            this.entityId = entityId;
            return this;
        }
        @CustomType.Setter
        public Builder fedMetadataXml(String fedMetadataXml) {
            if (fedMetadataXml == null) {
              throw new MissingRequiredPropertyException("GetConnectionOption", "fedMetadataXml");
            }
            this.fedMetadataXml = fedMetadataXml;
            return this;
        }
        @CustomType.Setter
        public Builder fieldsMap(String fieldsMap) {
            if (fieldsMap == null) {
              throw new MissingRequiredPropertyException("GetConnectionOption", "fieldsMap");
            }
            this.fieldsMap = fieldsMap;
            return this;
        }
        @CustomType.Setter
        public Builder forwardRequestInfo(Boolean forwardRequestInfo) {
            if (forwardRequestInfo == null) {
              throw new MissingRequiredPropertyException("GetConnectionOption", "forwardRequestInfo");
            }
            this.forwardRequestInfo = forwardRequestInfo;
            return this;
        }
        @CustomType.Setter
        public Builder from(String from) {
            if (from == null) {
              throw new MissingRequiredPropertyException("GetConnectionOption", "from");
            }
            this.from = from;
            return this;
        }
        @CustomType.Setter
        public Builder gatewayAuthentications(List<GetConnectionOptionGatewayAuthentication> gatewayAuthentications) {
            if (gatewayAuthentications == null) {
              throw new MissingRequiredPropertyException("GetConnectionOption", "gatewayAuthentications");
            }
            this.gatewayAuthentications = gatewayAuthentications;
            return this;
        }
        public Builder gatewayAuthentications(GetConnectionOptionGatewayAuthentication... gatewayAuthentications) {
            return gatewayAuthentications(List.of(gatewayAuthentications));
        }
        @CustomType.Setter
        public Builder gatewayUrl(String gatewayUrl) {
            if (gatewayUrl == null) {
              throw new MissingRequiredPropertyException("GetConnectionOption", "gatewayUrl");
            }
            this.gatewayUrl = gatewayUrl;
            return this;
        }
        @CustomType.Setter
        public Builder iconUrl(String iconUrl) {
            if (iconUrl == null) {
              throw new MissingRequiredPropertyException("GetConnectionOption", "iconUrl");
            }
            this.iconUrl = iconUrl;
            return this;
        }
        @CustomType.Setter
        public Builder identityApi(String identityApi) {
            if (identityApi == null) {
              throw new MissingRequiredPropertyException("GetConnectionOption", "identityApi");
            }
            this.identityApi = identityApi;
            return this;
        }
        @CustomType.Setter
        public Builder idpInitiateds(List<GetConnectionOptionIdpInitiated> idpInitiateds) {
            if (idpInitiateds == null) {
              throw new MissingRequiredPropertyException("GetConnectionOption", "idpInitiateds");
            }
            this.idpInitiateds = idpInitiateds;
            return this;
        }
        public Builder idpInitiateds(GetConnectionOptionIdpInitiated... idpInitiateds) {
            return idpInitiateds(List.of(idpInitiateds));
        }
        @CustomType.Setter
        public Builder importMode(Boolean importMode) {
            if (importMode == null) {
              throw new MissingRequiredPropertyException("GetConnectionOption", "importMode");
            }
            this.importMode = importMode;
            return this;
        }
        @CustomType.Setter
        public Builder ips(List<String> ips) {
            if (ips == null) {
              throw new MissingRequiredPropertyException("GetConnectionOption", "ips");
            }
            this.ips = ips;
            return this;
        }
        public Builder ips(String... ips) {
            return ips(List.of(ips));
        }
        @CustomType.Setter
        public Builder issuer(String issuer) {
            if (issuer == null) {
              throw new MissingRequiredPropertyException("GetConnectionOption", "issuer");
            }
            this.issuer = issuer;
            return this;
        }
        @CustomType.Setter
        public Builder jwksUri(String jwksUri) {
            if (jwksUri == null) {
              throw new MissingRequiredPropertyException("GetConnectionOption", "jwksUri");
            }
            this.jwksUri = jwksUri;
            return this;
        }
        @CustomType.Setter
        public Builder keyId(String keyId) {
            if (keyId == null) {
              throw new MissingRequiredPropertyException("GetConnectionOption", "keyId");
            }
            this.keyId = keyId;
            return this;
        }
        @CustomType.Setter
        public Builder mapUserIdToId(Boolean mapUserIdToId) {
            if (mapUserIdToId == null) {
              throw new MissingRequiredPropertyException("GetConnectionOption", "mapUserIdToId");
            }
            this.mapUserIdToId = mapUserIdToId;
            return this;
        }
        @CustomType.Setter
        public Builder maxGroupsToRetrieve(String maxGroupsToRetrieve) {
            if (maxGroupsToRetrieve == null) {
              throw new MissingRequiredPropertyException("GetConnectionOption", "maxGroupsToRetrieve");
            }
            this.maxGroupsToRetrieve = maxGroupsToRetrieve;
            return this;
        }
        @CustomType.Setter
        public Builder messagingServiceSid(String messagingServiceSid) {
            if (messagingServiceSid == null) {
              throw new MissingRequiredPropertyException("GetConnectionOption", "messagingServiceSid");
            }
            this.messagingServiceSid = messagingServiceSid;
            return this;
        }
        @CustomType.Setter
        public Builder metadataUrl(String metadataUrl) {
            if (metadataUrl == null) {
              throw new MissingRequiredPropertyException("GetConnectionOption", "metadataUrl");
            }
            this.metadataUrl = metadataUrl;
            return this;
        }
        @CustomType.Setter
        public Builder metadataXml(String metadataXml) {
            if (metadataXml == null) {
              throw new MissingRequiredPropertyException("GetConnectionOption", "metadataXml");
            }
            this.metadataXml = metadataXml;
            return this;
        }
        @CustomType.Setter
        public Builder mfas(List<GetConnectionOptionMfa> mfas) {
            if (mfas == null) {
              throw new MissingRequiredPropertyException("GetConnectionOption", "mfas");
            }
            this.mfas = mfas;
            return this;
        }
        public Builder mfas(GetConnectionOptionMfa... mfas) {
            return mfas(List.of(mfas));
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetConnectionOption", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder nonPersistentAttrs(List<String> nonPersistentAttrs) {
            if (nonPersistentAttrs == null) {
              throw new MissingRequiredPropertyException("GetConnectionOption", "nonPersistentAttrs");
            }
            this.nonPersistentAttrs = nonPersistentAttrs;
            return this;
        }
        public Builder nonPersistentAttrs(String... nonPersistentAttrs) {
            return nonPersistentAttrs(List.of(nonPersistentAttrs));
        }
        @CustomType.Setter
        public Builder passwordComplexityOptions(List<GetConnectionOptionPasswordComplexityOption> passwordComplexityOptions) {
            if (passwordComplexityOptions == null) {
              throw new MissingRequiredPropertyException("GetConnectionOption", "passwordComplexityOptions");
            }
            this.passwordComplexityOptions = passwordComplexityOptions;
            return this;
        }
        public Builder passwordComplexityOptions(GetConnectionOptionPasswordComplexityOption... passwordComplexityOptions) {
            return passwordComplexityOptions(List.of(passwordComplexityOptions));
        }
        @CustomType.Setter
        public Builder passwordDictionaries(List<GetConnectionOptionPasswordDictionary> passwordDictionaries) {
            if (passwordDictionaries == null) {
              throw new MissingRequiredPropertyException("GetConnectionOption", "passwordDictionaries");
            }
            this.passwordDictionaries = passwordDictionaries;
            return this;
        }
        public Builder passwordDictionaries(GetConnectionOptionPasswordDictionary... passwordDictionaries) {
            return passwordDictionaries(List.of(passwordDictionaries));
        }
        @CustomType.Setter
        public Builder passwordHistories(List<GetConnectionOptionPasswordHistory> passwordHistories) {
            if (passwordHistories == null) {
              throw new MissingRequiredPropertyException("GetConnectionOption", "passwordHistories");
            }
            this.passwordHistories = passwordHistories;
            return this;
        }
        public Builder passwordHistories(GetConnectionOptionPasswordHistory... passwordHistories) {
            return passwordHistories(List.of(passwordHistories));
        }
        @CustomType.Setter
        public Builder passwordNoPersonalInfos(List<GetConnectionOptionPasswordNoPersonalInfo> passwordNoPersonalInfos) {
            if (passwordNoPersonalInfos == null) {
              throw new MissingRequiredPropertyException("GetConnectionOption", "passwordNoPersonalInfos");
            }
            this.passwordNoPersonalInfos = passwordNoPersonalInfos;
            return this;
        }
        public Builder passwordNoPersonalInfos(GetConnectionOptionPasswordNoPersonalInfo... passwordNoPersonalInfos) {
            return passwordNoPersonalInfos(List.of(passwordNoPersonalInfos));
        }
        @CustomType.Setter
        public Builder passwordPolicy(String passwordPolicy) {
            if (passwordPolicy == null) {
              throw new MissingRequiredPropertyException("GetConnectionOption", "passwordPolicy");
            }
            this.passwordPolicy = passwordPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder pingFederateBaseUrl(String pingFederateBaseUrl) {
            if (pingFederateBaseUrl == null) {
              throw new MissingRequiredPropertyException("GetConnectionOption", "pingFederateBaseUrl");
            }
            this.pingFederateBaseUrl = pingFederateBaseUrl;
            return this;
        }
        @CustomType.Setter
        public Builder pkceEnabled(Boolean pkceEnabled) {
            if (pkceEnabled == null) {
              throw new MissingRequiredPropertyException("GetConnectionOption", "pkceEnabled");
            }
            this.pkceEnabled = pkceEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder protocolBinding(String protocolBinding) {
            if (protocolBinding == null) {
              throw new MissingRequiredPropertyException("GetConnectionOption", "protocolBinding");
            }
            this.protocolBinding = protocolBinding;
            return this;
        }
        @CustomType.Setter
        public Builder provider(String provider) {
            if (provider == null) {
              throw new MissingRequiredPropertyException("GetConnectionOption", "provider");
            }
            this.provider = provider;
            return this;
        }
        @CustomType.Setter
        public Builder requestTemplate(String requestTemplate) {
            if (requestTemplate == null) {
              throw new MissingRequiredPropertyException("GetConnectionOption", "requestTemplate");
            }
            this.requestTemplate = requestTemplate;
            return this;
        }
        @CustomType.Setter
        public Builder requiresUsername(Boolean requiresUsername) {
            if (requiresUsername == null) {
              throw new MissingRequiredPropertyException("GetConnectionOption", "requiresUsername");
            }
            this.requiresUsername = requiresUsername;
            return this;
        }
        @CustomType.Setter
        public Builder scopes(List<String> scopes) {
            if (scopes == null) {
              throw new MissingRequiredPropertyException("GetConnectionOption", "scopes");
            }
            this.scopes = scopes;
            return this;
        }
        public Builder scopes(String... scopes) {
            return scopes(List.of(scopes));
        }
        @CustomType.Setter
        public Builder scripts(Map<String,String> scripts) {
            if (scripts == null) {
              throw new MissingRequiredPropertyException("GetConnectionOption", "scripts");
            }
            this.scripts = scripts;
            return this;
        }
        @CustomType.Setter
        public Builder setUserRootAttributes(String setUserRootAttributes) {
            if (setUserRootAttributes == null) {
              throw new MissingRequiredPropertyException("GetConnectionOption", "setUserRootAttributes");
            }
            this.setUserRootAttributes = setUserRootAttributes;
            return this;
        }
        @CustomType.Setter
        public Builder shouldTrustEmailVerifiedConnection(String shouldTrustEmailVerifiedConnection) {
            if (shouldTrustEmailVerifiedConnection == null) {
              throw new MissingRequiredPropertyException("GetConnectionOption", "shouldTrustEmailVerifiedConnection");
            }
            this.shouldTrustEmailVerifiedConnection = shouldTrustEmailVerifiedConnection;
            return this;
        }
        @CustomType.Setter
        public Builder signInEndpoint(String signInEndpoint) {
            if (signInEndpoint == null) {
              throw new MissingRequiredPropertyException("GetConnectionOption", "signInEndpoint");
            }
            this.signInEndpoint = signInEndpoint;
            return this;
        }
        @CustomType.Setter
        public Builder signOutEndpoint(String signOutEndpoint) {
            if (signOutEndpoint == null) {
              throw new MissingRequiredPropertyException("GetConnectionOption", "signOutEndpoint");
            }
            this.signOutEndpoint = signOutEndpoint;
            return this;
        }
        @CustomType.Setter
        public Builder signSamlRequest(Boolean signSamlRequest) {
            if (signSamlRequest == null) {
              throw new MissingRequiredPropertyException("GetConnectionOption", "signSamlRequest");
            }
            this.signSamlRequest = signSamlRequest;
            return this;
        }
        @CustomType.Setter
        public Builder signatureAlgorithm(String signatureAlgorithm) {
            if (signatureAlgorithm == null) {
              throw new MissingRequiredPropertyException("GetConnectionOption", "signatureAlgorithm");
            }
            this.signatureAlgorithm = signatureAlgorithm;
            return this;
        }
        @CustomType.Setter
        public Builder signingCert(String signingCert) {
            if (signingCert == null) {
              throw new MissingRequiredPropertyException("GetConnectionOption", "signingCert");
            }
            this.signingCert = signingCert;
            return this;
        }
        @CustomType.Setter
        public Builder signingKeys(List<GetConnectionOptionSigningKey> signingKeys) {
            if (signingKeys == null) {
              throw new MissingRequiredPropertyException("GetConnectionOption", "signingKeys");
            }
            this.signingKeys = signingKeys;
            return this;
        }
        public Builder signingKeys(GetConnectionOptionSigningKey... signingKeys) {
            return signingKeys(List.of(signingKeys));
        }
        @CustomType.Setter
        public Builder strategyVersion(Integer strategyVersion) {
            if (strategyVersion == null) {
              throw new MissingRequiredPropertyException("GetConnectionOption", "strategyVersion");
            }
            this.strategyVersion = strategyVersion;
            return this;
        }
        @CustomType.Setter
        public Builder subject(String subject) {
            if (subject == null) {
              throw new MissingRequiredPropertyException("GetConnectionOption", "subject");
            }
            this.subject = subject;
            return this;
        }
        @CustomType.Setter
        public Builder syntax(String syntax) {
            if (syntax == null) {
              throw new MissingRequiredPropertyException("GetConnectionOption", "syntax");
            }
            this.syntax = syntax;
            return this;
        }
        @CustomType.Setter
        public Builder teamId(String teamId) {
            if (teamId == null) {
              throw new MissingRequiredPropertyException("GetConnectionOption", "teamId");
            }
            this.teamId = teamId;
            return this;
        }
        @CustomType.Setter
        public Builder template(String template) {
            if (template == null) {
              throw new MissingRequiredPropertyException("GetConnectionOption", "template");
            }
            this.template = template;
            return this;
        }
        @CustomType.Setter
        public Builder tenantDomain(String tenantDomain) {
            if (tenantDomain == null) {
              throw new MissingRequiredPropertyException("GetConnectionOption", "tenantDomain");
            }
            this.tenantDomain = tenantDomain;
            return this;
        }
        @CustomType.Setter
        public Builder tokenEndpoint(String tokenEndpoint) {
            if (tokenEndpoint == null) {
              throw new MissingRequiredPropertyException("GetConnectionOption", "tokenEndpoint");
            }
            this.tokenEndpoint = tokenEndpoint;
            return this;
        }
        @CustomType.Setter
        public Builder totps(List<GetConnectionOptionTotp> totps) {
            if (totps == null) {
              throw new MissingRequiredPropertyException("GetConnectionOption", "totps");
            }
            this.totps = totps;
            return this;
        }
        public Builder totps(GetConnectionOptionTotp... totps) {
            return totps(List.of(totps));
        }
        @CustomType.Setter
        public Builder twilioSid(String twilioSid) {
            if (twilioSid == null) {
              throw new MissingRequiredPropertyException("GetConnectionOption", "twilioSid");
            }
            this.twilioSid = twilioSid;
            return this;
        }
        @CustomType.Setter
        public Builder twilioToken(String twilioToken) {
            if (twilioToken == null) {
              throw new MissingRequiredPropertyException("GetConnectionOption", "twilioToken");
            }
            this.twilioToken = twilioToken;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetConnectionOption", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder upstreamParams(String upstreamParams) {
            if (upstreamParams == null) {
              throw new MissingRequiredPropertyException("GetConnectionOption", "upstreamParams");
            }
            this.upstreamParams = upstreamParams;
            return this;
        }
        @CustomType.Setter
        public Builder useCertAuth(Boolean useCertAuth) {
            if (useCertAuth == null) {
              throw new MissingRequiredPropertyException("GetConnectionOption", "useCertAuth");
            }
            this.useCertAuth = useCertAuth;
            return this;
        }
        @CustomType.Setter
        public Builder useKerberos(Boolean useKerberos) {
            if (useKerberos == null) {
              throw new MissingRequiredPropertyException("GetConnectionOption", "useKerberos");
            }
            this.useKerberos = useKerberos;
            return this;
        }
        @CustomType.Setter
        public Builder useWsfed(Boolean useWsfed) {
            if (useWsfed == null) {
              throw new MissingRequiredPropertyException("GetConnectionOption", "useWsfed");
            }
            this.useWsfed = useWsfed;
            return this;
        }
        @CustomType.Setter
        public Builder userIdAttribute(String userIdAttribute) {
            if (userIdAttribute == null) {
              throw new MissingRequiredPropertyException("GetConnectionOption", "userIdAttribute");
            }
            this.userIdAttribute = userIdAttribute;
            return this;
        }
        @CustomType.Setter
        public Builder userinfoEndpoint(String userinfoEndpoint) {
            if (userinfoEndpoint == null) {
              throw new MissingRequiredPropertyException("GetConnectionOption", "userinfoEndpoint");
            }
            this.userinfoEndpoint = userinfoEndpoint;
            return this;
        }
        @CustomType.Setter
        public Builder validations(List<GetConnectionOptionValidation> validations) {
            if (validations == null) {
              throw new MissingRequiredPropertyException("GetConnectionOption", "validations");
            }
            this.validations = validations;
            return this;
        }
        public Builder validations(GetConnectionOptionValidation... validations) {
            return validations(List.of(validations));
        }
        @CustomType.Setter
        public Builder waadCommonEndpoint(Boolean waadCommonEndpoint) {
            if (waadCommonEndpoint == null) {
              throw new MissingRequiredPropertyException("GetConnectionOption", "waadCommonEndpoint");
            }
            this.waadCommonEndpoint = waadCommonEndpoint;
            return this;
        }
        @CustomType.Setter
        public Builder waadProtocol(String waadProtocol) {
            if (waadProtocol == null) {
              throw new MissingRequiredPropertyException("GetConnectionOption", "waadProtocol");
            }
            this.waadProtocol = waadProtocol;
            return this;
        }
        public GetConnectionOption build() {
            final var _resultValue = new GetConnectionOption();
            _resultValue.adfsServer = adfsServer;
            _resultValue.allowedAudiences = allowedAudiences;
            _resultValue.apiEnableUsers = apiEnableUsers;
            _resultValue.appId = appId;
            _resultValue.attributeMaps = attributeMaps;
            _resultValue.authParams = authParams;
            _resultValue.authorizationEndpoint = authorizationEndpoint;
            _resultValue.bruteForceProtection = bruteForceProtection;
            _resultValue.clientId = clientId;
            _resultValue.clientSecret = clientSecret;
            _resultValue.communityBaseUrl = communityBaseUrl;
            _resultValue.configuration = configuration;
            _resultValue.connectionSettings = connectionSettings;
            _resultValue.customScripts = customScripts;
            _resultValue.debug = debug;
            _resultValue.decryptionKeys = decryptionKeys;
            _resultValue.digestAlgorithm = digestAlgorithm;
            _resultValue.disableCache = disableCache;
            _resultValue.disableSelfServiceChangePassword = disableSelfServiceChangePassword;
            _resultValue.disableSignOut = disableSignOut;
            _resultValue.disableSignup = disableSignup;
            _resultValue.discoveryUrl = discoveryUrl;
            _resultValue.domain = domain;
            _resultValue.domainAliases = domainAliases;
            _resultValue.enableScriptContext = enableScriptContext;
            _resultValue.enabledDatabaseCustomization = enabledDatabaseCustomization;
            _resultValue.entityId = entityId;
            _resultValue.fedMetadataXml = fedMetadataXml;
            _resultValue.fieldsMap = fieldsMap;
            _resultValue.forwardRequestInfo = forwardRequestInfo;
            _resultValue.from = from;
            _resultValue.gatewayAuthentications = gatewayAuthentications;
            _resultValue.gatewayUrl = gatewayUrl;
            _resultValue.iconUrl = iconUrl;
            _resultValue.identityApi = identityApi;
            _resultValue.idpInitiateds = idpInitiateds;
            _resultValue.importMode = importMode;
            _resultValue.ips = ips;
            _resultValue.issuer = issuer;
            _resultValue.jwksUri = jwksUri;
            _resultValue.keyId = keyId;
            _resultValue.mapUserIdToId = mapUserIdToId;
            _resultValue.maxGroupsToRetrieve = maxGroupsToRetrieve;
            _resultValue.messagingServiceSid = messagingServiceSid;
            _resultValue.metadataUrl = metadataUrl;
            _resultValue.metadataXml = metadataXml;
            _resultValue.mfas = mfas;
            _resultValue.name = name;
            _resultValue.nonPersistentAttrs = nonPersistentAttrs;
            _resultValue.passwordComplexityOptions = passwordComplexityOptions;
            _resultValue.passwordDictionaries = passwordDictionaries;
            _resultValue.passwordHistories = passwordHistories;
            _resultValue.passwordNoPersonalInfos = passwordNoPersonalInfos;
            _resultValue.passwordPolicy = passwordPolicy;
            _resultValue.pingFederateBaseUrl = pingFederateBaseUrl;
            _resultValue.pkceEnabled = pkceEnabled;
            _resultValue.protocolBinding = protocolBinding;
            _resultValue.provider = provider;
            _resultValue.requestTemplate = requestTemplate;
            _resultValue.requiresUsername = requiresUsername;
            _resultValue.scopes = scopes;
            _resultValue.scripts = scripts;
            _resultValue.setUserRootAttributes = setUserRootAttributes;
            _resultValue.shouldTrustEmailVerifiedConnection = shouldTrustEmailVerifiedConnection;
            _resultValue.signInEndpoint = signInEndpoint;
            _resultValue.signOutEndpoint = signOutEndpoint;
            _resultValue.signSamlRequest = signSamlRequest;
            _resultValue.signatureAlgorithm = signatureAlgorithm;
            _resultValue.signingCert = signingCert;
            _resultValue.signingKeys = signingKeys;
            _resultValue.strategyVersion = strategyVersion;
            _resultValue.subject = subject;
            _resultValue.syntax = syntax;
            _resultValue.teamId = teamId;
            _resultValue.template = template;
            _resultValue.tenantDomain = tenantDomain;
            _resultValue.tokenEndpoint = tokenEndpoint;
            _resultValue.totps = totps;
            _resultValue.twilioSid = twilioSid;
            _resultValue.twilioToken = twilioToken;
            _resultValue.type = type;
            _resultValue.upstreamParams = upstreamParams;
            _resultValue.useCertAuth = useCertAuth;
            _resultValue.useKerberos = useKerberos;
            _resultValue.useWsfed = useWsfed;
            _resultValue.userIdAttribute = userIdAttribute;
            _resultValue.userinfoEndpoint = userinfoEndpoint;
            _resultValue.validations = validations;
            _resultValue.waadCommonEndpoint = waadCommonEndpoint;
            _resultValue.waadProtocol = waadProtocol;
            return _resultValue;
        }
    }
}
