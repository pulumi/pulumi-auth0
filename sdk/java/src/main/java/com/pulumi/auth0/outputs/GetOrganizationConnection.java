// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.auth0.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetOrganizationConnection {
    /**
     * @return When `true`, all users that log in with this connection will be automatically granted membership in the organization. When `false`, users must be granted membership in the organization before logging in with this connection.
     * 
     */
    private Boolean assignMembershipOnLogin;
    /**
     * @return The ID of the enabled connection on the organization.
     * 
     */
    private String connectionId;
    /**
     * @return Determines whether organization sign-up should be enabled for this organization connection. Only applicable for database connections. Note: `is_signup_enabled` can only be `true` if `assign_membership_on_login` is `true`.
     * 
     */
    private Boolean isSignupEnabled;
    /**
     * @return Determines whether a connection should be displayed on this organization’s login prompt. Only applicable for enterprise connections.
     * 
     */
    private Boolean showAsButton;

    private GetOrganizationConnection() {}
    /**
     * @return When `true`, all users that log in with this connection will be automatically granted membership in the organization. When `false`, users must be granted membership in the organization before logging in with this connection.
     * 
     */
    public Boolean assignMembershipOnLogin() {
        return this.assignMembershipOnLogin;
    }
    /**
     * @return The ID of the enabled connection on the organization.
     * 
     */
    public String connectionId() {
        return this.connectionId;
    }
    /**
     * @return Determines whether organization sign-up should be enabled for this organization connection. Only applicable for database connections. Note: `is_signup_enabled` can only be `true` if `assign_membership_on_login` is `true`.
     * 
     */
    public Boolean isSignupEnabled() {
        return this.isSignupEnabled;
    }
    /**
     * @return Determines whether a connection should be displayed on this organization’s login prompt. Only applicable for enterprise connections.
     * 
     */
    public Boolean showAsButton() {
        return this.showAsButton;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetOrganizationConnection defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean assignMembershipOnLogin;
        private String connectionId;
        private Boolean isSignupEnabled;
        private Boolean showAsButton;
        public Builder() {}
        public Builder(GetOrganizationConnection defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.assignMembershipOnLogin = defaults.assignMembershipOnLogin;
    	      this.connectionId = defaults.connectionId;
    	      this.isSignupEnabled = defaults.isSignupEnabled;
    	      this.showAsButton = defaults.showAsButton;
        }

        @CustomType.Setter
        public Builder assignMembershipOnLogin(Boolean assignMembershipOnLogin) {
            if (assignMembershipOnLogin == null) {
              throw new MissingRequiredPropertyException("GetOrganizationConnection", "assignMembershipOnLogin");
            }
            this.assignMembershipOnLogin = assignMembershipOnLogin;
            return this;
        }
        @CustomType.Setter
        public Builder connectionId(String connectionId) {
            if (connectionId == null) {
              throw new MissingRequiredPropertyException("GetOrganizationConnection", "connectionId");
            }
            this.connectionId = connectionId;
            return this;
        }
        @CustomType.Setter
        public Builder isSignupEnabled(Boolean isSignupEnabled) {
            if (isSignupEnabled == null) {
              throw new MissingRequiredPropertyException("GetOrganizationConnection", "isSignupEnabled");
            }
            this.isSignupEnabled = isSignupEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder showAsButton(Boolean showAsButton) {
            if (showAsButton == null) {
              throw new MissingRequiredPropertyException("GetOrganizationConnection", "showAsButton");
            }
            this.showAsButton = showAsButton;
            return this;
        }
        public GetOrganizationConnection build() {
            final var _resultValue = new GetOrganizationConnection();
            _resultValue.assignMembershipOnLogin = assignMembershipOnLogin;
            _resultValue.connectionId = connectionId;
            _resultValue.isSignupEnabled = isSignupEnabled;
            _resultValue.showAsButton = showAsButton;
            return _resultValue;
        }
    }
}
