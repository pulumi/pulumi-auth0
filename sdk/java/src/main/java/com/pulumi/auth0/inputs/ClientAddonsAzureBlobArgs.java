// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.auth0.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ClientAddonsAzureBlobArgs extends com.pulumi.resources.ResourceArgs {

    public static final ClientAddonsAzureBlobArgs Empty = new ClientAddonsAzureBlobArgs();

    /**
     * Your Azure storage account name. Usually first segment in your Azure storage URL, for example `https://acme-org.blob.core.windows.net` would be the account name `acme-org`.
     * 
     */
    @Import(name="accountName")
    private @Nullable Output<String> accountName;

    /**
     * @return Your Azure storage account name. Usually first segment in your Azure storage URL, for example `https://acme-org.blob.core.windows.net` would be the account name `acme-org`.
     * 
     */
    public Optional<Output<String>> accountName() {
        return Optional.ofNullable(this.accountName);
    }

    /**
     * Indicates if the issued token has permission to delete the blob.
     * 
     */
    @Import(name="blobDelete")
    private @Nullable Output<Boolean> blobDelete;

    /**
     * @return Indicates if the issued token has permission to delete the blob.
     * 
     */
    public Optional<Output<Boolean>> blobDelete() {
        return Optional.ofNullable(this.blobDelete);
    }

    /**
     * Entity to request a token for, such as `my-blob`. If blank the computed SAS will apply to the entire storage container.
     * 
     */
    @Import(name="blobName")
    private @Nullable Output<String> blobName;

    /**
     * @return Entity to request a token for, such as `my-blob`. If blank the computed SAS will apply to the entire storage container.
     * 
     */
    public Optional<Output<String>> blobName() {
        return Optional.ofNullable(this.blobName);
    }

    /**
     * Indicates if the issued token has permission to read the content, properties, metadata and block list. Use the blob as the source of a copy operation.
     * 
     */
    @Import(name="blobRead")
    private @Nullable Output<Boolean> blobRead;

    /**
     * @return Indicates if the issued token has permission to read the content, properties, metadata and block list. Use the blob as the source of a copy operation.
     * 
     */
    public Optional<Output<Boolean>> blobRead() {
        return Optional.ofNullable(this.blobRead);
    }

    /**
     * Indicates if the issued token has permission to create or write content, properties, metadata, or block list. Snapshot or lease the blob. Resize the blob (page blob only). Use the blob as the destination of a copy operation within the same account.
     * 
     */
    @Import(name="blobWrite")
    private @Nullable Output<Boolean> blobWrite;

    /**
     * @return Indicates if the issued token has permission to create or write content, properties, metadata, or block list. Snapshot or lease the blob. Resize the blob (page blob only). Use the blob as the destination of a copy operation within the same account.
     * 
     */
    public Optional<Output<Boolean>> blobWrite() {
        return Optional.ofNullable(this.blobWrite);
    }

    /**
     * Indicates if issued token has permission to delete any blob in the container.
     * 
     */
    @Import(name="containerDelete")
    private @Nullable Output<Boolean> containerDelete;

    /**
     * @return Indicates if issued token has permission to delete any blob in the container.
     * 
     */
    public Optional<Output<Boolean>> containerDelete() {
        return Optional.ofNullable(this.containerDelete);
    }

    /**
     * Indicates if the issued token has permission to list blobs in the container.
     * 
     */
    @Import(name="containerList")
    private @Nullable Output<Boolean> containerList;

    /**
     * @return Indicates if the issued token has permission to list blobs in the container.
     * 
     */
    public Optional<Output<Boolean>> containerList() {
        return Optional.ofNullable(this.containerList);
    }

    /**
     * Container to request a token for, such as `my-container`.
     * 
     */
    @Import(name="containerName")
    private @Nullable Output<String> containerName;

    /**
     * @return Container to request a token for, such as `my-container`.
     * 
     */
    public Optional<Output<String>> containerName() {
        return Optional.ofNullable(this.containerName);
    }

    /**
     * Indicates if the issued token has permission to read the content, properties, metadata or block list of any blob in the container. Use any blob in the container as the source of a copy operation.
     * 
     */
    @Import(name="containerRead")
    private @Nullable Output<Boolean> containerRead;

    /**
     * @return Indicates if the issued token has permission to read the content, properties, metadata or block list of any blob in the container. Use any blob in the container as the source of a copy operation.
     * 
     */
    public Optional<Output<Boolean>> containerRead() {
        return Optional.ofNullable(this.containerRead);
    }

    /**
     * Indicates that for any blob in the container if the issued token has permission to create or write content, properties, metadata, or block list. Snapshot or lease the blob. Resize the blob (page blob only). Use the blob as the destination of a copy operation within the same account.
     * 
     */
    @Import(name="containerWrite")
    private @Nullable Output<Boolean> containerWrite;

    /**
     * @return Indicates that for any blob in the container if the issued token has permission to create or write content, properties, metadata, or block list. Snapshot or lease the blob. Resize the blob (page blob only). Use the blob as the destination of a copy operation within the same account.
     * 
     */
    public Optional<Output<Boolean>> containerWrite() {
        return Optional.ofNullable(this.containerWrite);
    }

    /**
     * Expiration in minutes for the generated token (default of 5 minutes).
     * 
     */
    @Import(name="expiration")
    private @Nullable Output<Integer> expiration;

    /**
     * @return Expiration in minutes for the generated token (default of 5 minutes).
     * 
     */
    public Optional<Output<Integer>> expiration() {
        return Optional.ofNullable(this.expiration);
    }

    /**
     * Shared access policy identifier defined in your storage account resource.
     * 
     */
    @Import(name="signedIdentifier")
    private @Nullable Output<String> signedIdentifier;

    /**
     * @return Shared access policy identifier defined in your storage account resource.
     * 
     */
    public Optional<Output<String>> signedIdentifier() {
        return Optional.ofNullable(this.signedIdentifier);
    }

    /**
     * Access key associated with this storage account.
     * 
     */
    @Import(name="storageAccessKey")
    private @Nullable Output<String> storageAccessKey;

    /**
     * @return Access key associated with this storage account.
     * 
     */
    public Optional<Output<String>> storageAccessKey() {
        return Optional.ofNullable(this.storageAccessKey);
    }

    private ClientAddonsAzureBlobArgs() {}

    private ClientAddonsAzureBlobArgs(ClientAddonsAzureBlobArgs $) {
        this.accountName = $.accountName;
        this.blobDelete = $.blobDelete;
        this.blobName = $.blobName;
        this.blobRead = $.blobRead;
        this.blobWrite = $.blobWrite;
        this.containerDelete = $.containerDelete;
        this.containerList = $.containerList;
        this.containerName = $.containerName;
        this.containerRead = $.containerRead;
        this.containerWrite = $.containerWrite;
        this.expiration = $.expiration;
        this.signedIdentifier = $.signedIdentifier;
        this.storageAccessKey = $.storageAccessKey;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClientAddonsAzureBlobArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClientAddonsAzureBlobArgs $;

        public Builder() {
            $ = new ClientAddonsAzureBlobArgs();
        }

        public Builder(ClientAddonsAzureBlobArgs defaults) {
            $ = new ClientAddonsAzureBlobArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountName Your Azure storage account name. Usually first segment in your Azure storage URL, for example `https://acme-org.blob.core.windows.net` would be the account name `acme-org`.
         * 
         * @return builder
         * 
         */
        public Builder accountName(@Nullable Output<String> accountName) {
            $.accountName = accountName;
            return this;
        }

        /**
         * @param accountName Your Azure storage account name. Usually first segment in your Azure storage URL, for example `https://acme-org.blob.core.windows.net` would be the account name `acme-org`.
         * 
         * @return builder
         * 
         */
        public Builder accountName(String accountName) {
            return accountName(Output.of(accountName));
        }

        /**
         * @param blobDelete Indicates if the issued token has permission to delete the blob.
         * 
         * @return builder
         * 
         */
        public Builder blobDelete(@Nullable Output<Boolean> blobDelete) {
            $.blobDelete = blobDelete;
            return this;
        }

        /**
         * @param blobDelete Indicates if the issued token has permission to delete the blob.
         * 
         * @return builder
         * 
         */
        public Builder blobDelete(Boolean blobDelete) {
            return blobDelete(Output.of(blobDelete));
        }

        /**
         * @param blobName Entity to request a token for, such as `my-blob`. If blank the computed SAS will apply to the entire storage container.
         * 
         * @return builder
         * 
         */
        public Builder blobName(@Nullable Output<String> blobName) {
            $.blobName = blobName;
            return this;
        }

        /**
         * @param blobName Entity to request a token for, such as `my-blob`. If blank the computed SAS will apply to the entire storage container.
         * 
         * @return builder
         * 
         */
        public Builder blobName(String blobName) {
            return blobName(Output.of(blobName));
        }

        /**
         * @param blobRead Indicates if the issued token has permission to read the content, properties, metadata and block list. Use the blob as the source of a copy operation.
         * 
         * @return builder
         * 
         */
        public Builder blobRead(@Nullable Output<Boolean> blobRead) {
            $.blobRead = blobRead;
            return this;
        }

        /**
         * @param blobRead Indicates if the issued token has permission to read the content, properties, metadata and block list. Use the blob as the source of a copy operation.
         * 
         * @return builder
         * 
         */
        public Builder blobRead(Boolean blobRead) {
            return blobRead(Output.of(blobRead));
        }

        /**
         * @param blobWrite Indicates if the issued token has permission to create or write content, properties, metadata, or block list. Snapshot or lease the blob. Resize the blob (page blob only). Use the blob as the destination of a copy operation within the same account.
         * 
         * @return builder
         * 
         */
        public Builder blobWrite(@Nullable Output<Boolean> blobWrite) {
            $.blobWrite = blobWrite;
            return this;
        }

        /**
         * @param blobWrite Indicates if the issued token has permission to create or write content, properties, metadata, or block list. Snapshot or lease the blob. Resize the blob (page blob only). Use the blob as the destination of a copy operation within the same account.
         * 
         * @return builder
         * 
         */
        public Builder blobWrite(Boolean blobWrite) {
            return blobWrite(Output.of(blobWrite));
        }

        /**
         * @param containerDelete Indicates if issued token has permission to delete any blob in the container.
         * 
         * @return builder
         * 
         */
        public Builder containerDelete(@Nullable Output<Boolean> containerDelete) {
            $.containerDelete = containerDelete;
            return this;
        }

        /**
         * @param containerDelete Indicates if issued token has permission to delete any blob in the container.
         * 
         * @return builder
         * 
         */
        public Builder containerDelete(Boolean containerDelete) {
            return containerDelete(Output.of(containerDelete));
        }

        /**
         * @param containerList Indicates if the issued token has permission to list blobs in the container.
         * 
         * @return builder
         * 
         */
        public Builder containerList(@Nullable Output<Boolean> containerList) {
            $.containerList = containerList;
            return this;
        }

        /**
         * @param containerList Indicates if the issued token has permission to list blobs in the container.
         * 
         * @return builder
         * 
         */
        public Builder containerList(Boolean containerList) {
            return containerList(Output.of(containerList));
        }

        /**
         * @param containerName Container to request a token for, such as `my-container`.
         * 
         * @return builder
         * 
         */
        public Builder containerName(@Nullable Output<String> containerName) {
            $.containerName = containerName;
            return this;
        }

        /**
         * @param containerName Container to request a token for, such as `my-container`.
         * 
         * @return builder
         * 
         */
        public Builder containerName(String containerName) {
            return containerName(Output.of(containerName));
        }

        /**
         * @param containerRead Indicates if the issued token has permission to read the content, properties, metadata or block list of any blob in the container. Use any blob in the container as the source of a copy operation.
         * 
         * @return builder
         * 
         */
        public Builder containerRead(@Nullable Output<Boolean> containerRead) {
            $.containerRead = containerRead;
            return this;
        }

        /**
         * @param containerRead Indicates if the issued token has permission to read the content, properties, metadata or block list of any blob in the container. Use any blob in the container as the source of a copy operation.
         * 
         * @return builder
         * 
         */
        public Builder containerRead(Boolean containerRead) {
            return containerRead(Output.of(containerRead));
        }

        /**
         * @param containerWrite Indicates that for any blob in the container if the issued token has permission to create or write content, properties, metadata, or block list. Snapshot or lease the blob. Resize the blob (page blob only). Use the blob as the destination of a copy operation within the same account.
         * 
         * @return builder
         * 
         */
        public Builder containerWrite(@Nullable Output<Boolean> containerWrite) {
            $.containerWrite = containerWrite;
            return this;
        }

        /**
         * @param containerWrite Indicates that for any blob in the container if the issued token has permission to create or write content, properties, metadata, or block list. Snapshot or lease the blob. Resize the blob (page blob only). Use the blob as the destination of a copy operation within the same account.
         * 
         * @return builder
         * 
         */
        public Builder containerWrite(Boolean containerWrite) {
            return containerWrite(Output.of(containerWrite));
        }

        /**
         * @param expiration Expiration in minutes for the generated token (default of 5 minutes).
         * 
         * @return builder
         * 
         */
        public Builder expiration(@Nullable Output<Integer> expiration) {
            $.expiration = expiration;
            return this;
        }

        /**
         * @param expiration Expiration in minutes for the generated token (default of 5 minutes).
         * 
         * @return builder
         * 
         */
        public Builder expiration(Integer expiration) {
            return expiration(Output.of(expiration));
        }

        /**
         * @param signedIdentifier Shared access policy identifier defined in your storage account resource.
         * 
         * @return builder
         * 
         */
        public Builder signedIdentifier(@Nullable Output<String> signedIdentifier) {
            $.signedIdentifier = signedIdentifier;
            return this;
        }

        /**
         * @param signedIdentifier Shared access policy identifier defined in your storage account resource.
         * 
         * @return builder
         * 
         */
        public Builder signedIdentifier(String signedIdentifier) {
            return signedIdentifier(Output.of(signedIdentifier));
        }

        /**
         * @param storageAccessKey Access key associated with this storage account.
         * 
         * @return builder
         * 
         */
        public Builder storageAccessKey(@Nullable Output<String> storageAccessKey) {
            $.storageAccessKey = storageAccessKey;
            return this;
        }

        /**
         * @param storageAccessKey Access key associated with this storage account.
         * 
         * @return builder
         * 
         */
        public Builder storageAccessKey(String storageAccessKey) {
            return storageAccessKey(Output.of(storageAccessKey));
        }

        public ClientAddonsAzureBlobArgs build() {
            return $;
        }
    }

}
