// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.auth0.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetSigningKeysSigningKey {
    /**
     * @return The public certificate of the signing key.
     * 
     */
    private String cert;
    /**
     * @return True if the key is the the current key.
     * 
     */
    private Boolean current;
    /**
     * @return The cert fingerprint.
     * 
     */
    private String fingerprint;
    /**
     * @return The key ID of the signing key.
     * 
     */
    private String kid;
    /**
     * @return True if the key is the the next key.
     * 
     */
    private Boolean next;
    /**
     * @return The public certificate of the signing key in PKCS7 format.
     * 
     */
    private String pkcs7;
    /**
     * @return True if the key is the the previous key.
     * 
     */
    private Boolean previous;
    /**
     * @return True if the key is revoked.
     * 
     */
    private Boolean revoked;
    /**
     * @return The cert thumbprint.
     * 
     */
    private String thumbprint;

    private GetSigningKeysSigningKey() {}
    /**
     * @return The public certificate of the signing key.
     * 
     */
    public String cert() {
        return this.cert;
    }
    /**
     * @return True if the key is the the current key.
     * 
     */
    public Boolean current() {
        return this.current;
    }
    /**
     * @return The cert fingerprint.
     * 
     */
    public String fingerprint() {
        return this.fingerprint;
    }
    /**
     * @return The key ID of the signing key.
     * 
     */
    public String kid() {
        return this.kid;
    }
    /**
     * @return True if the key is the the next key.
     * 
     */
    public Boolean next() {
        return this.next;
    }
    /**
     * @return The public certificate of the signing key in PKCS7 format.
     * 
     */
    public String pkcs7() {
        return this.pkcs7;
    }
    /**
     * @return True if the key is the the previous key.
     * 
     */
    public Boolean previous() {
        return this.previous;
    }
    /**
     * @return True if the key is revoked.
     * 
     */
    public Boolean revoked() {
        return this.revoked;
    }
    /**
     * @return The cert thumbprint.
     * 
     */
    public String thumbprint() {
        return this.thumbprint;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSigningKeysSigningKey defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String cert;
        private Boolean current;
        private String fingerprint;
        private String kid;
        private Boolean next;
        private String pkcs7;
        private Boolean previous;
        private Boolean revoked;
        private String thumbprint;
        public Builder() {}
        public Builder(GetSigningKeysSigningKey defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cert = defaults.cert;
    	      this.current = defaults.current;
    	      this.fingerprint = defaults.fingerprint;
    	      this.kid = defaults.kid;
    	      this.next = defaults.next;
    	      this.pkcs7 = defaults.pkcs7;
    	      this.previous = defaults.previous;
    	      this.revoked = defaults.revoked;
    	      this.thumbprint = defaults.thumbprint;
        }

        @CustomType.Setter
        public Builder cert(String cert) {
            if (cert == null) {
              throw new MissingRequiredPropertyException("GetSigningKeysSigningKey", "cert");
            }
            this.cert = cert;
            return this;
        }
        @CustomType.Setter
        public Builder current(Boolean current) {
            if (current == null) {
              throw new MissingRequiredPropertyException("GetSigningKeysSigningKey", "current");
            }
            this.current = current;
            return this;
        }
        @CustomType.Setter
        public Builder fingerprint(String fingerprint) {
            if (fingerprint == null) {
              throw new MissingRequiredPropertyException("GetSigningKeysSigningKey", "fingerprint");
            }
            this.fingerprint = fingerprint;
            return this;
        }
        @CustomType.Setter
        public Builder kid(String kid) {
            if (kid == null) {
              throw new MissingRequiredPropertyException("GetSigningKeysSigningKey", "kid");
            }
            this.kid = kid;
            return this;
        }
        @CustomType.Setter
        public Builder next(Boolean next) {
            if (next == null) {
              throw new MissingRequiredPropertyException("GetSigningKeysSigningKey", "next");
            }
            this.next = next;
            return this;
        }
        @CustomType.Setter
        public Builder pkcs7(String pkcs7) {
            if (pkcs7 == null) {
              throw new MissingRequiredPropertyException("GetSigningKeysSigningKey", "pkcs7");
            }
            this.pkcs7 = pkcs7;
            return this;
        }
        @CustomType.Setter
        public Builder previous(Boolean previous) {
            if (previous == null) {
              throw new MissingRequiredPropertyException("GetSigningKeysSigningKey", "previous");
            }
            this.previous = previous;
            return this;
        }
        @CustomType.Setter
        public Builder revoked(Boolean revoked) {
            if (revoked == null) {
              throw new MissingRequiredPropertyException("GetSigningKeysSigningKey", "revoked");
            }
            this.revoked = revoked;
            return this;
        }
        @CustomType.Setter
        public Builder thumbprint(String thumbprint) {
            if (thumbprint == null) {
              throw new MissingRequiredPropertyException("GetSigningKeysSigningKey", "thumbprint");
            }
            this.thumbprint = thumbprint;
            return this;
        }
        public GetSigningKeysSigningKey build() {
            final var _resultValue = new GetSigningKeysSigningKey();
            _resultValue.cert = cert;
            _resultValue.current = current;
            _resultValue.fingerprint = fingerprint;
            _resultValue.kid = kid;
            _resultValue.next = next;
            _resultValue.pkcs7 = pkcs7;
            _resultValue.previous = previous;
            _resultValue.revoked = revoked;
            _resultValue.thumbprint = thumbprint;
            return _resultValue;
        }
    }
}
