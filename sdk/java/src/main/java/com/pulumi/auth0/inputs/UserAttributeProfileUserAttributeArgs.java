// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.auth0.inputs;

import com.pulumi.auth0.inputs.UserAttributeProfileUserAttributeOidcMappingArgs;
import com.pulumi.auth0.inputs.UserAttributeProfileUserAttributeStrategyOverrideArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UserAttributeProfileUserAttributeArgs extends com.pulumi.resources.ResourceArgs {

    public static final UserAttributeProfileUserAttributeArgs Empty = new UserAttributeProfileUserAttributeArgs();

    /**
     * The Auth0 mapping for the user attribute.
     * 
     */
    @Import(name="auth0Mapping", required=true)
    private Output<String> auth0Mapping;

    /**
     * @return The Auth0 mapping for the user attribute.
     * 
     */
    public Output<String> auth0Mapping() {
        return this.auth0Mapping;
    }

    /**
     * Description of the user attribute.
     * 
     */
    @Import(name="description", required=true)
    private Output<String> description;

    /**
     * @return Description of the user attribute.
     * 
     */
    public Output<String> description() {
        return this.description;
    }

    /**
     * Display label for the user attribute.
     * 
     */
    @Import(name="label", required=true)
    private Output<String> label;

    /**
     * @return Display label for the user attribute.
     * 
     */
    public Output<String> label() {
        return this.label;
    }

    /**
     * Name of the user attribute.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Name of the user attribute.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * The OIDC mapping configuration for the user attribute.
     * 
     */
    @Import(name="oidcMapping")
    private @Nullable Output<UserAttributeProfileUserAttributeOidcMappingArgs> oidcMapping;

    /**
     * @return The OIDC mapping configuration for the user attribute.
     * 
     */
    public Optional<Output<UserAttributeProfileUserAttributeOidcMappingArgs>> oidcMapping() {
        return Optional.ofNullable(this.oidcMapping);
    }

    /**
     * Whether the attribute is required in the profile.
     * 
     */
    @Import(name="profileRequired", required=true)
    private Output<Boolean> profileRequired;

    /**
     * @return Whether the attribute is required in the profile.
     * 
     */
    public Output<Boolean> profileRequired() {
        return this.profileRequired;
    }

    /**
     * SAML mapping override for this strategy.
     * 
     */
    @Import(name="samlMappings")
    private @Nullable Output<List<String>> samlMappings;

    /**
     * @return SAML mapping override for this strategy.
     * 
     */
    public Optional<Output<List<String>>> samlMappings() {
        return Optional.ofNullable(this.samlMappings);
    }

    /**
     * The SCIM mapping for the user attribute.
     * 
     */
    @Import(name="scimMapping")
    private @Nullable Output<String> scimMapping;

    /**
     * @return The SCIM mapping for the user attribute.
     * 
     */
    public Optional<Output<String>> scimMapping() {
        return Optional.ofNullable(this.scimMapping);
    }

    /**
     * Strategy-specific overrides for user attribute mapping.
     * 
     */
    @Import(name="strategyOverrides")
    private @Nullable Output<List<UserAttributeProfileUserAttributeStrategyOverrideArgs>> strategyOverrides;

    /**
     * @return Strategy-specific overrides for user attribute mapping.
     * 
     */
    public Optional<Output<List<UserAttributeProfileUserAttributeStrategyOverrideArgs>>> strategyOverrides() {
        return Optional.ofNullable(this.strategyOverrides);
    }

    private UserAttributeProfileUserAttributeArgs() {}

    private UserAttributeProfileUserAttributeArgs(UserAttributeProfileUserAttributeArgs $) {
        this.auth0Mapping = $.auth0Mapping;
        this.description = $.description;
        this.label = $.label;
        this.name = $.name;
        this.oidcMapping = $.oidcMapping;
        this.profileRequired = $.profileRequired;
        this.samlMappings = $.samlMappings;
        this.scimMapping = $.scimMapping;
        this.strategyOverrides = $.strategyOverrides;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UserAttributeProfileUserAttributeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UserAttributeProfileUserAttributeArgs $;

        public Builder() {
            $ = new UserAttributeProfileUserAttributeArgs();
        }

        public Builder(UserAttributeProfileUserAttributeArgs defaults) {
            $ = new UserAttributeProfileUserAttributeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param auth0Mapping The Auth0 mapping for the user attribute.
         * 
         * @return builder
         * 
         */
        public Builder auth0Mapping(Output<String> auth0Mapping) {
            $.auth0Mapping = auth0Mapping;
            return this;
        }

        /**
         * @param auth0Mapping The Auth0 mapping for the user attribute.
         * 
         * @return builder
         * 
         */
        public Builder auth0Mapping(String auth0Mapping) {
            return auth0Mapping(Output.of(auth0Mapping));
        }

        /**
         * @param description Description of the user attribute.
         * 
         * @return builder
         * 
         */
        public Builder description(Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the user attribute.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param label Display label for the user attribute.
         * 
         * @return builder
         * 
         */
        public Builder label(Output<String> label) {
            $.label = label;
            return this;
        }

        /**
         * @param label Display label for the user attribute.
         * 
         * @return builder
         * 
         */
        public Builder label(String label) {
            return label(Output.of(label));
        }

        /**
         * @param name Name of the user attribute.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the user attribute.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param oidcMapping The OIDC mapping configuration for the user attribute.
         * 
         * @return builder
         * 
         */
        public Builder oidcMapping(@Nullable Output<UserAttributeProfileUserAttributeOidcMappingArgs> oidcMapping) {
            $.oidcMapping = oidcMapping;
            return this;
        }

        /**
         * @param oidcMapping The OIDC mapping configuration for the user attribute.
         * 
         * @return builder
         * 
         */
        public Builder oidcMapping(UserAttributeProfileUserAttributeOidcMappingArgs oidcMapping) {
            return oidcMapping(Output.of(oidcMapping));
        }

        /**
         * @param profileRequired Whether the attribute is required in the profile.
         * 
         * @return builder
         * 
         */
        public Builder profileRequired(Output<Boolean> profileRequired) {
            $.profileRequired = profileRequired;
            return this;
        }

        /**
         * @param profileRequired Whether the attribute is required in the profile.
         * 
         * @return builder
         * 
         */
        public Builder profileRequired(Boolean profileRequired) {
            return profileRequired(Output.of(profileRequired));
        }

        /**
         * @param samlMappings SAML mapping override for this strategy.
         * 
         * @return builder
         * 
         */
        public Builder samlMappings(@Nullable Output<List<String>> samlMappings) {
            $.samlMappings = samlMappings;
            return this;
        }

        /**
         * @param samlMappings SAML mapping override for this strategy.
         * 
         * @return builder
         * 
         */
        public Builder samlMappings(List<String> samlMappings) {
            return samlMappings(Output.of(samlMappings));
        }

        /**
         * @param samlMappings SAML mapping override for this strategy.
         * 
         * @return builder
         * 
         */
        public Builder samlMappings(String... samlMappings) {
            return samlMappings(List.of(samlMappings));
        }

        /**
         * @param scimMapping The SCIM mapping for the user attribute.
         * 
         * @return builder
         * 
         */
        public Builder scimMapping(@Nullable Output<String> scimMapping) {
            $.scimMapping = scimMapping;
            return this;
        }

        /**
         * @param scimMapping The SCIM mapping for the user attribute.
         * 
         * @return builder
         * 
         */
        public Builder scimMapping(String scimMapping) {
            return scimMapping(Output.of(scimMapping));
        }

        /**
         * @param strategyOverrides Strategy-specific overrides for user attribute mapping.
         * 
         * @return builder
         * 
         */
        public Builder strategyOverrides(@Nullable Output<List<UserAttributeProfileUserAttributeStrategyOverrideArgs>> strategyOverrides) {
            $.strategyOverrides = strategyOverrides;
            return this;
        }

        /**
         * @param strategyOverrides Strategy-specific overrides for user attribute mapping.
         * 
         * @return builder
         * 
         */
        public Builder strategyOverrides(List<UserAttributeProfileUserAttributeStrategyOverrideArgs> strategyOverrides) {
            return strategyOverrides(Output.of(strategyOverrides));
        }

        /**
         * @param strategyOverrides Strategy-specific overrides for user attribute mapping.
         * 
         * @return builder
         * 
         */
        public Builder strategyOverrides(UserAttributeProfileUserAttributeStrategyOverrideArgs... strategyOverrides) {
            return strategyOverrides(List.of(strategyOverrides));
        }

        public UserAttributeProfileUserAttributeArgs build() {
            if ($.auth0Mapping == null) {
                throw new MissingRequiredPropertyException("UserAttributeProfileUserAttributeArgs", "auth0Mapping");
            }
            if ($.description == null) {
                throw new MissingRequiredPropertyException("UserAttributeProfileUserAttributeArgs", "description");
            }
            if ($.label == null) {
                throw new MissingRequiredPropertyException("UserAttributeProfileUserAttributeArgs", "label");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("UserAttributeProfileUserAttributeArgs", "name");
            }
            if ($.profileRequired == null) {
                throw new MissingRequiredPropertyException("UserAttributeProfileUserAttributeArgs", "profileRequired");
            }
            return $;
        }
    }

}
