// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.auth0.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BrandingThemeWidgetArgs extends com.pulumi.resources.ResourceArgs {

    public static final BrandingThemeWidgetArgs Empty = new BrandingThemeWidgetArgs();

    /**
     * Header text alignment. Available options: `center`, `left`, `right`. Defaults to `center`.
     * 
     */
    @Import(name="headerTextAlignment")
    private @Nullable Output<String> headerTextAlignment;

    /**
     * @return Header text alignment. Available options: `center`, `left`, `right`. Defaults to `center`.
     * 
     */
    public Optional<Output<String>> headerTextAlignment() {
        return Optional.ofNullable(this.headerTextAlignment);
    }

    /**
     * Logo height. Value needs to be between `1` and `100`. Defaults to `52.0`.
     * 
     */
    @Import(name="logoHeight")
    private @Nullable Output<Double> logoHeight;

    /**
     * @return Logo height. Value needs to be between `1` and `100`. Defaults to `52.0`.
     * 
     */
    public Optional<Output<Double>> logoHeight() {
        return Optional.ofNullable(this.logoHeight);
    }

    /**
     * Logo position. Available options: `center`, `left`, `right`, `none`. Defaults to `center`.
     * 
     */
    @Import(name="logoPosition")
    private @Nullable Output<String> logoPosition;

    /**
     * @return Logo position. Available options: `center`, `left`, `right`, `none`. Defaults to `center`.
     * 
     */
    public Optional<Output<String>> logoPosition() {
        return Optional.ofNullable(this.logoPosition);
    }

    /**
     * Logo url. Defaults to an empty string.
     * 
     */
    @Import(name="logoUrl")
    private @Nullable Output<String> logoUrl;

    /**
     * @return Logo url. Defaults to an empty string.
     * 
     */
    public Optional<Output<String>> logoUrl() {
        return Optional.ofNullable(this.logoUrl);
    }

    /**
     * Social buttons layout. Available options: `bottom`, `top`. Defaults to `bottom`.
     * 
     */
    @Import(name="socialButtonsLayout")
    private @Nullable Output<String> socialButtonsLayout;

    /**
     * @return Social buttons layout. Available options: `bottom`, `top`. Defaults to `bottom`.
     * 
     */
    public Optional<Output<String>> socialButtonsLayout() {
        return Optional.ofNullable(this.socialButtonsLayout);
    }

    private BrandingThemeWidgetArgs() {}

    private BrandingThemeWidgetArgs(BrandingThemeWidgetArgs $) {
        this.headerTextAlignment = $.headerTextAlignment;
        this.logoHeight = $.logoHeight;
        this.logoPosition = $.logoPosition;
        this.logoUrl = $.logoUrl;
        this.socialButtonsLayout = $.socialButtonsLayout;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BrandingThemeWidgetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BrandingThemeWidgetArgs $;

        public Builder() {
            $ = new BrandingThemeWidgetArgs();
        }

        public Builder(BrandingThemeWidgetArgs defaults) {
            $ = new BrandingThemeWidgetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param headerTextAlignment Header text alignment. Available options: `center`, `left`, `right`. Defaults to `center`.
         * 
         * @return builder
         * 
         */
        public Builder headerTextAlignment(@Nullable Output<String> headerTextAlignment) {
            $.headerTextAlignment = headerTextAlignment;
            return this;
        }

        /**
         * @param headerTextAlignment Header text alignment. Available options: `center`, `left`, `right`. Defaults to `center`.
         * 
         * @return builder
         * 
         */
        public Builder headerTextAlignment(String headerTextAlignment) {
            return headerTextAlignment(Output.of(headerTextAlignment));
        }

        /**
         * @param logoHeight Logo height. Value needs to be between `1` and `100`. Defaults to `52.0`.
         * 
         * @return builder
         * 
         */
        public Builder logoHeight(@Nullable Output<Double> logoHeight) {
            $.logoHeight = logoHeight;
            return this;
        }

        /**
         * @param logoHeight Logo height. Value needs to be between `1` and `100`. Defaults to `52.0`.
         * 
         * @return builder
         * 
         */
        public Builder logoHeight(Double logoHeight) {
            return logoHeight(Output.of(logoHeight));
        }

        /**
         * @param logoPosition Logo position. Available options: `center`, `left`, `right`, `none`. Defaults to `center`.
         * 
         * @return builder
         * 
         */
        public Builder logoPosition(@Nullable Output<String> logoPosition) {
            $.logoPosition = logoPosition;
            return this;
        }

        /**
         * @param logoPosition Logo position. Available options: `center`, `left`, `right`, `none`. Defaults to `center`.
         * 
         * @return builder
         * 
         */
        public Builder logoPosition(String logoPosition) {
            return logoPosition(Output.of(logoPosition));
        }

        /**
         * @param logoUrl Logo url. Defaults to an empty string.
         * 
         * @return builder
         * 
         */
        public Builder logoUrl(@Nullable Output<String> logoUrl) {
            $.logoUrl = logoUrl;
            return this;
        }

        /**
         * @param logoUrl Logo url. Defaults to an empty string.
         * 
         * @return builder
         * 
         */
        public Builder logoUrl(String logoUrl) {
            return logoUrl(Output.of(logoUrl));
        }

        /**
         * @param socialButtonsLayout Social buttons layout. Available options: `bottom`, `top`. Defaults to `bottom`.
         * 
         * @return builder
         * 
         */
        public Builder socialButtonsLayout(@Nullable Output<String> socialButtonsLayout) {
            $.socialButtonsLayout = socialButtonsLayout;
            return this;
        }

        /**
         * @param socialButtonsLayout Social buttons layout. Available options: `bottom`, `top`. Defaults to `bottom`.
         * 
         * @return builder
         * 
         */
        public Builder socialButtonsLayout(String socialButtonsLayout) {
            return socialButtonsLayout(Output.of(socialButtonsLayout));
        }

        public BrandingThemeWidgetArgs build() {
            return $;
        }
    }

}
