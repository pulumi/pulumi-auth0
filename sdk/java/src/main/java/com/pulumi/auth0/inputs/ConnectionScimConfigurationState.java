// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.auth0.inputs;

import com.pulumi.auth0.inputs.ConnectionScimConfigurationMappingArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConnectionScimConfigurationState extends com.pulumi.resources.ResourceArgs {

    public static final ConnectionScimConfigurationState Empty = new ConnectionScimConfigurationState();

    /**
     * ID of the connection for this SCIM configuration.
     * 
     */
    @Import(name="connectionId")
    private @Nullable Output<String> connectionId;

    /**
     * @return ID of the connection for this SCIM configuration.
     * 
     */
    public Optional<Output<String>> connectionId() {
        return Optional.ofNullable(this.connectionId);
    }

    /**
     * Name of the connection for this SCIM configuration.
     * 
     */
    @Import(name="connectionName")
    private @Nullable Output<String> connectionName;

    /**
     * @return Name of the connection for this SCIM configuration.
     * 
     */
    public Optional<Output<String>> connectionName() {
        return Optional.ofNullable(this.connectionName);
    }

    /**
     * Mapping between Auth0 attributes and SCIM attributes. If `userIdAttribute` is set, `mapping` must be set as well.
     * 
     */
    @Import(name="mappings")
    private @Nullable Output<List<ConnectionScimConfigurationMappingArgs>> mappings;

    /**
     * @return Mapping between Auth0 attributes and SCIM attributes. If `userIdAttribute` is set, `mapping` must be set as well.
     * 
     */
    public Optional<Output<List<ConnectionScimConfigurationMappingArgs>>> mappings() {
        return Optional.ofNullable(this.mappings);
    }

    /**
     * Schema of the connection for this SCIM configuration.
     * 
     */
    @Import(name="strategy")
    private @Nullable Output<String> strategy;

    /**
     * @return Schema of the connection for this SCIM configuration.
     * 
     */
    public Optional<Output<String>> strategy() {
        return Optional.ofNullable(this.strategy);
    }

    /**
     * Name of the tenant for this SCIM configuration.
     * 
     */
    @Import(name="tenantName")
    private @Nullable Output<String> tenantName;

    /**
     * @return Name of the tenant for this SCIM configuration.
     * 
     */
    public Optional<Output<String>> tenantName() {
        return Optional.ofNullable(this.tenantName);
    }

    /**
     * User ID attribute for generation unique of user ids. If `userIdAttribute` is set, `mapping` must be set as well. Defaults to `userName` for SAML connections and `externalId` for OIDC connections.
     * 
     */
    @Import(name="userIdAttribute")
    private @Nullable Output<String> userIdAttribute;

    /**
     * @return User ID attribute for generation unique of user ids. If `userIdAttribute` is set, `mapping` must be set as well. Defaults to `userName` for SAML connections and `externalId` for OIDC connections.
     * 
     */
    public Optional<Output<String>> userIdAttribute() {
        return Optional.ofNullable(this.userIdAttribute);
    }

    private ConnectionScimConfigurationState() {}

    private ConnectionScimConfigurationState(ConnectionScimConfigurationState $) {
        this.connectionId = $.connectionId;
        this.connectionName = $.connectionName;
        this.mappings = $.mappings;
        this.strategy = $.strategy;
        this.tenantName = $.tenantName;
        this.userIdAttribute = $.userIdAttribute;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectionScimConfigurationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectionScimConfigurationState $;

        public Builder() {
            $ = new ConnectionScimConfigurationState();
        }

        public Builder(ConnectionScimConfigurationState defaults) {
            $ = new ConnectionScimConfigurationState(Objects.requireNonNull(defaults));
        }

        /**
         * @param connectionId ID of the connection for this SCIM configuration.
         * 
         * @return builder
         * 
         */
        public Builder connectionId(@Nullable Output<String> connectionId) {
            $.connectionId = connectionId;
            return this;
        }

        /**
         * @param connectionId ID of the connection for this SCIM configuration.
         * 
         * @return builder
         * 
         */
        public Builder connectionId(String connectionId) {
            return connectionId(Output.of(connectionId));
        }

        /**
         * @param connectionName Name of the connection for this SCIM configuration.
         * 
         * @return builder
         * 
         */
        public Builder connectionName(@Nullable Output<String> connectionName) {
            $.connectionName = connectionName;
            return this;
        }

        /**
         * @param connectionName Name of the connection for this SCIM configuration.
         * 
         * @return builder
         * 
         */
        public Builder connectionName(String connectionName) {
            return connectionName(Output.of(connectionName));
        }

        /**
         * @param mappings Mapping between Auth0 attributes and SCIM attributes. If `userIdAttribute` is set, `mapping` must be set as well.
         * 
         * @return builder
         * 
         */
        public Builder mappings(@Nullable Output<List<ConnectionScimConfigurationMappingArgs>> mappings) {
            $.mappings = mappings;
            return this;
        }

        /**
         * @param mappings Mapping between Auth0 attributes and SCIM attributes. If `userIdAttribute` is set, `mapping` must be set as well.
         * 
         * @return builder
         * 
         */
        public Builder mappings(List<ConnectionScimConfigurationMappingArgs> mappings) {
            return mappings(Output.of(mappings));
        }

        /**
         * @param mappings Mapping between Auth0 attributes and SCIM attributes. If `userIdAttribute` is set, `mapping` must be set as well.
         * 
         * @return builder
         * 
         */
        public Builder mappings(ConnectionScimConfigurationMappingArgs... mappings) {
            return mappings(List.of(mappings));
        }

        /**
         * @param strategy Schema of the connection for this SCIM configuration.
         * 
         * @return builder
         * 
         */
        public Builder strategy(@Nullable Output<String> strategy) {
            $.strategy = strategy;
            return this;
        }

        /**
         * @param strategy Schema of the connection for this SCIM configuration.
         * 
         * @return builder
         * 
         */
        public Builder strategy(String strategy) {
            return strategy(Output.of(strategy));
        }

        /**
         * @param tenantName Name of the tenant for this SCIM configuration.
         * 
         * @return builder
         * 
         */
        public Builder tenantName(@Nullable Output<String> tenantName) {
            $.tenantName = tenantName;
            return this;
        }

        /**
         * @param tenantName Name of the tenant for this SCIM configuration.
         * 
         * @return builder
         * 
         */
        public Builder tenantName(String tenantName) {
            return tenantName(Output.of(tenantName));
        }

        /**
         * @param userIdAttribute User ID attribute for generation unique of user ids. If `userIdAttribute` is set, `mapping` must be set as well. Defaults to `userName` for SAML connections and `externalId` for OIDC connections.
         * 
         * @return builder
         * 
         */
        public Builder userIdAttribute(@Nullable Output<String> userIdAttribute) {
            $.userIdAttribute = userIdAttribute;
            return this;
        }

        /**
         * @param userIdAttribute User ID attribute for generation unique of user ids. If `userIdAttribute` is set, `mapping` must be set as well. Defaults to `userName` for SAML connections and `externalId` for OIDC connections.
         * 
         * @return builder
         * 
         */
        public Builder userIdAttribute(String userIdAttribute) {
            return userIdAttribute(Output.of(userIdAttribute));
        }

        public ConnectionScimConfigurationState build() {
            return $;
        }
    }

}
