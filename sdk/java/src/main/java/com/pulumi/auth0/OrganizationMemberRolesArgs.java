// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.auth0;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class OrganizationMemberRolesArgs extends com.pulumi.resources.ResourceArgs {

    public static final OrganizationMemberRolesArgs Empty = new OrganizationMemberRolesArgs();

    /**
     * The ID of the organization.
     * 
     */
    @Import(name="organizationId", required=true)
    private Output<String> organizationId;

    /**
     * @return The ID of the organization.
     * 
     */
    public Output<String> organizationId() {
        return this.organizationId;
    }

    /**
     * The role ID(s) to assign to the organization member.
     * 
     */
    @Import(name="roles", required=true)
    private Output<List<String>> roles;

    /**
     * @return The role ID(s) to assign to the organization member.
     * 
     */
    public Output<List<String>> roles() {
        return this.roles;
    }

    /**
     * The user ID of the organization member.
     * 
     */
    @Import(name="userId", required=true)
    private Output<String> userId;

    /**
     * @return The user ID of the organization member.
     * 
     */
    public Output<String> userId() {
        return this.userId;
    }

    private OrganizationMemberRolesArgs() {}

    private OrganizationMemberRolesArgs(OrganizationMemberRolesArgs $) {
        this.organizationId = $.organizationId;
        this.roles = $.roles;
        this.userId = $.userId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OrganizationMemberRolesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OrganizationMemberRolesArgs $;

        public Builder() {
            $ = new OrganizationMemberRolesArgs();
        }

        public Builder(OrganizationMemberRolesArgs defaults) {
            $ = new OrganizationMemberRolesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param organizationId The ID of the organization.
         * 
         * @return builder
         * 
         */
        public Builder organizationId(Output<String> organizationId) {
            $.organizationId = organizationId;
            return this;
        }

        /**
         * @param organizationId The ID of the organization.
         * 
         * @return builder
         * 
         */
        public Builder organizationId(String organizationId) {
            return organizationId(Output.of(organizationId));
        }

        /**
         * @param roles The role ID(s) to assign to the organization member.
         * 
         * @return builder
         * 
         */
        public Builder roles(Output<List<String>> roles) {
            $.roles = roles;
            return this;
        }

        /**
         * @param roles The role ID(s) to assign to the organization member.
         * 
         * @return builder
         * 
         */
        public Builder roles(List<String> roles) {
            return roles(Output.of(roles));
        }

        /**
         * @param roles The role ID(s) to assign to the organization member.
         * 
         * @return builder
         * 
         */
        public Builder roles(String... roles) {
            return roles(List.of(roles));
        }

        /**
         * @param userId The user ID of the organization member.
         * 
         * @return builder
         * 
         */
        public Builder userId(Output<String> userId) {
            $.userId = userId;
            return this;
        }

        /**
         * @param userId The user ID of the organization member.
         * 
         * @return builder
         * 
         */
        public Builder userId(String userId) {
            return userId(Output.of(userId));
        }

        public OrganizationMemberRolesArgs build() {
            if ($.organizationId == null) {
                throw new MissingRequiredPropertyException("OrganizationMemberRolesArgs", "organizationId");
            }
            if ($.roles == null) {
                throw new MissingRequiredPropertyException("OrganizationMemberRolesArgs", "roles");
            }
            if ($.userId == null) {
                throw new MissingRequiredPropertyException("OrganizationMemberRolesArgs", "userId");
            }
            return $;
        }
    }

}
