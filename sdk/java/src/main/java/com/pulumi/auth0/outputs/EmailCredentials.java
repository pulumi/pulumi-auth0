// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.auth0.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class EmailCredentials {
    /**
     * @return AWS Access Key ID. Used only for AWS.
     * 
     */
    private @Nullable String accessKeyId;
    /**
     * @return API Key for your email service. Will always be encrypted in our database.
     * 
     */
    private @Nullable String apiKey;
    /**
     * @return API User for your email service. This field is not accepted by the API any more so it will be removed in a future major version.
     * 
     * @deprecated
     * This field is not accepted by the API any more so it will be removed soon.
     * 
     */
    @Deprecated /* This field is not accepted by the API any more so it will be removed soon. */
    private @Nullable String apiUser;
    /**
     * @return Domain name.
     * 
     */
    private @Nullable String domain;
    /**
     * @return Default region. Used only for AWS, Mailgun, and SparkPost.
     * 
     */
    private @Nullable String region;
    /**
     * @return AWS Secret Key. Will always be encrypted in our database. Used only for AWS.
     * 
     */
    private @Nullable String secretAccessKey;
    /**
     * @return Hostname or IP address of your SMTP server. Used only for SMTP.
     * 
     */
    private @Nullable String smtpHost;
    /**
     * @return SMTP password. Used only for SMTP.
     * 
     */
    private @Nullable String smtpPass;
    /**
     * @return Port used by your SMTP server. Please avoid using port 25 if possible because many providers have limitations on this port. Used only for SMTP.
     * 
     */
    private @Nullable Integer smtpPort;
    /**
     * @return SMTP username. Used only for SMTP.
     * 
     */
    private @Nullable String smtpUser;

    private EmailCredentials() {}
    /**
     * @return AWS Access Key ID. Used only for AWS.
     * 
     */
    public Optional<String> accessKeyId() {
        return Optional.ofNullable(this.accessKeyId);
    }
    /**
     * @return API Key for your email service. Will always be encrypted in our database.
     * 
     */
    public Optional<String> apiKey() {
        return Optional.ofNullable(this.apiKey);
    }
    /**
     * @return API User for your email service. This field is not accepted by the API any more so it will be removed in a future major version.
     * 
     * @deprecated
     * This field is not accepted by the API any more so it will be removed soon.
     * 
     */
    @Deprecated /* This field is not accepted by the API any more so it will be removed soon. */
    public Optional<String> apiUser() {
        return Optional.ofNullable(this.apiUser);
    }
    /**
     * @return Domain name.
     * 
     */
    public Optional<String> domain() {
        return Optional.ofNullable(this.domain);
    }
    /**
     * @return Default region. Used only for AWS, Mailgun, and SparkPost.
     * 
     */
    public Optional<String> region() {
        return Optional.ofNullable(this.region);
    }
    /**
     * @return AWS Secret Key. Will always be encrypted in our database. Used only for AWS.
     * 
     */
    public Optional<String> secretAccessKey() {
        return Optional.ofNullable(this.secretAccessKey);
    }
    /**
     * @return Hostname or IP address of your SMTP server. Used only for SMTP.
     * 
     */
    public Optional<String> smtpHost() {
        return Optional.ofNullable(this.smtpHost);
    }
    /**
     * @return SMTP password. Used only for SMTP.
     * 
     */
    public Optional<String> smtpPass() {
        return Optional.ofNullable(this.smtpPass);
    }
    /**
     * @return Port used by your SMTP server. Please avoid using port 25 if possible because many providers have limitations on this port. Used only for SMTP.
     * 
     */
    public Optional<Integer> smtpPort() {
        return Optional.ofNullable(this.smtpPort);
    }
    /**
     * @return SMTP username. Used only for SMTP.
     * 
     */
    public Optional<String> smtpUser() {
        return Optional.ofNullable(this.smtpUser);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EmailCredentials defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String accessKeyId;
        private @Nullable String apiKey;
        private @Nullable String apiUser;
        private @Nullable String domain;
        private @Nullable String region;
        private @Nullable String secretAccessKey;
        private @Nullable String smtpHost;
        private @Nullable String smtpPass;
        private @Nullable Integer smtpPort;
        private @Nullable String smtpUser;
        public Builder() {}
        public Builder(EmailCredentials defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessKeyId = defaults.accessKeyId;
    	      this.apiKey = defaults.apiKey;
    	      this.apiUser = defaults.apiUser;
    	      this.domain = defaults.domain;
    	      this.region = defaults.region;
    	      this.secretAccessKey = defaults.secretAccessKey;
    	      this.smtpHost = defaults.smtpHost;
    	      this.smtpPass = defaults.smtpPass;
    	      this.smtpPort = defaults.smtpPort;
    	      this.smtpUser = defaults.smtpUser;
        }

        @CustomType.Setter
        public Builder accessKeyId(@Nullable String accessKeyId) {
            this.accessKeyId = accessKeyId;
            return this;
        }
        @CustomType.Setter
        public Builder apiKey(@Nullable String apiKey) {
            this.apiKey = apiKey;
            return this;
        }
        @CustomType.Setter
        public Builder apiUser(@Nullable String apiUser) {
            this.apiUser = apiUser;
            return this;
        }
        @CustomType.Setter
        public Builder domain(@Nullable String domain) {
            this.domain = domain;
            return this;
        }
        @CustomType.Setter
        public Builder region(@Nullable String region) {
            this.region = region;
            return this;
        }
        @CustomType.Setter
        public Builder secretAccessKey(@Nullable String secretAccessKey) {
            this.secretAccessKey = secretAccessKey;
            return this;
        }
        @CustomType.Setter
        public Builder smtpHost(@Nullable String smtpHost) {
            this.smtpHost = smtpHost;
            return this;
        }
        @CustomType.Setter
        public Builder smtpPass(@Nullable String smtpPass) {
            this.smtpPass = smtpPass;
            return this;
        }
        @CustomType.Setter
        public Builder smtpPort(@Nullable Integer smtpPort) {
            this.smtpPort = smtpPort;
            return this;
        }
        @CustomType.Setter
        public Builder smtpUser(@Nullable String smtpUser) {
            this.smtpUser = smtpUser;
            return this;
        }
        public EmailCredentials build() {
            final var o = new EmailCredentials();
            o.accessKeyId = accessKeyId;
            o.apiKey = apiKey;
            o.apiUser = apiUser;
            o.domain = domain;
            o.region = region;
            o.secretAccessKey = secretAccessKey;
            o.smtpHost = smtpHost;
            o.smtpPass = smtpPass;
            o.smtpPort = smtpPort;
            o.smtpUser = smtpUser;
            return o;
        }
    }
}
