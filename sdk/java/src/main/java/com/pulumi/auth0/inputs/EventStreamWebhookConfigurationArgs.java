// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.auth0.inputs;

import com.pulumi.auth0.inputs.EventStreamWebhookConfigurationWebhookAuthorizationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class EventStreamWebhookConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final EventStreamWebhookConfigurationArgs Empty = new EventStreamWebhookConfigurationArgs();

    /**
     * Authorization details for the webhook endpoint. Supports `basic` authentication using `username` and `password`, or `bearer` authentication using a `token`. The appropriate fields must be set based on the chosen method.
     * 
     */
    @Import(name="webhookAuthorization", required=true)
    private Output<EventStreamWebhookConfigurationWebhookAuthorizationArgs> webhookAuthorization;

    /**
     * @return Authorization details for the webhook endpoint. Supports `basic` authentication using `username` and `password`, or `bearer` authentication using a `token`. The appropriate fields must be set based on the chosen method.
     * 
     */
    public Output<EventStreamWebhookConfigurationWebhookAuthorizationArgs> webhookAuthorization() {
        return this.webhookAuthorization;
    }

    /**
     * The HTTPS endpoint that will receive the webhook events. Must be a valid, publicly accessible URL.
     * 
     */
    @Import(name="webhookEndpoint", required=true)
    private Output<String> webhookEndpoint;

    /**
     * @return The HTTPS endpoint that will receive the webhook events. Must be a valid, publicly accessible URL.
     * 
     */
    public Output<String> webhookEndpoint() {
        return this.webhookEndpoint;
    }

    private EventStreamWebhookConfigurationArgs() {}

    private EventStreamWebhookConfigurationArgs(EventStreamWebhookConfigurationArgs $) {
        this.webhookAuthorization = $.webhookAuthorization;
        this.webhookEndpoint = $.webhookEndpoint;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EventStreamWebhookConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EventStreamWebhookConfigurationArgs $;

        public Builder() {
            $ = new EventStreamWebhookConfigurationArgs();
        }

        public Builder(EventStreamWebhookConfigurationArgs defaults) {
            $ = new EventStreamWebhookConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param webhookAuthorization Authorization details for the webhook endpoint. Supports `basic` authentication using `username` and `password`, or `bearer` authentication using a `token`. The appropriate fields must be set based on the chosen method.
         * 
         * @return builder
         * 
         */
        public Builder webhookAuthorization(Output<EventStreamWebhookConfigurationWebhookAuthorizationArgs> webhookAuthorization) {
            $.webhookAuthorization = webhookAuthorization;
            return this;
        }

        /**
         * @param webhookAuthorization Authorization details for the webhook endpoint. Supports `basic` authentication using `username` and `password`, or `bearer` authentication using a `token`. The appropriate fields must be set based on the chosen method.
         * 
         * @return builder
         * 
         */
        public Builder webhookAuthorization(EventStreamWebhookConfigurationWebhookAuthorizationArgs webhookAuthorization) {
            return webhookAuthorization(Output.of(webhookAuthorization));
        }

        /**
         * @param webhookEndpoint The HTTPS endpoint that will receive the webhook events. Must be a valid, publicly accessible URL.
         * 
         * @return builder
         * 
         */
        public Builder webhookEndpoint(Output<String> webhookEndpoint) {
            $.webhookEndpoint = webhookEndpoint;
            return this;
        }

        /**
         * @param webhookEndpoint The HTTPS endpoint that will receive the webhook events. Must be a valid, publicly accessible URL.
         * 
         * @return builder
         * 
         */
        public Builder webhookEndpoint(String webhookEndpoint) {
            return webhookEndpoint(Output.of(webhookEndpoint));
        }

        public EventStreamWebhookConfigurationArgs build() {
            if ($.webhookAuthorization == null) {
                throw new MissingRequiredPropertyException("EventStreamWebhookConfigurationArgs", "webhookAuthorization");
            }
            if ($.webhookEndpoint == null) {
                throw new MissingRequiredPropertyException("EventStreamWebhookConfigurationArgs", "webhookEndpoint");
            }
            return $;
        }
    }

}
