// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.auth0.outputs;

import com.pulumi.auth0.outputs.GetCustomDomainVerification;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetCustomDomainResult {
    /**
     * @return The HTTP header to fetch the client&#39;s IP address. Cannot be set on auth0_managed domains.
     * 
     */
    private String customClientIpHeader;
    /**
     * @return Name of the custom domain.
     * 
     */
    private String domain;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Once the configuration status is `ready`, the DNS name of the Auth0 origin server that handles traffic for the custom domain.
     * 
     */
    private String originDomainName;
    /**
     * @return Indicates whether this is a primary domain.
     * 
     */
    private Boolean primary;
    /**
     * @return Configuration status for the custom domain. Options include `disabled`, `pending`, `pending_verification`, and `ready`.
     * 
     */
    private String status;
    /**
     * @return TLS policy for the custom domain. Available options are: `compatible` or `recommended`. Compatible includes TLS 1.0, 1.1, 1.2, and recommended only includes TLS 1.2. Cannot be set on self_managed domains.
     * 
     */
    private String tlsPolicy;
    /**
     * @return Provisioning type for the custom domain. Options include `auth0_managed_certs` and `self_managed_certs`.
     * 
     */
    private String type;
    /**
     * @return Configuration settings for verification.
     * 
     */
    private List<GetCustomDomainVerification> verifications;

    private GetCustomDomainResult() {}
    /**
     * @return The HTTP header to fetch the client&#39;s IP address. Cannot be set on auth0_managed domains.
     * 
     */
    public String customClientIpHeader() {
        return this.customClientIpHeader;
    }
    /**
     * @return Name of the custom domain.
     * 
     */
    public String domain() {
        return this.domain;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Once the configuration status is `ready`, the DNS name of the Auth0 origin server that handles traffic for the custom domain.
     * 
     */
    public String originDomainName() {
        return this.originDomainName;
    }
    /**
     * @return Indicates whether this is a primary domain.
     * 
     */
    public Boolean primary() {
        return this.primary;
    }
    /**
     * @return Configuration status for the custom domain. Options include `disabled`, `pending`, `pending_verification`, and `ready`.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return TLS policy for the custom domain. Available options are: `compatible` or `recommended`. Compatible includes TLS 1.0, 1.1, 1.2, and recommended only includes TLS 1.2. Cannot be set on self_managed domains.
     * 
     */
    public String tlsPolicy() {
        return this.tlsPolicy;
    }
    /**
     * @return Provisioning type for the custom domain. Options include `auth0_managed_certs` and `self_managed_certs`.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return Configuration settings for verification.
     * 
     */
    public List<GetCustomDomainVerification> verifications() {
        return this.verifications;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCustomDomainResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String customClientIpHeader;
        private String domain;
        private String id;
        private String originDomainName;
        private Boolean primary;
        private String status;
        private String tlsPolicy;
        private String type;
        private List<GetCustomDomainVerification> verifications;
        public Builder() {}
        public Builder(GetCustomDomainResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.customClientIpHeader = defaults.customClientIpHeader;
    	      this.domain = defaults.domain;
    	      this.id = defaults.id;
    	      this.originDomainName = defaults.originDomainName;
    	      this.primary = defaults.primary;
    	      this.status = defaults.status;
    	      this.tlsPolicy = defaults.tlsPolicy;
    	      this.type = defaults.type;
    	      this.verifications = defaults.verifications;
        }

        @CustomType.Setter
        public Builder customClientIpHeader(String customClientIpHeader) {
            if (customClientIpHeader == null) {
              throw new MissingRequiredPropertyException("GetCustomDomainResult", "customClientIpHeader");
            }
            this.customClientIpHeader = customClientIpHeader;
            return this;
        }
        @CustomType.Setter
        public Builder domain(String domain) {
            if (domain == null) {
              throw new MissingRequiredPropertyException("GetCustomDomainResult", "domain");
            }
            this.domain = domain;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetCustomDomainResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder originDomainName(String originDomainName) {
            if (originDomainName == null) {
              throw new MissingRequiredPropertyException("GetCustomDomainResult", "originDomainName");
            }
            this.originDomainName = originDomainName;
            return this;
        }
        @CustomType.Setter
        public Builder primary(Boolean primary) {
            if (primary == null) {
              throw new MissingRequiredPropertyException("GetCustomDomainResult", "primary");
            }
            this.primary = primary;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetCustomDomainResult", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder tlsPolicy(String tlsPolicy) {
            if (tlsPolicy == null) {
              throw new MissingRequiredPropertyException("GetCustomDomainResult", "tlsPolicy");
            }
            this.tlsPolicy = tlsPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetCustomDomainResult", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder verifications(List<GetCustomDomainVerification> verifications) {
            if (verifications == null) {
              throw new MissingRequiredPropertyException("GetCustomDomainResult", "verifications");
            }
            this.verifications = verifications;
            return this;
        }
        public Builder verifications(GetCustomDomainVerification... verifications) {
            return verifications(List.of(verifications));
        }
        public GetCustomDomainResult build() {
            final var _resultValue = new GetCustomDomainResult();
            _resultValue.customClientIpHeader = customClientIpHeader;
            _resultValue.domain = domain;
            _resultValue.id = id;
            _resultValue.originDomainName = originDomainName;
            _resultValue.primary = primary;
            _resultValue.status = status;
            _resultValue.tlsPolicy = tlsPolicy;
            _resultValue.type = type;
            _resultValue.verifications = verifications;
            return _resultValue;
        }
    }
}
