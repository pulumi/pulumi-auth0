// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.auth0.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BrandingThemePageBackgroundArgs extends com.pulumi.resources.ResourceArgs {

    public static final BrandingThemePageBackgroundArgs Empty = new BrandingThemePageBackgroundArgs();

    /**
     * Background color. Defaults to `#000000`.
     * 
     */
    @Import(name="backgroundColor")
    private @Nullable Output<String> backgroundColor;

    /**
     * @return Background color. Defaults to `#000000`.
     * 
     */
    public Optional<Output<String>> backgroundColor() {
        return Optional.ofNullable(this.backgroundColor);
    }

    /**
     * Background image url. Defaults to an empty string.
     * 
     */
    @Import(name="backgroundImageUrl")
    private @Nullable Output<String> backgroundImageUrl;

    /**
     * @return Background image url. Defaults to an empty string.
     * 
     */
    public Optional<Output<String>> backgroundImageUrl() {
        return Optional.ofNullable(this.backgroundImageUrl);
    }

    /**
     * Page layout. Available options: `center`, `left`, `right`. Defaults to `center`.
     * 
     */
    @Import(name="pageLayout")
    private @Nullable Output<String> pageLayout;

    /**
     * @return Page layout. Available options: `center`, `left`, `right`. Defaults to `center`.
     * 
     */
    public Optional<Output<String>> pageLayout() {
        return Optional.ofNullable(this.pageLayout);
    }

    private BrandingThemePageBackgroundArgs() {}

    private BrandingThemePageBackgroundArgs(BrandingThemePageBackgroundArgs $) {
        this.backgroundColor = $.backgroundColor;
        this.backgroundImageUrl = $.backgroundImageUrl;
        this.pageLayout = $.pageLayout;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BrandingThemePageBackgroundArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BrandingThemePageBackgroundArgs $;

        public Builder() {
            $ = new BrandingThemePageBackgroundArgs();
        }

        public Builder(BrandingThemePageBackgroundArgs defaults) {
            $ = new BrandingThemePageBackgroundArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param backgroundColor Background color. Defaults to `#000000`.
         * 
         * @return builder
         * 
         */
        public Builder backgroundColor(@Nullable Output<String> backgroundColor) {
            $.backgroundColor = backgroundColor;
            return this;
        }

        /**
         * @param backgroundColor Background color. Defaults to `#000000`.
         * 
         * @return builder
         * 
         */
        public Builder backgroundColor(String backgroundColor) {
            return backgroundColor(Output.of(backgroundColor));
        }

        /**
         * @param backgroundImageUrl Background image url. Defaults to an empty string.
         * 
         * @return builder
         * 
         */
        public Builder backgroundImageUrl(@Nullable Output<String> backgroundImageUrl) {
            $.backgroundImageUrl = backgroundImageUrl;
            return this;
        }

        /**
         * @param backgroundImageUrl Background image url. Defaults to an empty string.
         * 
         * @return builder
         * 
         */
        public Builder backgroundImageUrl(String backgroundImageUrl) {
            return backgroundImageUrl(Output.of(backgroundImageUrl));
        }

        /**
         * @param pageLayout Page layout. Available options: `center`, `left`, `right`. Defaults to `center`.
         * 
         * @return builder
         * 
         */
        public Builder pageLayout(@Nullable Output<String> pageLayout) {
            $.pageLayout = pageLayout;
            return this;
        }

        /**
         * @param pageLayout Page layout. Available options: `center`, `left`, `right`. Defaults to `center`.
         * 
         * @return builder
         * 
         */
        public Builder pageLayout(String pageLayout) {
            return pageLayout(Output.of(pageLayout));
        }

        public BrandingThemePageBackgroundArgs build() {
            return $;
        }
    }

}
