// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.auth0.outputs;

import com.pulumi.auth0.outputs.GetNetworkAclRuleAction;
import com.pulumi.auth0.outputs.GetNetworkAclRuleMatch;
import com.pulumi.auth0.outputs.GetNetworkAclRuleNotMatch;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetNetworkAclRule {
    /**
     * @return The action configuration for the Network ACL Rule. Only one action type (block, allow, log, or redirect) should be specified.
     * 
     */
    private List<GetNetworkAclRuleAction> actions;
    /**
     * @return The configuration for the Network ACL Rule
     * 
     */
    private List<GetNetworkAclRuleMatch> matches;
    /**
     * @return The configuration for the Network ACL Rule
     * 
     */
    private List<GetNetworkAclRuleNotMatch> notMatches;
    /**
     * @return The scope of the Network ACL Rule
     * 
     */
    private String scope;

    private GetNetworkAclRule() {}
    /**
     * @return The action configuration for the Network ACL Rule. Only one action type (block, allow, log, or redirect) should be specified.
     * 
     */
    public List<GetNetworkAclRuleAction> actions() {
        return this.actions;
    }
    /**
     * @return The configuration for the Network ACL Rule
     * 
     */
    public List<GetNetworkAclRuleMatch> matches() {
        return this.matches;
    }
    /**
     * @return The configuration for the Network ACL Rule
     * 
     */
    public List<GetNetworkAclRuleNotMatch> notMatches() {
        return this.notMatches;
    }
    /**
     * @return The scope of the Network ACL Rule
     * 
     */
    public String scope() {
        return this.scope;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNetworkAclRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetNetworkAclRuleAction> actions;
        private List<GetNetworkAclRuleMatch> matches;
        private List<GetNetworkAclRuleNotMatch> notMatches;
        private String scope;
        public Builder() {}
        public Builder(GetNetworkAclRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.actions = defaults.actions;
    	      this.matches = defaults.matches;
    	      this.notMatches = defaults.notMatches;
    	      this.scope = defaults.scope;
        }

        @CustomType.Setter
        public Builder actions(List<GetNetworkAclRuleAction> actions) {
            if (actions == null) {
              throw new MissingRequiredPropertyException("GetNetworkAclRule", "actions");
            }
            this.actions = actions;
            return this;
        }
        public Builder actions(GetNetworkAclRuleAction... actions) {
            return actions(List.of(actions));
        }
        @CustomType.Setter
        public Builder matches(List<GetNetworkAclRuleMatch> matches) {
            if (matches == null) {
              throw new MissingRequiredPropertyException("GetNetworkAclRule", "matches");
            }
            this.matches = matches;
            return this;
        }
        public Builder matches(GetNetworkAclRuleMatch... matches) {
            return matches(List.of(matches));
        }
        @CustomType.Setter
        public Builder notMatches(List<GetNetworkAclRuleNotMatch> notMatches) {
            if (notMatches == null) {
              throw new MissingRequiredPropertyException("GetNetworkAclRule", "notMatches");
            }
            this.notMatches = notMatches;
            return this;
        }
        public Builder notMatches(GetNetworkAclRuleNotMatch... notMatches) {
            return notMatches(List.of(notMatches));
        }
        @CustomType.Setter
        public Builder scope(String scope) {
            if (scope == null) {
              throw new MissingRequiredPropertyException("GetNetworkAclRule", "scope");
            }
            this.scope = scope;
            return this;
        }
        public GetNetworkAclRule build() {
            final var _resultValue = new GetNetworkAclRule();
            _resultValue.actions = actions;
            _resultValue.matches = matches;
            _resultValue.notMatches = notMatches;
            _resultValue.scope = scope;
            return _resultValue;
        }
    }
}
