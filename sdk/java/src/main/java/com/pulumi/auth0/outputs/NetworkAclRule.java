// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.auth0.outputs;

import com.pulumi.auth0.outputs.NetworkAclRuleAction;
import com.pulumi.auth0.outputs.NetworkAclRuleMatch;
import com.pulumi.auth0.outputs.NetworkAclRuleNotMatch;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class NetworkAclRule {
    /**
     * @return The action configuration for the Network ACL Rule. Only one action type (block, allow, log, or redirect) should be specified.
     * 
     */
    private NetworkAclRuleAction action;
    /**
     * @return The configuration for the Network ACL Rule
     * 
     */
    private @Nullable NetworkAclRuleMatch match;
    /**
     * @return The configuration for the Network ACL Rule
     * 
     */
    private @Nullable NetworkAclRuleNotMatch notMatch;
    /**
     * @return The scope of the Network ACL Rule
     * 
     */
    private String scope;

    private NetworkAclRule() {}
    /**
     * @return The action configuration for the Network ACL Rule. Only one action type (block, allow, log, or redirect) should be specified.
     * 
     */
    public NetworkAclRuleAction action() {
        return this.action;
    }
    /**
     * @return The configuration for the Network ACL Rule
     * 
     */
    public Optional<NetworkAclRuleMatch> match() {
        return Optional.ofNullable(this.match);
    }
    /**
     * @return The configuration for the Network ACL Rule
     * 
     */
    public Optional<NetworkAclRuleNotMatch> notMatch() {
        return Optional.ofNullable(this.notMatch);
    }
    /**
     * @return The scope of the Network ACL Rule
     * 
     */
    public String scope() {
        return this.scope;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NetworkAclRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private NetworkAclRuleAction action;
        private @Nullable NetworkAclRuleMatch match;
        private @Nullable NetworkAclRuleNotMatch notMatch;
        private String scope;
        public Builder() {}
        public Builder(NetworkAclRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.action = defaults.action;
    	      this.match = defaults.match;
    	      this.notMatch = defaults.notMatch;
    	      this.scope = defaults.scope;
        }

        @CustomType.Setter
        public Builder action(NetworkAclRuleAction action) {
            if (action == null) {
              throw new MissingRequiredPropertyException("NetworkAclRule", "action");
            }
            this.action = action;
            return this;
        }
        @CustomType.Setter
        public Builder match(@Nullable NetworkAclRuleMatch match) {

            this.match = match;
            return this;
        }
        @CustomType.Setter
        public Builder notMatch(@Nullable NetworkAclRuleNotMatch notMatch) {

            this.notMatch = notMatch;
            return this;
        }
        @CustomType.Setter
        public Builder scope(String scope) {
            if (scope == null) {
              throw new MissingRequiredPropertyException("NetworkAclRule", "scope");
            }
            this.scope = scope;
            return this;
        }
        public NetworkAclRule build() {
            final var _resultValue = new NetworkAclRule();
            _resultValue.action = action;
            _resultValue.match = match;
            _resultValue.notMatch = notMatch;
            _resultValue.scope = scope;
            return _resultValue;
        }
    }
}
