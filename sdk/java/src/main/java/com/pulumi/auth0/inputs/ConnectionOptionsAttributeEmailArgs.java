// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.auth0.inputs;

import com.pulumi.auth0.inputs.ConnectionOptionsAttributeEmailIdentifierArgs;
import com.pulumi.auth0.inputs.ConnectionOptionsAttributeEmailSignupArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConnectionOptionsAttributeEmailArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConnectionOptionsAttributeEmailArgs Empty = new ConnectionOptionsAttributeEmailArgs();

    /**
     * Connection Options Email Attribute Identifier
     * 
     */
    @Import(name="identifiers")
    private @Nullable Output<List<ConnectionOptionsAttributeEmailIdentifierArgs>> identifiers;

    /**
     * @return Connection Options Email Attribute Identifier
     * 
     */
    public Optional<Output<List<ConnectionOptionsAttributeEmailIdentifierArgs>>> identifiers() {
        return Optional.ofNullable(this.identifiers);
    }

    /**
     * Defines whether Profile is required
     * 
     */
    @Import(name="profileRequired")
    private @Nullable Output<Boolean> profileRequired;

    /**
     * @return Defines whether Profile is required
     * 
     */
    public Optional<Output<Boolean>> profileRequired() {
        return Optional.ofNullable(this.profileRequired);
    }

    /**
     * Defines signup settings for Email attribute
     * 
     */
    @Import(name="signups")
    private @Nullable Output<List<ConnectionOptionsAttributeEmailSignupArgs>> signups;

    /**
     * @return Defines signup settings for Email attribute
     * 
     */
    public Optional<Output<List<ConnectionOptionsAttributeEmailSignupArgs>>> signups() {
        return Optional.ofNullable(this.signups);
    }

    /**
     * If set to false, it allow multiple accounts with the same email address
     * 
     */
    @Import(name="unique")
    private @Nullable Output<Boolean> unique;

    /**
     * @return If set to false, it allow multiple accounts with the same email address
     * 
     */
    public Optional<Output<Boolean>> unique() {
        return Optional.ofNullable(this.unique);
    }

    /**
     * Defines whether whether user will receive a link or an OTP during user signup for email verification and password reset for email verification
     * 
     */
    @Import(name="verificationMethod")
    private @Nullable Output<String> verificationMethod;

    /**
     * @return Defines whether whether user will receive a link or an OTP during user signup for email verification and password reset for email verification
     * 
     */
    public Optional<Output<String>> verificationMethod() {
        return Optional.ofNullable(this.verificationMethod);
    }

    private ConnectionOptionsAttributeEmailArgs() {}

    private ConnectionOptionsAttributeEmailArgs(ConnectionOptionsAttributeEmailArgs $) {
        this.identifiers = $.identifiers;
        this.profileRequired = $.profileRequired;
        this.signups = $.signups;
        this.unique = $.unique;
        this.verificationMethod = $.verificationMethod;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectionOptionsAttributeEmailArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectionOptionsAttributeEmailArgs $;

        public Builder() {
            $ = new ConnectionOptionsAttributeEmailArgs();
        }

        public Builder(ConnectionOptionsAttributeEmailArgs defaults) {
            $ = new ConnectionOptionsAttributeEmailArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param identifiers Connection Options Email Attribute Identifier
         * 
         * @return builder
         * 
         */
        public Builder identifiers(@Nullable Output<List<ConnectionOptionsAttributeEmailIdentifierArgs>> identifiers) {
            $.identifiers = identifiers;
            return this;
        }

        /**
         * @param identifiers Connection Options Email Attribute Identifier
         * 
         * @return builder
         * 
         */
        public Builder identifiers(List<ConnectionOptionsAttributeEmailIdentifierArgs> identifiers) {
            return identifiers(Output.of(identifiers));
        }

        /**
         * @param identifiers Connection Options Email Attribute Identifier
         * 
         * @return builder
         * 
         */
        public Builder identifiers(ConnectionOptionsAttributeEmailIdentifierArgs... identifiers) {
            return identifiers(List.of(identifiers));
        }

        /**
         * @param profileRequired Defines whether Profile is required
         * 
         * @return builder
         * 
         */
        public Builder profileRequired(@Nullable Output<Boolean> profileRequired) {
            $.profileRequired = profileRequired;
            return this;
        }

        /**
         * @param profileRequired Defines whether Profile is required
         * 
         * @return builder
         * 
         */
        public Builder profileRequired(Boolean profileRequired) {
            return profileRequired(Output.of(profileRequired));
        }

        /**
         * @param signups Defines signup settings for Email attribute
         * 
         * @return builder
         * 
         */
        public Builder signups(@Nullable Output<List<ConnectionOptionsAttributeEmailSignupArgs>> signups) {
            $.signups = signups;
            return this;
        }

        /**
         * @param signups Defines signup settings for Email attribute
         * 
         * @return builder
         * 
         */
        public Builder signups(List<ConnectionOptionsAttributeEmailSignupArgs> signups) {
            return signups(Output.of(signups));
        }

        /**
         * @param signups Defines signup settings for Email attribute
         * 
         * @return builder
         * 
         */
        public Builder signups(ConnectionOptionsAttributeEmailSignupArgs... signups) {
            return signups(List.of(signups));
        }

        /**
         * @param unique If set to false, it allow multiple accounts with the same email address
         * 
         * @return builder
         * 
         */
        public Builder unique(@Nullable Output<Boolean> unique) {
            $.unique = unique;
            return this;
        }

        /**
         * @param unique If set to false, it allow multiple accounts with the same email address
         * 
         * @return builder
         * 
         */
        public Builder unique(Boolean unique) {
            return unique(Output.of(unique));
        }

        /**
         * @param verificationMethod Defines whether whether user will receive a link or an OTP during user signup for email verification and password reset for email verification
         * 
         * @return builder
         * 
         */
        public Builder verificationMethod(@Nullable Output<String> verificationMethod) {
            $.verificationMethod = verificationMethod;
            return this;
        }

        /**
         * @param verificationMethod Defines whether whether user will receive a link or an OTP during user signup for email verification and password reset for email verification
         * 
         * @return builder
         * 
         */
        public Builder verificationMethod(String verificationMethod) {
            return verificationMethod(Output.of(verificationMethod));
        }

        public ConnectionOptionsAttributeEmailArgs build() {
            return $;
        }
    }

}
