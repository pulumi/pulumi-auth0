// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.auth0.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConnectionClientsState extends com.pulumi.resources.ResourceArgs {

    public static final ConnectionClientsState Empty = new ConnectionClientsState();

    /**
     * ID of the connection on which to enable the client.
     * 
     */
    @Import(name="connectionId")
    private @Nullable Output<String> connectionId;

    /**
     * @return ID of the connection on which to enable the client.
     * 
     */
    public Optional<Output<String>> connectionId() {
        return Optional.ofNullable(this.connectionId);
    }

    /**
     * IDs of the clients for which the connection is enabled.
     * 
     */
    @Import(name="enabledClients")
    private @Nullable Output<List<String>> enabledClients;

    /**
     * @return IDs of the clients for which the connection is enabled.
     * 
     */
    public Optional<Output<List<String>>> enabledClients() {
        return Optional.ofNullable(this.enabledClients);
    }

    /**
     * The name of the connection on which to enable the client.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the connection on which to enable the client.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The strategy of the connection on which to enable the client.
     * 
     */
    @Import(name="strategy")
    private @Nullable Output<String> strategy;

    /**
     * @return The strategy of the connection on which to enable the client.
     * 
     */
    public Optional<Output<String>> strategy() {
        return Optional.ofNullable(this.strategy);
    }

    private ConnectionClientsState() {}

    private ConnectionClientsState(ConnectionClientsState $) {
        this.connectionId = $.connectionId;
        this.enabledClients = $.enabledClients;
        this.name = $.name;
        this.strategy = $.strategy;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectionClientsState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectionClientsState $;

        public Builder() {
            $ = new ConnectionClientsState();
        }

        public Builder(ConnectionClientsState defaults) {
            $ = new ConnectionClientsState(Objects.requireNonNull(defaults));
        }

        /**
         * @param connectionId ID of the connection on which to enable the client.
         * 
         * @return builder
         * 
         */
        public Builder connectionId(@Nullable Output<String> connectionId) {
            $.connectionId = connectionId;
            return this;
        }

        /**
         * @param connectionId ID of the connection on which to enable the client.
         * 
         * @return builder
         * 
         */
        public Builder connectionId(String connectionId) {
            return connectionId(Output.of(connectionId));
        }

        /**
         * @param enabledClients IDs of the clients for which the connection is enabled.
         * 
         * @return builder
         * 
         */
        public Builder enabledClients(@Nullable Output<List<String>> enabledClients) {
            $.enabledClients = enabledClients;
            return this;
        }

        /**
         * @param enabledClients IDs of the clients for which the connection is enabled.
         * 
         * @return builder
         * 
         */
        public Builder enabledClients(List<String> enabledClients) {
            return enabledClients(Output.of(enabledClients));
        }

        /**
         * @param enabledClients IDs of the clients for which the connection is enabled.
         * 
         * @return builder
         * 
         */
        public Builder enabledClients(String... enabledClients) {
            return enabledClients(List.of(enabledClients));
        }

        /**
         * @param name The name of the connection on which to enable the client.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the connection on which to enable the client.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param strategy The strategy of the connection on which to enable the client.
         * 
         * @return builder
         * 
         */
        public Builder strategy(@Nullable Output<String> strategy) {
            $.strategy = strategy;
            return this;
        }

        /**
         * @param strategy The strategy of the connection on which to enable the client.
         * 
         * @return builder
         * 
         */
        public Builder strategy(String strategy) {
            return strategy(Output.of(strategy));
        }

        public ConnectionClientsState build() {
            return $;
        }
    }

}
