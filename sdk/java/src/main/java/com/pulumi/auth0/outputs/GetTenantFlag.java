// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.auth0.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.util.Objects;

@CustomType
public final class GetTenantFlag {
    /**
     * @return Whether the legacy delegation endpoint will be enabled for your account (true) or not available (false).
     * 
     */
    private Boolean allowLegacyDelegationGrantTypes;
    /**
     * @return Whether the legacy `auth/ro` endpoint (used with resource owner password and passwordless features) will be enabled for your account (true) or not available (false).
     * 
     */
    private Boolean allowLegacyRoGrantTypes;
    /**
     * @return If enabled, customers can use Tokeninfo Endpoint, otherwise they can not use it.
     * 
     */
    private Boolean allowLegacyTokeninfoEndpoint;
    /**
     * @return Enables new insights activity page view.
     * 
     */
    private Boolean dashboardInsightsView;
    /**
     * @return Enables beta access to log streaming changes.
     * 
     */
    private Boolean dashboardLogStreamsNext;
    /**
     * @return Indicates whether classic Universal Login prompts include additional security headers to prevent clickjacking.
     * 
     */
    private Boolean disableClickjackProtectionHeaders;
    /**
     * @return Disables SAML fields map fix for bad mappings with repeated attributes.
     * 
     */
    private Boolean disableFieldsMapFix;
    /**
     * @return If true, SMS phone numbers will not be obfuscated in Management API GET calls.
     * 
     */
    private Boolean disableManagementApiSmsObfuscation;
    /**
     * @return If enabled, users will be presented with an email verification prompt during their first login when using Azure AD or ADFS connections.
     * 
     */
    private Boolean enableAdfsWaadEmailVerification;
    /**
     * @return Indicates whether the APIs section is enabled for the tenant.
     * 
     */
    private Boolean enableApisSection;
    /**
     * @return Indicates whether all current connections should be enabled when a new client is created.
     * 
     */
    private Boolean enableClientConnections;
    /**
     * @return Indicates whether the tenant allows custom domains in emails. Before enabling this flag, you must have a custom domain with status: `ready`.
     * 
     */
    private Boolean enableCustomDomainInEmails;
    /**
     * @return Indicates whether the tenant allows dynamic client registration.
     * 
     */
    private Boolean enableDynamicClientRegistration;
    /**
     * @return Whether ID tokens can be used to authorize some types of requests to API v2 (true) or not (false).
     * 
     */
    private Boolean enableIdtokenApi2;
    /**
     * @return Indicates whether to use the older v2 legacy logs search.
     * 
     */
    private Boolean enableLegacyLogsSearchV2;
    /**
     * @return Whether ID tokens and the userinfo endpoint includes a complete user profile (true) or only OpenID Connect claims (false).
     * 
     */
    private Boolean enableLegacyProfile;
    /**
     * @return Indicates whether advanced API Authorization scenarios are enabled.
     * 
     */
    private Boolean enablePipeline2;
    /**
     * @return Indicates whether the public sign up process shows a `user_exists` error if the user already exists.
     * 
     */
    private Boolean enablePublicSignupUserExistsError;
    /**
     * @return Used to allow users to pick which factor to enroll with from the list of available MFA factors.
     * 
     */
    private Boolean mfaShowFactorListOnEnrollment;
    /**
     * @return Do not Publish Enterprise Connections Information with IdP domains on the lock configuration file.
     * 
     */
    private Boolean noDiscloseEnterpriseConnections;
    /**
     * @return Makes the use of Pushed Authorization Requests mandatory for all clients across the tenant. This feature currently needs to be enabled on the tenant in order to make use of it.
     * 
     */
    private Boolean requirePushedAuthorizationRequests;
    /**
     * @return Delete underlying grant when a refresh token is revoked via the Authentication API.
     * 
     */
    private Boolean revokeRefreshTokenGrant;
    /**
     * @return Indicates whether to use scope descriptions for consent.
     * 
     */
    private Boolean useScopeDescriptionsForConsent;

    private GetTenantFlag() {}
    /**
     * @return Whether the legacy delegation endpoint will be enabled for your account (true) or not available (false).
     * 
     */
    public Boolean allowLegacyDelegationGrantTypes() {
        return this.allowLegacyDelegationGrantTypes;
    }
    /**
     * @return Whether the legacy `auth/ro` endpoint (used with resource owner password and passwordless features) will be enabled for your account (true) or not available (false).
     * 
     */
    public Boolean allowLegacyRoGrantTypes() {
        return this.allowLegacyRoGrantTypes;
    }
    /**
     * @return If enabled, customers can use Tokeninfo Endpoint, otherwise they can not use it.
     * 
     */
    public Boolean allowLegacyTokeninfoEndpoint() {
        return this.allowLegacyTokeninfoEndpoint;
    }
    /**
     * @return Enables new insights activity page view.
     * 
     */
    public Boolean dashboardInsightsView() {
        return this.dashboardInsightsView;
    }
    /**
     * @return Enables beta access to log streaming changes.
     * 
     */
    public Boolean dashboardLogStreamsNext() {
        return this.dashboardLogStreamsNext;
    }
    /**
     * @return Indicates whether classic Universal Login prompts include additional security headers to prevent clickjacking.
     * 
     */
    public Boolean disableClickjackProtectionHeaders() {
        return this.disableClickjackProtectionHeaders;
    }
    /**
     * @return Disables SAML fields map fix for bad mappings with repeated attributes.
     * 
     */
    public Boolean disableFieldsMapFix() {
        return this.disableFieldsMapFix;
    }
    /**
     * @return If true, SMS phone numbers will not be obfuscated in Management API GET calls.
     * 
     */
    public Boolean disableManagementApiSmsObfuscation() {
        return this.disableManagementApiSmsObfuscation;
    }
    /**
     * @return If enabled, users will be presented with an email verification prompt during their first login when using Azure AD or ADFS connections.
     * 
     */
    public Boolean enableAdfsWaadEmailVerification() {
        return this.enableAdfsWaadEmailVerification;
    }
    /**
     * @return Indicates whether the APIs section is enabled for the tenant.
     * 
     */
    public Boolean enableApisSection() {
        return this.enableApisSection;
    }
    /**
     * @return Indicates whether all current connections should be enabled when a new client is created.
     * 
     */
    public Boolean enableClientConnections() {
        return this.enableClientConnections;
    }
    /**
     * @return Indicates whether the tenant allows custom domains in emails. Before enabling this flag, you must have a custom domain with status: `ready`.
     * 
     */
    public Boolean enableCustomDomainInEmails() {
        return this.enableCustomDomainInEmails;
    }
    /**
     * @return Indicates whether the tenant allows dynamic client registration.
     * 
     */
    public Boolean enableDynamicClientRegistration() {
        return this.enableDynamicClientRegistration;
    }
    /**
     * @return Whether ID tokens can be used to authorize some types of requests to API v2 (true) or not (false).
     * 
     */
    public Boolean enableIdtokenApi2() {
        return this.enableIdtokenApi2;
    }
    /**
     * @return Indicates whether to use the older v2 legacy logs search.
     * 
     */
    public Boolean enableLegacyLogsSearchV2() {
        return this.enableLegacyLogsSearchV2;
    }
    /**
     * @return Whether ID tokens and the userinfo endpoint includes a complete user profile (true) or only OpenID Connect claims (false).
     * 
     */
    public Boolean enableLegacyProfile() {
        return this.enableLegacyProfile;
    }
    /**
     * @return Indicates whether advanced API Authorization scenarios are enabled.
     * 
     */
    public Boolean enablePipeline2() {
        return this.enablePipeline2;
    }
    /**
     * @return Indicates whether the public sign up process shows a `user_exists` error if the user already exists.
     * 
     */
    public Boolean enablePublicSignupUserExistsError() {
        return this.enablePublicSignupUserExistsError;
    }
    /**
     * @return Used to allow users to pick which factor to enroll with from the list of available MFA factors.
     * 
     */
    public Boolean mfaShowFactorListOnEnrollment() {
        return this.mfaShowFactorListOnEnrollment;
    }
    /**
     * @return Do not Publish Enterprise Connections Information with IdP domains on the lock configuration file.
     * 
     */
    public Boolean noDiscloseEnterpriseConnections() {
        return this.noDiscloseEnterpriseConnections;
    }
    /**
     * @return Makes the use of Pushed Authorization Requests mandatory for all clients across the tenant. This feature currently needs to be enabled on the tenant in order to make use of it.
     * 
     */
    public Boolean requirePushedAuthorizationRequests() {
        return this.requirePushedAuthorizationRequests;
    }
    /**
     * @return Delete underlying grant when a refresh token is revoked via the Authentication API.
     * 
     */
    public Boolean revokeRefreshTokenGrant() {
        return this.revokeRefreshTokenGrant;
    }
    /**
     * @return Indicates whether to use scope descriptions for consent.
     * 
     */
    public Boolean useScopeDescriptionsForConsent() {
        return this.useScopeDescriptionsForConsent;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTenantFlag defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean allowLegacyDelegationGrantTypes;
        private Boolean allowLegacyRoGrantTypes;
        private Boolean allowLegacyTokeninfoEndpoint;
        private Boolean dashboardInsightsView;
        private Boolean dashboardLogStreamsNext;
        private Boolean disableClickjackProtectionHeaders;
        private Boolean disableFieldsMapFix;
        private Boolean disableManagementApiSmsObfuscation;
        private Boolean enableAdfsWaadEmailVerification;
        private Boolean enableApisSection;
        private Boolean enableClientConnections;
        private Boolean enableCustomDomainInEmails;
        private Boolean enableDynamicClientRegistration;
        private Boolean enableIdtokenApi2;
        private Boolean enableLegacyLogsSearchV2;
        private Boolean enableLegacyProfile;
        private Boolean enablePipeline2;
        private Boolean enablePublicSignupUserExistsError;
        private Boolean mfaShowFactorListOnEnrollment;
        private Boolean noDiscloseEnterpriseConnections;
        private Boolean requirePushedAuthorizationRequests;
        private Boolean revokeRefreshTokenGrant;
        private Boolean useScopeDescriptionsForConsent;
        public Builder() {}
        public Builder(GetTenantFlag defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowLegacyDelegationGrantTypes = defaults.allowLegacyDelegationGrantTypes;
    	      this.allowLegacyRoGrantTypes = defaults.allowLegacyRoGrantTypes;
    	      this.allowLegacyTokeninfoEndpoint = defaults.allowLegacyTokeninfoEndpoint;
    	      this.dashboardInsightsView = defaults.dashboardInsightsView;
    	      this.dashboardLogStreamsNext = defaults.dashboardLogStreamsNext;
    	      this.disableClickjackProtectionHeaders = defaults.disableClickjackProtectionHeaders;
    	      this.disableFieldsMapFix = defaults.disableFieldsMapFix;
    	      this.disableManagementApiSmsObfuscation = defaults.disableManagementApiSmsObfuscation;
    	      this.enableAdfsWaadEmailVerification = defaults.enableAdfsWaadEmailVerification;
    	      this.enableApisSection = defaults.enableApisSection;
    	      this.enableClientConnections = defaults.enableClientConnections;
    	      this.enableCustomDomainInEmails = defaults.enableCustomDomainInEmails;
    	      this.enableDynamicClientRegistration = defaults.enableDynamicClientRegistration;
    	      this.enableIdtokenApi2 = defaults.enableIdtokenApi2;
    	      this.enableLegacyLogsSearchV2 = defaults.enableLegacyLogsSearchV2;
    	      this.enableLegacyProfile = defaults.enableLegacyProfile;
    	      this.enablePipeline2 = defaults.enablePipeline2;
    	      this.enablePublicSignupUserExistsError = defaults.enablePublicSignupUserExistsError;
    	      this.mfaShowFactorListOnEnrollment = defaults.mfaShowFactorListOnEnrollment;
    	      this.noDiscloseEnterpriseConnections = defaults.noDiscloseEnterpriseConnections;
    	      this.requirePushedAuthorizationRequests = defaults.requirePushedAuthorizationRequests;
    	      this.revokeRefreshTokenGrant = defaults.revokeRefreshTokenGrant;
    	      this.useScopeDescriptionsForConsent = defaults.useScopeDescriptionsForConsent;
        }

        @CustomType.Setter
        public Builder allowLegacyDelegationGrantTypes(Boolean allowLegacyDelegationGrantTypes) {
            if (allowLegacyDelegationGrantTypes == null) {
              throw new MissingRequiredPropertyException("GetTenantFlag", "allowLegacyDelegationGrantTypes");
            }
            this.allowLegacyDelegationGrantTypes = allowLegacyDelegationGrantTypes;
            return this;
        }
        @CustomType.Setter
        public Builder allowLegacyRoGrantTypes(Boolean allowLegacyRoGrantTypes) {
            if (allowLegacyRoGrantTypes == null) {
              throw new MissingRequiredPropertyException("GetTenantFlag", "allowLegacyRoGrantTypes");
            }
            this.allowLegacyRoGrantTypes = allowLegacyRoGrantTypes;
            return this;
        }
        @CustomType.Setter
        public Builder allowLegacyTokeninfoEndpoint(Boolean allowLegacyTokeninfoEndpoint) {
            if (allowLegacyTokeninfoEndpoint == null) {
              throw new MissingRequiredPropertyException("GetTenantFlag", "allowLegacyTokeninfoEndpoint");
            }
            this.allowLegacyTokeninfoEndpoint = allowLegacyTokeninfoEndpoint;
            return this;
        }
        @CustomType.Setter
        public Builder dashboardInsightsView(Boolean dashboardInsightsView) {
            if (dashboardInsightsView == null) {
              throw new MissingRequiredPropertyException("GetTenantFlag", "dashboardInsightsView");
            }
            this.dashboardInsightsView = dashboardInsightsView;
            return this;
        }
        @CustomType.Setter
        public Builder dashboardLogStreamsNext(Boolean dashboardLogStreamsNext) {
            if (dashboardLogStreamsNext == null) {
              throw new MissingRequiredPropertyException("GetTenantFlag", "dashboardLogStreamsNext");
            }
            this.dashboardLogStreamsNext = dashboardLogStreamsNext;
            return this;
        }
        @CustomType.Setter
        public Builder disableClickjackProtectionHeaders(Boolean disableClickjackProtectionHeaders) {
            if (disableClickjackProtectionHeaders == null) {
              throw new MissingRequiredPropertyException("GetTenantFlag", "disableClickjackProtectionHeaders");
            }
            this.disableClickjackProtectionHeaders = disableClickjackProtectionHeaders;
            return this;
        }
        @CustomType.Setter
        public Builder disableFieldsMapFix(Boolean disableFieldsMapFix) {
            if (disableFieldsMapFix == null) {
              throw new MissingRequiredPropertyException("GetTenantFlag", "disableFieldsMapFix");
            }
            this.disableFieldsMapFix = disableFieldsMapFix;
            return this;
        }
        @CustomType.Setter
        public Builder disableManagementApiSmsObfuscation(Boolean disableManagementApiSmsObfuscation) {
            if (disableManagementApiSmsObfuscation == null) {
              throw new MissingRequiredPropertyException("GetTenantFlag", "disableManagementApiSmsObfuscation");
            }
            this.disableManagementApiSmsObfuscation = disableManagementApiSmsObfuscation;
            return this;
        }
        @CustomType.Setter
        public Builder enableAdfsWaadEmailVerification(Boolean enableAdfsWaadEmailVerification) {
            if (enableAdfsWaadEmailVerification == null) {
              throw new MissingRequiredPropertyException("GetTenantFlag", "enableAdfsWaadEmailVerification");
            }
            this.enableAdfsWaadEmailVerification = enableAdfsWaadEmailVerification;
            return this;
        }
        @CustomType.Setter
        public Builder enableApisSection(Boolean enableApisSection) {
            if (enableApisSection == null) {
              throw new MissingRequiredPropertyException("GetTenantFlag", "enableApisSection");
            }
            this.enableApisSection = enableApisSection;
            return this;
        }
        @CustomType.Setter
        public Builder enableClientConnections(Boolean enableClientConnections) {
            if (enableClientConnections == null) {
              throw new MissingRequiredPropertyException("GetTenantFlag", "enableClientConnections");
            }
            this.enableClientConnections = enableClientConnections;
            return this;
        }
        @CustomType.Setter
        public Builder enableCustomDomainInEmails(Boolean enableCustomDomainInEmails) {
            if (enableCustomDomainInEmails == null) {
              throw new MissingRequiredPropertyException("GetTenantFlag", "enableCustomDomainInEmails");
            }
            this.enableCustomDomainInEmails = enableCustomDomainInEmails;
            return this;
        }
        @CustomType.Setter
        public Builder enableDynamicClientRegistration(Boolean enableDynamicClientRegistration) {
            if (enableDynamicClientRegistration == null) {
              throw new MissingRequiredPropertyException("GetTenantFlag", "enableDynamicClientRegistration");
            }
            this.enableDynamicClientRegistration = enableDynamicClientRegistration;
            return this;
        }
        @CustomType.Setter
        public Builder enableIdtokenApi2(Boolean enableIdtokenApi2) {
            if (enableIdtokenApi2 == null) {
              throw new MissingRequiredPropertyException("GetTenantFlag", "enableIdtokenApi2");
            }
            this.enableIdtokenApi2 = enableIdtokenApi2;
            return this;
        }
        @CustomType.Setter
        public Builder enableLegacyLogsSearchV2(Boolean enableLegacyLogsSearchV2) {
            if (enableLegacyLogsSearchV2 == null) {
              throw new MissingRequiredPropertyException("GetTenantFlag", "enableLegacyLogsSearchV2");
            }
            this.enableLegacyLogsSearchV2 = enableLegacyLogsSearchV2;
            return this;
        }
        @CustomType.Setter
        public Builder enableLegacyProfile(Boolean enableLegacyProfile) {
            if (enableLegacyProfile == null) {
              throw new MissingRequiredPropertyException("GetTenantFlag", "enableLegacyProfile");
            }
            this.enableLegacyProfile = enableLegacyProfile;
            return this;
        }
        @CustomType.Setter
        public Builder enablePipeline2(Boolean enablePipeline2) {
            if (enablePipeline2 == null) {
              throw new MissingRequiredPropertyException("GetTenantFlag", "enablePipeline2");
            }
            this.enablePipeline2 = enablePipeline2;
            return this;
        }
        @CustomType.Setter
        public Builder enablePublicSignupUserExistsError(Boolean enablePublicSignupUserExistsError) {
            if (enablePublicSignupUserExistsError == null) {
              throw new MissingRequiredPropertyException("GetTenantFlag", "enablePublicSignupUserExistsError");
            }
            this.enablePublicSignupUserExistsError = enablePublicSignupUserExistsError;
            return this;
        }
        @CustomType.Setter
        public Builder mfaShowFactorListOnEnrollment(Boolean mfaShowFactorListOnEnrollment) {
            if (mfaShowFactorListOnEnrollment == null) {
              throw new MissingRequiredPropertyException("GetTenantFlag", "mfaShowFactorListOnEnrollment");
            }
            this.mfaShowFactorListOnEnrollment = mfaShowFactorListOnEnrollment;
            return this;
        }
        @CustomType.Setter
        public Builder noDiscloseEnterpriseConnections(Boolean noDiscloseEnterpriseConnections) {
            if (noDiscloseEnterpriseConnections == null) {
              throw new MissingRequiredPropertyException("GetTenantFlag", "noDiscloseEnterpriseConnections");
            }
            this.noDiscloseEnterpriseConnections = noDiscloseEnterpriseConnections;
            return this;
        }
        @CustomType.Setter
        public Builder requirePushedAuthorizationRequests(Boolean requirePushedAuthorizationRequests) {
            if (requirePushedAuthorizationRequests == null) {
              throw new MissingRequiredPropertyException("GetTenantFlag", "requirePushedAuthorizationRequests");
            }
            this.requirePushedAuthorizationRequests = requirePushedAuthorizationRequests;
            return this;
        }
        @CustomType.Setter
        public Builder revokeRefreshTokenGrant(Boolean revokeRefreshTokenGrant) {
            if (revokeRefreshTokenGrant == null) {
              throw new MissingRequiredPropertyException("GetTenantFlag", "revokeRefreshTokenGrant");
            }
            this.revokeRefreshTokenGrant = revokeRefreshTokenGrant;
            return this;
        }
        @CustomType.Setter
        public Builder useScopeDescriptionsForConsent(Boolean useScopeDescriptionsForConsent) {
            if (useScopeDescriptionsForConsent == null) {
              throw new MissingRequiredPropertyException("GetTenantFlag", "useScopeDescriptionsForConsent");
            }
            this.useScopeDescriptionsForConsent = useScopeDescriptionsForConsent;
            return this;
        }
        public GetTenantFlag build() {
            final var _resultValue = new GetTenantFlag();
            _resultValue.allowLegacyDelegationGrantTypes = allowLegacyDelegationGrantTypes;
            _resultValue.allowLegacyRoGrantTypes = allowLegacyRoGrantTypes;
            _resultValue.allowLegacyTokeninfoEndpoint = allowLegacyTokeninfoEndpoint;
            _resultValue.dashboardInsightsView = dashboardInsightsView;
            _resultValue.dashboardLogStreamsNext = dashboardLogStreamsNext;
            _resultValue.disableClickjackProtectionHeaders = disableClickjackProtectionHeaders;
            _resultValue.disableFieldsMapFix = disableFieldsMapFix;
            _resultValue.disableManagementApiSmsObfuscation = disableManagementApiSmsObfuscation;
            _resultValue.enableAdfsWaadEmailVerification = enableAdfsWaadEmailVerification;
            _resultValue.enableApisSection = enableApisSection;
            _resultValue.enableClientConnections = enableClientConnections;
            _resultValue.enableCustomDomainInEmails = enableCustomDomainInEmails;
            _resultValue.enableDynamicClientRegistration = enableDynamicClientRegistration;
            _resultValue.enableIdtokenApi2 = enableIdtokenApi2;
            _resultValue.enableLegacyLogsSearchV2 = enableLegacyLogsSearchV2;
            _resultValue.enableLegacyProfile = enableLegacyProfile;
            _resultValue.enablePipeline2 = enablePipeline2;
            _resultValue.enablePublicSignupUserExistsError = enablePublicSignupUserExistsError;
            _resultValue.mfaShowFactorListOnEnrollment = mfaShowFactorListOnEnrollment;
            _resultValue.noDiscloseEnterpriseConnections = noDiscloseEnterpriseConnections;
            _resultValue.requirePushedAuthorizationRequests = requirePushedAuthorizationRequests;
            _resultValue.revokeRefreshTokenGrant = revokeRefreshTokenGrant;
            _resultValue.useScopeDescriptionsForConsent = useScopeDescriptionsForConsent;
            return _resultValue;
        }
    }
}
