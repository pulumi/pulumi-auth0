// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.auth0.inputs;

import com.pulumi.auth0.inputs.OrganizationConnectionsEnabledConnectionArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OrganizationConnectionsState extends com.pulumi.resources.ResourceArgs {

    public static final OrganizationConnectionsState Empty = new OrganizationConnectionsState();

    /**
     * Connections that are enabled for the organization.
     * 
     */
    @Import(name="enabledConnections")
    private @Nullable Output<List<OrganizationConnectionsEnabledConnectionArgs>> enabledConnections;

    /**
     * @return Connections that are enabled for the organization.
     * 
     */
    public Optional<Output<List<OrganizationConnectionsEnabledConnectionArgs>>> enabledConnections() {
        return Optional.ofNullable(this.enabledConnections);
    }

    /**
     * ID of the organization on which to enable the connections.
     * 
     */
    @Import(name="organizationId")
    private @Nullable Output<String> organizationId;

    /**
     * @return ID of the organization on which to enable the connections.
     * 
     */
    public Optional<Output<String>> organizationId() {
        return Optional.ofNullable(this.organizationId);
    }

    private OrganizationConnectionsState() {}

    private OrganizationConnectionsState(OrganizationConnectionsState $) {
        this.enabledConnections = $.enabledConnections;
        this.organizationId = $.organizationId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OrganizationConnectionsState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OrganizationConnectionsState $;

        public Builder() {
            $ = new OrganizationConnectionsState();
        }

        public Builder(OrganizationConnectionsState defaults) {
            $ = new OrganizationConnectionsState(Objects.requireNonNull(defaults));
        }

        /**
         * @param enabledConnections Connections that are enabled for the organization.
         * 
         * @return builder
         * 
         */
        public Builder enabledConnections(@Nullable Output<List<OrganizationConnectionsEnabledConnectionArgs>> enabledConnections) {
            $.enabledConnections = enabledConnections;
            return this;
        }

        /**
         * @param enabledConnections Connections that are enabled for the organization.
         * 
         * @return builder
         * 
         */
        public Builder enabledConnections(List<OrganizationConnectionsEnabledConnectionArgs> enabledConnections) {
            return enabledConnections(Output.of(enabledConnections));
        }

        /**
         * @param enabledConnections Connections that are enabled for the organization.
         * 
         * @return builder
         * 
         */
        public Builder enabledConnections(OrganizationConnectionsEnabledConnectionArgs... enabledConnections) {
            return enabledConnections(List.of(enabledConnections));
        }

        /**
         * @param organizationId ID of the organization on which to enable the connections.
         * 
         * @return builder
         * 
         */
        public Builder organizationId(@Nullable Output<String> organizationId) {
            $.organizationId = organizationId;
            return this;
        }

        /**
         * @param organizationId ID of the organization on which to enable the connections.
         * 
         * @return builder
         * 
         */
        public Builder organizationId(String organizationId) {
            return organizationId(Output.of(organizationId));
        }

        public OrganizationConnectionsState build() {
            return $;
        }
    }

}
