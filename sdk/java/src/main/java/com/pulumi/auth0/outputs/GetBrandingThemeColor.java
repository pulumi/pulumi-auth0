// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.auth0.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetBrandingThemeColor {
    private String baseFocusColor;
    private String baseHoverColor;
    private String bodyText;
    private String error;
    private String header;
    private String icons;
    private String inputBackground;
    private String inputBorder;
    private String inputFilledText;
    private String inputLabelsPlaceholders;
    private String linksFocusedComponents;
    private String primaryButton;
    private String primaryButtonLabel;
    private String secondaryButtonBorder;
    private String secondaryButtonLabel;
    private String success;
    private String widgetBackground;
    private String widgetBorder;

    private GetBrandingThemeColor() {}
    public String baseFocusColor() {
        return this.baseFocusColor;
    }
    public String baseHoverColor() {
        return this.baseHoverColor;
    }
    public String bodyText() {
        return this.bodyText;
    }
    public String error() {
        return this.error;
    }
    public String header() {
        return this.header;
    }
    public String icons() {
        return this.icons;
    }
    public String inputBackground() {
        return this.inputBackground;
    }
    public String inputBorder() {
        return this.inputBorder;
    }
    public String inputFilledText() {
        return this.inputFilledText;
    }
    public String inputLabelsPlaceholders() {
        return this.inputLabelsPlaceholders;
    }
    public String linksFocusedComponents() {
        return this.linksFocusedComponents;
    }
    public String primaryButton() {
        return this.primaryButton;
    }
    public String primaryButtonLabel() {
        return this.primaryButtonLabel;
    }
    public String secondaryButtonBorder() {
        return this.secondaryButtonBorder;
    }
    public String secondaryButtonLabel() {
        return this.secondaryButtonLabel;
    }
    public String success() {
        return this.success;
    }
    public String widgetBackground() {
        return this.widgetBackground;
    }
    public String widgetBorder() {
        return this.widgetBorder;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBrandingThemeColor defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String baseFocusColor;
        private String baseHoverColor;
        private String bodyText;
        private String error;
        private String header;
        private String icons;
        private String inputBackground;
        private String inputBorder;
        private String inputFilledText;
        private String inputLabelsPlaceholders;
        private String linksFocusedComponents;
        private String primaryButton;
        private String primaryButtonLabel;
        private String secondaryButtonBorder;
        private String secondaryButtonLabel;
        private String success;
        private String widgetBackground;
        private String widgetBorder;
        public Builder() {}
        public Builder(GetBrandingThemeColor defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.baseFocusColor = defaults.baseFocusColor;
    	      this.baseHoverColor = defaults.baseHoverColor;
    	      this.bodyText = defaults.bodyText;
    	      this.error = defaults.error;
    	      this.header = defaults.header;
    	      this.icons = defaults.icons;
    	      this.inputBackground = defaults.inputBackground;
    	      this.inputBorder = defaults.inputBorder;
    	      this.inputFilledText = defaults.inputFilledText;
    	      this.inputLabelsPlaceholders = defaults.inputLabelsPlaceholders;
    	      this.linksFocusedComponents = defaults.linksFocusedComponents;
    	      this.primaryButton = defaults.primaryButton;
    	      this.primaryButtonLabel = defaults.primaryButtonLabel;
    	      this.secondaryButtonBorder = defaults.secondaryButtonBorder;
    	      this.secondaryButtonLabel = defaults.secondaryButtonLabel;
    	      this.success = defaults.success;
    	      this.widgetBackground = defaults.widgetBackground;
    	      this.widgetBorder = defaults.widgetBorder;
        }

        @CustomType.Setter
        public Builder baseFocusColor(String baseFocusColor) {
            if (baseFocusColor == null) {
              throw new MissingRequiredPropertyException("GetBrandingThemeColor", "baseFocusColor");
            }
            this.baseFocusColor = baseFocusColor;
            return this;
        }
        @CustomType.Setter
        public Builder baseHoverColor(String baseHoverColor) {
            if (baseHoverColor == null) {
              throw new MissingRequiredPropertyException("GetBrandingThemeColor", "baseHoverColor");
            }
            this.baseHoverColor = baseHoverColor;
            return this;
        }
        @CustomType.Setter
        public Builder bodyText(String bodyText) {
            if (bodyText == null) {
              throw new MissingRequiredPropertyException("GetBrandingThemeColor", "bodyText");
            }
            this.bodyText = bodyText;
            return this;
        }
        @CustomType.Setter
        public Builder error(String error) {
            if (error == null) {
              throw new MissingRequiredPropertyException("GetBrandingThemeColor", "error");
            }
            this.error = error;
            return this;
        }
        @CustomType.Setter
        public Builder header(String header) {
            if (header == null) {
              throw new MissingRequiredPropertyException("GetBrandingThemeColor", "header");
            }
            this.header = header;
            return this;
        }
        @CustomType.Setter
        public Builder icons(String icons) {
            if (icons == null) {
              throw new MissingRequiredPropertyException("GetBrandingThemeColor", "icons");
            }
            this.icons = icons;
            return this;
        }
        @CustomType.Setter
        public Builder inputBackground(String inputBackground) {
            if (inputBackground == null) {
              throw new MissingRequiredPropertyException("GetBrandingThemeColor", "inputBackground");
            }
            this.inputBackground = inputBackground;
            return this;
        }
        @CustomType.Setter
        public Builder inputBorder(String inputBorder) {
            if (inputBorder == null) {
              throw new MissingRequiredPropertyException("GetBrandingThemeColor", "inputBorder");
            }
            this.inputBorder = inputBorder;
            return this;
        }
        @CustomType.Setter
        public Builder inputFilledText(String inputFilledText) {
            if (inputFilledText == null) {
              throw new MissingRequiredPropertyException("GetBrandingThemeColor", "inputFilledText");
            }
            this.inputFilledText = inputFilledText;
            return this;
        }
        @CustomType.Setter
        public Builder inputLabelsPlaceholders(String inputLabelsPlaceholders) {
            if (inputLabelsPlaceholders == null) {
              throw new MissingRequiredPropertyException("GetBrandingThemeColor", "inputLabelsPlaceholders");
            }
            this.inputLabelsPlaceholders = inputLabelsPlaceholders;
            return this;
        }
        @CustomType.Setter
        public Builder linksFocusedComponents(String linksFocusedComponents) {
            if (linksFocusedComponents == null) {
              throw new MissingRequiredPropertyException("GetBrandingThemeColor", "linksFocusedComponents");
            }
            this.linksFocusedComponents = linksFocusedComponents;
            return this;
        }
        @CustomType.Setter
        public Builder primaryButton(String primaryButton) {
            if (primaryButton == null) {
              throw new MissingRequiredPropertyException("GetBrandingThemeColor", "primaryButton");
            }
            this.primaryButton = primaryButton;
            return this;
        }
        @CustomType.Setter
        public Builder primaryButtonLabel(String primaryButtonLabel) {
            if (primaryButtonLabel == null) {
              throw new MissingRequiredPropertyException("GetBrandingThemeColor", "primaryButtonLabel");
            }
            this.primaryButtonLabel = primaryButtonLabel;
            return this;
        }
        @CustomType.Setter
        public Builder secondaryButtonBorder(String secondaryButtonBorder) {
            if (secondaryButtonBorder == null) {
              throw new MissingRequiredPropertyException("GetBrandingThemeColor", "secondaryButtonBorder");
            }
            this.secondaryButtonBorder = secondaryButtonBorder;
            return this;
        }
        @CustomType.Setter
        public Builder secondaryButtonLabel(String secondaryButtonLabel) {
            if (secondaryButtonLabel == null) {
              throw new MissingRequiredPropertyException("GetBrandingThemeColor", "secondaryButtonLabel");
            }
            this.secondaryButtonLabel = secondaryButtonLabel;
            return this;
        }
        @CustomType.Setter
        public Builder success(String success) {
            if (success == null) {
              throw new MissingRequiredPropertyException("GetBrandingThemeColor", "success");
            }
            this.success = success;
            return this;
        }
        @CustomType.Setter
        public Builder widgetBackground(String widgetBackground) {
            if (widgetBackground == null) {
              throw new MissingRequiredPropertyException("GetBrandingThemeColor", "widgetBackground");
            }
            this.widgetBackground = widgetBackground;
            return this;
        }
        @CustomType.Setter
        public Builder widgetBorder(String widgetBorder) {
            if (widgetBorder == null) {
              throw new MissingRequiredPropertyException("GetBrandingThemeColor", "widgetBorder");
            }
            this.widgetBorder = widgetBorder;
            return this;
        }
        public GetBrandingThemeColor build() {
            final var _resultValue = new GetBrandingThemeColor();
            _resultValue.baseFocusColor = baseFocusColor;
            _resultValue.baseHoverColor = baseHoverColor;
            _resultValue.bodyText = bodyText;
            _resultValue.error = error;
            _resultValue.header = header;
            _resultValue.icons = icons;
            _resultValue.inputBackground = inputBackground;
            _resultValue.inputBorder = inputBorder;
            _resultValue.inputFilledText = inputFilledText;
            _resultValue.inputLabelsPlaceholders = inputLabelsPlaceholders;
            _resultValue.linksFocusedComponents = linksFocusedComponents;
            _resultValue.primaryButton = primaryButton;
            _resultValue.primaryButtonLabel = primaryButtonLabel;
            _resultValue.secondaryButtonBorder = secondaryButtonBorder;
            _resultValue.secondaryButtonLabel = secondaryButtonLabel;
            _resultValue.success = success;
            _resultValue.widgetBackground = widgetBackground;
            _resultValue.widgetBorder = widgetBorder;
            return _resultValue;
        }
    }
}
