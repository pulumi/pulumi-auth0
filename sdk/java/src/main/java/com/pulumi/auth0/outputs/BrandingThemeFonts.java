// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.auth0.outputs;

import com.pulumi.auth0.outputs.BrandingThemeFontsBodyText;
import com.pulumi.auth0.outputs.BrandingThemeFontsButtonsText;
import com.pulumi.auth0.outputs.BrandingThemeFontsInputLabels;
import com.pulumi.auth0.outputs.BrandingThemeFontsLinks;
import com.pulumi.auth0.outputs.BrandingThemeFontsSubtitle;
import com.pulumi.auth0.outputs.BrandingThemeFontsTitle;
import com.pulumi.core.annotations.CustomType;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class BrandingThemeFonts {
    /**
     * @return Body text.
     * 
     */
    private BrandingThemeFontsBodyText bodyText;
    /**
     * @return Buttons text.
     * 
     */
    private BrandingThemeFontsButtonsText buttonsText;
    /**
     * @return Font URL. Defaults to an empty string.
     * 
     */
    private @Nullable String fontUrl;
    /**
     * @return Input labels.
     * 
     */
    private BrandingThemeFontsInputLabels inputLabels;
    /**
     * @return Links.
     * 
     */
    private BrandingThemeFontsLinks links;
    /**
     * @return Links style. Defaults to `normal`.
     * 
     */
    private @Nullable String linksStyle;
    /**
     * @return Reference text size. Value needs to be between `12` and `24`. Defaults to `16.0`.
     * 
     */
    private @Nullable Double referenceTextSize;
    /**
     * @return Subtitle.
     * 
     */
    private BrandingThemeFontsSubtitle subtitle;
    /**
     * @return Title.
     * 
     */
    private BrandingThemeFontsTitle title;

    private BrandingThemeFonts() {}
    /**
     * @return Body text.
     * 
     */
    public BrandingThemeFontsBodyText bodyText() {
        return this.bodyText;
    }
    /**
     * @return Buttons text.
     * 
     */
    public BrandingThemeFontsButtonsText buttonsText() {
        return this.buttonsText;
    }
    /**
     * @return Font URL. Defaults to an empty string.
     * 
     */
    public Optional<String> fontUrl() {
        return Optional.ofNullable(this.fontUrl);
    }
    /**
     * @return Input labels.
     * 
     */
    public BrandingThemeFontsInputLabels inputLabels() {
        return this.inputLabels;
    }
    /**
     * @return Links.
     * 
     */
    public BrandingThemeFontsLinks links() {
        return this.links;
    }
    /**
     * @return Links style. Defaults to `normal`.
     * 
     */
    public Optional<String> linksStyle() {
        return Optional.ofNullable(this.linksStyle);
    }
    /**
     * @return Reference text size. Value needs to be between `12` and `24`. Defaults to `16.0`.
     * 
     */
    public Optional<Double> referenceTextSize() {
        return Optional.ofNullable(this.referenceTextSize);
    }
    /**
     * @return Subtitle.
     * 
     */
    public BrandingThemeFontsSubtitle subtitle() {
        return this.subtitle;
    }
    /**
     * @return Title.
     * 
     */
    public BrandingThemeFontsTitle title() {
        return this.title;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BrandingThemeFonts defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private BrandingThemeFontsBodyText bodyText;
        private BrandingThemeFontsButtonsText buttonsText;
        private @Nullable String fontUrl;
        private BrandingThemeFontsInputLabels inputLabels;
        private BrandingThemeFontsLinks links;
        private @Nullable String linksStyle;
        private @Nullable Double referenceTextSize;
        private BrandingThemeFontsSubtitle subtitle;
        private BrandingThemeFontsTitle title;
        public Builder() {}
        public Builder(BrandingThemeFonts defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bodyText = defaults.bodyText;
    	      this.buttonsText = defaults.buttonsText;
    	      this.fontUrl = defaults.fontUrl;
    	      this.inputLabels = defaults.inputLabels;
    	      this.links = defaults.links;
    	      this.linksStyle = defaults.linksStyle;
    	      this.referenceTextSize = defaults.referenceTextSize;
    	      this.subtitle = defaults.subtitle;
    	      this.title = defaults.title;
        }

        @CustomType.Setter
        public Builder bodyText(BrandingThemeFontsBodyText bodyText) {
            this.bodyText = Objects.requireNonNull(bodyText);
            return this;
        }
        @CustomType.Setter
        public Builder buttonsText(BrandingThemeFontsButtonsText buttonsText) {
            this.buttonsText = Objects.requireNonNull(buttonsText);
            return this;
        }
        @CustomType.Setter
        public Builder fontUrl(@Nullable String fontUrl) {
            this.fontUrl = fontUrl;
            return this;
        }
        @CustomType.Setter
        public Builder inputLabels(BrandingThemeFontsInputLabels inputLabels) {
            this.inputLabels = Objects.requireNonNull(inputLabels);
            return this;
        }
        @CustomType.Setter
        public Builder links(BrandingThemeFontsLinks links) {
            this.links = Objects.requireNonNull(links);
            return this;
        }
        @CustomType.Setter
        public Builder linksStyle(@Nullable String linksStyle) {
            this.linksStyle = linksStyle;
            return this;
        }
        @CustomType.Setter
        public Builder referenceTextSize(@Nullable Double referenceTextSize) {
            this.referenceTextSize = referenceTextSize;
            return this;
        }
        @CustomType.Setter
        public Builder subtitle(BrandingThemeFontsSubtitle subtitle) {
            this.subtitle = Objects.requireNonNull(subtitle);
            return this;
        }
        @CustomType.Setter
        public Builder title(BrandingThemeFontsTitle title) {
            this.title = Objects.requireNonNull(title);
            return this;
        }
        public BrandingThemeFonts build() {
            final var _resultValue = new BrandingThemeFonts();
            _resultValue.bodyText = bodyText;
            _resultValue.buttonsText = buttonsText;
            _resultValue.fontUrl = fontUrl;
            _resultValue.inputLabels = inputLabels;
            _resultValue.links = links;
            _resultValue.linksStyle = linksStyle;
            _resultValue.referenceTextSize = referenceTextSize;
            _resultValue.subtitle = subtitle;
            _resultValue.title = title;
            return _resultValue;
        }
    }
}
