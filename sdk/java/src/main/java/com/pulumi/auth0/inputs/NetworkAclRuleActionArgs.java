// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.auth0.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NetworkAclRuleActionArgs extends com.pulumi.resources.ResourceArgs {

    public static final NetworkAclRuleActionArgs Empty = new NetworkAclRuleActionArgs();

    /**
     * If true, allows the request. When using allow action, no other properties should be set.
     * 
     */
    @Import(name="allow")
    private @Nullable Output<Boolean> allow;

    /**
     * @return If true, allows the request. When using allow action, no other properties should be set.
     * 
     */
    public Optional<Output<Boolean>> allow() {
        return Optional.ofNullable(this.allow);
    }

    /**
     * If true, blocks the request. When using block action, no other properties should be set.
     * 
     */
    @Import(name="block")
    private @Nullable Output<Boolean> block;

    /**
     * @return If true, blocks the request. When using block action, no other properties should be set.
     * 
     */
    public Optional<Output<Boolean>> block() {
        return Optional.ofNullable(this.block);
    }

    /**
     * If true, logs the request. When using log action, no other properties should be set.
     * 
     */
    @Import(name="log")
    private @Nullable Output<Boolean> log;

    /**
     * @return If true, logs the request. When using log action, no other properties should be set.
     * 
     */
    public Optional<Output<Boolean>> log() {
        return Optional.ofNullable(this.log);
    }

    /**
     * If true, redirects the request. When using redirect action, redirect_uri must also be specified.
     * 
     */
    @Import(name="redirect")
    private @Nullable Output<Boolean> redirect;

    /**
     * @return If true, redirects the request. When using redirect action, redirect_uri must also be specified.
     * 
     */
    public Optional<Output<Boolean>> redirect() {
        return Optional.ofNullable(this.redirect);
    }

    /**
     * The URI to redirect to when redirect is true. Required when redirect is true. Must be between 1 and 2000 characters.
     * 
     */
    @Import(name="redirectUri")
    private @Nullable Output<String> redirectUri;

    /**
     * @return The URI to redirect to when redirect is true. Required when redirect is true. Must be between 1 and 2000 characters.
     * 
     */
    public Optional<Output<String>> redirectUri() {
        return Optional.ofNullable(this.redirectUri);
    }

    private NetworkAclRuleActionArgs() {}

    private NetworkAclRuleActionArgs(NetworkAclRuleActionArgs $) {
        this.allow = $.allow;
        this.block = $.block;
        this.log = $.log;
        this.redirect = $.redirect;
        this.redirectUri = $.redirectUri;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NetworkAclRuleActionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NetworkAclRuleActionArgs $;

        public Builder() {
            $ = new NetworkAclRuleActionArgs();
        }

        public Builder(NetworkAclRuleActionArgs defaults) {
            $ = new NetworkAclRuleActionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allow If true, allows the request. When using allow action, no other properties should be set.
         * 
         * @return builder
         * 
         */
        public Builder allow(@Nullable Output<Boolean> allow) {
            $.allow = allow;
            return this;
        }

        /**
         * @param allow If true, allows the request. When using allow action, no other properties should be set.
         * 
         * @return builder
         * 
         */
        public Builder allow(Boolean allow) {
            return allow(Output.of(allow));
        }

        /**
         * @param block If true, blocks the request. When using block action, no other properties should be set.
         * 
         * @return builder
         * 
         */
        public Builder block(@Nullable Output<Boolean> block) {
            $.block = block;
            return this;
        }

        /**
         * @param block If true, blocks the request. When using block action, no other properties should be set.
         * 
         * @return builder
         * 
         */
        public Builder block(Boolean block) {
            return block(Output.of(block));
        }

        /**
         * @param log If true, logs the request. When using log action, no other properties should be set.
         * 
         * @return builder
         * 
         */
        public Builder log(@Nullable Output<Boolean> log) {
            $.log = log;
            return this;
        }

        /**
         * @param log If true, logs the request. When using log action, no other properties should be set.
         * 
         * @return builder
         * 
         */
        public Builder log(Boolean log) {
            return log(Output.of(log));
        }

        /**
         * @param redirect If true, redirects the request. When using redirect action, redirect_uri must also be specified.
         * 
         * @return builder
         * 
         */
        public Builder redirect(@Nullable Output<Boolean> redirect) {
            $.redirect = redirect;
            return this;
        }

        /**
         * @param redirect If true, redirects the request. When using redirect action, redirect_uri must also be specified.
         * 
         * @return builder
         * 
         */
        public Builder redirect(Boolean redirect) {
            return redirect(Output.of(redirect));
        }

        /**
         * @param redirectUri The URI to redirect to when redirect is true. Required when redirect is true. Must be between 1 and 2000 characters.
         * 
         * @return builder
         * 
         */
        public Builder redirectUri(@Nullable Output<String> redirectUri) {
            $.redirectUri = redirectUri;
            return this;
        }

        /**
         * @param redirectUri The URI to redirect to when redirect is true. Required when redirect is true. Must be between 1 and 2000 characters.
         * 
         * @return builder
         * 
         */
        public Builder redirectUri(String redirectUri) {
            return redirectUri(Output.of(redirectUri));
        }

        public NetworkAclRuleActionArgs build() {
            return $;
        }
    }

}
