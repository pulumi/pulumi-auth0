// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.auth0.inputs;

import com.pulumi.auth0.inputs.AttackProtectionBreachedPasswordDetectionPreUserRegistrationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AttackProtectionBreachedPasswordDetectionArgs extends com.pulumi.resources.ResourceArgs {

    public static final AttackProtectionBreachedPasswordDetectionArgs Empty = new AttackProtectionBreachedPasswordDetectionArgs();

    /**
     * When `admin_notification` is enabled within the `shields` property, determines how often email notifications are sent. Possible values: `immediately`, `daily`, `weekly`, `monthly`.
     * 
     */
    @Import(name="adminNotificationFrequencies")
    private @Nullable Output<List<String>> adminNotificationFrequencies;

    /**
     * @return When `admin_notification` is enabled within the `shields` property, determines how often email notifications are sent. Possible values: `immediately`, `daily`, `weekly`, `monthly`.
     * 
     */
    public Optional<Output<List<String>>> adminNotificationFrequencies() {
        return Optional.ofNullable(this.adminNotificationFrequencies);
    }

    /**
     * Whether breached password detection is active.
     * 
     */
    @Import(name="enabled", required=true)
    private Output<Boolean> enabled;

    /**
     * @return Whether breached password detection is active.
     * 
     */
    public Output<Boolean> enabled() {
        return this.enabled;
    }

    /**
     * The subscription level for breached password detection methods. Use &#34;enhanced&#34; to enable Credential Guard. Possible values: `standard`, `enhanced`.
     * 
     */
    @Import(name="method")
    private @Nullable Output<String> method;

    /**
     * @return The subscription level for breached password detection methods. Use &#34;enhanced&#34; to enable Credential Guard. Possible values: `standard`, `enhanced`.
     * 
     */
    public Optional<Output<String>> method() {
        return Optional.ofNullable(this.method);
    }

    /**
     * Configuration options that apply before every user registration attempt. Only available on public tenants.
     * 
     */
    @Import(name="preUserRegistration")
    private @Nullable Output<AttackProtectionBreachedPasswordDetectionPreUserRegistrationArgs> preUserRegistration;

    /**
     * @return Configuration options that apply before every user registration attempt. Only available on public tenants.
     * 
     */
    public Optional<Output<AttackProtectionBreachedPasswordDetectionPreUserRegistrationArgs>> preUserRegistration() {
        return Optional.ofNullable(this.preUserRegistration);
    }

    /**
     * Action to take when a breached password is detected. Options include: `block` (block compromised user accounts), `user_notification` (send an email to user when we detect that they are using compromised credentials) and `admin_notification` (send an email with a summary of the number of accounts logging in with compromised credentials).
     * 
     */
    @Import(name="shields")
    private @Nullable Output<List<String>> shields;

    /**
     * @return Action to take when a breached password is detected. Options include: `block` (block compromised user accounts), `user_notification` (send an email to user when we detect that they are using compromised credentials) and `admin_notification` (send an email with a summary of the number of accounts logging in with compromised credentials).
     * 
     */
    public Optional<Output<List<String>>> shields() {
        return Optional.ofNullable(this.shields);
    }

    private AttackProtectionBreachedPasswordDetectionArgs() {}

    private AttackProtectionBreachedPasswordDetectionArgs(AttackProtectionBreachedPasswordDetectionArgs $) {
        this.adminNotificationFrequencies = $.adminNotificationFrequencies;
        this.enabled = $.enabled;
        this.method = $.method;
        this.preUserRegistration = $.preUserRegistration;
        this.shields = $.shields;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AttackProtectionBreachedPasswordDetectionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AttackProtectionBreachedPasswordDetectionArgs $;

        public Builder() {
            $ = new AttackProtectionBreachedPasswordDetectionArgs();
        }

        public Builder(AttackProtectionBreachedPasswordDetectionArgs defaults) {
            $ = new AttackProtectionBreachedPasswordDetectionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param adminNotificationFrequencies When `admin_notification` is enabled within the `shields` property, determines how often email notifications are sent. Possible values: `immediately`, `daily`, `weekly`, `monthly`.
         * 
         * @return builder
         * 
         */
        public Builder adminNotificationFrequencies(@Nullable Output<List<String>> adminNotificationFrequencies) {
            $.adminNotificationFrequencies = adminNotificationFrequencies;
            return this;
        }

        /**
         * @param adminNotificationFrequencies When `admin_notification` is enabled within the `shields` property, determines how often email notifications are sent. Possible values: `immediately`, `daily`, `weekly`, `monthly`.
         * 
         * @return builder
         * 
         */
        public Builder adminNotificationFrequencies(List<String> adminNotificationFrequencies) {
            return adminNotificationFrequencies(Output.of(adminNotificationFrequencies));
        }

        /**
         * @param adminNotificationFrequencies When `admin_notification` is enabled within the `shields` property, determines how often email notifications are sent. Possible values: `immediately`, `daily`, `weekly`, `monthly`.
         * 
         * @return builder
         * 
         */
        public Builder adminNotificationFrequencies(String... adminNotificationFrequencies) {
            return adminNotificationFrequencies(List.of(adminNotificationFrequencies));
        }

        /**
         * @param enabled Whether breached password detection is active.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Whether breached password detection is active.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param method The subscription level for breached password detection methods. Use &#34;enhanced&#34; to enable Credential Guard. Possible values: `standard`, `enhanced`.
         * 
         * @return builder
         * 
         */
        public Builder method(@Nullable Output<String> method) {
            $.method = method;
            return this;
        }

        /**
         * @param method The subscription level for breached password detection methods. Use &#34;enhanced&#34; to enable Credential Guard. Possible values: `standard`, `enhanced`.
         * 
         * @return builder
         * 
         */
        public Builder method(String method) {
            return method(Output.of(method));
        }

        /**
         * @param preUserRegistration Configuration options that apply before every user registration attempt. Only available on public tenants.
         * 
         * @return builder
         * 
         */
        public Builder preUserRegistration(@Nullable Output<AttackProtectionBreachedPasswordDetectionPreUserRegistrationArgs> preUserRegistration) {
            $.preUserRegistration = preUserRegistration;
            return this;
        }

        /**
         * @param preUserRegistration Configuration options that apply before every user registration attempt. Only available on public tenants.
         * 
         * @return builder
         * 
         */
        public Builder preUserRegistration(AttackProtectionBreachedPasswordDetectionPreUserRegistrationArgs preUserRegistration) {
            return preUserRegistration(Output.of(preUserRegistration));
        }

        /**
         * @param shields Action to take when a breached password is detected. Options include: `block` (block compromised user accounts), `user_notification` (send an email to user when we detect that they are using compromised credentials) and `admin_notification` (send an email with a summary of the number of accounts logging in with compromised credentials).
         * 
         * @return builder
         * 
         */
        public Builder shields(@Nullable Output<List<String>> shields) {
            $.shields = shields;
            return this;
        }

        /**
         * @param shields Action to take when a breached password is detected. Options include: `block` (block compromised user accounts), `user_notification` (send an email to user when we detect that they are using compromised credentials) and `admin_notification` (send an email with a summary of the number of accounts logging in with compromised credentials).
         * 
         * @return builder
         * 
         */
        public Builder shields(List<String> shields) {
            return shields(Output.of(shields));
        }

        /**
         * @param shields Action to take when a breached password is detected. Options include: `block` (block compromised user accounts), `user_notification` (send an email to user when we detect that they are using compromised credentials) and `admin_notification` (send an email with a summary of the number of accounts logging in with compromised credentials).
         * 
         * @return builder
         * 
         */
        public Builder shields(String... shields) {
            return shields(List.of(shields));
        }

        public AttackProtectionBreachedPasswordDetectionArgs build() {
            if ($.enabled == null) {
                throw new MissingRequiredPropertyException("AttackProtectionBreachedPasswordDetectionArgs", "enabled");
            }
            return $;
        }
    }

}
