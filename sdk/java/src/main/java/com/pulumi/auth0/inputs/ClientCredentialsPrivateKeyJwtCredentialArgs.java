// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.auth0.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ClientCredentialsPrivateKeyJwtCredentialArgs extends com.pulumi.resources.ResourceArgs {

    public static final ClientCredentialsPrivateKeyJwtCredentialArgs Empty = new ClientCredentialsPrivateKeyJwtCredentialArgs();

    /**
     * Algorithm which will be used with the credential. Can be one of `RS256`, `RS384`, `PS256`. If not specified, `RS256` will be used.
     * 
     */
    @Import(name="algorithm")
    private @Nullable Output<String> algorithm;

    /**
     * @return Algorithm which will be used with the credential. Can be one of `RS256`, `RS384`, `PS256`. If not specified, `RS256` will be used.
     * 
     */
    public Optional<Output<String>> algorithm() {
        return Optional.ofNullable(this.algorithm);
    }

    /**
     * The ISO 8601 formatted date the credential was created.
     * 
     */
    @Import(name="createdAt")
    private @Nullable Output<String> createdAt;

    /**
     * @return The ISO 8601 formatted date the credential was created.
     * 
     */
    public Optional<Output<String>> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    /**
     * Credential type. Supported types: `public_key`.
     * 
     */
    @Import(name="credentialType", required=true)
    private Output<String> credentialType;

    /**
     * @return Credential type. Supported types: `public_key`.
     * 
     */
    public Output<String> credentialType() {
        return this.credentialType;
    }

    /**
     * The ISO 8601 formatted date representing the expiration of the credential. It is not possible to set this to never expire after it has been set. Recreate the certificate if needed.
     * 
     */
    @Import(name="expiresAt")
    private @Nullable Output<String> expiresAt;

    /**
     * @return The ISO 8601 formatted date representing the expiration of the credential. It is not possible to set this to never expire after it has been set. Recreate the certificate if needed.
     * 
     */
    public Optional<Output<String>> expiresAt() {
        return Optional.ofNullable(this.expiresAt);
    }

    /**
     * The ID of the client credential.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return The ID of the client credential.
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * The key identifier of the credential, generated on creation.
     * 
     */
    @Import(name="keyId")
    private @Nullable Output<String> keyId;

    /**
     * @return The key identifier of the credential, generated on creation.
     * 
     */
    public Optional<Output<String>> keyId() {
        return Optional.ofNullable(this.keyId);
    }

    /**
     * Friendly name for a credential.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Friendly name for a credential.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Parse expiry from x509 certificate. If true, attempts to parse the expiry date from the provided PEM. If also the `expires_at` is set the credential expiry will be set to the explicit `expires_at` value.
     * 
     */
    @Import(name="parseExpiryFromCert")
    private @Nullable Output<Boolean> parseExpiryFromCert;

    /**
     * @return Parse expiry from x509 certificate. If true, attempts to parse the expiry date from the provided PEM. If also the `expires_at` is set the credential expiry will be set to the explicit `expires_at` value.
     * 
     */
    public Optional<Output<Boolean>> parseExpiryFromCert() {
        return Optional.ofNullable(this.parseExpiryFromCert);
    }

    /**
     * PEM-formatted public key (SPKI and PKCS1) or X509 certificate. Must be JSON escaped.
     * 
     */
    @Import(name="pem", required=true)
    private Output<String> pem;

    /**
     * @return PEM-formatted public key (SPKI and PKCS1) or X509 certificate. Must be JSON escaped.
     * 
     */
    public Output<String> pem() {
        return this.pem;
    }

    /**
     * The ISO 8601 formatted date the credential was updated.
     * 
     */
    @Import(name="updatedAt")
    private @Nullable Output<String> updatedAt;

    /**
     * @return The ISO 8601 formatted date the credential was updated.
     * 
     */
    public Optional<Output<String>> updatedAt() {
        return Optional.ofNullable(this.updatedAt);
    }

    private ClientCredentialsPrivateKeyJwtCredentialArgs() {}

    private ClientCredentialsPrivateKeyJwtCredentialArgs(ClientCredentialsPrivateKeyJwtCredentialArgs $) {
        this.algorithm = $.algorithm;
        this.createdAt = $.createdAt;
        this.credentialType = $.credentialType;
        this.expiresAt = $.expiresAt;
        this.id = $.id;
        this.keyId = $.keyId;
        this.name = $.name;
        this.parseExpiryFromCert = $.parseExpiryFromCert;
        this.pem = $.pem;
        this.updatedAt = $.updatedAt;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClientCredentialsPrivateKeyJwtCredentialArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClientCredentialsPrivateKeyJwtCredentialArgs $;

        public Builder() {
            $ = new ClientCredentialsPrivateKeyJwtCredentialArgs();
        }

        public Builder(ClientCredentialsPrivateKeyJwtCredentialArgs defaults) {
            $ = new ClientCredentialsPrivateKeyJwtCredentialArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param algorithm Algorithm which will be used with the credential. Can be one of `RS256`, `RS384`, `PS256`. If not specified, `RS256` will be used.
         * 
         * @return builder
         * 
         */
        public Builder algorithm(@Nullable Output<String> algorithm) {
            $.algorithm = algorithm;
            return this;
        }

        /**
         * @param algorithm Algorithm which will be used with the credential. Can be one of `RS256`, `RS384`, `PS256`. If not specified, `RS256` will be used.
         * 
         * @return builder
         * 
         */
        public Builder algorithm(String algorithm) {
            return algorithm(Output.of(algorithm));
        }

        /**
         * @param createdAt The ISO 8601 formatted date the credential was created.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(@Nullable Output<String> createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        /**
         * @param createdAt The ISO 8601 formatted date the credential was created.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(String createdAt) {
            return createdAt(Output.of(createdAt));
        }

        /**
         * @param credentialType Credential type. Supported types: `public_key`.
         * 
         * @return builder
         * 
         */
        public Builder credentialType(Output<String> credentialType) {
            $.credentialType = credentialType;
            return this;
        }

        /**
         * @param credentialType Credential type. Supported types: `public_key`.
         * 
         * @return builder
         * 
         */
        public Builder credentialType(String credentialType) {
            return credentialType(Output.of(credentialType));
        }

        /**
         * @param expiresAt The ISO 8601 formatted date representing the expiration of the credential. It is not possible to set this to never expire after it has been set. Recreate the certificate if needed.
         * 
         * @return builder
         * 
         */
        public Builder expiresAt(@Nullable Output<String> expiresAt) {
            $.expiresAt = expiresAt;
            return this;
        }

        /**
         * @param expiresAt The ISO 8601 formatted date representing the expiration of the credential. It is not possible to set this to never expire after it has been set. Recreate the certificate if needed.
         * 
         * @return builder
         * 
         */
        public Builder expiresAt(String expiresAt) {
            return expiresAt(Output.of(expiresAt));
        }

        /**
         * @param id The ID of the client credential.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The ID of the client credential.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param keyId The key identifier of the credential, generated on creation.
         * 
         * @return builder
         * 
         */
        public Builder keyId(@Nullable Output<String> keyId) {
            $.keyId = keyId;
            return this;
        }

        /**
         * @param keyId The key identifier of the credential, generated on creation.
         * 
         * @return builder
         * 
         */
        public Builder keyId(String keyId) {
            return keyId(Output.of(keyId));
        }

        /**
         * @param name Friendly name for a credential.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Friendly name for a credential.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param parseExpiryFromCert Parse expiry from x509 certificate. If true, attempts to parse the expiry date from the provided PEM. If also the `expires_at` is set the credential expiry will be set to the explicit `expires_at` value.
         * 
         * @return builder
         * 
         */
        public Builder parseExpiryFromCert(@Nullable Output<Boolean> parseExpiryFromCert) {
            $.parseExpiryFromCert = parseExpiryFromCert;
            return this;
        }

        /**
         * @param parseExpiryFromCert Parse expiry from x509 certificate. If true, attempts to parse the expiry date from the provided PEM. If also the `expires_at` is set the credential expiry will be set to the explicit `expires_at` value.
         * 
         * @return builder
         * 
         */
        public Builder parseExpiryFromCert(Boolean parseExpiryFromCert) {
            return parseExpiryFromCert(Output.of(parseExpiryFromCert));
        }

        /**
         * @param pem PEM-formatted public key (SPKI and PKCS1) or X509 certificate. Must be JSON escaped.
         * 
         * @return builder
         * 
         */
        public Builder pem(Output<String> pem) {
            $.pem = pem;
            return this;
        }

        /**
         * @param pem PEM-formatted public key (SPKI and PKCS1) or X509 certificate. Must be JSON escaped.
         * 
         * @return builder
         * 
         */
        public Builder pem(String pem) {
            return pem(Output.of(pem));
        }

        /**
         * @param updatedAt The ISO 8601 formatted date the credential was updated.
         * 
         * @return builder
         * 
         */
        public Builder updatedAt(@Nullable Output<String> updatedAt) {
            $.updatedAt = updatedAt;
            return this;
        }

        /**
         * @param updatedAt The ISO 8601 formatted date the credential was updated.
         * 
         * @return builder
         * 
         */
        public Builder updatedAt(String updatedAt) {
            return updatedAt(Output.of(updatedAt));
        }

        public ClientCredentialsPrivateKeyJwtCredentialArgs build() {
            if ($.credentialType == null) {
                throw new MissingRequiredPropertyException("ClientCredentialsPrivateKeyJwtCredentialArgs", "credentialType");
            }
            if ($.pem == null) {
                throw new MissingRequiredPropertyException("ClientCredentialsPrivateKeyJwtCredentialArgs", "pem");
            }
            return $;
        }
    }

}
