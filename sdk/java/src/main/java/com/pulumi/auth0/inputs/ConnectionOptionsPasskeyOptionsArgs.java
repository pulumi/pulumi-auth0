// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.auth0.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConnectionOptionsPasskeyOptionsArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConnectionOptionsPasskeyOptionsArgs Empty = new ConnectionOptionsPasskeyOptionsArgs();

    /**
     * Controls the UI used to challenge the user for their passkey
     * 
     */
    @Import(name="challengeUi")
    private @Nullable Output<String> challengeUi;

    /**
     * @return Controls the UI used to challenge the user for their passkey
     * 
     */
    public Optional<Output<String>> challengeUi() {
        return Optional.ofNullable(this.challengeUi);
    }

    /**
     * Enables or disables enrollment prompt for local passkey when user authenticates using a cross-device passkey for the connection
     * 
     */
    @Import(name="localEnrollmentEnabled")
    private @Nullable Output<Boolean> localEnrollmentEnabled;

    /**
     * @return Enables or disables enrollment prompt for local passkey when user authenticates using a cross-device passkey for the connection
     * 
     */
    public Optional<Output<Boolean>> localEnrollmentEnabled() {
        return Optional.ofNullable(this.localEnrollmentEnabled);
    }

    /**
     * Enables or disables progressive enrollment of passkeys for the connection
     * 
     */
    @Import(name="progressiveEnrollmentEnabled")
    private @Nullable Output<Boolean> progressiveEnrollmentEnabled;

    /**
     * @return Enables or disables progressive enrollment of passkeys for the connection
     * 
     */
    public Optional<Output<Boolean>> progressiveEnrollmentEnabled() {
        return Optional.ofNullable(this.progressiveEnrollmentEnabled);
    }

    private ConnectionOptionsPasskeyOptionsArgs() {}

    private ConnectionOptionsPasskeyOptionsArgs(ConnectionOptionsPasskeyOptionsArgs $) {
        this.challengeUi = $.challengeUi;
        this.localEnrollmentEnabled = $.localEnrollmentEnabled;
        this.progressiveEnrollmentEnabled = $.progressiveEnrollmentEnabled;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectionOptionsPasskeyOptionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectionOptionsPasskeyOptionsArgs $;

        public Builder() {
            $ = new ConnectionOptionsPasskeyOptionsArgs();
        }

        public Builder(ConnectionOptionsPasskeyOptionsArgs defaults) {
            $ = new ConnectionOptionsPasskeyOptionsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param challengeUi Controls the UI used to challenge the user for their passkey
         * 
         * @return builder
         * 
         */
        public Builder challengeUi(@Nullable Output<String> challengeUi) {
            $.challengeUi = challengeUi;
            return this;
        }

        /**
         * @param challengeUi Controls the UI used to challenge the user for their passkey
         * 
         * @return builder
         * 
         */
        public Builder challengeUi(String challengeUi) {
            return challengeUi(Output.of(challengeUi));
        }

        /**
         * @param localEnrollmentEnabled Enables or disables enrollment prompt for local passkey when user authenticates using a cross-device passkey for the connection
         * 
         * @return builder
         * 
         */
        public Builder localEnrollmentEnabled(@Nullable Output<Boolean> localEnrollmentEnabled) {
            $.localEnrollmentEnabled = localEnrollmentEnabled;
            return this;
        }

        /**
         * @param localEnrollmentEnabled Enables or disables enrollment prompt for local passkey when user authenticates using a cross-device passkey for the connection
         * 
         * @return builder
         * 
         */
        public Builder localEnrollmentEnabled(Boolean localEnrollmentEnabled) {
            return localEnrollmentEnabled(Output.of(localEnrollmentEnabled));
        }

        /**
         * @param progressiveEnrollmentEnabled Enables or disables progressive enrollment of passkeys for the connection
         * 
         * @return builder
         * 
         */
        public Builder progressiveEnrollmentEnabled(@Nullable Output<Boolean> progressiveEnrollmentEnabled) {
            $.progressiveEnrollmentEnabled = progressiveEnrollmentEnabled;
            return this;
        }

        /**
         * @param progressiveEnrollmentEnabled Enables or disables progressive enrollment of passkeys for the connection
         * 
         * @return builder
         * 
         */
        public Builder progressiveEnrollmentEnabled(Boolean progressiveEnrollmentEnabled) {
            return progressiveEnrollmentEnabled(Output.of(progressiveEnrollmentEnabled));
        }

        public ConnectionOptionsPasskeyOptionsArgs build() {
            return $;
        }
    }

}
