// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.auth0.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetCustomDomainCertificate {
    /**
     * @return Name of the certificate authority that issued the certificate.
     * 
     */
    private String certificateAuthority;
    /**
     * @return Contains the error message if the provisioning process fails.
     * 
     */
    private String errorMsg;
    /**
     * @return Specifies the date by which the certificate should be renewed.
     * 
     */
    private String renewsBefore;
    /**
     * @return Indicates the current state of the certificate provisioning process.
     * 
     */
    private String status;

    private GetCustomDomainCertificate() {}
    /**
     * @return Name of the certificate authority that issued the certificate.
     * 
     */
    public String certificateAuthority() {
        return this.certificateAuthority;
    }
    /**
     * @return Contains the error message if the provisioning process fails.
     * 
     */
    public String errorMsg() {
        return this.errorMsg;
    }
    /**
     * @return Specifies the date by which the certificate should be renewed.
     * 
     */
    public String renewsBefore() {
        return this.renewsBefore;
    }
    /**
     * @return Indicates the current state of the certificate provisioning process.
     * 
     */
    public String status() {
        return this.status;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCustomDomainCertificate defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String certificateAuthority;
        private String errorMsg;
        private String renewsBefore;
        private String status;
        public Builder() {}
        public Builder(GetCustomDomainCertificate defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.certificateAuthority = defaults.certificateAuthority;
    	      this.errorMsg = defaults.errorMsg;
    	      this.renewsBefore = defaults.renewsBefore;
    	      this.status = defaults.status;
        }

        @CustomType.Setter
        public Builder certificateAuthority(String certificateAuthority) {
            if (certificateAuthority == null) {
              throw new MissingRequiredPropertyException("GetCustomDomainCertificate", "certificateAuthority");
            }
            this.certificateAuthority = certificateAuthority;
            return this;
        }
        @CustomType.Setter
        public Builder errorMsg(String errorMsg) {
            if (errorMsg == null) {
              throw new MissingRequiredPropertyException("GetCustomDomainCertificate", "errorMsg");
            }
            this.errorMsg = errorMsg;
            return this;
        }
        @CustomType.Setter
        public Builder renewsBefore(String renewsBefore) {
            if (renewsBefore == null) {
              throw new MissingRequiredPropertyException("GetCustomDomainCertificate", "renewsBefore");
            }
            this.renewsBefore = renewsBefore;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetCustomDomainCertificate", "status");
            }
            this.status = status;
            return this;
        }
        public GetCustomDomainCertificate build() {
            final var _resultValue = new GetCustomDomainCertificate();
            _resultValue.certificateAuthority = certificateAuthority;
            _resultValue.errorMsg = errorMsg;
            _resultValue.renewsBefore = renewsBefore;
            _resultValue.status = status;
            return _resultValue;
        }
    }
}
