// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.auth0.inputs;

import com.pulumi.auth0.inputs.BrandingThemeFontsBodyTextArgs;
import com.pulumi.auth0.inputs.BrandingThemeFontsButtonsTextArgs;
import com.pulumi.auth0.inputs.BrandingThemeFontsInputLabelsArgs;
import com.pulumi.auth0.inputs.BrandingThemeFontsLinksArgs;
import com.pulumi.auth0.inputs.BrandingThemeFontsSubtitleArgs;
import com.pulumi.auth0.inputs.BrandingThemeFontsTitleArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BrandingThemeFontsArgs extends com.pulumi.resources.ResourceArgs {

    public static final BrandingThemeFontsArgs Empty = new BrandingThemeFontsArgs();

    /**
     * Body text.
     * 
     */
    @Import(name="bodyText", required=true)
    private Output<BrandingThemeFontsBodyTextArgs> bodyText;

    /**
     * @return Body text.
     * 
     */
    public Output<BrandingThemeFontsBodyTextArgs> bodyText() {
        return this.bodyText;
    }

    /**
     * Buttons text.
     * 
     */
    @Import(name="buttonsText", required=true)
    private Output<BrandingThemeFontsButtonsTextArgs> buttonsText;

    /**
     * @return Buttons text.
     * 
     */
    public Output<BrandingThemeFontsButtonsTextArgs> buttonsText() {
        return this.buttonsText;
    }

    /**
     * Font URL. Defaults to an empty string.
     * 
     */
    @Import(name="fontUrl")
    private @Nullable Output<String> fontUrl;

    /**
     * @return Font URL. Defaults to an empty string.
     * 
     */
    public Optional<Output<String>> fontUrl() {
        return Optional.ofNullable(this.fontUrl);
    }

    /**
     * Input labels.
     * 
     */
    @Import(name="inputLabels", required=true)
    private Output<BrandingThemeFontsInputLabelsArgs> inputLabels;

    /**
     * @return Input labels.
     * 
     */
    public Output<BrandingThemeFontsInputLabelsArgs> inputLabels() {
        return this.inputLabels;
    }

    /**
     * Links.
     * 
     */
    @Import(name="links", required=true)
    private Output<BrandingThemeFontsLinksArgs> links;

    /**
     * @return Links.
     * 
     */
    public Output<BrandingThemeFontsLinksArgs> links() {
        return this.links;
    }

    /**
     * Links style. Defaults to `normal`.
     * 
     */
    @Import(name="linksStyle")
    private @Nullable Output<String> linksStyle;

    /**
     * @return Links style. Defaults to `normal`.
     * 
     */
    public Optional<Output<String>> linksStyle() {
        return Optional.ofNullable(this.linksStyle);
    }

    /**
     * Reference text size. Value needs to be between `12` and `24`. Defaults to `16.0`.
     * 
     */
    @Import(name="referenceTextSize")
    private @Nullable Output<Double> referenceTextSize;

    /**
     * @return Reference text size. Value needs to be between `12` and `24`. Defaults to `16.0`.
     * 
     */
    public Optional<Output<Double>> referenceTextSize() {
        return Optional.ofNullable(this.referenceTextSize);
    }

    /**
     * Subtitle.
     * 
     */
    @Import(name="subtitle", required=true)
    private Output<BrandingThemeFontsSubtitleArgs> subtitle;

    /**
     * @return Subtitle.
     * 
     */
    public Output<BrandingThemeFontsSubtitleArgs> subtitle() {
        return this.subtitle;
    }

    /**
     * Title.
     * 
     */
    @Import(name="title", required=true)
    private Output<BrandingThemeFontsTitleArgs> title;

    /**
     * @return Title.
     * 
     */
    public Output<BrandingThemeFontsTitleArgs> title() {
        return this.title;
    }

    private BrandingThemeFontsArgs() {}

    private BrandingThemeFontsArgs(BrandingThemeFontsArgs $) {
        this.bodyText = $.bodyText;
        this.buttonsText = $.buttonsText;
        this.fontUrl = $.fontUrl;
        this.inputLabels = $.inputLabels;
        this.links = $.links;
        this.linksStyle = $.linksStyle;
        this.referenceTextSize = $.referenceTextSize;
        this.subtitle = $.subtitle;
        this.title = $.title;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BrandingThemeFontsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BrandingThemeFontsArgs $;

        public Builder() {
            $ = new BrandingThemeFontsArgs();
        }

        public Builder(BrandingThemeFontsArgs defaults) {
            $ = new BrandingThemeFontsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bodyText Body text.
         * 
         * @return builder
         * 
         */
        public Builder bodyText(Output<BrandingThemeFontsBodyTextArgs> bodyText) {
            $.bodyText = bodyText;
            return this;
        }

        /**
         * @param bodyText Body text.
         * 
         * @return builder
         * 
         */
        public Builder bodyText(BrandingThemeFontsBodyTextArgs bodyText) {
            return bodyText(Output.of(bodyText));
        }

        /**
         * @param buttonsText Buttons text.
         * 
         * @return builder
         * 
         */
        public Builder buttonsText(Output<BrandingThemeFontsButtonsTextArgs> buttonsText) {
            $.buttonsText = buttonsText;
            return this;
        }

        /**
         * @param buttonsText Buttons text.
         * 
         * @return builder
         * 
         */
        public Builder buttonsText(BrandingThemeFontsButtonsTextArgs buttonsText) {
            return buttonsText(Output.of(buttonsText));
        }

        /**
         * @param fontUrl Font URL. Defaults to an empty string.
         * 
         * @return builder
         * 
         */
        public Builder fontUrl(@Nullable Output<String> fontUrl) {
            $.fontUrl = fontUrl;
            return this;
        }

        /**
         * @param fontUrl Font URL. Defaults to an empty string.
         * 
         * @return builder
         * 
         */
        public Builder fontUrl(String fontUrl) {
            return fontUrl(Output.of(fontUrl));
        }

        /**
         * @param inputLabels Input labels.
         * 
         * @return builder
         * 
         */
        public Builder inputLabels(Output<BrandingThemeFontsInputLabelsArgs> inputLabels) {
            $.inputLabels = inputLabels;
            return this;
        }

        /**
         * @param inputLabels Input labels.
         * 
         * @return builder
         * 
         */
        public Builder inputLabels(BrandingThemeFontsInputLabelsArgs inputLabels) {
            return inputLabels(Output.of(inputLabels));
        }

        /**
         * @param links Links.
         * 
         * @return builder
         * 
         */
        public Builder links(Output<BrandingThemeFontsLinksArgs> links) {
            $.links = links;
            return this;
        }

        /**
         * @param links Links.
         * 
         * @return builder
         * 
         */
        public Builder links(BrandingThemeFontsLinksArgs links) {
            return links(Output.of(links));
        }

        /**
         * @param linksStyle Links style. Defaults to `normal`.
         * 
         * @return builder
         * 
         */
        public Builder linksStyle(@Nullable Output<String> linksStyle) {
            $.linksStyle = linksStyle;
            return this;
        }

        /**
         * @param linksStyle Links style. Defaults to `normal`.
         * 
         * @return builder
         * 
         */
        public Builder linksStyle(String linksStyle) {
            return linksStyle(Output.of(linksStyle));
        }

        /**
         * @param referenceTextSize Reference text size. Value needs to be between `12` and `24`. Defaults to `16.0`.
         * 
         * @return builder
         * 
         */
        public Builder referenceTextSize(@Nullable Output<Double> referenceTextSize) {
            $.referenceTextSize = referenceTextSize;
            return this;
        }

        /**
         * @param referenceTextSize Reference text size. Value needs to be between `12` and `24`. Defaults to `16.0`.
         * 
         * @return builder
         * 
         */
        public Builder referenceTextSize(Double referenceTextSize) {
            return referenceTextSize(Output.of(referenceTextSize));
        }

        /**
         * @param subtitle Subtitle.
         * 
         * @return builder
         * 
         */
        public Builder subtitle(Output<BrandingThemeFontsSubtitleArgs> subtitle) {
            $.subtitle = subtitle;
            return this;
        }

        /**
         * @param subtitle Subtitle.
         * 
         * @return builder
         * 
         */
        public Builder subtitle(BrandingThemeFontsSubtitleArgs subtitle) {
            return subtitle(Output.of(subtitle));
        }

        /**
         * @param title Title.
         * 
         * @return builder
         * 
         */
        public Builder title(Output<BrandingThemeFontsTitleArgs> title) {
            $.title = title;
            return this;
        }

        /**
         * @param title Title.
         * 
         * @return builder
         * 
         */
        public Builder title(BrandingThemeFontsTitleArgs title) {
            return title(Output.of(title));
        }

        public BrandingThemeFontsArgs build() {
            if ($.bodyText == null) {
                throw new MissingRequiredPropertyException("BrandingThemeFontsArgs", "bodyText");
            }
            if ($.buttonsText == null) {
                throw new MissingRequiredPropertyException("BrandingThemeFontsArgs", "buttonsText");
            }
            if ($.inputLabels == null) {
                throw new MissingRequiredPropertyException("BrandingThemeFontsArgs", "inputLabels");
            }
            if ($.links == null) {
                throw new MissingRequiredPropertyException("BrandingThemeFontsArgs", "links");
            }
            if ($.subtitle == null) {
                throw new MissingRequiredPropertyException("BrandingThemeFontsArgs", "subtitle");
            }
            if ($.title == null) {
                throw new MissingRequiredPropertyException("BrandingThemeFontsArgs", "title");
            }
            return $;
        }
    }

}
