// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.auth0;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class ConnectionClientsArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConnectionClientsArgs Empty = new ConnectionClientsArgs();

    /**
     * ID of the connection on which to enable the client.
     * 
     */
    @Import(name="connectionId", required=true)
    private Output<String> connectionId;

    /**
     * @return ID of the connection on which to enable the client.
     * 
     */
    public Output<String> connectionId() {
        return this.connectionId;
    }

    /**
     * IDs of the clients for which the connection is enabled.
     * 
     */
    @Import(name="enabledClients", required=true)
    private Output<List<String>> enabledClients;

    /**
     * @return IDs of the clients for which the connection is enabled.
     * 
     */
    public Output<List<String>> enabledClients() {
        return this.enabledClients;
    }

    private ConnectionClientsArgs() {}

    private ConnectionClientsArgs(ConnectionClientsArgs $) {
        this.connectionId = $.connectionId;
        this.enabledClients = $.enabledClients;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectionClientsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectionClientsArgs $;

        public Builder() {
            $ = new ConnectionClientsArgs();
        }

        public Builder(ConnectionClientsArgs defaults) {
            $ = new ConnectionClientsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param connectionId ID of the connection on which to enable the client.
         * 
         * @return builder
         * 
         */
        public Builder connectionId(Output<String> connectionId) {
            $.connectionId = connectionId;
            return this;
        }

        /**
         * @param connectionId ID of the connection on which to enable the client.
         * 
         * @return builder
         * 
         */
        public Builder connectionId(String connectionId) {
            return connectionId(Output.of(connectionId));
        }

        /**
         * @param enabledClients IDs of the clients for which the connection is enabled.
         * 
         * @return builder
         * 
         */
        public Builder enabledClients(Output<List<String>> enabledClients) {
            $.enabledClients = enabledClients;
            return this;
        }

        /**
         * @param enabledClients IDs of the clients for which the connection is enabled.
         * 
         * @return builder
         * 
         */
        public Builder enabledClients(List<String> enabledClients) {
            return enabledClients(Output.of(enabledClients));
        }

        /**
         * @param enabledClients IDs of the clients for which the connection is enabled.
         * 
         * @return builder
         * 
         */
        public Builder enabledClients(String... enabledClients) {
            return enabledClients(List.of(enabledClients));
        }

        public ConnectionClientsArgs build() {
            if ($.connectionId == null) {
                throw new MissingRequiredPropertyException("ConnectionClientsArgs", "connectionId");
            }
            if ($.enabledClients == null) {
                throw new MissingRequiredPropertyException("ConnectionClientsArgs", "enabledClients");
            }
            return $;
        }
    }

}
