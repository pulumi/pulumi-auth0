// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.auth0;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class UserPermissionArgs extends com.pulumi.resources.ResourceArgs {

    public static final UserPermissionArgs Empty = new UserPermissionArgs();

    /**
     * Name of the permission.
     * 
     */
    @Import(name="permission", required=true)
    private Output<String> permission;

    /**
     * @return Name of the permission.
     * 
     */
    public Output<String> permission() {
        return this.permission;
    }

    /**
     * Identifier of the resource server that the permission is associated with.
     * 
     */
    @Import(name="resourceServerIdentifier", required=true)
    private Output<String> resourceServerIdentifier;

    /**
     * @return Identifier of the resource server that the permission is associated with.
     * 
     */
    public Output<String> resourceServerIdentifier() {
        return this.resourceServerIdentifier;
    }

    /**
     * ID of the user to associate the permission to.
     * 
     */
    @Import(name="userId", required=true)
    private Output<String> userId;

    /**
     * @return ID of the user to associate the permission to.
     * 
     */
    public Output<String> userId() {
        return this.userId;
    }

    private UserPermissionArgs() {}

    private UserPermissionArgs(UserPermissionArgs $) {
        this.permission = $.permission;
        this.resourceServerIdentifier = $.resourceServerIdentifier;
        this.userId = $.userId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UserPermissionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UserPermissionArgs $;

        public Builder() {
            $ = new UserPermissionArgs();
        }

        public Builder(UserPermissionArgs defaults) {
            $ = new UserPermissionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param permission Name of the permission.
         * 
         * @return builder
         * 
         */
        public Builder permission(Output<String> permission) {
            $.permission = permission;
            return this;
        }

        /**
         * @param permission Name of the permission.
         * 
         * @return builder
         * 
         */
        public Builder permission(String permission) {
            return permission(Output.of(permission));
        }

        /**
         * @param resourceServerIdentifier Identifier of the resource server that the permission is associated with.
         * 
         * @return builder
         * 
         */
        public Builder resourceServerIdentifier(Output<String> resourceServerIdentifier) {
            $.resourceServerIdentifier = resourceServerIdentifier;
            return this;
        }

        /**
         * @param resourceServerIdentifier Identifier of the resource server that the permission is associated with.
         * 
         * @return builder
         * 
         */
        public Builder resourceServerIdentifier(String resourceServerIdentifier) {
            return resourceServerIdentifier(Output.of(resourceServerIdentifier));
        }

        /**
         * @param userId ID of the user to associate the permission to.
         * 
         * @return builder
         * 
         */
        public Builder userId(Output<String> userId) {
            $.userId = userId;
            return this;
        }

        /**
         * @param userId ID of the user to associate the permission to.
         * 
         * @return builder
         * 
         */
        public Builder userId(String userId) {
            return userId(Output.of(userId));
        }

        public UserPermissionArgs build() {
            if ($.permission == null) {
                throw new MissingRequiredPropertyException("UserPermissionArgs", "permission");
            }
            if ($.resourceServerIdentifier == null) {
                throw new MissingRequiredPropertyException("UserPermissionArgs", "resourceServerIdentifier");
            }
            if ($.userId == null) {
                throw new MissingRequiredPropertyException("UserPermissionArgs", "userId");
            }
            return $;
        }
    }

}
