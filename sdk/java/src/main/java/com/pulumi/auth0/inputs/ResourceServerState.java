// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.auth0.inputs;

import com.pulumi.auth0.inputs.ResourceServerAuthorizationDetailArgs;
import com.pulumi.auth0.inputs.ResourceServerProofOfPossessionArgs;
import com.pulumi.auth0.inputs.ResourceServerSubjectTypeAuthorizationArgs;
import com.pulumi.auth0.inputs.ResourceServerTokenEncryptionArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ResourceServerState extends com.pulumi.resources.ResourceArgs {

    public static final ResourceServerState Empty = new ResourceServerState();

    /**
     * Indicates whether refresh tokens can be issued for this resource server.
     * 
     */
    @Import(name="allowOfflineAccess")
    private @Nullable Output<Boolean> allowOfflineAccess;

    /**
     * @return Indicates whether refresh tokens can be issued for this resource server.
     * 
     */
    public Optional<Output<Boolean>> allowOfflineAccess() {
        return Optional.ofNullable(this.allowOfflineAccess);
    }

    /**
     * Authorization details for this resource server.
     * 
     */
    @Import(name="authorizationDetails")
    private @Nullable Output<List<ResourceServerAuthorizationDetailArgs>> authorizationDetails;

    /**
     * @return Authorization details for this resource server.
     * 
     */
    public Optional<Output<List<ResourceServerAuthorizationDetailArgs>>> authorizationDetails() {
        return Optional.ofNullable(this.authorizationDetails);
    }

    /**
     * The ID of the client associated with this resource server. If a client has been created and linked to this resource server, this field will be populated with that client&#39;s ID.
     * 
     */
    @Import(name="clientId")
    private @Nullable Output<String> clientId;

    /**
     * @return The ID of the client associated with this resource server. If a client has been created and linked to this resource server, this field will be populated with that client&#39;s ID.
     * 
     */
    public Optional<Output<String>> clientId() {
        return Optional.ofNullable(this.clientId);
    }

    /**
     * Consent policy for this resource server. Options include `transactional-authorization-with-mfa`, or `null` to disable.
     * 
     */
    @Import(name="consentPolicy")
    private @Nullable Output<String> consentPolicy;

    /**
     * @return Consent policy for this resource server. Options include `transactional-authorization-with-mfa`, or `null` to disable.
     * 
     */
    public Optional<Output<String>> consentPolicy() {
        return Optional.ofNullable(this.consentPolicy);
    }

    /**
     * If this setting is enabled, RBAC authorization policies will be enforced for this API. Role and permission assignments will be evaluated during the login transaction.
     * 
     */
    @Import(name="enforcePolicies")
    private @Nullable Output<Boolean> enforcePolicies;

    /**
     * @return If this setting is enabled, RBAC authorization policies will be enforced for this API. Role and permission assignments will be evaluated during the login transaction.
     * 
     */
    public Optional<Output<Boolean>> enforcePolicies() {
        return Optional.ofNullable(this.enforcePolicies);
    }

    /**
     * Unique identifier for the resource server. Used as the audience parameter for authorization calls. Cannot be changed once set.
     * 
     */
    @Import(name="identifier")
    private @Nullable Output<String> identifier;

    /**
     * @return Unique identifier for the resource server. Used as the audience parameter for authorization calls. Cannot be changed once set.
     * 
     */
    public Optional<Output<String>> identifier() {
        return Optional.ofNullable(this.identifier);
    }

    /**
     * Friendly name for the resource server. Cannot include `&lt;` or `&gt;` characters.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Friendly name for the resource server. Cannot include `&lt;` or `&gt;` characters.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Configuration settings for proof-of-possession for this resource server.
     * 
     */
    @Import(name="proofOfPossession")
    private @Nullable Output<ResourceServerProofOfPossessionArgs> proofOfPossession;

    /**
     * @return Configuration settings for proof-of-possession for this resource server.
     * 
     */
    public Optional<Output<ResourceServerProofOfPossessionArgs>> proofOfPossession() {
        return Optional.ofNullable(this.proofOfPossession);
    }

    /**
     * Algorithm used to sign JWTs. Options include `HS256`, `RS256`, and `PS256`.
     * 
     */
    @Import(name="signingAlg")
    private @Nullable Output<String> signingAlg;

    /**
     * @return Algorithm used to sign JWTs. Options include `HS256`, `RS256`, and `PS256`.
     * 
     */
    public Optional<Output<String>> signingAlg() {
        return Optional.ofNullable(this.signingAlg);
    }

    /**
     * Secret used to sign tokens when using symmetric algorithms (HS256).
     * 
     */
    @Import(name="signingSecret")
    private @Nullable Output<String> signingSecret;

    /**
     * @return Secret used to sign tokens when using symmetric algorithms (HS256).
     * 
     */
    public Optional<Output<String>> signingSecret() {
        return Optional.ofNullable(this.signingSecret);
    }

    /**
     * Indicates whether to skip user consent for applications flagged as first party.
     * 
     */
    @Import(name="skipConsentForVerifiableFirstPartyClients")
    private @Nullable Output<Boolean> skipConsentForVerifiableFirstPartyClients;

    /**
     * @return Indicates whether to skip user consent for applications flagged as first party.
     * 
     */
    public Optional<Output<Boolean>> skipConsentForVerifiableFirstPartyClients() {
        return Optional.ofNullable(this.skipConsentForVerifiableFirstPartyClients);
    }

    /**
     * Authorization policies for user and client flows.
     * 
     */
    @Import(name="subjectTypeAuthorization")
    private @Nullable Output<ResourceServerSubjectTypeAuthorizationArgs> subjectTypeAuthorization;

    /**
     * @return Authorization policies for user and client flows.
     * 
     */
    public Optional<Output<ResourceServerSubjectTypeAuthorizationArgs>> subjectTypeAuthorization() {
        return Optional.ofNullable(this.subjectTypeAuthorization);
    }

    /**
     * Dialect of access tokens that should be issued for this resource server. Options include `access_token`, `rfc9068_profile`, `access_token_authz`, and `rfc9068_profile_authz`. `access_token` is a JWT containing standard Auth0 claims. `rfc9068_profile` is a JWT conforming to the IETF JWT Access Token Profile. `access_token_authz` is a JWT containing standard Auth0 claims, including RBAC permissions claims. `rfc9068_profile_authz` is a JWT conforming to the IETF JWT Access Token Profile, including RBAC permissions claims. RBAC permissions claims are available if RBAC (`enforce_policies`) is enabled for this API. For more details, refer to [Access Token Profiles](https://auth0.com/docs/secure/tokens/access-tokens/access-token-profiles).
     * 
     */
    @Import(name="tokenDialect")
    private @Nullable Output<String> tokenDialect;

    /**
     * @return Dialect of access tokens that should be issued for this resource server. Options include `access_token`, `rfc9068_profile`, `access_token_authz`, and `rfc9068_profile_authz`. `access_token` is a JWT containing standard Auth0 claims. `rfc9068_profile` is a JWT conforming to the IETF JWT Access Token Profile. `access_token_authz` is a JWT containing standard Auth0 claims, including RBAC permissions claims. `rfc9068_profile_authz` is a JWT conforming to the IETF JWT Access Token Profile, including RBAC permissions claims. RBAC permissions claims are available if RBAC (`enforce_policies`) is enabled for this API. For more details, refer to [Access Token Profiles](https://auth0.com/docs/secure/tokens/access-tokens/access-token-profiles).
     * 
     */
    public Optional<Output<String>> tokenDialect() {
        return Optional.ofNullable(this.tokenDialect);
    }

    /**
     * Configuration for JSON Web Encryption(JWE) of tokens for this resource server.
     * 
     */
    @Import(name="tokenEncryption")
    private @Nullable Output<ResourceServerTokenEncryptionArgs> tokenEncryption;

    /**
     * @return Configuration for JSON Web Encryption(JWE) of tokens for this resource server.
     * 
     */
    public Optional<Output<ResourceServerTokenEncryptionArgs>> tokenEncryption() {
        return Optional.ofNullable(this.tokenEncryption);
    }

    /**
     * Number of seconds during which access tokens issued for this resource server from the token endpoint remain valid.
     * 
     */
    @Import(name="tokenLifetime")
    private @Nullable Output<Integer> tokenLifetime;

    /**
     * @return Number of seconds during which access tokens issued for this resource server from the token endpoint remain valid.
     * 
     */
    public Optional<Output<Integer>> tokenLifetime() {
        return Optional.ofNullable(this.tokenLifetime);
    }

    /**
     * Number of seconds during which access tokens issued for this resource server via implicit or hybrid flows remain valid. Cannot be greater than the `token_lifetime` value.
     * 
     */
    @Import(name="tokenLifetimeForWeb")
    private @Nullable Output<Integer> tokenLifetimeForWeb;

    /**
     * @return Number of seconds during which access tokens issued for this resource server via implicit or hybrid flows remain valid. Cannot be greater than the `token_lifetime` value.
     * 
     */
    public Optional<Output<Integer>> tokenLifetimeForWeb() {
        return Optional.ofNullable(this.tokenLifetimeForWeb);
    }

    /**
     * URL from which to retrieve JWKs for this resource server. Used for verifying the JWT sent to Auth0 for token introspection.
     * 
     */
    @Import(name="verificationLocation")
    private @Nullable Output<String> verificationLocation;

    /**
     * @return URL from which to retrieve JWKs for this resource server. Used for verifying the JWT sent to Auth0 for token introspection.
     * 
     */
    public Optional<Output<String>> verificationLocation() {
        return Optional.ofNullable(this.verificationLocation);
    }

    private ResourceServerState() {}

    private ResourceServerState(ResourceServerState $) {
        this.allowOfflineAccess = $.allowOfflineAccess;
        this.authorizationDetails = $.authorizationDetails;
        this.clientId = $.clientId;
        this.consentPolicy = $.consentPolicy;
        this.enforcePolicies = $.enforcePolicies;
        this.identifier = $.identifier;
        this.name = $.name;
        this.proofOfPossession = $.proofOfPossession;
        this.signingAlg = $.signingAlg;
        this.signingSecret = $.signingSecret;
        this.skipConsentForVerifiableFirstPartyClients = $.skipConsentForVerifiableFirstPartyClients;
        this.subjectTypeAuthorization = $.subjectTypeAuthorization;
        this.tokenDialect = $.tokenDialect;
        this.tokenEncryption = $.tokenEncryption;
        this.tokenLifetime = $.tokenLifetime;
        this.tokenLifetimeForWeb = $.tokenLifetimeForWeb;
        this.verificationLocation = $.verificationLocation;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ResourceServerState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ResourceServerState $;

        public Builder() {
            $ = new ResourceServerState();
        }

        public Builder(ResourceServerState defaults) {
            $ = new ResourceServerState(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowOfflineAccess Indicates whether refresh tokens can be issued for this resource server.
         * 
         * @return builder
         * 
         */
        public Builder allowOfflineAccess(@Nullable Output<Boolean> allowOfflineAccess) {
            $.allowOfflineAccess = allowOfflineAccess;
            return this;
        }

        /**
         * @param allowOfflineAccess Indicates whether refresh tokens can be issued for this resource server.
         * 
         * @return builder
         * 
         */
        public Builder allowOfflineAccess(Boolean allowOfflineAccess) {
            return allowOfflineAccess(Output.of(allowOfflineAccess));
        }

        /**
         * @param authorizationDetails Authorization details for this resource server.
         * 
         * @return builder
         * 
         */
        public Builder authorizationDetails(@Nullable Output<List<ResourceServerAuthorizationDetailArgs>> authorizationDetails) {
            $.authorizationDetails = authorizationDetails;
            return this;
        }

        /**
         * @param authorizationDetails Authorization details for this resource server.
         * 
         * @return builder
         * 
         */
        public Builder authorizationDetails(List<ResourceServerAuthorizationDetailArgs> authorizationDetails) {
            return authorizationDetails(Output.of(authorizationDetails));
        }

        /**
         * @param authorizationDetails Authorization details for this resource server.
         * 
         * @return builder
         * 
         */
        public Builder authorizationDetails(ResourceServerAuthorizationDetailArgs... authorizationDetails) {
            return authorizationDetails(List.of(authorizationDetails));
        }

        /**
         * @param clientId The ID of the client associated with this resource server. If a client has been created and linked to this resource server, this field will be populated with that client&#39;s ID.
         * 
         * @return builder
         * 
         */
        public Builder clientId(@Nullable Output<String> clientId) {
            $.clientId = clientId;
            return this;
        }

        /**
         * @param clientId The ID of the client associated with this resource server. If a client has been created and linked to this resource server, this field will be populated with that client&#39;s ID.
         * 
         * @return builder
         * 
         */
        public Builder clientId(String clientId) {
            return clientId(Output.of(clientId));
        }

        /**
         * @param consentPolicy Consent policy for this resource server. Options include `transactional-authorization-with-mfa`, or `null` to disable.
         * 
         * @return builder
         * 
         */
        public Builder consentPolicy(@Nullable Output<String> consentPolicy) {
            $.consentPolicy = consentPolicy;
            return this;
        }

        /**
         * @param consentPolicy Consent policy for this resource server. Options include `transactional-authorization-with-mfa`, or `null` to disable.
         * 
         * @return builder
         * 
         */
        public Builder consentPolicy(String consentPolicy) {
            return consentPolicy(Output.of(consentPolicy));
        }

        /**
         * @param enforcePolicies If this setting is enabled, RBAC authorization policies will be enforced for this API. Role and permission assignments will be evaluated during the login transaction.
         * 
         * @return builder
         * 
         */
        public Builder enforcePolicies(@Nullable Output<Boolean> enforcePolicies) {
            $.enforcePolicies = enforcePolicies;
            return this;
        }

        /**
         * @param enforcePolicies If this setting is enabled, RBAC authorization policies will be enforced for this API. Role and permission assignments will be evaluated during the login transaction.
         * 
         * @return builder
         * 
         */
        public Builder enforcePolicies(Boolean enforcePolicies) {
            return enforcePolicies(Output.of(enforcePolicies));
        }

        /**
         * @param identifier Unique identifier for the resource server. Used as the audience parameter for authorization calls. Cannot be changed once set.
         * 
         * @return builder
         * 
         */
        public Builder identifier(@Nullable Output<String> identifier) {
            $.identifier = identifier;
            return this;
        }

        /**
         * @param identifier Unique identifier for the resource server. Used as the audience parameter for authorization calls. Cannot be changed once set.
         * 
         * @return builder
         * 
         */
        public Builder identifier(String identifier) {
            return identifier(Output.of(identifier));
        }

        /**
         * @param name Friendly name for the resource server. Cannot include `&lt;` or `&gt;` characters.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Friendly name for the resource server. Cannot include `&lt;` or `&gt;` characters.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param proofOfPossession Configuration settings for proof-of-possession for this resource server.
         * 
         * @return builder
         * 
         */
        public Builder proofOfPossession(@Nullable Output<ResourceServerProofOfPossessionArgs> proofOfPossession) {
            $.proofOfPossession = proofOfPossession;
            return this;
        }

        /**
         * @param proofOfPossession Configuration settings for proof-of-possession for this resource server.
         * 
         * @return builder
         * 
         */
        public Builder proofOfPossession(ResourceServerProofOfPossessionArgs proofOfPossession) {
            return proofOfPossession(Output.of(proofOfPossession));
        }

        /**
         * @param signingAlg Algorithm used to sign JWTs. Options include `HS256`, `RS256`, and `PS256`.
         * 
         * @return builder
         * 
         */
        public Builder signingAlg(@Nullable Output<String> signingAlg) {
            $.signingAlg = signingAlg;
            return this;
        }

        /**
         * @param signingAlg Algorithm used to sign JWTs. Options include `HS256`, `RS256`, and `PS256`.
         * 
         * @return builder
         * 
         */
        public Builder signingAlg(String signingAlg) {
            return signingAlg(Output.of(signingAlg));
        }

        /**
         * @param signingSecret Secret used to sign tokens when using symmetric algorithms (HS256).
         * 
         * @return builder
         * 
         */
        public Builder signingSecret(@Nullable Output<String> signingSecret) {
            $.signingSecret = signingSecret;
            return this;
        }

        /**
         * @param signingSecret Secret used to sign tokens when using symmetric algorithms (HS256).
         * 
         * @return builder
         * 
         */
        public Builder signingSecret(String signingSecret) {
            return signingSecret(Output.of(signingSecret));
        }

        /**
         * @param skipConsentForVerifiableFirstPartyClients Indicates whether to skip user consent for applications flagged as first party.
         * 
         * @return builder
         * 
         */
        public Builder skipConsentForVerifiableFirstPartyClients(@Nullable Output<Boolean> skipConsentForVerifiableFirstPartyClients) {
            $.skipConsentForVerifiableFirstPartyClients = skipConsentForVerifiableFirstPartyClients;
            return this;
        }

        /**
         * @param skipConsentForVerifiableFirstPartyClients Indicates whether to skip user consent for applications flagged as first party.
         * 
         * @return builder
         * 
         */
        public Builder skipConsentForVerifiableFirstPartyClients(Boolean skipConsentForVerifiableFirstPartyClients) {
            return skipConsentForVerifiableFirstPartyClients(Output.of(skipConsentForVerifiableFirstPartyClients));
        }

        /**
         * @param subjectTypeAuthorization Authorization policies for user and client flows.
         * 
         * @return builder
         * 
         */
        public Builder subjectTypeAuthorization(@Nullable Output<ResourceServerSubjectTypeAuthorizationArgs> subjectTypeAuthorization) {
            $.subjectTypeAuthorization = subjectTypeAuthorization;
            return this;
        }

        /**
         * @param subjectTypeAuthorization Authorization policies for user and client flows.
         * 
         * @return builder
         * 
         */
        public Builder subjectTypeAuthorization(ResourceServerSubjectTypeAuthorizationArgs subjectTypeAuthorization) {
            return subjectTypeAuthorization(Output.of(subjectTypeAuthorization));
        }

        /**
         * @param tokenDialect Dialect of access tokens that should be issued for this resource server. Options include `access_token`, `rfc9068_profile`, `access_token_authz`, and `rfc9068_profile_authz`. `access_token` is a JWT containing standard Auth0 claims. `rfc9068_profile` is a JWT conforming to the IETF JWT Access Token Profile. `access_token_authz` is a JWT containing standard Auth0 claims, including RBAC permissions claims. `rfc9068_profile_authz` is a JWT conforming to the IETF JWT Access Token Profile, including RBAC permissions claims. RBAC permissions claims are available if RBAC (`enforce_policies`) is enabled for this API. For more details, refer to [Access Token Profiles](https://auth0.com/docs/secure/tokens/access-tokens/access-token-profiles).
         * 
         * @return builder
         * 
         */
        public Builder tokenDialect(@Nullable Output<String> tokenDialect) {
            $.tokenDialect = tokenDialect;
            return this;
        }

        /**
         * @param tokenDialect Dialect of access tokens that should be issued for this resource server. Options include `access_token`, `rfc9068_profile`, `access_token_authz`, and `rfc9068_profile_authz`. `access_token` is a JWT containing standard Auth0 claims. `rfc9068_profile` is a JWT conforming to the IETF JWT Access Token Profile. `access_token_authz` is a JWT containing standard Auth0 claims, including RBAC permissions claims. `rfc9068_profile_authz` is a JWT conforming to the IETF JWT Access Token Profile, including RBAC permissions claims. RBAC permissions claims are available if RBAC (`enforce_policies`) is enabled for this API. For more details, refer to [Access Token Profiles](https://auth0.com/docs/secure/tokens/access-tokens/access-token-profiles).
         * 
         * @return builder
         * 
         */
        public Builder tokenDialect(String tokenDialect) {
            return tokenDialect(Output.of(tokenDialect));
        }

        /**
         * @param tokenEncryption Configuration for JSON Web Encryption(JWE) of tokens for this resource server.
         * 
         * @return builder
         * 
         */
        public Builder tokenEncryption(@Nullable Output<ResourceServerTokenEncryptionArgs> tokenEncryption) {
            $.tokenEncryption = tokenEncryption;
            return this;
        }

        /**
         * @param tokenEncryption Configuration for JSON Web Encryption(JWE) of tokens for this resource server.
         * 
         * @return builder
         * 
         */
        public Builder tokenEncryption(ResourceServerTokenEncryptionArgs tokenEncryption) {
            return tokenEncryption(Output.of(tokenEncryption));
        }

        /**
         * @param tokenLifetime Number of seconds during which access tokens issued for this resource server from the token endpoint remain valid.
         * 
         * @return builder
         * 
         */
        public Builder tokenLifetime(@Nullable Output<Integer> tokenLifetime) {
            $.tokenLifetime = tokenLifetime;
            return this;
        }

        /**
         * @param tokenLifetime Number of seconds during which access tokens issued for this resource server from the token endpoint remain valid.
         * 
         * @return builder
         * 
         */
        public Builder tokenLifetime(Integer tokenLifetime) {
            return tokenLifetime(Output.of(tokenLifetime));
        }

        /**
         * @param tokenLifetimeForWeb Number of seconds during which access tokens issued for this resource server via implicit or hybrid flows remain valid. Cannot be greater than the `token_lifetime` value.
         * 
         * @return builder
         * 
         */
        public Builder tokenLifetimeForWeb(@Nullable Output<Integer> tokenLifetimeForWeb) {
            $.tokenLifetimeForWeb = tokenLifetimeForWeb;
            return this;
        }

        /**
         * @param tokenLifetimeForWeb Number of seconds during which access tokens issued for this resource server via implicit or hybrid flows remain valid. Cannot be greater than the `token_lifetime` value.
         * 
         * @return builder
         * 
         */
        public Builder tokenLifetimeForWeb(Integer tokenLifetimeForWeb) {
            return tokenLifetimeForWeb(Output.of(tokenLifetimeForWeb));
        }

        /**
         * @param verificationLocation URL from which to retrieve JWKs for this resource server. Used for verifying the JWT sent to Auth0 for token introspection.
         * 
         * @return builder
         * 
         */
        public Builder verificationLocation(@Nullable Output<String> verificationLocation) {
            $.verificationLocation = verificationLocation;
            return this;
        }

        /**
         * @param verificationLocation URL from which to retrieve JWKs for this resource server. Used for verifying the JWT sent to Auth0 for token introspection.
         * 
         * @return builder
         * 
         */
        public Builder verificationLocation(String verificationLocation) {
            return verificationLocation(Output.of(verificationLocation));
        }

        public ResourceServerState build() {
            return $;
        }
    }

}
