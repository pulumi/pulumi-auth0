// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.auth0.outputs;

import com.pulumi.auth0.outputs.GetTenantDefaultTokenQuota;
import com.pulumi.auth0.outputs.GetTenantErrorPage;
import com.pulumi.auth0.outputs.GetTenantFlag;
import com.pulumi.auth0.outputs.GetTenantMtl;
import com.pulumi.auth0.outputs.GetTenantOidcLogout;
import com.pulumi.auth0.outputs.GetTenantSession;
import com.pulumi.auth0.outputs.GetTenantSessionCooky;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetTenantResult {
    /**
     * @return List of supported ACR values.
     * 
     */
    private List<String> acrValuesSupporteds;
    /**
     * @return Whether to accept an organization name instead of an ID on auth endpoints.
     * 
     */
    private Boolean allowOrganizationNameInAuthenticationApi;
    /**
     * @return URLs that Auth0 may redirect to after logout.
     * 
     */
    private List<String> allowedLogoutUrls;
    /**
     * @return Whether to enable flexible factors for MFA in the PostLogin action.
     * 
     */
    private Boolean customizeMfaInPostloginAction;
    /**
     * @return API Audience to use by default for API Authorization flows. This setting is equivalent to appending the audience to every authorization request made to the tenant for every application.
     * 
     */
    private String defaultAudience;
    /**
     * @return Name of the connection to be used for Password Grant exchanges. Options include `auth0-adldap`, `ad`, `auth0`, `email`, `sms`, `waad`, and `adfs`.
     * 
     */
    private String defaultDirectory;
    /**
     * @return The default absolute redirection URI. Must be HTTPS or an empty string.
     * 
     */
    private String defaultRedirectionUri;
    /**
     * @return Token Quota configuration.
     * 
     */
    private List<GetTenantDefaultTokenQuota> defaultTokenQuotas;
    /**
     * @return Disable list of supported ACR values.
     * 
     */
    private Boolean disableAcrValuesSupported;
    /**
     * @return Your Auth0 domain name.
     * 
     */
    private String domain;
    /**
     * @return Supported locales for the user interface. The first locale in the list will be used to set the default locale.
     * 
     */
    private List<String> enabledLocales;
    /**
     * @return Configuration for the error page
     * 
     */
    private List<GetTenantErrorPage> errorPages;
    /**
     * @return Configuration settings for tenant flags.
     * 
     */
    private List<GetTenantFlag> flags;
    /**
     * @return Friendly name for the tenant.
     * 
     */
    private String friendlyName;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Number of hours during which a session can be inactive before the user must log in again.
     * 
     */
    private Double idleSessionLifetime;
    /**
     * @return The identifier value of the built-in Management API resource server, which can be used as an audience when configuring client grants.
     * 
     */
    private String managementApiIdentifier;
    /**
     * @return Configuration for mTLS.
     * 
     */
    private List<GetTenantMtl> mtls;
    /**
     * @return Settings related to OIDC RP-initiated Logout.
     * 
     */
    private List<GetTenantOidcLogout> oidcLogouts;
    /**
     * @return URL of logo to be shown for the tenant. Recommended size is 150px x 150px. If no URL is provided, the Auth0 logo will be used.
     * 
     */
    private String pictureUrl;
    /**
     * @return Enable pushed authorization requests.
     * 
     */
    private Boolean pushedAuthorizationRequestsSupported;
    /**
     * @return Selected sandbox version for the extensibility environment, which allows you to use custom scripts to extend parts of Auth0&#39;s functionality.
     * 
     */
    private String sandboxVersion;
    /**
     * @return Alters behavior of tenant&#39;s session cookie. Contains a single `mode` property.
     * 
     */
    private List<GetTenantSessionCooky> sessionCookies;
    /**
     * @return Number of hours during which a session will stay valid.
     * 
     */
    private Double sessionLifetime;
    /**
     * @return Sessions related settings for the tenant.
     * 
     */
    private List<GetTenantSession> sessions;
    /**
     * @return Indicates whether the confirmation prompt appears when using non-verifiable callback URIs. Set to true to skip the prompt, false to show it, or null to unset. Accepts (true/false/null) or (&#34;true&#34;/&#34;false&#34;/&#34;null&#34;)
     * 
     */
    private String skipNonVerifiableCallbackUriConfirmationPrompt;
    /**
     * @return Support email address for authenticating users.
     * 
     */
    private String supportEmail;
    /**
     * @return Support URL for authenticating users.
     * 
     */
    private String supportUrl;

    private GetTenantResult() {}
    /**
     * @return List of supported ACR values.
     * 
     */
    public List<String> acrValuesSupporteds() {
        return this.acrValuesSupporteds;
    }
    /**
     * @return Whether to accept an organization name instead of an ID on auth endpoints.
     * 
     */
    public Boolean allowOrganizationNameInAuthenticationApi() {
        return this.allowOrganizationNameInAuthenticationApi;
    }
    /**
     * @return URLs that Auth0 may redirect to after logout.
     * 
     */
    public List<String> allowedLogoutUrls() {
        return this.allowedLogoutUrls;
    }
    /**
     * @return Whether to enable flexible factors for MFA in the PostLogin action.
     * 
     */
    public Boolean customizeMfaInPostloginAction() {
        return this.customizeMfaInPostloginAction;
    }
    /**
     * @return API Audience to use by default for API Authorization flows. This setting is equivalent to appending the audience to every authorization request made to the tenant for every application.
     * 
     */
    public String defaultAudience() {
        return this.defaultAudience;
    }
    /**
     * @return Name of the connection to be used for Password Grant exchanges. Options include `auth0-adldap`, `ad`, `auth0`, `email`, `sms`, `waad`, and `adfs`.
     * 
     */
    public String defaultDirectory() {
        return this.defaultDirectory;
    }
    /**
     * @return The default absolute redirection URI. Must be HTTPS or an empty string.
     * 
     */
    public String defaultRedirectionUri() {
        return this.defaultRedirectionUri;
    }
    /**
     * @return Token Quota configuration.
     * 
     */
    public List<GetTenantDefaultTokenQuota> defaultTokenQuotas() {
        return this.defaultTokenQuotas;
    }
    /**
     * @return Disable list of supported ACR values.
     * 
     */
    public Boolean disableAcrValuesSupported() {
        return this.disableAcrValuesSupported;
    }
    /**
     * @return Your Auth0 domain name.
     * 
     */
    public String domain() {
        return this.domain;
    }
    /**
     * @return Supported locales for the user interface. The first locale in the list will be used to set the default locale.
     * 
     */
    public List<String> enabledLocales() {
        return this.enabledLocales;
    }
    /**
     * @return Configuration for the error page
     * 
     */
    public List<GetTenantErrorPage> errorPages() {
        return this.errorPages;
    }
    /**
     * @return Configuration settings for tenant flags.
     * 
     */
    public List<GetTenantFlag> flags() {
        return this.flags;
    }
    /**
     * @return Friendly name for the tenant.
     * 
     */
    public String friendlyName() {
        return this.friendlyName;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Number of hours during which a session can be inactive before the user must log in again.
     * 
     */
    public Double idleSessionLifetime() {
        return this.idleSessionLifetime;
    }
    /**
     * @return The identifier value of the built-in Management API resource server, which can be used as an audience when configuring client grants.
     * 
     */
    public String managementApiIdentifier() {
        return this.managementApiIdentifier;
    }
    /**
     * @return Configuration for mTLS.
     * 
     */
    public List<GetTenantMtl> mtls() {
        return this.mtls;
    }
    /**
     * @return Settings related to OIDC RP-initiated Logout.
     * 
     */
    public List<GetTenantOidcLogout> oidcLogouts() {
        return this.oidcLogouts;
    }
    /**
     * @return URL of logo to be shown for the tenant. Recommended size is 150px x 150px. If no URL is provided, the Auth0 logo will be used.
     * 
     */
    public String pictureUrl() {
        return this.pictureUrl;
    }
    /**
     * @return Enable pushed authorization requests.
     * 
     */
    public Boolean pushedAuthorizationRequestsSupported() {
        return this.pushedAuthorizationRequestsSupported;
    }
    /**
     * @return Selected sandbox version for the extensibility environment, which allows you to use custom scripts to extend parts of Auth0&#39;s functionality.
     * 
     */
    public String sandboxVersion() {
        return this.sandboxVersion;
    }
    /**
     * @return Alters behavior of tenant&#39;s session cookie. Contains a single `mode` property.
     * 
     */
    public List<GetTenantSessionCooky> sessionCookies() {
        return this.sessionCookies;
    }
    /**
     * @return Number of hours during which a session will stay valid.
     * 
     */
    public Double sessionLifetime() {
        return this.sessionLifetime;
    }
    /**
     * @return Sessions related settings for the tenant.
     * 
     */
    public List<GetTenantSession> sessions() {
        return this.sessions;
    }
    /**
     * @return Indicates whether the confirmation prompt appears when using non-verifiable callback URIs. Set to true to skip the prompt, false to show it, or null to unset. Accepts (true/false/null) or (&#34;true&#34;/&#34;false&#34;/&#34;null&#34;)
     * 
     */
    public String skipNonVerifiableCallbackUriConfirmationPrompt() {
        return this.skipNonVerifiableCallbackUriConfirmationPrompt;
    }
    /**
     * @return Support email address for authenticating users.
     * 
     */
    public String supportEmail() {
        return this.supportEmail;
    }
    /**
     * @return Support URL for authenticating users.
     * 
     */
    public String supportUrl() {
        return this.supportUrl;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTenantResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> acrValuesSupporteds;
        private Boolean allowOrganizationNameInAuthenticationApi;
        private List<String> allowedLogoutUrls;
        private Boolean customizeMfaInPostloginAction;
        private String defaultAudience;
        private String defaultDirectory;
        private String defaultRedirectionUri;
        private List<GetTenantDefaultTokenQuota> defaultTokenQuotas;
        private Boolean disableAcrValuesSupported;
        private String domain;
        private List<String> enabledLocales;
        private List<GetTenantErrorPage> errorPages;
        private List<GetTenantFlag> flags;
        private String friendlyName;
        private String id;
        private Double idleSessionLifetime;
        private String managementApiIdentifier;
        private List<GetTenantMtl> mtls;
        private List<GetTenantOidcLogout> oidcLogouts;
        private String pictureUrl;
        private Boolean pushedAuthorizationRequestsSupported;
        private String sandboxVersion;
        private List<GetTenantSessionCooky> sessionCookies;
        private Double sessionLifetime;
        private List<GetTenantSession> sessions;
        private String skipNonVerifiableCallbackUriConfirmationPrompt;
        private String supportEmail;
        private String supportUrl;
        public Builder() {}
        public Builder(GetTenantResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.acrValuesSupporteds = defaults.acrValuesSupporteds;
    	      this.allowOrganizationNameInAuthenticationApi = defaults.allowOrganizationNameInAuthenticationApi;
    	      this.allowedLogoutUrls = defaults.allowedLogoutUrls;
    	      this.customizeMfaInPostloginAction = defaults.customizeMfaInPostloginAction;
    	      this.defaultAudience = defaults.defaultAudience;
    	      this.defaultDirectory = defaults.defaultDirectory;
    	      this.defaultRedirectionUri = defaults.defaultRedirectionUri;
    	      this.defaultTokenQuotas = defaults.defaultTokenQuotas;
    	      this.disableAcrValuesSupported = defaults.disableAcrValuesSupported;
    	      this.domain = defaults.domain;
    	      this.enabledLocales = defaults.enabledLocales;
    	      this.errorPages = defaults.errorPages;
    	      this.flags = defaults.flags;
    	      this.friendlyName = defaults.friendlyName;
    	      this.id = defaults.id;
    	      this.idleSessionLifetime = defaults.idleSessionLifetime;
    	      this.managementApiIdentifier = defaults.managementApiIdentifier;
    	      this.mtls = defaults.mtls;
    	      this.oidcLogouts = defaults.oidcLogouts;
    	      this.pictureUrl = defaults.pictureUrl;
    	      this.pushedAuthorizationRequestsSupported = defaults.pushedAuthorizationRequestsSupported;
    	      this.sandboxVersion = defaults.sandboxVersion;
    	      this.sessionCookies = defaults.sessionCookies;
    	      this.sessionLifetime = defaults.sessionLifetime;
    	      this.sessions = defaults.sessions;
    	      this.skipNonVerifiableCallbackUriConfirmationPrompt = defaults.skipNonVerifiableCallbackUriConfirmationPrompt;
    	      this.supportEmail = defaults.supportEmail;
    	      this.supportUrl = defaults.supportUrl;
        }

        @CustomType.Setter
        public Builder acrValuesSupporteds(List<String> acrValuesSupporteds) {
            if (acrValuesSupporteds == null) {
              throw new MissingRequiredPropertyException("GetTenantResult", "acrValuesSupporteds");
            }
            this.acrValuesSupporteds = acrValuesSupporteds;
            return this;
        }
        public Builder acrValuesSupporteds(String... acrValuesSupporteds) {
            return acrValuesSupporteds(List.of(acrValuesSupporteds));
        }
        @CustomType.Setter
        public Builder allowOrganizationNameInAuthenticationApi(Boolean allowOrganizationNameInAuthenticationApi) {
            if (allowOrganizationNameInAuthenticationApi == null) {
              throw new MissingRequiredPropertyException("GetTenantResult", "allowOrganizationNameInAuthenticationApi");
            }
            this.allowOrganizationNameInAuthenticationApi = allowOrganizationNameInAuthenticationApi;
            return this;
        }
        @CustomType.Setter
        public Builder allowedLogoutUrls(List<String> allowedLogoutUrls) {
            if (allowedLogoutUrls == null) {
              throw new MissingRequiredPropertyException("GetTenantResult", "allowedLogoutUrls");
            }
            this.allowedLogoutUrls = allowedLogoutUrls;
            return this;
        }
        public Builder allowedLogoutUrls(String... allowedLogoutUrls) {
            return allowedLogoutUrls(List.of(allowedLogoutUrls));
        }
        @CustomType.Setter
        public Builder customizeMfaInPostloginAction(Boolean customizeMfaInPostloginAction) {
            if (customizeMfaInPostloginAction == null) {
              throw new MissingRequiredPropertyException("GetTenantResult", "customizeMfaInPostloginAction");
            }
            this.customizeMfaInPostloginAction = customizeMfaInPostloginAction;
            return this;
        }
        @CustomType.Setter
        public Builder defaultAudience(String defaultAudience) {
            if (defaultAudience == null) {
              throw new MissingRequiredPropertyException("GetTenantResult", "defaultAudience");
            }
            this.defaultAudience = defaultAudience;
            return this;
        }
        @CustomType.Setter
        public Builder defaultDirectory(String defaultDirectory) {
            if (defaultDirectory == null) {
              throw new MissingRequiredPropertyException("GetTenantResult", "defaultDirectory");
            }
            this.defaultDirectory = defaultDirectory;
            return this;
        }
        @CustomType.Setter
        public Builder defaultRedirectionUri(String defaultRedirectionUri) {
            if (defaultRedirectionUri == null) {
              throw new MissingRequiredPropertyException("GetTenantResult", "defaultRedirectionUri");
            }
            this.defaultRedirectionUri = defaultRedirectionUri;
            return this;
        }
        @CustomType.Setter
        public Builder defaultTokenQuotas(List<GetTenantDefaultTokenQuota> defaultTokenQuotas) {
            if (defaultTokenQuotas == null) {
              throw new MissingRequiredPropertyException("GetTenantResult", "defaultTokenQuotas");
            }
            this.defaultTokenQuotas = defaultTokenQuotas;
            return this;
        }
        public Builder defaultTokenQuotas(GetTenantDefaultTokenQuota... defaultTokenQuotas) {
            return defaultTokenQuotas(List.of(defaultTokenQuotas));
        }
        @CustomType.Setter
        public Builder disableAcrValuesSupported(Boolean disableAcrValuesSupported) {
            if (disableAcrValuesSupported == null) {
              throw new MissingRequiredPropertyException("GetTenantResult", "disableAcrValuesSupported");
            }
            this.disableAcrValuesSupported = disableAcrValuesSupported;
            return this;
        }
        @CustomType.Setter
        public Builder domain(String domain) {
            if (domain == null) {
              throw new MissingRequiredPropertyException("GetTenantResult", "domain");
            }
            this.domain = domain;
            return this;
        }
        @CustomType.Setter
        public Builder enabledLocales(List<String> enabledLocales) {
            if (enabledLocales == null) {
              throw new MissingRequiredPropertyException("GetTenantResult", "enabledLocales");
            }
            this.enabledLocales = enabledLocales;
            return this;
        }
        public Builder enabledLocales(String... enabledLocales) {
            return enabledLocales(List.of(enabledLocales));
        }
        @CustomType.Setter
        public Builder errorPages(List<GetTenantErrorPage> errorPages) {
            if (errorPages == null) {
              throw new MissingRequiredPropertyException("GetTenantResult", "errorPages");
            }
            this.errorPages = errorPages;
            return this;
        }
        public Builder errorPages(GetTenantErrorPage... errorPages) {
            return errorPages(List.of(errorPages));
        }
        @CustomType.Setter
        public Builder flags(List<GetTenantFlag> flags) {
            if (flags == null) {
              throw new MissingRequiredPropertyException("GetTenantResult", "flags");
            }
            this.flags = flags;
            return this;
        }
        public Builder flags(GetTenantFlag... flags) {
            return flags(List.of(flags));
        }
        @CustomType.Setter
        public Builder friendlyName(String friendlyName) {
            if (friendlyName == null) {
              throw new MissingRequiredPropertyException("GetTenantResult", "friendlyName");
            }
            this.friendlyName = friendlyName;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetTenantResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder idleSessionLifetime(Double idleSessionLifetime) {
            if (idleSessionLifetime == null) {
              throw new MissingRequiredPropertyException("GetTenantResult", "idleSessionLifetime");
            }
            this.idleSessionLifetime = idleSessionLifetime;
            return this;
        }
        @CustomType.Setter
        public Builder managementApiIdentifier(String managementApiIdentifier) {
            if (managementApiIdentifier == null) {
              throw new MissingRequiredPropertyException("GetTenantResult", "managementApiIdentifier");
            }
            this.managementApiIdentifier = managementApiIdentifier;
            return this;
        }
        @CustomType.Setter
        public Builder mtls(List<GetTenantMtl> mtls) {
            if (mtls == null) {
              throw new MissingRequiredPropertyException("GetTenantResult", "mtls");
            }
            this.mtls = mtls;
            return this;
        }
        public Builder mtls(GetTenantMtl... mtls) {
            return mtls(List.of(mtls));
        }
        @CustomType.Setter
        public Builder oidcLogouts(List<GetTenantOidcLogout> oidcLogouts) {
            if (oidcLogouts == null) {
              throw new MissingRequiredPropertyException("GetTenantResult", "oidcLogouts");
            }
            this.oidcLogouts = oidcLogouts;
            return this;
        }
        public Builder oidcLogouts(GetTenantOidcLogout... oidcLogouts) {
            return oidcLogouts(List.of(oidcLogouts));
        }
        @CustomType.Setter
        public Builder pictureUrl(String pictureUrl) {
            if (pictureUrl == null) {
              throw new MissingRequiredPropertyException("GetTenantResult", "pictureUrl");
            }
            this.pictureUrl = pictureUrl;
            return this;
        }
        @CustomType.Setter
        public Builder pushedAuthorizationRequestsSupported(Boolean pushedAuthorizationRequestsSupported) {
            if (pushedAuthorizationRequestsSupported == null) {
              throw new MissingRequiredPropertyException("GetTenantResult", "pushedAuthorizationRequestsSupported");
            }
            this.pushedAuthorizationRequestsSupported = pushedAuthorizationRequestsSupported;
            return this;
        }
        @CustomType.Setter
        public Builder sandboxVersion(String sandboxVersion) {
            if (sandboxVersion == null) {
              throw new MissingRequiredPropertyException("GetTenantResult", "sandboxVersion");
            }
            this.sandboxVersion = sandboxVersion;
            return this;
        }
        @CustomType.Setter
        public Builder sessionCookies(List<GetTenantSessionCooky> sessionCookies) {
            if (sessionCookies == null) {
              throw new MissingRequiredPropertyException("GetTenantResult", "sessionCookies");
            }
            this.sessionCookies = sessionCookies;
            return this;
        }
        public Builder sessionCookies(GetTenantSessionCooky... sessionCookies) {
            return sessionCookies(List.of(sessionCookies));
        }
        @CustomType.Setter
        public Builder sessionLifetime(Double sessionLifetime) {
            if (sessionLifetime == null) {
              throw new MissingRequiredPropertyException("GetTenantResult", "sessionLifetime");
            }
            this.sessionLifetime = sessionLifetime;
            return this;
        }
        @CustomType.Setter
        public Builder sessions(List<GetTenantSession> sessions) {
            if (sessions == null) {
              throw new MissingRequiredPropertyException("GetTenantResult", "sessions");
            }
            this.sessions = sessions;
            return this;
        }
        public Builder sessions(GetTenantSession... sessions) {
            return sessions(List.of(sessions));
        }
        @CustomType.Setter
        public Builder skipNonVerifiableCallbackUriConfirmationPrompt(String skipNonVerifiableCallbackUriConfirmationPrompt) {
            if (skipNonVerifiableCallbackUriConfirmationPrompt == null) {
              throw new MissingRequiredPropertyException("GetTenantResult", "skipNonVerifiableCallbackUriConfirmationPrompt");
            }
            this.skipNonVerifiableCallbackUriConfirmationPrompt = skipNonVerifiableCallbackUriConfirmationPrompt;
            return this;
        }
        @CustomType.Setter
        public Builder supportEmail(String supportEmail) {
            if (supportEmail == null) {
              throw new MissingRequiredPropertyException("GetTenantResult", "supportEmail");
            }
            this.supportEmail = supportEmail;
            return this;
        }
        @CustomType.Setter
        public Builder supportUrl(String supportUrl) {
            if (supportUrl == null) {
              throw new MissingRequiredPropertyException("GetTenantResult", "supportUrl");
            }
            this.supportUrl = supportUrl;
            return this;
        }
        public GetTenantResult build() {
            final var _resultValue = new GetTenantResult();
            _resultValue.acrValuesSupporteds = acrValuesSupporteds;
            _resultValue.allowOrganizationNameInAuthenticationApi = allowOrganizationNameInAuthenticationApi;
            _resultValue.allowedLogoutUrls = allowedLogoutUrls;
            _resultValue.customizeMfaInPostloginAction = customizeMfaInPostloginAction;
            _resultValue.defaultAudience = defaultAudience;
            _resultValue.defaultDirectory = defaultDirectory;
            _resultValue.defaultRedirectionUri = defaultRedirectionUri;
            _resultValue.defaultTokenQuotas = defaultTokenQuotas;
            _resultValue.disableAcrValuesSupported = disableAcrValuesSupported;
            _resultValue.domain = domain;
            _resultValue.enabledLocales = enabledLocales;
            _resultValue.errorPages = errorPages;
            _resultValue.flags = flags;
            _resultValue.friendlyName = friendlyName;
            _resultValue.id = id;
            _resultValue.idleSessionLifetime = idleSessionLifetime;
            _resultValue.managementApiIdentifier = managementApiIdentifier;
            _resultValue.mtls = mtls;
            _resultValue.oidcLogouts = oidcLogouts;
            _resultValue.pictureUrl = pictureUrl;
            _resultValue.pushedAuthorizationRequestsSupported = pushedAuthorizationRequestsSupported;
            _resultValue.sandboxVersion = sandboxVersion;
            _resultValue.sessionCookies = sessionCookies;
            _resultValue.sessionLifetime = sessionLifetime;
            _resultValue.sessions = sessions;
            _resultValue.skipNonVerifiableCallbackUriConfirmationPrompt = skipNonVerifiableCallbackUriConfirmationPrompt;
            _resultValue.supportEmail = supportEmail;
            _resultValue.supportUrl = supportUrl;
            return _resultValue;
        }
    }
}
