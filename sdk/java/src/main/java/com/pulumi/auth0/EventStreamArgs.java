// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.auth0;

import com.pulumi.auth0.inputs.EventStreamEventbridgeConfigurationArgs;
import com.pulumi.auth0.inputs.EventStreamWebhookConfigurationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EventStreamArgs extends com.pulumi.resources.ResourceArgs {

    public static final EventStreamArgs Empty = new EventStreamArgs();

    /**
     * The type of event stream destination (either &#39;eventbridge&#39; or &#39;webhook&#39;).
     * 
     */
    @Import(name="destinationType", required=true)
    private Output<String> destinationType;

    /**
     * @return The type of event stream destination (either &#39;eventbridge&#39; or &#39;webhook&#39;).
     * 
     */
    public Output<String> destinationType() {
        return this.destinationType;
    }

    /**
     * Configuration for the EventBridge destination. This block is only applicable when `destination_type` is set to `eventbridge`. EventBridge configurations **cannot** be updated after creation. Any change to this block will force the resource to be recreated.
     * 
     */
    @Import(name="eventbridgeConfiguration")
    private @Nullable Output<EventStreamEventbridgeConfigurationArgs> eventbridgeConfiguration;

    /**
     * @return Configuration for the EventBridge destination. This block is only applicable when `destination_type` is set to `eventbridge`. EventBridge configurations **cannot** be updated after creation. Any change to this block will force the resource to be recreated.
     * 
     */
    public Optional<Output<EventStreamEventbridgeConfigurationArgs>> eventbridgeConfiguration() {
        return Optional.ofNullable(this.eventbridgeConfiguration);
    }

    /**
     * The name of the event stream.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the event stream.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * List of event types this stream is subscribed to.
     * 
     */
    @Import(name="subscriptions", required=true)
    private Output<List<String>> subscriptions;

    /**
     * @return List of event types this stream is subscribed to.
     * 
     */
    public Output<List<String>> subscriptions() {
        return this.subscriptions;
    }

    /**
     * Configuration for the Webhook destination. This block is only applicable when `destination_type` is set to `webhook`. Webhook configurations **can** be updated after creation, including the endpoint and authorization fields.
     * 
     */
    @Import(name="webhookConfiguration")
    private @Nullable Output<EventStreamWebhookConfigurationArgs> webhookConfiguration;

    /**
     * @return Configuration for the Webhook destination. This block is only applicable when `destination_type` is set to `webhook`. Webhook configurations **can** be updated after creation, including the endpoint and authorization fields.
     * 
     */
    public Optional<Output<EventStreamWebhookConfigurationArgs>> webhookConfiguration() {
        return Optional.ofNullable(this.webhookConfiguration);
    }

    private EventStreamArgs() {}

    private EventStreamArgs(EventStreamArgs $) {
        this.destinationType = $.destinationType;
        this.eventbridgeConfiguration = $.eventbridgeConfiguration;
        this.name = $.name;
        this.subscriptions = $.subscriptions;
        this.webhookConfiguration = $.webhookConfiguration;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EventStreamArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EventStreamArgs $;

        public Builder() {
            $ = new EventStreamArgs();
        }

        public Builder(EventStreamArgs defaults) {
            $ = new EventStreamArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param destinationType The type of event stream destination (either &#39;eventbridge&#39; or &#39;webhook&#39;).
         * 
         * @return builder
         * 
         */
        public Builder destinationType(Output<String> destinationType) {
            $.destinationType = destinationType;
            return this;
        }

        /**
         * @param destinationType The type of event stream destination (either &#39;eventbridge&#39; or &#39;webhook&#39;).
         * 
         * @return builder
         * 
         */
        public Builder destinationType(String destinationType) {
            return destinationType(Output.of(destinationType));
        }

        /**
         * @param eventbridgeConfiguration Configuration for the EventBridge destination. This block is only applicable when `destination_type` is set to `eventbridge`. EventBridge configurations **cannot** be updated after creation. Any change to this block will force the resource to be recreated.
         * 
         * @return builder
         * 
         */
        public Builder eventbridgeConfiguration(@Nullable Output<EventStreamEventbridgeConfigurationArgs> eventbridgeConfiguration) {
            $.eventbridgeConfiguration = eventbridgeConfiguration;
            return this;
        }

        /**
         * @param eventbridgeConfiguration Configuration for the EventBridge destination. This block is only applicable when `destination_type` is set to `eventbridge`. EventBridge configurations **cannot** be updated after creation. Any change to this block will force the resource to be recreated.
         * 
         * @return builder
         * 
         */
        public Builder eventbridgeConfiguration(EventStreamEventbridgeConfigurationArgs eventbridgeConfiguration) {
            return eventbridgeConfiguration(Output.of(eventbridgeConfiguration));
        }

        /**
         * @param name The name of the event stream.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the event stream.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param subscriptions List of event types this stream is subscribed to.
         * 
         * @return builder
         * 
         */
        public Builder subscriptions(Output<List<String>> subscriptions) {
            $.subscriptions = subscriptions;
            return this;
        }

        /**
         * @param subscriptions List of event types this stream is subscribed to.
         * 
         * @return builder
         * 
         */
        public Builder subscriptions(List<String> subscriptions) {
            return subscriptions(Output.of(subscriptions));
        }

        /**
         * @param subscriptions List of event types this stream is subscribed to.
         * 
         * @return builder
         * 
         */
        public Builder subscriptions(String... subscriptions) {
            return subscriptions(List.of(subscriptions));
        }

        /**
         * @param webhookConfiguration Configuration for the Webhook destination. This block is only applicable when `destination_type` is set to `webhook`. Webhook configurations **can** be updated after creation, including the endpoint and authorization fields.
         * 
         * @return builder
         * 
         */
        public Builder webhookConfiguration(@Nullable Output<EventStreamWebhookConfigurationArgs> webhookConfiguration) {
            $.webhookConfiguration = webhookConfiguration;
            return this;
        }

        /**
         * @param webhookConfiguration Configuration for the Webhook destination. This block is only applicable when `destination_type` is set to `webhook`. Webhook configurations **can** be updated after creation, including the endpoint and authorization fields.
         * 
         * @return builder
         * 
         */
        public Builder webhookConfiguration(EventStreamWebhookConfigurationArgs webhookConfiguration) {
            return webhookConfiguration(Output.of(webhookConfiguration));
        }

        public EventStreamArgs build() {
            if ($.destinationType == null) {
                throw new MissingRequiredPropertyException("EventStreamArgs", "destinationType");
            }
            if ($.subscriptions == null) {
                throw new MissingRequiredPropertyException("EventStreamArgs", "subscriptions");
            }
            return $;
        }
    }

}
