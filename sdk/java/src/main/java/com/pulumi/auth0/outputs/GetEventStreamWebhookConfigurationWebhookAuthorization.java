// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.auth0.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetEventStreamWebhookConfigurationWebhookAuthorization {
    /**
     * @return The authorization method used to secure the webhook endpoint. Can be either `basic` or `bearer`.
     * 
     */
    private String method;
    /**
     * @return The password for `basic` authentication. Required when `method` is set to `basic`.
     * 
     */
    private String password;
    /**
     * @return The token used for `bearer` authentication. Required when `method` is set to `bearer`.
     * 
     */
    private String token;
    /**
     * @return The username for `basic` authentication. Required when `method` is set to `basic`.
     * 
     */
    private String username;

    private GetEventStreamWebhookConfigurationWebhookAuthorization() {}
    /**
     * @return The authorization method used to secure the webhook endpoint. Can be either `basic` or `bearer`.
     * 
     */
    public String method() {
        return this.method;
    }
    /**
     * @return The password for `basic` authentication. Required when `method` is set to `basic`.
     * 
     */
    public String password() {
        return this.password;
    }
    /**
     * @return The token used for `bearer` authentication. Required when `method` is set to `bearer`.
     * 
     */
    public String token() {
        return this.token;
    }
    /**
     * @return The username for `basic` authentication. Required when `method` is set to `basic`.
     * 
     */
    public String username() {
        return this.username;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetEventStreamWebhookConfigurationWebhookAuthorization defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String method;
        private String password;
        private String token;
        private String username;
        public Builder() {}
        public Builder(GetEventStreamWebhookConfigurationWebhookAuthorization defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.method = defaults.method;
    	      this.password = defaults.password;
    	      this.token = defaults.token;
    	      this.username = defaults.username;
        }

        @CustomType.Setter
        public Builder method(String method) {
            if (method == null) {
              throw new MissingRequiredPropertyException("GetEventStreamWebhookConfigurationWebhookAuthorization", "method");
            }
            this.method = method;
            return this;
        }
        @CustomType.Setter
        public Builder password(String password) {
            if (password == null) {
              throw new MissingRequiredPropertyException("GetEventStreamWebhookConfigurationWebhookAuthorization", "password");
            }
            this.password = password;
            return this;
        }
        @CustomType.Setter
        public Builder token(String token) {
            if (token == null) {
              throw new MissingRequiredPropertyException("GetEventStreamWebhookConfigurationWebhookAuthorization", "token");
            }
            this.token = token;
            return this;
        }
        @CustomType.Setter
        public Builder username(String username) {
            if (username == null) {
              throw new MissingRequiredPropertyException("GetEventStreamWebhookConfigurationWebhookAuthorization", "username");
            }
            this.username = username;
            return this;
        }
        public GetEventStreamWebhookConfigurationWebhookAuthorization build() {
            final var _resultValue = new GetEventStreamWebhookConfigurationWebhookAuthorization();
            _resultValue.method = method;
            _resultValue.password = password;
            _resultValue.token = token;
            _resultValue.username = username;
            return _resultValue;
        }
    }
}
