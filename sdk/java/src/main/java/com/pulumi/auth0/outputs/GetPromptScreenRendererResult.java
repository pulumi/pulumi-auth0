// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.auth0.outputs;

import com.pulumi.auth0.outputs.GetPromptScreenRendererFilter;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetPromptScreenRendererResult {
    /**
     * @return Context values to make available
     * 
     */
    private List<String> contextConfigurations;
    /**
     * @return Override Universal Login default head tags
     * 
     */
    private Boolean defaultHeadTagsDisabled;
    /**
     * @return Optional filters to apply rendering rules to specific entities. `match_type` and at least one of the entity arrays are required.
     * 
     */
    private List<GetPromptScreenRendererFilter> filters;
    /**
     * @return An array of head tags
     * 
     */
    private String headTags;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The type of prompt to customize.
     * 
     */
    private String promptType;
    /**
     * @return Rendering modeOptions are: `standard`, `advanced`.
     * 
     */
    private String renderingMode;
    /**
     * @return The screen name associated with the prompt type.
     * 
     */
    private String screenName;
    /**
     * @return Tenant ID
     * 
     */
    private String tenant;
    /**
     * @return Use page template with ACUL
     * 
     */
    private Boolean usePageTemplate;

    private GetPromptScreenRendererResult() {}
    /**
     * @return Context values to make available
     * 
     */
    public List<String> contextConfigurations() {
        return this.contextConfigurations;
    }
    /**
     * @return Override Universal Login default head tags
     * 
     */
    public Boolean defaultHeadTagsDisabled() {
        return this.defaultHeadTagsDisabled;
    }
    /**
     * @return Optional filters to apply rendering rules to specific entities. `match_type` and at least one of the entity arrays are required.
     * 
     */
    public List<GetPromptScreenRendererFilter> filters() {
        return this.filters;
    }
    /**
     * @return An array of head tags
     * 
     */
    public String headTags() {
        return this.headTags;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The type of prompt to customize.
     * 
     */
    public String promptType() {
        return this.promptType;
    }
    /**
     * @return Rendering modeOptions are: `standard`, `advanced`.
     * 
     */
    public String renderingMode() {
        return this.renderingMode;
    }
    /**
     * @return The screen name associated with the prompt type.
     * 
     */
    public String screenName() {
        return this.screenName;
    }
    /**
     * @return Tenant ID
     * 
     */
    public String tenant() {
        return this.tenant;
    }
    /**
     * @return Use page template with ACUL
     * 
     */
    public Boolean usePageTemplate() {
        return this.usePageTemplate;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPromptScreenRendererResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> contextConfigurations;
        private Boolean defaultHeadTagsDisabled;
        private List<GetPromptScreenRendererFilter> filters;
        private String headTags;
        private String id;
        private String promptType;
        private String renderingMode;
        private String screenName;
        private String tenant;
        private Boolean usePageTemplate;
        public Builder() {}
        public Builder(GetPromptScreenRendererResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.contextConfigurations = defaults.contextConfigurations;
    	      this.defaultHeadTagsDisabled = defaults.defaultHeadTagsDisabled;
    	      this.filters = defaults.filters;
    	      this.headTags = defaults.headTags;
    	      this.id = defaults.id;
    	      this.promptType = defaults.promptType;
    	      this.renderingMode = defaults.renderingMode;
    	      this.screenName = defaults.screenName;
    	      this.tenant = defaults.tenant;
    	      this.usePageTemplate = defaults.usePageTemplate;
        }

        @CustomType.Setter
        public Builder contextConfigurations(List<String> contextConfigurations) {
            if (contextConfigurations == null) {
              throw new MissingRequiredPropertyException("GetPromptScreenRendererResult", "contextConfigurations");
            }
            this.contextConfigurations = contextConfigurations;
            return this;
        }
        public Builder contextConfigurations(String... contextConfigurations) {
            return contextConfigurations(List.of(contextConfigurations));
        }
        @CustomType.Setter
        public Builder defaultHeadTagsDisabled(Boolean defaultHeadTagsDisabled) {
            if (defaultHeadTagsDisabled == null) {
              throw new MissingRequiredPropertyException("GetPromptScreenRendererResult", "defaultHeadTagsDisabled");
            }
            this.defaultHeadTagsDisabled = defaultHeadTagsDisabled;
            return this;
        }
        @CustomType.Setter
        public Builder filters(List<GetPromptScreenRendererFilter> filters) {
            if (filters == null) {
              throw new MissingRequiredPropertyException("GetPromptScreenRendererResult", "filters");
            }
            this.filters = filters;
            return this;
        }
        public Builder filters(GetPromptScreenRendererFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder headTags(String headTags) {
            if (headTags == null) {
              throw new MissingRequiredPropertyException("GetPromptScreenRendererResult", "headTags");
            }
            this.headTags = headTags;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetPromptScreenRendererResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder promptType(String promptType) {
            if (promptType == null) {
              throw new MissingRequiredPropertyException("GetPromptScreenRendererResult", "promptType");
            }
            this.promptType = promptType;
            return this;
        }
        @CustomType.Setter
        public Builder renderingMode(String renderingMode) {
            if (renderingMode == null) {
              throw new MissingRequiredPropertyException("GetPromptScreenRendererResult", "renderingMode");
            }
            this.renderingMode = renderingMode;
            return this;
        }
        @CustomType.Setter
        public Builder screenName(String screenName) {
            if (screenName == null) {
              throw new MissingRequiredPropertyException("GetPromptScreenRendererResult", "screenName");
            }
            this.screenName = screenName;
            return this;
        }
        @CustomType.Setter
        public Builder tenant(String tenant) {
            if (tenant == null) {
              throw new MissingRequiredPropertyException("GetPromptScreenRendererResult", "tenant");
            }
            this.tenant = tenant;
            return this;
        }
        @CustomType.Setter
        public Builder usePageTemplate(Boolean usePageTemplate) {
            if (usePageTemplate == null) {
              throw new MissingRequiredPropertyException("GetPromptScreenRendererResult", "usePageTemplate");
            }
            this.usePageTemplate = usePageTemplate;
            return this;
        }
        public GetPromptScreenRendererResult build() {
            final var _resultValue = new GetPromptScreenRendererResult();
            _resultValue.contextConfigurations = contextConfigurations;
            _resultValue.defaultHeadTagsDisabled = defaultHeadTagsDisabled;
            _resultValue.filters = filters;
            _resultValue.headTags = headTags;
            _resultValue.id = id;
            _resultValue.promptType = promptType;
            _resultValue.renderingMode = renderingMode;
            _resultValue.screenName = screenName;
            _resultValue.tenant = tenant;
            _resultValue.usePageTemplate = usePageTemplate;
            return _resultValue;
        }
    }
}
