// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.auth0.outputs;

import com.pulumi.auth0.outputs.GetActionDependency;
import com.pulumi.auth0.outputs.GetActionSecret;
import com.pulumi.auth0.outputs.GetActionSupportedTrigger;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetActionResult {
    /**
     * @return The source code of the action.
     * 
     */
    private String code;
    /**
     * @return List of third party npm modules, and their versions, that this action depends on.
     * 
     */
    private List<GetActionDependency> dependencies;
    /**
     * @return Deploying an action will create a new immutable version of the action. If the action is currently bound to a trigger, then the system will begin executing the newly deployed version of the action immediately.
     * 
     */
    private Boolean deploy;
    /**
     * @return The ID of the action. If not provided, `name` must be set.
     * 
     */
    private @Nullable String id;
    /**
     * @return The name of the action. If not provided, `id` must be set.
     * 
     */
    private @Nullable String name;
    /**
     * @return The Node runtime. Possible values are: `node12`, `node16` (not recommended), `node18`, `node22`
     * 
     */
    private String runtime;
    /**
     * @return List of secrets that are included in an action or a version of an action. Partial management of secrets is not supported.
     * 
     */
    private List<GetActionSecret> secrets;
    /**
     * @return List of triggers that this action supports. At this time, an action can only target a single trigger at a time. Read Retrieving the set of triggers available within actions to retrieve the latest trigger versions supported.
     * 
     */
    private List<GetActionSupportedTrigger> supportedTriggers;
    /**
     * @return Version ID of the action. This value is available if `deploy` is set to true.
     * 
     */
    private String versionId;

    private GetActionResult() {}
    /**
     * @return The source code of the action.
     * 
     */
    public String code() {
        return this.code;
    }
    /**
     * @return List of third party npm modules, and their versions, that this action depends on.
     * 
     */
    public List<GetActionDependency> dependencies() {
        return this.dependencies;
    }
    /**
     * @return Deploying an action will create a new immutable version of the action. If the action is currently bound to a trigger, then the system will begin executing the newly deployed version of the action immediately.
     * 
     */
    public Boolean deploy() {
        return this.deploy;
    }
    /**
     * @return The ID of the action. If not provided, `name` must be set.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return The name of the action. If not provided, `id` must be set.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return The Node runtime. Possible values are: `node12`, `node16` (not recommended), `node18`, `node22`
     * 
     */
    public String runtime() {
        return this.runtime;
    }
    /**
     * @return List of secrets that are included in an action or a version of an action. Partial management of secrets is not supported.
     * 
     */
    public List<GetActionSecret> secrets() {
        return this.secrets;
    }
    /**
     * @return List of triggers that this action supports. At this time, an action can only target a single trigger at a time. Read Retrieving the set of triggers available within actions to retrieve the latest trigger versions supported.
     * 
     */
    public List<GetActionSupportedTrigger> supportedTriggers() {
        return this.supportedTriggers;
    }
    /**
     * @return Version ID of the action. This value is available if `deploy` is set to true.
     * 
     */
    public String versionId() {
        return this.versionId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetActionResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String code;
        private List<GetActionDependency> dependencies;
        private Boolean deploy;
        private @Nullable String id;
        private @Nullable String name;
        private String runtime;
        private List<GetActionSecret> secrets;
        private List<GetActionSupportedTrigger> supportedTriggers;
        private String versionId;
        public Builder() {}
        public Builder(GetActionResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.code = defaults.code;
    	      this.dependencies = defaults.dependencies;
    	      this.deploy = defaults.deploy;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.runtime = defaults.runtime;
    	      this.secrets = defaults.secrets;
    	      this.supportedTriggers = defaults.supportedTriggers;
    	      this.versionId = defaults.versionId;
        }

        @CustomType.Setter
        public Builder code(String code) {
            if (code == null) {
              throw new MissingRequiredPropertyException("GetActionResult", "code");
            }
            this.code = code;
            return this;
        }
        @CustomType.Setter
        public Builder dependencies(List<GetActionDependency> dependencies) {
            if (dependencies == null) {
              throw new MissingRequiredPropertyException("GetActionResult", "dependencies");
            }
            this.dependencies = dependencies;
            return this;
        }
        public Builder dependencies(GetActionDependency... dependencies) {
            return dependencies(List.of(dependencies));
        }
        @CustomType.Setter
        public Builder deploy(Boolean deploy) {
            if (deploy == null) {
              throw new MissingRequiredPropertyException("GetActionResult", "deploy");
            }
            this.deploy = deploy;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {

            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder runtime(String runtime) {
            if (runtime == null) {
              throw new MissingRequiredPropertyException("GetActionResult", "runtime");
            }
            this.runtime = runtime;
            return this;
        }
        @CustomType.Setter
        public Builder secrets(List<GetActionSecret> secrets) {
            if (secrets == null) {
              throw new MissingRequiredPropertyException("GetActionResult", "secrets");
            }
            this.secrets = secrets;
            return this;
        }
        public Builder secrets(GetActionSecret... secrets) {
            return secrets(List.of(secrets));
        }
        @CustomType.Setter
        public Builder supportedTriggers(List<GetActionSupportedTrigger> supportedTriggers) {
            if (supportedTriggers == null) {
              throw new MissingRequiredPropertyException("GetActionResult", "supportedTriggers");
            }
            this.supportedTriggers = supportedTriggers;
            return this;
        }
        public Builder supportedTriggers(GetActionSupportedTrigger... supportedTriggers) {
            return supportedTriggers(List.of(supportedTriggers));
        }
        @CustomType.Setter
        public Builder versionId(String versionId) {
            if (versionId == null) {
              throw new MissingRequiredPropertyException("GetActionResult", "versionId");
            }
            this.versionId = versionId;
            return this;
        }
        public GetActionResult build() {
            final var _resultValue = new GetActionResult();
            _resultValue.code = code;
            _resultValue.dependencies = dependencies;
            _resultValue.deploy = deploy;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.runtime = runtime;
            _resultValue.secrets = secrets;
            _resultValue.supportedTriggers = supportedTriggers;
            _resultValue.versionId = versionId;
            return _resultValue;
        }
    }
}
