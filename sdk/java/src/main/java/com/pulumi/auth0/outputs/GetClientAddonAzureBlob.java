// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.auth0.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetClientAddonAzureBlob {
    /**
     * @return Your Azure storage account name. Usually first segment in your Azure storage URL, for example `https://acme-org.blob.core.windows.net` would be the account name `acme-org`.
     * 
     */
    private String accountName;
    /**
     * @return Indicates if the issued token has permission to delete the blob.
     * 
     */
    private Boolean blobDelete;
    /**
     * @return Entity to request a token for, such as `my-blob`. If blank the computed SAS will apply to the entire storage container.
     * 
     */
    private String blobName;
    /**
     * @return Indicates if the issued token has permission to read the content, properties, metadata and block list. Use the blob as the source of a copy operation.
     * 
     */
    private Boolean blobRead;
    /**
     * @return Indicates if the issued token has permission to create or write content, properties, metadata, or block list. Snapshot or lease the blob. Resize the blob (page blob only). Use the blob as the destination of a copy operation within the same account.
     * 
     */
    private Boolean blobWrite;
    /**
     * @return Indicates if issued token has permission to delete any blob in the container.
     * 
     */
    private Boolean containerDelete;
    /**
     * @return Indicates if the issued token has permission to list blobs in the container.
     * 
     */
    private Boolean containerList;
    /**
     * @return Container to request a token for, such as `my-container`.
     * 
     */
    private String containerName;
    /**
     * @return Indicates if the issued token has permission to read the content, properties, metadata or block list of any blob in the container. Use any blob in the container as the source of a copy operation.
     * 
     */
    private Boolean containerRead;
    /**
     * @return Indicates that for any blob in the container if the issued token has permission to create or write content, properties, metadata, or block list. Snapshot or lease the blob. Resize the blob (page blob only). Use the blob as the destination of a copy operation within the same account.
     * 
     */
    private Boolean containerWrite;
    /**
     * @return Expiration in minutes for the generated token (default of 5 minutes).
     * 
     */
    private Integer expiration;
    /**
     * @return Shared access policy identifier defined in your storage account resource.
     * 
     */
    private String signedIdentifier;
    /**
     * @return Access key associated with this storage account.
     * 
     */
    private String storageAccessKey;

    private GetClientAddonAzureBlob() {}
    /**
     * @return Your Azure storage account name. Usually first segment in your Azure storage URL, for example `https://acme-org.blob.core.windows.net` would be the account name `acme-org`.
     * 
     */
    public String accountName() {
        return this.accountName;
    }
    /**
     * @return Indicates if the issued token has permission to delete the blob.
     * 
     */
    public Boolean blobDelete() {
        return this.blobDelete;
    }
    /**
     * @return Entity to request a token for, such as `my-blob`. If blank the computed SAS will apply to the entire storage container.
     * 
     */
    public String blobName() {
        return this.blobName;
    }
    /**
     * @return Indicates if the issued token has permission to read the content, properties, metadata and block list. Use the blob as the source of a copy operation.
     * 
     */
    public Boolean blobRead() {
        return this.blobRead;
    }
    /**
     * @return Indicates if the issued token has permission to create or write content, properties, metadata, or block list. Snapshot or lease the blob. Resize the blob (page blob only). Use the blob as the destination of a copy operation within the same account.
     * 
     */
    public Boolean blobWrite() {
        return this.blobWrite;
    }
    /**
     * @return Indicates if issued token has permission to delete any blob in the container.
     * 
     */
    public Boolean containerDelete() {
        return this.containerDelete;
    }
    /**
     * @return Indicates if the issued token has permission to list blobs in the container.
     * 
     */
    public Boolean containerList() {
        return this.containerList;
    }
    /**
     * @return Container to request a token for, such as `my-container`.
     * 
     */
    public String containerName() {
        return this.containerName;
    }
    /**
     * @return Indicates if the issued token has permission to read the content, properties, metadata or block list of any blob in the container. Use any blob in the container as the source of a copy operation.
     * 
     */
    public Boolean containerRead() {
        return this.containerRead;
    }
    /**
     * @return Indicates that for any blob in the container if the issued token has permission to create or write content, properties, metadata, or block list. Snapshot or lease the blob. Resize the blob (page blob only). Use the blob as the destination of a copy operation within the same account.
     * 
     */
    public Boolean containerWrite() {
        return this.containerWrite;
    }
    /**
     * @return Expiration in minutes for the generated token (default of 5 minutes).
     * 
     */
    public Integer expiration() {
        return this.expiration;
    }
    /**
     * @return Shared access policy identifier defined in your storage account resource.
     * 
     */
    public String signedIdentifier() {
        return this.signedIdentifier;
    }
    /**
     * @return Access key associated with this storage account.
     * 
     */
    public String storageAccessKey() {
        return this.storageAccessKey;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetClientAddonAzureBlob defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accountName;
        private Boolean blobDelete;
        private String blobName;
        private Boolean blobRead;
        private Boolean blobWrite;
        private Boolean containerDelete;
        private Boolean containerList;
        private String containerName;
        private Boolean containerRead;
        private Boolean containerWrite;
        private Integer expiration;
        private String signedIdentifier;
        private String storageAccessKey;
        public Builder() {}
        public Builder(GetClientAddonAzureBlob defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountName = defaults.accountName;
    	      this.blobDelete = defaults.blobDelete;
    	      this.blobName = defaults.blobName;
    	      this.blobRead = defaults.blobRead;
    	      this.blobWrite = defaults.blobWrite;
    	      this.containerDelete = defaults.containerDelete;
    	      this.containerList = defaults.containerList;
    	      this.containerName = defaults.containerName;
    	      this.containerRead = defaults.containerRead;
    	      this.containerWrite = defaults.containerWrite;
    	      this.expiration = defaults.expiration;
    	      this.signedIdentifier = defaults.signedIdentifier;
    	      this.storageAccessKey = defaults.storageAccessKey;
        }

        @CustomType.Setter
        public Builder accountName(String accountName) {
            if (accountName == null) {
              throw new MissingRequiredPropertyException("GetClientAddonAzureBlob", "accountName");
            }
            this.accountName = accountName;
            return this;
        }
        @CustomType.Setter
        public Builder blobDelete(Boolean blobDelete) {
            if (blobDelete == null) {
              throw new MissingRequiredPropertyException("GetClientAddonAzureBlob", "blobDelete");
            }
            this.blobDelete = blobDelete;
            return this;
        }
        @CustomType.Setter
        public Builder blobName(String blobName) {
            if (blobName == null) {
              throw new MissingRequiredPropertyException("GetClientAddonAzureBlob", "blobName");
            }
            this.blobName = blobName;
            return this;
        }
        @CustomType.Setter
        public Builder blobRead(Boolean blobRead) {
            if (blobRead == null) {
              throw new MissingRequiredPropertyException("GetClientAddonAzureBlob", "blobRead");
            }
            this.blobRead = blobRead;
            return this;
        }
        @CustomType.Setter
        public Builder blobWrite(Boolean blobWrite) {
            if (blobWrite == null) {
              throw new MissingRequiredPropertyException("GetClientAddonAzureBlob", "blobWrite");
            }
            this.blobWrite = blobWrite;
            return this;
        }
        @CustomType.Setter
        public Builder containerDelete(Boolean containerDelete) {
            if (containerDelete == null) {
              throw new MissingRequiredPropertyException("GetClientAddonAzureBlob", "containerDelete");
            }
            this.containerDelete = containerDelete;
            return this;
        }
        @CustomType.Setter
        public Builder containerList(Boolean containerList) {
            if (containerList == null) {
              throw new MissingRequiredPropertyException("GetClientAddonAzureBlob", "containerList");
            }
            this.containerList = containerList;
            return this;
        }
        @CustomType.Setter
        public Builder containerName(String containerName) {
            if (containerName == null) {
              throw new MissingRequiredPropertyException("GetClientAddonAzureBlob", "containerName");
            }
            this.containerName = containerName;
            return this;
        }
        @CustomType.Setter
        public Builder containerRead(Boolean containerRead) {
            if (containerRead == null) {
              throw new MissingRequiredPropertyException("GetClientAddonAzureBlob", "containerRead");
            }
            this.containerRead = containerRead;
            return this;
        }
        @CustomType.Setter
        public Builder containerWrite(Boolean containerWrite) {
            if (containerWrite == null) {
              throw new MissingRequiredPropertyException("GetClientAddonAzureBlob", "containerWrite");
            }
            this.containerWrite = containerWrite;
            return this;
        }
        @CustomType.Setter
        public Builder expiration(Integer expiration) {
            if (expiration == null) {
              throw new MissingRequiredPropertyException("GetClientAddonAzureBlob", "expiration");
            }
            this.expiration = expiration;
            return this;
        }
        @CustomType.Setter
        public Builder signedIdentifier(String signedIdentifier) {
            if (signedIdentifier == null) {
              throw new MissingRequiredPropertyException("GetClientAddonAzureBlob", "signedIdentifier");
            }
            this.signedIdentifier = signedIdentifier;
            return this;
        }
        @CustomType.Setter
        public Builder storageAccessKey(String storageAccessKey) {
            if (storageAccessKey == null) {
              throw new MissingRequiredPropertyException("GetClientAddonAzureBlob", "storageAccessKey");
            }
            this.storageAccessKey = storageAccessKey;
            return this;
        }
        public GetClientAddonAzureBlob build() {
            final var _resultValue = new GetClientAddonAzureBlob();
            _resultValue.accountName = accountName;
            _resultValue.blobDelete = blobDelete;
            _resultValue.blobName = blobName;
            _resultValue.blobRead = blobRead;
            _resultValue.blobWrite = blobWrite;
            _resultValue.containerDelete = containerDelete;
            _resultValue.containerList = containerList;
            _resultValue.containerName = containerName;
            _resultValue.containerRead = containerRead;
            _resultValue.containerWrite = containerWrite;
            _resultValue.expiration = expiration;
            _resultValue.signedIdentifier = signedIdentifier;
            _resultValue.storageAccessKey = storageAccessKey;
            return _resultValue;
        }
    }
}
