// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.auth0.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ClientSessionTransferArgs extends com.pulumi.resources.ResourceArgs {

    public static final ClientSessionTransferArgs Empty = new ClientSessionTransferArgs();

    /**
     * Indicates whether the application is allowed to use a refresh token when using a session*transfer*token session.
     * 
     */
    @Import(name="allowRefreshToken")
    private @Nullable Output<Boolean> allowRefreshToken;

    /**
     * @return Indicates whether the application is allowed to use a refresh token when using a session*transfer*token session.
     * 
     */
    public Optional<Output<Boolean>> allowRefreshToken() {
        return Optional.ofNullable(this.allowRefreshToken);
    }

    @Import(name="allowedAuthenticationMethods")
    private @Nullable Output<List<String>> allowedAuthenticationMethods;

    public Optional<Output<List<String>>> allowedAuthenticationMethods() {
        return Optional.ofNullable(this.allowedAuthenticationMethods);
    }

    /**
     * Indicates whether the application(Native app) can use the Token Exchange endpoint to create a session*transfer*token
     * 
     */
    @Import(name="canCreateSessionTransferToken")
    private @Nullable Output<Boolean> canCreateSessionTransferToken;

    /**
     * @return Indicates whether the application(Native app) can use the Token Exchange endpoint to create a session*transfer*token
     * 
     */
    public Optional<Output<Boolean>> canCreateSessionTransferToken() {
        return Optional.ofNullable(this.canCreateSessionTransferToken);
    }

    /**
     * Indicates whether Refresh Tokens created during a native-to-web session are tied to that session&#39;s lifetime. This determines if such refresh tokens should be automatically revoked when their corresponding sessions are.
     * 
     */
    @Import(name="enforceCascadeRevocation")
    private @Nullable Output<Boolean> enforceCascadeRevocation;

    /**
     * @return Indicates whether Refresh Tokens created during a native-to-web session are tied to that session&#39;s lifetime. This determines if such refresh tokens should be automatically revoked when their corresponding sessions are.
     * 
     */
    public Optional<Output<Boolean>> enforceCascadeRevocation() {
        return Optional.ofNullable(this.enforceCascadeRevocation);
    }

    /**
     * Configures the level of device binding enforced when a session*transfer*token is consumed. Can be one of `ip`, `asn` or `none`.
     * 
     */
    @Import(name="enforceDeviceBinding")
    private @Nullable Output<String> enforceDeviceBinding;

    /**
     * @return Configures the level of device binding enforced when a session*transfer*token is consumed. Can be one of `ip`, `asn` or `none`.
     * 
     */
    public Optional<Output<String>> enforceDeviceBinding() {
        return Optional.ofNullable(this.enforceDeviceBinding);
    }

    /**
     * Indicates whether revoking the parent Refresh Token that initiated a Native to Web flow and was used to issue a Session Transfer Token should trigger a cascade revocation affecting its dependent child entities.
     * 
     */
    @Import(name="enforceOnlineRefreshTokens")
    private @Nullable Output<Boolean> enforceOnlineRefreshTokens;

    /**
     * @return Indicates whether revoking the parent Refresh Token that initiated a Native to Web flow and was used to issue a Session Transfer Token should trigger a cascade revocation affecting its dependent child entities.
     * 
     */
    public Optional<Output<Boolean>> enforceOnlineRefreshTokens() {
        return Optional.ofNullable(this.enforceOnlineRefreshTokens);
    }

    private ClientSessionTransferArgs() {}

    private ClientSessionTransferArgs(ClientSessionTransferArgs $) {
        this.allowRefreshToken = $.allowRefreshToken;
        this.allowedAuthenticationMethods = $.allowedAuthenticationMethods;
        this.canCreateSessionTransferToken = $.canCreateSessionTransferToken;
        this.enforceCascadeRevocation = $.enforceCascadeRevocation;
        this.enforceDeviceBinding = $.enforceDeviceBinding;
        this.enforceOnlineRefreshTokens = $.enforceOnlineRefreshTokens;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClientSessionTransferArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClientSessionTransferArgs $;

        public Builder() {
            $ = new ClientSessionTransferArgs();
        }

        public Builder(ClientSessionTransferArgs defaults) {
            $ = new ClientSessionTransferArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowRefreshToken Indicates whether the application is allowed to use a refresh token when using a session*transfer*token session.
         * 
         * @return builder
         * 
         */
        public Builder allowRefreshToken(@Nullable Output<Boolean> allowRefreshToken) {
            $.allowRefreshToken = allowRefreshToken;
            return this;
        }

        /**
         * @param allowRefreshToken Indicates whether the application is allowed to use a refresh token when using a session*transfer*token session.
         * 
         * @return builder
         * 
         */
        public Builder allowRefreshToken(Boolean allowRefreshToken) {
            return allowRefreshToken(Output.of(allowRefreshToken));
        }

        public Builder allowedAuthenticationMethods(@Nullable Output<List<String>> allowedAuthenticationMethods) {
            $.allowedAuthenticationMethods = allowedAuthenticationMethods;
            return this;
        }

        public Builder allowedAuthenticationMethods(List<String> allowedAuthenticationMethods) {
            return allowedAuthenticationMethods(Output.of(allowedAuthenticationMethods));
        }

        public Builder allowedAuthenticationMethods(String... allowedAuthenticationMethods) {
            return allowedAuthenticationMethods(List.of(allowedAuthenticationMethods));
        }

        /**
         * @param canCreateSessionTransferToken Indicates whether the application(Native app) can use the Token Exchange endpoint to create a session*transfer*token
         * 
         * @return builder
         * 
         */
        public Builder canCreateSessionTransferToken(@Nullable Output<Boolean> canCreateSessionTransferToken) {
            $.canCreateSessionTransferToken = canCreateSessionTransferToken;
            return this;
        }

        /**
         * @param canCreateSessionTransferToken Indicates whether the application(Native app) can use the Token Exchange endpoint to create a session*transfer*token
         * 
         * @return builder
         * 
         */
        public Builder canCreateSessionTransferToken(Boolean canCreateSessionTransferToken) {
            return canCreateSessionTransferToken(Output.of(canCreateSessionTransferToken));
        }

        /**
         * @param enforceCascadeRevocation Indicates whether Refresh Tokens created during a native-to-web session are tied to that session&#39;s lifetime. This determines if such refresh tokens should be automatically revoked when their corresponding sessions are.
         * 
         * @return builder
         * 
         */
        public Builder enforceCascadeRevocation(@Nullable Output<Boolean> enforceCascadeRevocation) {
            $.enforceCascadeRevocation = enforceCascadeRevocation;
            return this;
        }

        /**
         * @param enforceCascadeRevocation Indicates whether Refresh Tokens created during a native-to-web session are tied to that session&#39;s lifetime. This determines if such refresh tokens should be automatically revoked when their corresponding sessions are.
         * 
         * @return builder
         * 
         */
        public Builder enforceCascadeRevocation(Boolean enforceCascadeRevocation) {
            return enforceCascadeRevocation(Output.of(enforceCascadeRevocation));
        }

        /**
         * @param enforceDeviceBinding Configures the level of device binding enforced when a session*transfer*token is consumed. Can be one of `ip`, `asn` or `none`.
         * 
         * @return builder
         * 
         */
        public Builder enforceDeviceBinding(@Nullable Output<String> enforceDeviceBinding) {
            $.enforceDeviceBinding = enforceDeviceBinding;
            return this;
        }

        /**
         * @param enforceDeviceBinding Configures the level of device binding enforced when a session*transfer*token is consumed. Can be one of `ip`, `asn` or `none`.
         * 
         * @return builder
         * 
         */
        public Builder enforceDeviceBinding(String enforceDeviceBinding) {
            return enforceDeviceBinding(Output.of(enforceDeviceBinding));
        }

        /**
         * @param enforceOnlineRefreshTokens Indicates whether revoking the parent Refresh Token that initiated a Native to Web flow and was used to issue a Session Transfer Token should trigger a cascade revocation affecting its dependent child entities.
         * 
         * @return builder
         * 
         */
        public Builder enforceOnlineRefreshTokens(@Nullable Output<Boolean> enforceOnlineRefreshTokens) {
            $.enforceOnlineRefreshTokens = enforceOnlineRefreshTokens;
            return this;
        }

        /**
         * @param enforceOnlineRefreshTokens Indicates whether revoking the parent Refresh Token that initiated a Native to Web flow and was used to issue a Session Transfer Token should trigger a cascade revocation affecting its dependent child entities.
         * 
         * @return builder
         * 
         */
        public Builder enforceOnlineRefreshTokens(Boolean enforceOnlineRefreshTokens) {
            return enforceOnlineRefreshTokens(Output.of(enforceOnlineRefreshTokens));
        }

        public ClientSessionTransferArgs build() {
            return $;
        }
    }

}
