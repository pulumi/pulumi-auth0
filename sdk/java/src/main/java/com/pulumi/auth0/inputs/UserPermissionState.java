// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.auth0.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UserPermissionState extends com.pulumi.resources.ResourceArgs {

    public static final UserPermissionState Empty = new UserPermissionState();

    /**
     * Description of the permission.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the permission.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Name of the permission.
     * 
     */
    @Import(name="permission")
    private @Nullable Output<String> permission;

    /**
     * @return Name of the permission.
     * 
     */
    public Optional<Output<String>> permission() {
        return Optional.ofNullable(this.permission);
    }

    /**
     * Identifier of the resource server that the permission is associated with.
     * 
     */
    @Import(name="resourceServerIdentifier")
    private @Nullable Output<String> resourceServerIdentifier;

    /**
     * @return Identifier of the resource server that the permission is associated with.
     * 
     */
    public Optional<Output<String>> resourceServerIdentifier() {
        return Optional.ofNullable(this.resourceServerIdentifier);
    }

    /**
     * Name of the resource server that the permission is associated with.
     * 
     */
    @Import(name="resourceServerName")
    private @Nullable Output<String> resourceServerName;

    /**
     * @return Name of the resource server that the permission is associated with.
     * 
     */
    public Optional<Output<String>> resourceServerName() {
        return Optional.ofNullable(this.resourceServerName);
    }

    /**
     * ID of the user to associate the permission to.
     * 
     */
    @Import(name="userId")
    private @Nullable Output<String> userId;

    /**
     * @return ID of the user to associate the permission to.
     * 
     */
    public Optional<Output<String>> userId() {
        return Optional.ofNullable(this.userId);
    }

    private UserPermissionState() {}

    private UserPermissionState(UserPermissionState $) {
        this.description = $.description;
        this.permission = $.permission;
        this.resourceServerIdentifier = $.resourceServerIdentifier;
        this.resourceServerName = $.resourceServerName;
        this.userId = $.userId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UserPermissionState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UserPermissionState $;

        public Builder() {
            $ = new UserPermissionState();
        }

        public Builder(UserPermissionState defaults) {
            $ = new UserPermissionState(Objects.requireNonNull(defaults));
        }

        /**
         * @param description Description of the permission.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the permission.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param permission Name of the permission.
         * 
         * @return builder
         * 
         */
        public Builder permission(@Nullable Output<String> permission) {
            $.permission = permission;
            return this;
        }

        /**
         * @param permission Name of the permission.
         * 
         * @return builder
         * 
         */
        public Builder permission(String permission) {
            return permission(Output.of(permission));
        }

        /**
         * @param resourceServerIdentifier Identifier of the resource server that the permission is associated with.
         * 
         * @return builder
         * 
         */
        public Builder resourceServerIdentifier(@Nullable Output<String> resourceServerIdentifier) {
            $.resourceServerIdentifier = resourceServerIdentifier;
            return this;
        }

        /**
         * @param resourceServerIdentifier Identifier of the resource server that the permission is associated with.
         * 
         * @return builder
         * 
         */
        public Builder resourceServerIdentifier(String resourceServerIdentifier) {
            return resourceServerIdentifier(Output.of(resourceServerIdentifier));
        }

        /**
         * @param resourceServerName Name of the resource server that the permission is associated with.
         * 
         * @return builder
         * 
         */
        public Builder resourceServerName(@Nullable Output<String> resourceServerName) {
            $.resourceServerName = resourceServerName;
            return this;
        }

        /**
         * @param resourceServerName Name of the resource server that the permission is associated with.
         * 
         * @return builder
         * 
         */
        public Builder resourceServerName(String resourceServerName) {
            return resourceServerName(Output.of(resourceServerName));
        }

        /**
         * @param userId ID of the user to associate the permission to.
         * 
         * @return builder
         * 
         */
        public Builder userId(@Nullable Output<String> userId) {
            $.userId = userId;
            return this;
        }

        /**
         * @param userId ID of the user to associate the permission to.
         * 
         * @return builder
         * 
         */
        public Builder userId(String userId) {
            return userId(Output.of(userId));
        }

        public UserPermissionState build() {
            return $;
        }
    }

}
