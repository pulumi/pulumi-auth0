// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.auth0.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class NetworkAclRuleAction {
    /**
     * @return If true, allows the request. When using allow action, no other properties should be set.
     * 
     */
    private @Nullable Boolean allow;
    /**
     * @return If true, blocks the request. When using block action, no other properties should be set.
     * 
     */
    private @Nullable Boolean block;
    /**
     * @return If true, logs the request. When using log action, no other properties should be set.
     * 
     */
    private @Nullable Boolean log;
    /**
     * @return If true, redirects the request. When using redirect action, redirect_uri must also be specified.
     * 
     */
    private @Nullable Boolean redirect;
    /**
     * @return The URI to redirect to when redirect is true. Required when redirect is true. Must be between 1 and 2000 characters.
     * 
     */
    private @Nullable String redirectUri;

    private NetworkAclRuleAction() {}
    /**
     * @return If true, allows the request. When using allow action, no other properties should be set.
     * 
     */
    public Optional<Boolean> allow() {
        return Optional.ofNullable(this.allow);
    }
    /**
     * @return If true, blocks the request. When using block action, no other properties should be set.
     * 
     */
    public Optional<Boolean> block() {
        return Optional.ofNullable(this.block);
    }
    /**
     * @return If true, logs the request. When using log action, no other properties should be set.
     * 
     */
    public Optional<Boolean> log() {
        return Optional.ofNullable(this.log);
    }
    /**
     * @return If true, redirects the request. When using redirect action, redirect_uri must also be specified.
     * 
     */
    public Optional<Boolean> redirect() {
        return Optional.ofNullable(this.redirect);
    }
    /**
     * @return The URI to redirect to when redirect is true. Required when redirect is true. Must be between 1 and 2000 characters.
     * 
     */
    public Optional<String> redirectUri() {
        return Optional.ofNullable(this.redirectUri);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NetworkAclRuleAction defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean allow;
        private @Nullable Boolean block;
        private @Nullable Boolean log;
        private @Nullable Boolean redirect;
        private @Nullable String redirectUri;
        public Builder() {}
        public Builder(NetworkAclRuleAction defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allow = defaults.allow;
    	      this.block = defaults.block;
    	      this.log = defaults.log;
    	      this.redirect = defaults.redirect;
    	      this.redirectUri = defaults.redirectUri;
        }

        @CustomType.Setter
        public Builder allow(@Nullable Boolean allow) {

            this.allow = allow;
            return this;
        }
        @CustomType.Setter
        public Builder block(@Nullable Boolean block) {

            this.block = block;
            return this;
        }
        @CustomType.Setter
        public Builder log(@Nullable Boolean log) {

            this.log = log;
            return this;
        }
        @CustomType.Setter
        public Builder redirect(@Nullable Boolean redirect) {

            this.redirect = redirect;
            return this;
        }
        @CustomType.Setter
        public Builder redirectUri(@Nullable String redirectUri) {

            this.redirectUri = redirectUri;
            return this;
        }
        public NetworkAclRuleAction build() {
            final var _resultValue = new NetworkAclRuleAction();
            _resultValue.allow = allow;
            _resultValue.block = block;
            _resultValue.log = log;
            _resultValue.redirect = redirect;
            _resultValue.redirectUri = redirectUri;
            return _resultValue;
        }
    }
}
