// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.auth0;

import com.pulumi.auth0.ResourceServerArgs;
import com.pulumi.auth0.Utilities;
import com.pulumi.auth0.inputs.ResourceServerState;
import com.pulumi.auth0.outputs.ResourceServerAuthorizationDetail;
import com.pulumi.auth0.outputs.ResourceServerProofOfPossession;
import com.pulumi.auth0.outputs.ResourceServerSubjectTypeAuthorization;
import com.pulumi.auth0.outputs.ResourceServerTokenEncryption;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * With this resource, you can set up APIs that can be consumed from your authorized applications.
 * 
 * ## Example Usage
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.auth0.ResourceServer;
 * import com.pulumi.auth0.ResourceServerArgs;
 * import com.pulumi.auth0.inputs.ResourceServerTokenEncryptionArgs;
 * import com.pulumi.auth0.inputs.ResourceServerTokenEncryptionEncryptionKeyArgs;
 * import com.pulumi.auth0.inputs.ResourceServerAuthorizationDetailArgs;
 * import com.pulumi.auth0.inputs.ResourceServerProofOfPossessionArgs;
 * import com.pulumi.auth0.inputs.ResourceServerSubjectTypeAuthorizationArgs;
 * import com.pulumi.auth0.inputs.ResourceServerSubjectTypeAuthorizationUserArgs;
 * import com.pulumi.auth0.inputs.ResourceServerSubjectTypeAuthorizationClientArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var myResourceServer = new ResourceServer("myResourceServer", ResourceServerArgs.builder()
 *             .name("Example Resource Server (Managed by Terraform)")
 *             .identifier("https://api.example.com")
 *             .signingAlg("RS256")
 *             .allowOfflineAccess(true)
 *             .tokenLifetime(8600)
 *             .skipConsentForVerifiableFirstPartyClients(true)
 *             .consentPolicy("transactional-authorization-with-mfa")
 *             .tokenEncryption(ResourceServerTokenEncryptionArgs.builder()
 *                 .format("compact-nested-jwe")
 *                 .encryptionKey(ResourceServerTokenEncryptionEncryptionKeyArgs.builder()
 *                     .name("keyname")
 *                     .algorithm("RSA-OAEP-256")
 *                     .pem("""
 * -----BEGIN CERTIFICATE-----
 * MIIFWDCCA0ACCQDXqpBo3R...G9w0BAQsFADBuMQswCQYDVQQGEwJl
 * -----END CERTIFICATE-----
 *                     """)
 *                     .build())
 *                 .build())
 *             .authorizationDetails(            
 *                 ResourceServerAuthorizationDetailArgs.builder()
 *                     .type("payment")
 *                     .build(),
 *                 ResourceServerAuthorizationDetailArgs.builder()
 *                     .type("non-payment")
 *                     .build())
 *             .proofOfPossession(ResourceServerProofOfPossessionArgs.builder()
 *                 .mechanism("mtls")
 *                 .required(true)
 *                 .build())
 *             .subjectTypeAuthorization(ResourceServerSubjectTypeAuthorizationArgs.builder()
 *                 .user(ResourceServerSubjectTypeAuthorizationUserArgs.builder()
 *                     .policy("allow_all")
 *                     .build())
 *                 .client(ResourceServerSubjectTypeAuthorizationClientArgs.builder()
 *                     .policy("require_client_grant")
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ## Import
 * 
 * Existing resource servers can be imported using their ID.
 * 
 * Example:
 * 
 * ```sh
 * $ pulumi import auth0:index/resourceServer:ResourceServer my_resource_server &#34;XXXXXXXXXXXXXXXXXXXXXXX&#34;
 * ```
 * 
 */
@ResourceType(type="auth0:index/resourceServer:ResourceServer")
public class ResourceServer extends com.pulumi.resources.CustomResource {
    /**
     * Indicates whether refresh tokens can be issued for this resource server.
     * 
     */
    @Export(name="allowOfflineAccess", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> allowOfflineAccess;

    /**
     * @return Indicates whether refresh tokens can be issued for this resource server.
     * 
     */
    public Output<Optional<Boolean>> allowOfflineAccess() {
        return Codegen.optional(this.allowOfflineAccess);
    }
    /**
     * Authorization details for this resource server.
     * 
     */
    @Export(name="authorizationDetails", refs={List.class,ResourceServerAuthorizationDetail.class}, tree="[0,1]")
    private Output<List<ResourceServerAuthorizationDetail>> authorizationDetails;

    /**
     * @return Authorization details for this resource server.
     * 
     */
    public Output<List<ResourceServerAuthorizationDetail>> authorizationDetails() {
        return this.authorizationDetails;
    }
    /**
     * The ID of the client associated with this resource server. If a client has been created and linked to this resource server, this field will be populated with that client&#39;s ID.
     * 
     */
    @Export(name="clientId", refs={String.class}, tree="[0]")
    private Output<String> clientId;

    /**
     * @return The ID of the client associated with this resource server. If a client has been created and linked to this resource server, this field will be populated with that client&#39;s ID.
     * 
     */
    public Output<String> clientId() {
        return this.clientId;
    }
    /**
     * Consent policy for this resource server. Options include `transactional-authorization-with-mfa`, or `null` to disable.
     * 
     */
    @Export(name="consentPolicy", refs={String.class}, tree="[0]")
    private Output<String> consentPolicy;

    /**
     * @return Consent policy for this resource server. Options include `transactional-authorization-with-mfa`, or `null` to disable.
     * 
     */
    public Output<String> consentPolicy() {
        return this.consentPolicy;
    }
    /**
     * If this setting is enabled, RBAC authorization policies will be enforced for this API. Role and permission assignments will be evaluated during the login transaction.
     * 
     */
    @Export(name="enforcePolicies", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> enforcePolicies;

    /**
     * @return If this setting is enabled, RBAC authorization policies will be enforced for this API. Role and permission assignments will be evaluated during the login transaction.
     * 
     */
    public Output<Boolean> enforcePolicies() {
        return this.enforcePolicies;
    }
    /**
     * Unique identifier for the resource server. Used as the audience parameter for authorization calls. Cannot be changed once set.
     * 
     */
    @Export(name="identifier", refs={String.class}, tree="[0]")
    private Output<String> identifier;

    /**
     * @return Unique identifier for the resource server. Used as the audience parameter for authorization calls. Cannot be changed once set.
     * 
     */
    public Output<String> identifier() {
        return this.identifier;
    }
    /**
     * Friendly name for the resource server. Cannot include `&lt;` or `&gt;` characters.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Friendly name for the resource server. Cannot include `&lt;` or `&gt;` characters.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Configuration settings for proof-of-possession for this resource server.
     * 
     */
    @Export(name="proofOfPossession", refs={ResourceServerProofOfPossession.class}, tree="[0]")
    private Output<ResourceServerProofOfPossession> proofOfPossession;

    /**
     * @return Configuration settings for proof-of-possession for this resource server.
     * 
     */
    public Output<ResourceServerProofOfPossession> proofOfPossession() {
        return this.proofOfPossession;
    }
    /**
     * Algorithm used to sign JWTs. Options include `HS256`, `RS256`, and `PS256`.
     * 
     */
    @Export(name="signingAlg", refs={String.class}, tree="[0]")
    private Output<String> signingAlg;

    /**
     * @return Algorithm used to sign JWTs. Options include `HS256`, `RS256`, and `PS256`.
     * 
     */
    public Output<String> signingAlg() {
        return this.signingAlg;
    }
    /**
     * Secret used to sign tokens when using symmetric algorithms (HS256).
     * 
     */
    @Export(name="signingSecret", refs={String.class}, tree="[0]")
    private Output<String> signingSecret;

    /**
     * @return Secret used to sign tokens when using symmetric algorithms (HS256).
     * 
     */
    public Output<String> signingSecret() {
        return this.signingSecret;
    }
    /**
     * Indicates whether to skip user consent for applications flagged as first party.
     * 
     */
    @Export(name="skipConsentForVerifiableFirstPartyClients", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> skipConsentForVerifiableFirstPartyClients;

    /**
     * @return Indicates whether to skip user consent for applications flagged as first party.
     * 
     */
    public Output<Boolean> skipConsentForVerifiableFirstPartyClients() {
        return this.skipConsentForVerifiableFirstPartyClients;
    }
    /**
     * Authorization policies for user and client flows.
     * 
     */
    @Export(name="subjectTypeAuthorization", refs={ResourceServerSubjectTypeAuthorization.class}, tree="[0]")
    private Output<ResourceServerSubjectTypeAuthorization> subjectTypeAuthorization;

    /**
     * @return Authorization policies for user and client flows.
     * 
     */
    public Output<ResourceServerSubjectTypeAuthorization> subjectTypeAuthorization() {
        return this.subjectTypeAuthorization;
    }
    /**
     * Dialect of access tokens that should be issued for this resource server. Options include `accessToken`, `rfc9068Profile`, `accessTokenAuthz`, and `rfc9068ProfileAuthz`. `accessToken` is a JWT containing standard Auth0 claims. `rfc9068Profile` is a JWT conforming to the IETF JWT Access Token Profile. `accessTokenAuthz` is a JWT containing standard Auth0 claims, including RBAC permissions claims. `rfc9068ProfileAuthz` is a JWT conforming to the IETF JWT Access Token Profile, including RBAC permissions claims. RBAC permissions claims are available if RBAC (`enforcePolicies`) is enabled for this API. For more details, refer to [Access Token Profiles](https://auth0.com/docs/secure/tokens/access-tokens/access-token-profiles).
     * 
     */
    @Export(name="tokenDialect", refs={String.class}, tree="[0]")
    private Output<String> tokenDialect;

    /**
     * @return Dialect of access tokens that should be issued for this resource server. Options include `accessToken`, `rfc9068Profile`, `accessTokenAuthz`, and `rfc9068ProfileAuthz`. `accessToken` is a JWT containing standard Auth0 claims. `rfc9068Profile` is a JWT conforming to the IETF JWT Access Token Profile. `accessTokenAuthz` is a JWT containing standard Auth0 claims, including RBAC permissions claims. `rfc9068ProfileAuthz` is a JWT conforming to the IETF JWT Access Token Profile, including RBAC permissions claims. RBAC permissions claims are available if RBAC (`enforcePolicies`) is enabled for this API. For more details, refer to [Access Token Profiles](https://auth0.com/docs/secure/tokens/access-tokens/access-token-profiles).
     * 
     */
    public Output<String> tokenDialect() {
        return this.tokenDialect;
    }
    /**
     * Configuration for JSON Web Encryption(JWE) of tokens for this resource server.
     * 
     */
    @Export(name="tokenEncryption", refs={ResourceServerTokenEncryption.class}, tree="[0]")
    private Output<ResourceServerTokenEncryption> tokenEncryption;

    /**
     * @return Configuration for JSON Web Encryption(JWE) of tokens for this resource server.
     * 
     */
    public Output<ResourceServerTokenEncryption> tokenEncryption() {
        return this.tokenEncryption;
    }
    /**
     * Number of seconds during which access tokens issued for this resource server from the token endpoint remain valid.
     * 
     */
    @Export(name="tokenLifetime", refs={Integer.class}, tree="[0]")
    private Output<Integer> tokenLifetime;

    /**
     * @return Number of seconds during which access tokens issued for this resource server from the token endpoint remain valid.
     * 
     */
    public Output<Integer> tokenLifetime() {
        return this.tokenLifetime;
    }
    /**
     * Number of seconds during which access tokens issued for this resource server via implicit or hybrid flows remain valid. Cannot be greater than the `tokenLifetime` value.
     * 
     */
    @Export(name="tokenLifetimeForWeb", refs={Integer.class}, tree="[0]")
    private Output<Integer> tokenLifetimeForWeb;

    /**
     * @return Number of seconds during which access tokens issued for this resource server via implicit or hybrid flows remain valid. Cannot be greater than the `tokenLifetime` value.
     * 
     */
    public Output<Integer> tokenLifetimeForWeb() {
        return this.tokenLifetimeForWeb;
    }
    /**
     * URL from which to retrieve JWKs for this resource server. Used for verifying the JWT sent to Auth0 for token introspection.
     * 
     */
    @Export(name="verificationLocation", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> verificationLocation;

    /**
     * @return URL from which to retrieve JWKs for this resource server. Used for verifying the JWT sent to Auth0 for token introspection.
     * 
     */
    public Output<Optional<String>> verificationLocation() {
        return Codegen.optional(this.verificationLocation);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ResourceServer(java.lang.String name) {
        this(name, ResourceServerArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ResourceServer(java.lang.String name, ResourceServerArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ResourceServer(java.lang.String name, ResourceServerArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("auth0:index/resourceServer:ResourceServer", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private ResourceServer(java.lang.String name, Output<java.lang.String> id, @Nullable ResourceServerState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("auth0:index/resourceServer:ResourceServer", name, state, makeResourceOptions(options, id), false);
    }

    private static ResourceServerArgs makeArgs(ResourceServerArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? ResourceServerArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ResourceServer get(java.lang.String name, Output<java.lang.String> id, @Nullable ResourceServerState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ResourceServer(name, id, state, options);
    }
}
