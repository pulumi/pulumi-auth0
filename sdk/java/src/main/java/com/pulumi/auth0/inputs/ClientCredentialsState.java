// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.auth0.inputs;

import com.pulumi.auth0.inputs.ClientCredentialsPrivateKeyJwtArgs;
import com.pulumi.auth0.inputs.ClientCredentialsSelfSignedTlsClientAuthArgs;
import com.pulumi.auth0.inputs.ClientCredentialsSignedRequestObjectArgs;
import com.pulumi.auth0.inputs.ClientCredentialsTlsClientAuthArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ClientCredentialsState extends com.pulumi.resources.ResourceArgs {

    public static final ClientCredentialsState Empty = new ClientCredentialsState();

    /**
     * Configure the method to use when making requests to any endpoint that requires this client to authenticate. Options include `none` (public client without a client secret), `clientSecretPost` (confidential client using HTTP POST parameters), `clientSecretBasic` (confidential client using HTTP Basic), `privateKeyJwt` (confidential client using a Private Key JWT), `tlsClientAuth` (confidential client using CA-based mTLS authentication), `selfSignedTlsClientAuth` (confidential client using mTLS authentication utilizing a self-signed certificate).
     * 
     */
    @Import(name="authenticationMethod")
    private @Nullable Output<String> authenticationMethod;

    /**
     * @return Configure the method to use when making requests to any endpoint that requires this client to authenticate. Options include `none` (public client without a client secret), `clientSecretPost` (confidential client using HTTP POST parameters), `clientSecretBasic` (confidential client using HTTP Basic), `privateKeyJwt` (confidential client using a Private Key JWT), `tlsClientAuth` (confidential client using CA-based mTLS authentication), `selfSignedTlsClientAuth` (confidential client using mTLS authentication utilizing a self-signed certificate).
     * 
     */
    public Optional<Output<String>> authenticationMethod() {
        return Optional.ofNullable(this.authenticationMethod);
    }

    /**
     * The ID of the client for which to configure the authentication method.
     * 
     */
    @Import(name="clientId")
    private @Nullable Output<String> clientId;

    /**
     * @return The ID of the client for which to configure the authentication method.
     * 
     */
    public Optional<Output<String>> clientId() {
        return Optional.ofNullable(this.clientId);
    }

    @Import(name="clientSecret")
    private @Nullable Output<String> clientSecret;

    public Optional<Output<String>> clientSecret() {
        return Optional.ofNullable(this.clientSecret);
    }

    /**
     * Defines `privateKeyJwt` client authentication method.
     * 
     */
    @Import(name="privateKeyJwt")
    private @Nullable Output<ClientCredentialsPrivateKeyJwtArgs> privateKeyJwt;

    /**
     * @return Defines `privateKeyJwt` client authentication method.
     * 
     */
    public Optional<Output<ClientCredentialsPrivateKeyJwtArgs>> privateKeyJwt() {
        return Optional.ofNullable(this.privateKeyJwt);
    }

    /**
     * Defines `tlsClientAuth` client authentication method.
     * 
     */
    @Import(name="selfSignedTlsClientAuth")
    private @Nullable Output<ClientCredentialsSelfSignedTlsClientAuthArgs> selfSignedTlsClientAuth;

    /**
     * @return Defines `tlsClientAuth` client authentication method.
     * 
     */
    public Optional<Output<ClientCredentialsSelfSignedTlsClientAuthArgs>> selfSignedTlsClientAuth() {
        return Optional.ofNullable(this.selfSignedTlsClientAuth);
    }

    /**
     * Configuration for JWT-secured Authorization Requests(JAR).
     * 
     */
    @Import(name="signedRequestObject")
    private @Nullable Output<ClientCredentialsSignedRequestObjectArgs> signedRequestObject;

    /**
     * @return Configuration for JWT-secured Authorization Requests(JAR).
     * 
     */
    public Optional<Output<ClientCredentialsSignedRequestObjectArgs>> signedRequestObject() {
        return Optional.ofNullable(this.signedRequestObject);
    }

    /**
     * Defines `tlsClientAuth` client authentication method.
     * 
     */
    @Import(name="tlsClientAuth")
    private @Nullable Output<ClientCredentialsTlsClientAuthArgs> tlsClientAuth;

    /**
     * @return Defines `tlsClientAuth` client authentication method.
     * 
     */
    public Optional<Output<ClientCredentialsTlsClientAuthArgs>> tlsClientAuth() {
        return Optional.ofNullable(this.tlsClientAuth);
    }

    private ClientCredentialsState() {}

    private ClientCredentialsState(ClientCredentialsState $) {
        this.authenticationMethod = $.authenticationMethod;
        this.clientId = $.clientId;
        this.clientSecret = $.clientSecret;
        this.privateKeyJwt = $.privateKeyJwt;
        this.selfSignedTlsClientAuth = $.selfSignedTlsClientAuth;
        this.signedRequestObject = $.signedRequestObject;
        this.tlsClientAuth = $.tlsClientAuth;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClientCredentialsState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClientCredentialsState $;

        public Builder() {
            $ = new ClientCredentialsState();
        }

        public Builder(ClientCredentialsState defaults) {
            $ = new ClientCredentialsState(Objects.requireNonNull(defaults));
        }

        /**
         * @param authenticationMethod Configure the method to use when making requests to any endpoint that requires this client to authenticate. Options include `none` (public client without a client secret), `clientSecretPost` (confidential client using HTTP POST parameters), `clientSecretBasic` (confidential client using HTTP Basic), `privateKeyJwt` (confidential client using a Private Key JWT), `tlsClientAuth` (confidential client using CA-based mTLS authentication), `selfSignedTlsClientAuth` (confidential client using mTLS authentication utilizing a self-signed certificate).
         * 
         * @return builder
         * 
         */
        public Builder authenticationMethod(@Nullable Output<String> authenticationMethod) {
            $.authenticationMethod = authenticationMethod;
            return this;
        }

        /**
         * @param authenticationMethod Configure the method to use when making requests to any endpoint that requires this client to authenticate. Options include `none` (public client without a client secret), `clientSecretPost` (confidential client using HTTP POST parameters), `clientSecretBasic` (confidential client using HTTP Basic), `privateKeyJwt` (confidential client using a Private Key JWT), `tlsClientAuth` (confidential client using CA-based mTLS authentication), `selfSignedTlsClientAuth` (confidential client using mTLS authentication utilizing a self-signed certificate).
         * 
         * @return builder
         * 
         */
        public Builder authenticationMethod(String authenticationMethod) {
            return authenticationMethod(Output.of(authenticationMethod));
        }

        /**
         * @param clientId The ID of the client for which to configure the authentication method.
         * 
         * @return builder
         * 
         */
        public Builder clientId(@Nullable Output<String> clientId) {
            $.clientId = clientId;
            return this;
        }

        /**
         * @param clientId The ID of the client for which to configure the authentication method.
         * 
         * @return builder
         * 
         */
        public Builder clientId(String clientId) {
            return clientId(Output.of(clientId));
        }

        public Builder clientSecret(@Nullable Output<String> clientSecret) {
            $.clientSecret = clientSecret;
            return this;
        }

        public Builder clientSecret(String clientSecret) {
            return clientSecret(Output.of(clientSecret));
        }

        /**
         * @param privateKeyJwt Defines `privateKeyJwt` client authentication method.
         * 
         * @return builder
         * 
         */
        public Builder privateKeyJwt(@Nullable Output<ClientCredentialsPrivateKeyJwtArgs> privateKeyJwt) {
            $.privateKeyJwt = privateKeyJwt;
            return this;
        }

        /**
         * @param privateKeyJwt Defines `privateKeyJwt` client authentication method.
         * 
         * @return builder
         * 
         */
        public Builder privateKeyJwt(ClientCredentialsPrivateKeyJwtArgs privateKeyJwt) {
            return privateKeyJwt(Output.of(privateKeyJwt));
        }

        /**
         * @param selfSignedTlsClientAuth Defines `tlsClientAuth` client authentication method.
         * 
         * @return builder
         * 
         */
        public Builder selfSignedTlsClientAuth(@Nullable Output<ClientCredentialsSelfSignedTlsClientAuthArgs> selfSignedTlsClientAuth) {
            $.selfSignedTlsClientAuth = selfSignedTlsClientAuth;
            return this;
        }

        /**
         * @param selfSignedTlsClientAuth Defines `tlsClientAuth` client authentication method.
         * 
         * @return builder
         * 
         */
        public Builder selfSignedTlsClientAuth(ClientCredentialsSelfSignedTlsClientAuthArgs selfSignedTlsClientAuth) {
            return selfSignedTlsClientAuth(Output.of(selfSignedTlsClientAuth));
        }

        /**
         * @param signedRequestObject Configuration for JWT-secured Authorization Requests(JAR).
         * 
         * @return builder
         * 
         */
        public Builder signedRequestObject(@Nullable Output<ClientCredentialsSignedRequestObjectArgs> signedRequestObject) {
            $.signedRequestObject = signedRequestObject;
            return this;
        }

        /**
         * @param signedRequestObject Configuration for JWT-secured Authorization Requests(JAR).
         * 
         * @return builder
         * 
         */
        public Builder signedRequestObject(ClientCredentialsSignedRequestObjectArgs signedRequestObject) {
            return signedRequestObject(Output.of(signedRequestObject));
        }

        /**
         * @param tlsClientAuth Defines `tlsClientAuth` client authentication method.
         * 
         * @return builder
         * 
         */
        public Builder tlsClientAuth(@Nullable Output<ClientCredentialsTlsClientAuthArgs> tlsClientAuth) {
            $.tlsClientAuth = tlsClientAuth;
            return this;
        }

        /**
         * @param tlsClientAuth Defines `tlsClientAuth` client authentication method.
         * 
         * @return builder
         * 
         */
        public Builder tlsClientAuth(ClientCredentialsTlsClientAuthArgs tlsClientAuth) {
            return tlsClientAuth(Output.of(tlsClientAuth));
        }

        public ClientCredentialsState build() {
            return $;
        }
    }

}
