// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.auth0.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConnectionKeysState extends com.pulumi.resources.ResourceArgs {

    public static final ConnectionKeysState Empty = new ConnectionKeysState();

    /**
     * The signing key algorithm.
     * 
     */
    @Import(name="algorithm")
    private @Nullable Output<String> algorithm;

    /**
     * @return The signing key algorithm.
     * 
     */
    public Optional<Output<String>> algorithm() {
        return Optional.ofNullable(this.algorithm);
    }

    /**
     * The public certificate of the signing key.
     * 
     */
    @Import(name="cert")
    private @Nullable Output<String> cert;

    /**
     * @return The public certificate of the signing key.
     * 
     */
    public Optional<Output<String>> cert() {
        return Optional.ofNullable(this.cert);
    }

    @Import(name="connectionId")
    private @Nullable Output<String> connectionId;

    public Optional<Output<String>> connectionId() {
        return Optional.ofNullable(this.connectionId);
    }

    /**
     * True if the key is the current key.
     * 
     */
    @Import(name="current")
    private @Nullable Output<Boolean> current;

    /**
     * @return True if the key is the current key.
     * 
     */
    public Optional<Output<Boolean>> current() {
        return Optional.ofNullable(this.current);
    }

    /**
     * The date and time when the key became the current key.
     * 
     */
    @Import(name="currentSince")
    private @Nullable Output<String> currentSince;

    /**
     * @return The date and time when the key became the current key.
     * 
     */
    public Optional<Output<String>> currentSince() {
        return Optional.ofNullable(this.currentSince);
    }

    /**
     * The certificate fingerprint.
     * 
     */
    @Import(name="fingerprint")
    private @Nullable Output<String> fingerprint;

    /**
     * @return The certificate fingerprint.
     * 
     */
    public Optional<Output<String>> fingerprint() {
        return Optional.ofNullable(this.fingerprint);
    }

    /**
     * The signing key use, whether for encryption or signing.
     * 
     */
    @Import(name="keyUse")
    private @Nullable Output<String> keyUse;

    /**
     * @return The signing key use, whether for encryption or signing.
     * 
     */
    public Optional<Output<String>> keyUse() {
        return Optional.ofNullable(this.keyUse);
    }

    /**
     * The key ID of the signing key.
     * 
     */
    @Import(name="kid")
    private @Nullable Output<String> kid;

    /**
     * @return The key ID of the signing key.
     * 
     */
    public Optional<Output<String>> kid() {
        return Optional.ofNullable(this.kid);
    }

    /**
     * True if the key is the next key.
     * 
     */
    @Import(name="next")
    private @Nullable Output<Boolean> next;

    /**
     * @return True if the key is the next key.
     * 
     */
    public Optional<Output<Boolean>> next() {
        return Optional.ofNullable(this.next);
    }

    /**
     * The public certificate of the signing key in PKCS7 format.
     * 
     */
    @Import(name="pkcs")
    private @Nullable Output<String> pkcs;

    /**
     * @return The public certificate of the signing key in PKCS7 format.
     * 
     */
    public Optional<Output<String>> pkcs() {
        return Optional.ofNullable(this.pkcs);
    }

    /**
     * True if the key is the previous key.
     * 
     */
    @Import(name="previous")
    private @Nullable Output<Boolean> previous;

    /**
     * @return True if the key is the previous key.
     * 
     */
    public Optional<Output<Boolean>> previous() {
        return Optional.ofNullable(this.previous);
    }

    /**
     * The subject distinguished name (DN) of the certificate.
     * 
     */
    @Import(name="subjectDn")
    private @Nullable Output<String> subjectDn;

    /**
     * @return The subject distinguished name (DN) of the certificate.
     * 
     */
    public Optional<Output<String>> subjectDn() {
        return Optional.ofNullable(this.subjectDn);
    }

    /**
     * The certificate thumbprint.
     * 
     */
    @Import(name="thumbprint")
    private @Nullable Output<String> thumbprint;

    /**
     * @return The certificate thumbprint.
     * 
     */
    public Optional<Output<String>> thumbprint() {
        return Optional.ofNullable(this.thumbprint);
    }

    /**
     * This is an arbitrary map, which when edited shall perform rotation of keys for the corresponding connection. It can host keys like version, timestamp of last rotation etc.The field has no association with API
     * 
     */
    @Import(name="triggers")
    private @Nullable Output<Map<String,String>> triggers;

    /**
     * @return This is an arbitrary map, which when edited shall perform rotation of keys for the corresponding connection. It can host keys like version, timestamp of last rotation etc.The field has no association with API
     * 
     */
    public Optional<Output<Map<String,String>>> triggers() {
        return Optional.ofNullable(this.triggers);
    }

    private ConnectionKeysState() {}

    private ConnectionKeysState(ConnectionKeysState $) {
        this.algorithm = $.algorithm;
        this.cert = $.cert;
        this.connectionId = $.connectionId;
        this.current = $.current;
        this.currentSince = $.currentSince;
        this.fingerprint = $.fingerprint;
        this.keyUse = $.keyUse;
        this.kid = $.kid;
        this.next = $.next;
        this.pkcs = $.pkcs;
        this.previous = $.previous;
        this.subjectDn = $.subjectDn;
        this.thumbprint = $.thumbprint;
        this.triggers = $.triggers;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectionKeysState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectionKeysState $;

        public Builder() {
            $ = new ConnectionKeysState();
        }

        public Builder(ConnectionKeysState defaults) {
            $ = new ConnectionKeysState(Objects.requireNonNull(defaults));
        }

        /**
         * @param algorithm The signing key algorithm.
         * 
         * @return builder
         * 
         */
        public Builder algorithm(@Nullable Output<String> algorithm) {
            $.algorithm = algorithm;
            return this;
        }

        /**
         * @param algorithm The signing key algorithm.
         * 
         * @return builder
         * 
         */
        public Builder algorithm(String algorithm) {
            return algorithm(Output.of(algorithm));
        }

        /**
         * @param cert The public certificate of the signing key.
         * 
         * @return builder
         * 
         */
        public Builder cert(@Nullable Output<String> cert) {
            $.cert = cert;
            return this;
        }

        /**
         * @param cert The public certificate of the signing key.
         * 
         * @return builder
         * 
         */
        public Builder cert(String cert) {
            return cert(Output.of(cert));
        }

        public Builder connectionId(@Nullable Output<String> connectionId) {
            $.connectionId = connectionId;
            return this;
        }

        public Builder connectionId(String connectionId) {
            return connectionId(Output.of(connectionId));
        }

        /**
         * @param current True if the key is the current key.
         * 
         * @return builder
         * 
         */
        public Builder current(@Nullable Output<Boolean> current) {
            $.current = current;
            return this;
        }

        /**
         * @param current True if the key is the current key.
         * 
         * @return builder
         * 
         */
        public Builder current(Boolean current) {
            return current(Output.of(current));
        }

        /**
         * @param currentSince The date and time when the key became the current key.
         * 
         * @return builder
         * 
         */
        public Builder currentSince(@Nullable Output<String> currentSince) {
            $.currentSince = currentSince;
            return this;
        }

        /**
         * @param currentSince The date and time when the key became the current key.
         * 
         * @return builder
         * 
         */
        public Builder currentSince(String currentSince) {
            return currentSince(Output.of(currentSince));
        }

        /**
         * @param fingerprint The certificate fingerprint.
         * 
         * @return builder
         * 
         */
        public Builder fingerprint(@Nullable Output<String> fingerprint) {
            $.fingerprint = fingerprint;
            return this;
        }

        /**
         * @param fingerprint The certificate fingerprint.
         * 
         * @return builder
         * 
         */
        public Builder fingerprint(String fingerprint) {
            return fingerprint(Output.of(fingerprint));
        }

        /**
         * @param keyUse The signing key use, whether for encryption or signing.
         * 
         * @return builder
         * 
         */
        public Builder keyUse(@Nullable Output<String> keyUse) {
            $.keyUse = keyUse;
            return this;
        }

        /**
         * @param keyUse The signing key use, whether for encryption or signing.
         * 
         * @return builder
         * 
         */
        public Builder keyUse(String keyUse) {
            return keyUse(Output.of(keyUse));
        }

        /**
         * @param kid The key ID of the signing key.
         * 
         * @return builder
         * 
         */
        public Builder kid(@Nullable Output<String> kid) {
            $.kid = kid;
            return this;
        }

        /**
         * @param kid The key ID of the signing key.
         * 
         * @return builder
         * 
         */
        public Builder kid(String kid) {
            return kid(Output.of(kid));
        }

        /**
         * @param next True if the key is the next key.
         * 
         * @return builder
         * 
         */
        public Builder next(@Nullable Output<Boolean> next) {
            $.next = next;
            return this;
        }

        /**
         * @param next True if the key is the next key.
         * 
         * @return builder
         * 
         */
        public Builder next(Boolean next) {
            return next(Output.of(next));
        }

        /**
         * @param pkcs The public certificate of the signing key in PKCS7 format.
         * 
         * @return builder
         * 
         */
        public Builder pkcs(@Nullable Output<String> pkcs) {
            $.pkcs = pkcs;
            return this;
        }

        /**
         * @param pkcs The public certificate of the signing key in PKCS7 format.
         * 
         * @return builder
         * 
         */
        public Builder pkcs(String pkcs) {
            return pkcs(Output.of(pkcs));
        }

        /**
         * @param previous True if the key is the previous key.
         * 
         * @return builder
         * 
         */
        public Builder previous(@Nullable Output<Boolean> previous) {
            $.previous = previous;
            return this;
        }

        /**
         * @param previous True if the key is the previous key.
         * 
         * @return builder
         * 
         */
        public Builder previous(Boolean previous) {
            return previous(Output.of(previous));
        }

        /**
         * @param subjectDn The subject distinguished name (DN) of the certificate.
         * 
         * @return builder
         * 
         */
        public Builder subjectDn(@Nullable Output<String> subjectDn) {
            $.subjectDn = subjectDn;
            return this;
        }

        /**
         * @param subjectDn The subject distinguished name (DN) of the certificate.
         * 
         * @return builder
         * 
         */
        public Builder subjectDn(String subjectDn) {
            return subjectDn(Output.of(subjectDn));
        }

        /**
         * @param thumbprint The certificate thumbprint.
         * 
         * @return builder
         * 
         */
        public Builder thumbprint(@Nullable Output<String> thumbprint) {
            $.thumbprint = thumbprint;
            return this;
        }

        /**
         * @param thumbprint The certificate thumbprint.
         * 
         * @return builder
         * 
         */
        public Builder thumbprint(String thumbprint) {
            return thumbprint(Output.of(thumbprint));
        }

        /**
         * @param triggers This is an arbitrary map, which when edited shall perform rotation of keys for the corresponding connection. It can host keys like version, timestamp of last rotation etc.The field has no association with API
         * 
         * @return builder
         * 
         */
        public Builder triggers(@Nullable Output<Map<String,String>> triggers) {
            $.triggers = triggers;
            return this;
        }

        /**
         * @param triggers This is an arbitrary map, which when edited shall perform rotation of keys for the corresponding connection. It can host keys like version, timestamp of last rotation etc.The field has no association with API
         * 
         * @return builder
         * 
         */
        public Builder triggers(Map<String,String> triggers) {
            return triggers(Output.of(triggers));
        }

        public ConnectionKeysState build() {
            return $;
        }
    }

}
