// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.auth0.outputs;

import com.pulumi.auth0.outputs.ConnectionOptionsGatewayAuthentication;
import com.pulumi.auth0.outputs.ConnectionOptionsIdpInitiated;
import com.pulumi.auth0.outputs.ConnectionOptionsMfa;
import com.pulumi.auth0.outputs.ConnectionOptionsPasswordComplexityOptions;
import com.pulumi.auth0.outputs.ConnectionOptionsPasswordDictionary;
import com.pulumi.auth0.outputs.ConnectionOptionsPasswordHistory;
import com.pulumi.auth0.outputs.ConnectionOptionsPasswordNoPersonalInfo;
import com.pulumi.auth0.outputs.ConnectionOptionsSigningKey;
import com.pulumi.auth0.outputs.ConnectionOptionsTotp;
import com.pulumi.auth0.outputs.ConnectionOptionsValidation;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ConnectionOptions {
    /**
     * @return ADFS URL where to fetch the metadata source.
     * 
     */
    private @Nullable String adfsServer;
    /**
     * @return List of allowed audiences.
     * 
     */
    private @Nullable List<String> allowedAudiences;
    /**
     * @return Enable API Access to users.
     * 
     */
    private @Nullable Boolean apiEnableUsers;
    /**
     * @return App ID.
     * 
     */
    private @Nullable String appId;
    /**
     * @return Query string parameters to be included as part of the generated passwordless email link.
     * 
     */
    private @Nullable Map<String,String> authParams;
    /**
     * @return Authorization endpoint.
     * 
     */
    private @Nullable String authorizationEndpoint;
    /**
     * @return Indicates whether to enable brute force protection, which will limit the number of signups and failed logins from a suspicious IP address.
     * 
     */
    private @Nullable Boolean bruteForceProtection;
    /**
     * @return The strategy&#39;s client ID.
     * 
     */
    private @Nullable String clientId;
    /**
     * @return The strategy&#39;s client secret.
     * 
     */
    private @Nullable String clientSecret;
    /**
     * @return Salesforce community base URL.
     * 
     */
    private @Nullable String communityBaseUrl;
    /**
     * @return A case-sensitive map of key value pairs used as configuration variables for the `custom_script`.
     * 
     */
    private @Nullable Map<String,Object> configuration;
    /**
     * @return A map of scripts used to integrate with a custom database.
     * 
     */
    private @Nullable Map<String,String> customScripts;
    /**
     * @return When enabled, additional debug information will be generated.
     * 
     */
    private @Nullable Boolean debug;
    /**
     * @return Sign Request Algorithm Digest.
     * 
     */
    private @Nullable String digestAlgorithm;
    /**
     * @return Indicates whether to disable the cache or not.
     * 
     */
    private @Nullable Boolean disableCache;
    /**
     * @return Indicates whether to remove the forgot password link within the New Universal Login.
     * 
     */
    private @Nullable Boolean disableSelfServiceChangePassword;
    /**
     * @return When enabled, will disable sign out.
     * 
     */
    private @Nullable Boolean disableSignOut;
    /**
     * @return Indicates whether to allow user sign-ups to your application.
     * 
     */
    private @Nullable Boolean disableSignup;
    /**
     * @return OpenID discovery URL, e.g. `https://auth.example.com/.well-known/openid-configuration`.
     * 
     */
    private @Nullable String discoveryUrl;
    /**
     * @return Domain name.
     * 
     */
    private @Nullable String domain;
    /**
     * @return List of the domains that can be authenticated using the identity provider. Only needed for Identifier First authentication flows.
     * 
     */
    private @Nullable List<String> domainAliases;
    /**
     * @return Set to `true` to inject context into custom DB scripts (warning: cannot be disabled once enabled).
     * 
     */
    private @Nullable Boolean enableScriptContext;
    /**
     * @return Set to `true` to use a legacy user store.
     * 
     */
    private @Nullable Boolean enabledDatabaseCustomization;
    /**
     * @return Custom Entity ID for the connection.
     * 
     */
    private @Nullable String entityId;
    /**
     * @return Federation Metadata for the ADFS connection.
     * 
     */
    private @Nullable String fedMetadataXml;
    /**
     * @return If you&#39;re configuring a SAML enterprise connection for a non-standard PingFederate Server, you must update the attribute mappings.
     * 
     */
    private @Nullable String fieldsMap;
    /**
     * @return Specifies whether or not request info should be forwarded to sms gateway.
     * 
     */
    private @Nullable Boolean forwardRequestInfo;
    /**
     * @return Address to use as the sender.
     * 
     */
    private @Nullable String from;
    /**
     * @return Defines the parameters used to generate the auth token for the custom gateway.
     * 
     */
    private @Nullable ConnectionOptionsGatewayAuthentication gatewayAuthentication;
    /**
     * @return Defines a custom sms gateway to use instead of Twilio.
     * 
     */
    private @Nullable String gatewayUrl;
    /**
     * @return Icon URL.
     * 
     */
    private @Nullable String iconUrl;
    /**
     * @return Azure AD Identity API. Available options are: `microsoft-identity-platform-v2.0` or `azure-active-directory-v1.0`.
     * 
     */
    private @Nullable String identityApi;
    /**
     * @return Configuration options for IDP Initiated Authentication. This is an object with the properties: `client_id`, `client_protocol`, and `client_authorize_query`.
     * 
     */
    private @Nullable ConnectionOptionsIdpInitiated idpInitiated;
    /**
     * @return Indicates whether you have a legacy user store and want to gradually migrate those users to the Auth0 user store.
     * 
     */
    private @Nullable Boolean importMode;
    /**
     * @return A list of IPs.
     * 
     */
    private @Nullable List<String> ips;
    /**
     * @return Issuer URL, e.g. `https://auth.example.com`.
     * 
     */
    private @Nullable String issuer;
    /**
     * @return JWKS URI.
     * 
     */
    private @Nullable String jwksUri;
    /**
     * @return Apple Key ID.
     * 
     */
    private @Nullable String keyId;
    /**
     * @return Maximum number of groups to retrieve.
     * 
     */
    private @Nullable String maxGroupsToRetrieve;
    /**
     * @return SID for Copilot. Used when SMS Source is Copilot.
     * 
     */
    private @Nullable String messagingServiceSid;
    /**
     * @return The URL of the SAML metadata document.
     * 
     */
    private @Nullable String metadataUrl;
    /**
     * @return The XML content for the SAML metadata document.
     * 
     */
    private @Nullable String metadataXml;
    /**
     * @return Configuration options for multifactor authentication.
     * 
     */
    private @Nullable ConnectionOptionsMfa mfa;
    /**
     * @return The public name of the email or SMS Connection. In most cases this is the same name as the connection name.
     * 
     */
    private @Nullable String name;
    /**
     * @return If there are user fields that should not be stored in Auth0 databases due to privacy reasons, you can add them to the DenyList here.
     * 
     */
    private @Nullable List<String> nonPersistentAttrs;
    /**
     * @return Configuration settings for password complexity.
     * 
     */
    private @Nullable ConnectionOptionsPasswordComplexityOptions passwordComplexityOptions;
    /**
     * @return Configuration settings for the password dictionary check, which does not allow passwords that are part of the password dictionary.
     * 
     */
    private @Nullable ConnectionOptionsPasswordDictionary passwordDictionary;
    /**
     * @return Configuration settings for the password history that is maintained for each user to prevent the reuse of passwords.
     * 
     */
    private @Nullable List<ConnectionOptionsPasswordHistory> passwordHistories;
    /**
     * @return Configuration settings for the password personal info check, which does not allow passwords that contain any part of the user&#39;s personal data, including user&#39;s `name`, `username`, `nickname`, `user_metadata.name`, `user_metadata.first`, `user_metadata.last`, user&#39;s `email`, or first part of the user&#39;s `email`.
     * 
     */
    private @Nullable ConnectionOptionsPasswordNoPersonalInfo passwordNoPersonalInfo;
    /**
     * @return Indicates level of password strength to enforce during authentication. A strong password policy will make it difficult, if not improbable, for someone to guess a password through either manual or automated means. Options include `none`, `low`, `fair`, `good`, `excellent`.
     * 
     */
    private @Nullable String passwordPolicy;
    /**
     * @return Ping Federate Server URL.
     * 
     */
    private @Nullable String pingFederateBaseUrl;
    /**
     * @return Enables Proof Key for Code Exchange (PKCE) functionality for OAuth2 connections.
     * 
     */
    private @Nullable Boolean pkceEnabled;
    /**
     * @return The SAML Response Binding: how the SAML token is received by Auth0 from the IdP.
     * 
     */
    private @Nullable String protocolBinding;
    /**
     * @return Defines the custom `sms_gateway` provider.
     * 
     */
    private @Nullable String provider;
    /**
     * @return Template that formats the SAML request.
     * 
     */
    private @Nullable String requestTemplate;
    /**
     * @return Indicates whether the user is required to provide a username in addition to an email address.
     * 
     */
    private @Nullable Boolean requiresUsername;
    /**
     * @return Permissions to grant to the connection. Within the Auth0 dashboard these appear under the &#34;Attributes&#34; and &#34;Extended Attributes&#34; sections. Some examples: `basic_profile`, `ext_profile`, `ext_nested_groups`, etc.
     * 
     */
    private @Nullable List<String> scopes;
    /**
     * @return A map of scripts used for an OAuth connection. Only accepts a `fetchUserProfile` script.
     * 
     */
    private @Nullable Map<String,String> scripts;
    /**
     * @return Determines whether to sync user profile attributes (`name`, `given_name`, `family_name`, `nickname`, `picture`) at each login or only on the first login. Options include: `on_each_login`, `on_first_login`. Default value: `on_each_login`.
     * 
     */
    private @Nullable String setUserRootAttributes;
    /**
     * @return Choose how Auth0 sets the email_verified field in the user profile.
     * 
     */
    private @Nullable String shouldTrustEmailVerifiedConnection;
    /**
     * @return SAML single login URL for the connection.
     * 
     */
    private @Nullable String signInEndpoint;
    /**
     * @return SAML single logout URL for the connection.
     * 
     */
    private @Nullable String signOutEndpoint;
    /**
     * @return When enabled, the SAML authentication request will be signed.
     * 
     */
    private @Nullable Boolean signSamlRequest;
    /**
     * @return Sign Request Algorithm.
     * 
     */
    private @Nullable String signatureAlgorithm;
    /**
     * @return X.509 signing certificate (encoded in PEM or CER) you retrieved from the IdP, Base64-encoded.
     * 
     */
    private @Nullable String signingCert;
    /**
     * @return The key used to sign requests in the connection. Uses the `key` and `cert` properties to provide the private key and certificate respectively.
     * 
     */
    private @Nullable ConnectionOptionsSigningKey signingKey;
    /**
     * @return Version 1 is deprecated, use version 2.
     * 
     */
    private @Nullable Integer strategyVersion;
    /**
     * @return Subject line of the email.
     * 
     */
    private @Nullable String subject;
    /**
     * @return Syntax of the template body.
     * 
     */
    private @Nullable String syntax;
    /**
     * @return Apple Team ID.
     * 
     */
    private @Nullable String teamId;
    /**
     * @return Body of the template.
     * 
     */
    private @Nullable String template;
    /**
     * @return Tenant domain name.
     * 
     */
    private @Nullable String tenantDomain;
    /**
     * @return Token endpoint.
     * 
     */
    private @Nullable String tokenEndpoint;
    /**
     * @return Configuration options for one-time passwords.
     * 
     */
    private @Nullable ConnectionOptionsTotp totp;
    /**
     * @return SID for your Twilio account.
     * 
     */
    private @Nullable String twilioSid;
    /**
     * @return AuthToken for your Twilio account.
     * 
     */
    private @Nullable String twilioToken;
    /**
     * @return Value can be `back_channel` or `front_channel`. Front Channel will use OIDC protocol with `response_mode=form_post` and `response_type=id_token`. Back Channel will use `response_type=code`.
     * 
     */
    private @Nullable String type;
    /**
     * @return You can pass provider-specific parameters to an identity provider during authentication. The values can either be static per connection or dynamic per user.
     * 
     */
    private @Nullable String upstreamParams;
    /**
     * @return Indicates whether to use cert auth or not.
     * 
     */
    private @Nullable Boolean useCertAuth;
    /**
     * @return Indicates whether to use Kerberos or not.
     * 
     */
    private @Nullable Boolean useKerberos;
    /**
     * @return Whether to use WS-Fed.
     * 
     */
    private @Nullable Boolean useWsfed;
    /**
     * @return Attribute in the SAML token that will be mapped to the user_id property in Auth0.
     * 
     */
    private @Nullable String userIdAttribute;
    /**
     * @return User info endpoint.
     * 
     */
    private @Nullable String userinfoEndpoint;
    /**
     * @return Validation of the minimum and maximum values allowed for a user to have as username.
     * 
     */
    private @Nullable ConnectionOptionsValidation validation;
    /**
     * @return Indicates whether to use the common endpoint rather than the default endpoint. Typically enabled if you&#39;re using this for a multi-tenant application in Azure AD.
     * 
     */
    private @Nullable Boolean waadCommonEndpoint;
    /**
     * @return Protocol to use.
     * 
     */
    private @Nullable String waadProtocol;

    private ConnectionOptions() {}
    /**
     * @return ADFS URL where to fetch the metadata source.
     * 
     */
    public Optional<String> adfsServer() {
        return Optional.ofNullable(this.adfsServer);
    }
    /**
     * @return List of allowed audiences.
     * 
     */
    public List<String> allowedAudiences() {
        return this.allowedAudiences == null ? List.of() : this.allowedAudiences;
    }
    /**
     * @return Enable API Access to users.
     * 
     */
    public Optional<Boolean> apiEnableUsers() {
        return Optional.ofNullable(this.apiEnableUsers);
    }
    /**
     * @return App ID.
     * 
     */
    public Optional<String> appId() {
        return Optional.ofNullable(this.appId);
    }
    /**
     * @return Query string parameters to be included as part of the generated passwordless email link.
     * 
     */
    public Map<String,String> authParams() {
        return this.authParams == null ? Map.of() : this.authParams;
    }
    /**
     * @return Authorization endpoint.
     * 
     */
    public Optional<String> authorizationEndpoint() {
        return Optional.ofNullable(this.authorizationEndpoint);
    }
    /**
     * @return Indicates whether to enable brute force protection, which will limit the number of signups and failed logins from a suspicious IP address.
     * 
     */
    public Optional<Boolean> bruteForceProtection() {
        return Optional.ofNullable(this.bruteForceProtection);
    }
    /**
     * @return The strategy&#39;s client ID.
     * 
     */
    public Optional<String> clientId() {
        return Optional.ofNullable(this.clientId);
    }
    /**
     * @return The strategy&#39;s client secret.
     * 
     */
    public Optional<String> clientSecret() {
        return Optional.ofNullable(this.clientSecret);
    }
    /**
     * @return Salesforce community base URL.
     * 
     */
    public Optional<String> communityBaseUrl() {
        return Optional.ofNullable(this.communityBaseUrl);
    }
    /**
     * @return A case-sensitive map of key value pairs used as configuration variables for the `custom_script`.
     * 
     */
    public Map<String,Object> configuration() {
        return this.configuration == null ? Map.of() : this.configuration;
    }
    /**
     * @return A map of scripts used to integrate with a custom database.
     * 
     */
    public Map<String,String> customScripts() {
        return this.customScripts == null ? Map.of() : this.customScripts;
    }
    /**
     * @return When enabled, additional debug information will be generated.
     * 
     */
    public Optional<Boolean> debug() {
        return Optional.ofNullable(this.debug);
    }
    /**
     * @return Sign Request Algorithm Digest.
     * 
     */
    public Optional<String> digestAlgorithm() {
        return Optional.ofNullable(this.digestAlgorithm);
    }
    /**
     * @return Indicates whether to disable the cache or not.
     * 
     */
    public Optional<Boolean> disableCache() {
        return Optional.ofNullable(this.disableCache);
    }
    /**
     * @return Indicates whether to remove the forgot password link within the New Universal Login.
     * 
     */
    public Optional<Boolean> disableSelfServiceChangePassword() {
        return Optional.ofNullable(this.disableSelfServiceChangePassword);
    }
    /**
     * @return When enabled, will disable sign out.
     * 
     */
    public Optional<Boolean> disableSignOut() {
        return Optional.ofNullable(this.disableSignOut);
    }
    /**
     * @return Indicates whether to allow user sign-ups to your application.
     * 
     */
    public Optional<Boolean> disableSignup() {
        return Optional.ofNullable(this.disableSignup);
    }
    /**
     * @return OpenID discovery URL, e.g. `https://auth.example.com/.well-known/openid-configuration`.
     * 
     */
    public Optional<String> discoveryUrl() {
        return Optional.ofNullable(this.discoveryUrl);
    }
    /**
     * @return Domain name.
     * 
     */
    public Optional<String> domain() {
        return Optional.ofNullable(this.domain);
    }
    /**
     * @return List of the domains that can be authenticated using the identity provider. Only needed for Identifier First authentication flows.
     * 
     */
    public List<String> domainAliases() {
        return this.domainAliases == null ? List.of() : this.domainAliases;
    }
    /**
     * @return Set to `true` to inject context into custom DB scripts (warning: cannot be disabled once enabled).
     * 
     */
    public Optional<Boolean> enableScriptContext() {
        return Optional.ofNullable(this.enableScriptContext);
    }
    /**
     * @return Set to `true` to use a legacy user store.
     * 
     */
    public Optional<Boolean> enabledDatabaseCustomization() {
        return Optional.ofNullable(this.enabledDatabaseCustomization);
    }
    /**
     * @return Custom Entity ID for the connection.
     * 
     */
    public Optional<String> entityId() {
        return Optional.ofNullable(this.entityId);
    }
    /**
     * @return Federation Metadata for the ADFS connection.
     * 
     */
    public Optional<String> fedMetadataXml() {
        return Optional.ofNullable(this.fedMetadataXml);
    }
    /**
     * @return If you&#39;re configuring a SAML enterprise connection for a non-standard PingFederate Server, you must update the attribute mappings.
     * 
     */
    public Optional<String> fieldsMap() {
        return Optional.ofNullable(this.fieldsMap);
    }
    /**
     * @return Specifies whether or not request info should be forwarded to sms gateway.
     * 
     */
    public Optional<Boolean> forwardRequestInfo() {
        return Optional.ofNullable(this.forwardRequestInfo);
    }
    /**
     * @return Address to use as the sender.
     * 
     */
    public Optional<String> from() {
        return Optional.ofNullable(this.from);
    }
    /**
     * @return Defines the parameters used to generate the auth token for the custom gateway.
     * 
     */
    public Optional<ConnectionOptionsGatewayAuthentication> gatewayAuthentication() {
        return Optional.ofNullable(this.gatewayAuthentication);
    }
    /**
     * @return Defines a custom sms gateway to use instead of Twilio.
     * 
     */
    public Optional<String> gatewayUrl() {
        return Optional.ofNullable(this.gatewayUrl);
    }
    /**
     * @return Icon URL.
     * 
     */
    public Optional<String> iconUrl() {
        return Optional.ofNullable(this.iconUrl);
    }
    /**
     * @return Azure AD Identity API. Available options are: `microsoft-identity-platform-v2.0` or `azure-active-directory-v1.0`.
     * 
     */
    public Optional<String> identityApi() {
        return Optional.ofNullable(this.identityApi);
    }
    /**
     * @return Configuration options for IDP Initiated Authentication. This is an object with the properties: `client_id`, `client_protocol`, and `client_authorize_query`.
     * 
     */
    public Optional<ConnectionOptionsIdpInitiated> idpInitiated() {
        return Optional.ofNullable(this.idpInitiated);
    }
    /**
     * @return Indicates whether you have a legacy user store and want to gradually migrate those users to the Auth0 user store.
     * 
     */
    public Optional<Boolean> importMode() {
        return Optional.ofNullable(this.importMode);
    }
    /**
     * @return A list of IPs.
     * 
     */
    public List<String> ips() {
        return this.ips == null ? List.of() : this.ips;
    }
    /**
     * @return Issuer URL, e.g. `https://auth.example.com`.
     * 
     */
    public Optional<String> issuer() {
        return Optional.ofNullable(this.issuer);
    }
    /**
     * @return JWKS URI.
     * 
     */
    public Optional<String> jwksUri() {
        return Optional.ofNullable(this.jwksUri);
    }
    /**
     * @return Apple Key ID.
     * 
     */
    public Optional<String> keyId() {
        return Optional.ofNullable(this.keyId);
    }
    /**
     * @return Maximum number of groups to retrieve.
     * 
     */
    public Optional<String> maxGroupsToRetrieve() {
        return Optional.ofNullable(this.maxGroupsToRetrieve);
    }
    /**
     * @return SID for Copilot. Used when SMS Source is Copilot.
     * 
     */
    public Optional<String> messagingServiceSid() {
        return Optional.ofNullable(this.messagingServiceSid);
    }
    /**
     * @return The URL of the SAML metadata document.
     * 
     */
    public Optional<String> metadataUrl() {
        return Optional.ofNullable(this.metadataUrl);
    }
    /**
     * @return The XML content for the SAML metadata document.
     * 
     */
    public Optional<String> metadataXml() {
        return Optional.ofNullable(this.metadataXml);
    }
    /**
     * @return Configuration options for multifactor authentication.
     * 
     */
    public Optional<ConnectionOptionsMfa> mfa() {
        return Optional.ofNullable(this.mfa);
    }
    /**
     * @return The public name of the email or SMS Connection. In most cases this is the same name as the connection name.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return If there are user fields that should not be stored in Auth0 databases due to privacy reasons, you can add them to the DenyList here.
     * 
     */
    public List<String> nonPersistentAttrs() {
        return this.nonPersistentAttrs == null ? List.of() : this.nonPersistentAttrs;
    }
    /**
     * @return Configuration settings for password complexity.
     * 
     */
    public Optional<ConnectionOptionsPasswordComplexityOptions> passwordComplexityOptions() {
        return Optional.ofNullable(this.passwordComplexityOptions);
    }
    /**
     * @return Configuration settings for the password dictionary check, which does not allow passwords that are part of the password dictionary.
     * 
     */
    public Optional<ConnectionOptionsPasswordDictionary> passwordDictionary() {
        return Optional.ofNullable(this.passwordDictionary);
    }
    /**
     * @return Configuration settings for the password history that is maintained for each user to prevent the reuse of passwords.
     * 
     */
    public List<ConnectionOptionsPasswordHistory> passwordHistories() {
        return this.passwordHistories == null ? List.of() : this.passwordHistories;
    }
    /**
     * @return Configuration settings for the password personal info check, which does not allow passwords that contain any part of the user&#39;s personal data, including user&#39;s `name`, `username`, `nickname`, `user_metadata.name`, `user_metadata.first`, `user_metadata.last`, user&#39;s `email`, or first part of the user&#39;s `email`.
     * 
     */
    public Optional<ConnectionOptionsPasswordNoPersonalInfo> passwordNoPersonalInfo() {
        return Optional.ofNullable(this.passwordNoPersonalInfo);
    }
    /**
     * @return Indicates level of password strength to enforce during authentication. A strong password policy will make it difficult, if not improbable, for someone to guess a password through either manual or automated means. Options include `none`, `low`, `fair`, `good`, `excellent`.
     * 
     */
    public Optional<String> passwordPolicy() {
        return Optional.ofNullable(this.passwordPolicy);
    }
    /**
     * @return Ping Federate Server URL.
     * 
     */
    public Optional<String> pingFederateBaseUrl() {
        return Optional.ofNullable(this.pingFederateBaseUrl);
    }
    /**
     * @return Enables Proof Key for Code Exchange (PKCE) functionality for OAuth2 connections.
     * 
     */
    public Optional<Boolean> pkceEnabled() {
        return Optional.ofNullable(this.pkceEnabled);
    }
    /**
     * @return The SAML Response Binding: how the SAML token is received by Auth0 from the IdP.
     * 
     */
    public Optional<String> protocolBinding() {
        return Optional.ofNullable(this.protocolBinding);
    }
    /**
     * @return Defines the custom `sms_gateway` provider.
     * 
     */
    public Optional<String> provider() {
        return Optional.ofNullable(this.provider);
    }
    /**
     * @return Template that formats the SAML request.
     * 
     */
    public Optional<String> requestTemplate() {
        return Optional.ofNullable(this.requestTemplate);
    }
    /**
     * @return Indicates whether the user is required to provide a username in addition to an email address.
     * 
     */
    public Optional<Boolean> requiresUsername() {
        return Optional.ofNullable(this.requiresUsername);
    }
    /**
     * @return Permissions to grant to the connection. Within the Auth0 dashboard these appear under the &#34;Attributes&#34; and &#34;Extended Attributes&#34; sections. Some examples: `basic_profile`, `ext_profile`, `ext_nested_groups`, etc.
     * 
     */
    public List<String> scopes() {
        return this.scopes == null ? List.of() : this.scopes;
    }
    /**
     * @return A map of scripts used for an OAuth connection. Only accepts a `fetchUserProfile` script.
     * 
     */
    public Map<String,String> scripts() {
        return this.scripts == null ? Map.of() : this.scripts;
    }
    /**
     * @return Determines whether to sync user profile attributes (`name`, `given_name`, `family_name`, `nickname`, `picture`) at each login or only on the first login. Options include: `on_each_login`, `on_first_login`. Default value: `on_each_login`.
     * 
     */
    public Optional<String> setUserRootAttributes() {
        return Optional.ofNullable(this.setUserRootAttributes);
    }
    /**
     * @return Choose how Auth0 sets the email_verified field in the user profile.
     * 
     */
    public Optional<String> shouldTrustEmailVerifiedConnection() {
        return Optional.ofNullable(this.shouldTrustEmailVerifiedConnection);
    }
    /**
     * @return SAML single login URL for the connection.
     * 
     */
    public Optional<String> signInEndpoint() {
        return Optional.ofNullable(this.signInEndpoint);
    }
    /**
     * @return SAML single logout URL for the connection.
     * 
     */
    public Optional<String> signOutEndpoint() {
        return Optional.ofNullable(this.signOutEndpoint);
    }
    /**
     * @return When enabled, the SAML authentication request will be signed.
     * 
     */
    public Optional<Boolean> signSamlRequest() {
        return Optional.ofNullable(this.signSamlRequest);
    }
    /**
     * @return Sign Request Algorithm.
     * 
     */
    public Optional<String> signatureAlgorithm() {
        return Optional.ofNullable(this.signatureAlgorithm);
    }
    /**
     * @return X.509 signing certificate (encoded in PEM or CER) you retrieved from the IdP, Base64-encoded.
     * 
     */
    public Optional<String> signingCert() {
        return Optional.ofNullable(this.signingCert);
    }
    /**
     * @return The key used to sign requests in the connection. Uses the `key` and `cert` properties to provide the private key and certificate respectively.
     * 
     */
    public Optional<ConnectionOptionsSigningKey> signingKey() {
        return Optional.ofNullable(this.signingKey);
    }
    /**
     * @return Version 1 is deprecated, use version 2.
     * 
     */
    public Optional<Integer> strategyVersion() {
        return Optional.ofNullable(this.strategyVersion);
    }
    /**
     * @return Subject line of the email.
     * 
     */
    public Optional<String> subject() {
        return Optional.ofNullable(this.subject);
    }
    /**
     * @return Syntax of the template body.
     * 
     */
    public Optional<String> syntax() {
        return Optional.ofNullable(this.syntax);
    }
    /**
     * @return Apple Team ID.
     * 
     */
    public Optional<String> teamId() {
        return Optional.ofNullable(this.teamId);
    }
    /**
     * @return Body of the template.
     * 
     */
    public Optional<String> template() {
        return Optional.ofNullable(this.template);
    }
    /**
     * @return Tenant domain name.
     * 
     */
    public Optional<String> tenantDomain() {
        return Optional.ofNullable(this.tenantDomain);
    }
    /**
     * @return Token endpoint.
     * 
     */
    public Optional<String> tokenEndpoint() {
        return Optional.ofNullable(this.tokenEndpoint);
    }
    /**
     * @return Configuration options for one-time passwords.
     * 
     */
    public Optional<ConnectionOptionsTotp> totp() {
        return Optional.ofNullable(this.totp);
    }
    /**
     * @return SID for your Twilio account.
     * 
     */
    public Optional<String> twilioSid() {
        return Optional.ofNullable(this.twilioSid);
    }
    /**
     * @return AuthToken for your Twilio account.
     * 
     */
    public Optional<String> twilioToken() {
        return Optional.ofNullable(this.twilioToken);
    }
    /**
     * @return Value can be `back_channel` or `front_channel`. Front Channel will use OIDC protocol with `response_mode=form_post` and `response_type=id_token`. Back Channel will use `response_type=code`.
     * 
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }
    /**
     * @return You can pass provider-specific parameters to an identity provider during authentication. The values can either be static per connection or dynamic per user.
     * 
     */
    public Optional<String> upstreamParams() {
        return Optional.ofNullable(this.upstreamParams);
    }
    /**
     * @return Indicates whether to use cert auth or not.
     * 
     */
    public Optional<Boolean> useCertAuth() {
        return Optional.ofNullable(this.useCertAuth);
    }
    /**
     * @return Indicates whether to use Kerberos or not.
     * 
     */
    public Optional<Boolean> useKerberos() {
        return Optional.ofNullable(this.useKerberos);
    }
    /**
     * @return Whether to use WS-Fed.
     * 
     */
    public Optional<Boolean> useWsfed() {
        return Optional.ofNullable(this.useWsfed);
    }
    /**
     * @return Attribute in the SAML token that will be mapped to the user_id property in Auth0.
     * 
     */
    public Optional<String> userIdAttribute() {
        return Optional.ofNullable(this.userIdAttribute);
    }
    /**
     * @return User info endpoint.
     * 
     */
    public Optional<String> userinfoEndpoint() {
        return Optional.ofNullable(this.userinfoEndpoint);
    }
    /**
     * @return Validation of the minimum and maximum values allowed for a user to have as username.
     * 
     */
    public Optional<ConnectionOptionsValidation> validation() {
        return Optional.ofNullable(this.validation);
    }
    /**
     * @return Indicates whether to use the common endpoint rather than the default endpoint. Typically enabled if you&#39;re using this for a multi-tenant application in Azure AD.
     * 
     */
    public Optional<Boolean> waadCommonEndpoint() {
        return Optional.ofNullable(this.waadCommonEndpoint);
    }
    /**
     * @return Protocol to use.
     * 
     */
    public Optional<String> waadProtocol() {
        return Optional.ofNullable(this.waadProtocol);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConnectionOptions defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String adfsServer;
        private @Nullable List<String> allowedAudiences;
        private @Nullable Boolean apiEnableUsers;
        private @Nullable String appId;
        private @Nullable Map<String,String> authParams;
        private @Nullable String authorizationEndpoint;
        private @Nullable Boolean bruteForceProtection;
        private @Nullable String clientId;
        private @Nullable String clientSecret;
        private @Nullable String communityBaseUrl;
        private @Nullable Map<String,Object> configuration;
        private @Nullable Map<String,String> customScripts;
        private @Nullable Boolean debug;
        private @Nullable String digestAlgorithm;
        private @Nullable Boolean disableCache;
        private @Nullable Boolean disableSelfServiceChangePassword;
        private @Nullable Boolean disableSignOut;
        private @Nullable Boolean disableSignup;
        private @Nullable String discoveryUrl;
        private @Nullable String domain;
        private @Nullable List<String> domainAliases;
        private @Nullable Boolean enableScriptContext;
        private @Nullable Boolean enabledDatabaseCustomization;
        private @Nullable String entityId;
        private @Nullable String fedMetadataXml;
        private @Nullable String fieldsMap;
        private @Nullable Boolean forwardRequestInfo;
        private @Nullable String from;
        private @Nullable ConnectionOptionsGatewayAuthentication gatewayAuthentication;
        private @Nullable String gatewayUrl;
        private @Nullable String iconUrl;
        private @Nullable String identityApi;
        private @Nullable ConnectionOptionsIdpInitiated idpInitiated;
        private @Nullable Boolean importMode;
        private @Nullable List<String> ips;
        private @Nullable String issuer;
        private @Nullable String jwksUri;
        private @Nullable String keyId;
        private @Nullable String maxGroupsToRetrieve;
        private @Nullable String messagingServiceSid;
        private @Nullable String metadataUrl;
        private @Nullable String metadataXml;
        private @Nullable ConnectionOptionsMfa mfa;
        private @Nullable String name;
        private @Nullable List<String> nonPersistentAttrs;
        private @Nullable ConnectionOptionsPasswordComplexityOptions passwordComplexityOptions;
        private @Nullable ConnectionOptionsPasswordDictionary passwordDictionary;
        private @Nullable List<ConnectionOptionsPasswordHistory> passwordHistories;
        private @Nullable ConnectionOptionsPasswordNoPersonalInfo passwordNoPersonalInfo;
        private @Nullable String passwordPolicy;
        private @Nullable String pingFederateBaseUrl;
        private @Nullable Boolean pkceEnabled;
        private @Nullable String protocolBinding;
        private @Nullable String provider;
        private @Nullable String requestTemplate;
        private @Nullable Boolean requiresUsername;
        private @Nullable List<String> scopes;
        private @Nullable Map<String,String> scripts;
        private @Nullable String setUserRootAttributes;
        private @Nullable String shouldTrustEmailVerifiedConnection;
        private @Nullable String signInEndpoint;
        private @Nullable String signOutEndpoint;
        private @Nullable Boolean signSamlRequest;
        private @Nullable String signatureAlgorithm;
        private @Nullable String signingCert;
        private @Nullable ConnectionOptionsSigningKey signingKey;
        private @Nullable Integer strategyVersion;
        private @Nullable String subject;
        private @Nullable String syntax;
        private @Nullable String teamId;
        private @Nullable String template;
        private @Nullable String tenantDomain;
        private @Nullable String tokenEndpoint;
        private @Nullable ConnectionOptionsTotp totp;
        private @Nullable String twilioSid;
        private @Nullable String twilioToken;
        private @Nullable String type;
        private @Nullable String upstreamParams;
        private @Nullable Boolean useCertAuth;
        private @Nullable Boolean useKerberos;
        private @Nullable Boolean useWsfed;
        private @Nullable String userIdAttribute;
        private @Nullable String userinfoEndpoint;
        private @Nullable ConnectionOptionsValidation validation;
        private @Nullable Boolean waadCommonEndpoint;
        private @Nullable String waadProtocol;
        public Builder() {}
        public Builder(ConnectionOptions defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.adfsServer = defaults.adfsServer;
    	      this.allowedAudiences = defaults.allowedAudiences;
    	      this.apiEnableUsers = defaults.apiEnableUsers;
    	      this.appId = defaults.appId;
    	      this.authParams = defaults.authParams;
    	      this.authorizationEndpoint = defaults.authorizationEndpoint;
    	      this.bruteForceProtection = defaults.bruteForceProtection;
    	      this.clientId = defaults.clientId;
    	      this.clientSecret = defaults.clientSecret;
    	      this.communityBaseUrl = defaults.communityBaseUrl;
    	      this.configuration = defaults.configuration;
    	      this.customScripts = defaults.customScripts;
    	      this.debug = defaults.debug;
    	      this.digestAlgorithm = defaults.digestAlgorithm;
    	      this.disableCache = defaults.disableCache;
    	      this.disableSelfServiceChangePassword = defaults.disableSelfServiceChangePassword;
    	      this.disableSignOut = defaults.disableSignOut;
    	      this.disableSignup = defaults.disableSignup;
    	      this.discoveryUrl = defaults.discoveryUrl;
    	      this.domain = defaults.domain;
    	      this.domainAliases = defaults.domainAliases;
    	      this.enableScriptContext = defaults.enableScriptContext;
    	      this.enabledDatabaseCustomization = defaults.enabledDatabaseCustomization;
    	      this.entityId = defaults.entityId;
    	      this.fedMetadataXml = defaults.fedMetadataXml;
    	      this.fieldsMap = defaults.fieldsMap;
    	      this.forwardRequestInfo = defaults.forwardRequestInfo;
    	      this.from = defaults.from;
    	      this.gatewayAuthentication = defaults.gatewayAuthentication;
    	      this.gatewayUrl = defaults.gatewayUrl;
    	      this.iconUrl = defaults.iconUrl;
    	      this.identityApi = defaults.identityApi;
    	      this.idpInitiated = defaults.idpInitiated;
    	      this.importMode = defaults.importMode;
    	      this.ips = defaults.ips;
    	      this.issuer = defaults.issuer;
    	      this.jwksUri = defaults.jwksUri;
    	      this.keyId = defaults.keyId;
    	      this.maxGroupsToRetrieve = defaults.maxGroupsToRetrieve;
    	      this.messagingServiceSid = defaults.messagingServiceSid;
    	      this.metadataUrl = defaults.metadataUrl;
    	      this.metadataXml = defaults.metadataXml;
    	      this.mfa = defaults.mfa;
    	      this.name = defaults.name;
    	      this.nonPersistentAttrs = defaults.nonPersistentAttrs;
    	      this.passwordComplexityOptions = defaults.passwordComplexityOptions;
    	      this.passwordDictionary = defaults.passwordDictionary;
    	      this.passwordHistories = defaults.passwordHistories;
    	      this.passwordNoPersonalInfo = defaults.passwordNoPersonalInfo;
    	      this.passwordPolicy = defaults.passwordPolicy;
    	      this.pingFederateBaseUrl = defaults.pingFederateBaseUrl;
    	      this.pkceEnabled = defaults.pkceEnabled;
    	      this.protocolBinding = defaults.protocolBinding;
    	      this.provider = defaults.provider;
    	      this.requestTemplate = defaults.requestTemplate;
    	      this.requiresUsername = defaults.requiresUsername;
    	      this.scopes = defaults.scopes;
    	      this.scripts = defaults.scripts;
    	      this.setUserRootAttributes = defaults.setUserRootAttributes;
    	      this.shouldTrustEmailVerifiedConnection = defaults.shouldTrustEmailVerifiedConnection;
    	      this.signInEndpoint = defaults.signInEndpoint;
    	      this.signOutEndpoint = defaults.signOutEndpoint;
    	      this.signSamlRequest = defaults.signSamlRequest;
    	      this.signatureAlgorithm = defaults.signatureAlgorithm;
    	      this.signingCert = defaults.signingCert;
    	      this.signingKey = defaults.signingKey;
    	      this.strategyVersion = defaults.strategyVersion;
    	      this.subject = defaults.subject;
    	      this.syntax = defaults.syntax;
    	      this.teamId = defaults.teamId;
    	      this.template = defaults.template;
    	      this.tenantDomain = defaults.tenantDomain;
    	      this.tokenEndpoint = defaults.tokenEndpoint;
    	      this.totp = defaults.totp;
    	      this.twilioSid = defaults.twilioSid;
    	      this.twilioToken = defaults.twilioToken;
    	      this.type = defaults.type;
    	      this.upstreamParams = defaults.upstreamParams;
    	      this.useCertAuth = defaults.useCertAuth;
    	      this.useKerberos = defaults.useKerberos;
    	      this.useWsfed = defaults.useWsfed;
    	      this.userIdAttribute = defaults.userIdAttribute;
    	      this.userinfoEndpoint = defaults.userinfoEndpoint;
    	      this.validation = defaults.validation;
    	      this.waadCommonEndpoint = defaults.waadCommonEndpoint;
    	      this.waadProtocol = defaults.waadProtocol;
        }

        @CustomType.Setter
        public Builder adfsServer(@Nullable String adfsServer) {
            this.adfsServer = adfsServer;
            return this;
        }
        @CustomType.Setter
        public Builder allowedAudiences(@Nullable List<String> allowedAudiences) {
            this.allowedAudiences = allowedAudiences;
            return this;
        }
        public Builder allowedAudiences(String... allowedAudiences) {
            return allowedAudiences(List.of(allowedAudiences));
        }
        @CustomType.Setter
        public Builder apiEnableUsers(@Nullable Boolean apiEnableUsers) {
            this.apiEnableUsers = apiEnableUsers;
            return this;
        }
        @CustomType.Setter
        public Builder appId(@Nullable String appId) {
            this.appId = appId;
            return this;
        }
        @CustomType.Setter
        public Builder authParams(@Nullable Map<String,String> authParams) {
            this.authParams = authParams;
            return this;
        }
        @CustomType.Setter
        public Builder authorizationEndpoint(@Nullable String authorizationEndpoint) {
            this.authorizationEndpoint = authorizationEndpoint;
            return this;
        }
        @CustomType.Setter
        public Builder bruteForceProtection(@Nullable Boolean bruteForceProtection) {
            this.bruteForceProtection = bruteForceProtection;
            return this;
        }
        @CustomType.Setter
        public Builder clientId(@Nullable String clientId) {
            this.clientId = clientId;
            return this;
        }
        @CustomType.Setter
        public Builder clientSecret(@Nullable String clientSecret) {
            this.clientSecret = clientSecret;
            return this;
        }
        @CustomType.Setter
        public Builder communityBaseUrl(@Nullable String communityBaseUrl) {
            this.communityBaseUrl = communityBaseUrl;
            return this;
        }
        @CustomType.Setter
        public Builder configuration(@Nullable Map<String,Object> configuration) {
            this.configuration = configuration;
            return this;
        }
        @CustomType.Setter
        public Builder customScripts(@Nullable Map<String,String> customScripts) {
            this.customScripts = customScripts;
            return this;
        }
        @CustomType.Setter
        public Builder debug(@Nullable Boolean debug) {
            this.debug = debug;
            return this;
        }
        @CustomType.Setter
        public Builder digestAlgorithm(@Nullable String digestAlgorithm) {
            this.digestAlgorithm = digestAlgorithm;
            return this;
        }
        @CustomType.Setter
        public Builder disableCache(@Nullable Boolean disableCache) {
            this.disableCache = disableCache;
            return this;
        }
        @CustomType.Setter
        public Builder disableSelfServiceChangePassword(@Nullable Boolean disableSelfServiceChangePassword) {
            this.disableSelfServiceChangePassword = disableSelfServiceChangePassword;
            return this;
        }
        @CustomType.Setter
        public Builder disableSignOut(@Nullable Boolean disableSignOut) {
            this.disableSignOut = disableSignOut;
            return this;
        }
        @CustomType.Setter
        public Builder disableSignup(@Nullable Boolean disableSignup) {
            this.disableSignup = disableSignup;
            return this;
        }
        @CustomType.Setter
        public Builder discoveryUrl(@Nullable String discoveryUrl) {
            this.discoveryUrl = discoveryUrl;
            return this;
        }
        @CustomType.Setter
        public Builder domain(@Nullable String domain) {
            this.domain = domain;
            return this;
        }
        @CustomType.Setter
        public Builder domainAliases(@Nullable List<String> domainAliases) {
            this.domainAliases = domainAliases;
            return this;
        }
        public Builder domainAliases(String... domainAliases) {
            return domainAliases(List.of(domainAliases));
        }
        @CustomType.Setter
        public Builder enableScriptContext(@Nullable Boolean enableScriptContext) {
            this.enableScriptContext = enableScriptContext;
            return this;
        }
        @CustomType.Setter
        public Builder enabledDatabaseCustomization(@Nullable Boolean enabledDatabaseCustomization) {
            this.enabledDatabaseCustomization = enabledDatabaseCustomization;
            return this;
        }
        @CustomType.Setter
        public Builder entityId(@Nullable String entityId) {
            this.entityId = entityId;
            return this;
        }
        @CustomType.Setter
        public Builder fedMetadataXml(@Nullable String fedMetadataXml) {
            this.fedMetadataXml = fedMetadataXml;
            return this;
        }
        @CustomType.Setter
        public Builder fieldsMap(@Nullable String fieldsMap) {
            this.fieldsMap = fieldsMap;
            return this;
        }
        @CustomType.Setter
        public Builder forwardRequestInfo(@Nullable Boolean forwardRequestInfo) {
            this.forwardRequestInfo = forwardRequestInfo;
            return this;
        }
        @CustomType.Setter
        public Builder from(@Nullable String from) {
            this.from = from;
            return this;
        }
        @CustomType.Setter
        public Builder gatewayAuthentication(@Nullable ConnectionOptionsGatewayAuthentication gatewayAuthentication) {
            this.gatewayAuthentication = gatewayAuthentication;
            return this;
        }
        @CustomType.Setter
        public Builder gatewayUrl(@Nullable String gatewayUrl) {
            this.gatewayUrl = gatewayUrl;
            return this;
        }
        @CustomType.Setter
        public Builder iconUrl(@Nullable String iconUrl) {
            this.iconUrl = iconUrl;
            return this;
        }
        @CustomType.Setter
        public Builder identityApi(@Nullable String identityApi) {
            this.identityApi = identityApi;
            return this;
        }
        @CustomType.Setter
        public Builder idpInitiated(@Nullable ConnectionOptionsIdpInitiated idpInitiated) {
            this.idpInitiated = idpInitiated;
            return this;
        }
        @CustomType.Setter
        public Builder importMode(@Nullable Boolean importMode) {
            this.importMode = importMode;
            return this;
        }
        @CustomType.Setter
        public Builder ips(@Nullable List<String> ips) {
            this.ips = ips;
            return this;
        }
        public Builder ips(String... ips) {
            return ips(List.of(ips));
        }
        @CustomType.Setter
        public Builder issuer(@Nullable String issuer) {
            this.issuer = issuer;
            return this;
        }
        @CustomType.Setter
        public Builder jwksUri(@Nullable String jwksUri) {
            this.jwksUri = jwksUri;
            return this;
        }
        @CustomType.Setter
        public Builder keyId(@Nullable String keyId) {
            this.keyId = keyId;
            return this;
        }
        @CustomType.Setter
        public Builder maxGroupsToRetrieve(@Nullable String maxGroupsToRetrieve) {
            this.maxGroupsToRetrieve = maxGroupsToRetrieve;
            return this;
        }
        @CustomType.Setter
        public Builder messagingServiceSid(@Nullable String messagingServiceSid) {
            this.messagingServiceSid = messagingServiceSid;
            return this;
        }
        @CustomType.Setter
        public Builder metadataUrl(@Nullable String metadataUrl) {
            this.metadataUrl = metadataUrl;
            return this;
        }
        @CustomType.Setter
        public Builder metadataXml(@Nullable String metadataXml) {
            this.metadataXml = metadataXml;
            return this;
        }
        @CustomType.Setter
        public Builder mfa(@Nullable ConnectionOptionsMfa mfa) {
            this.mfa = mfa;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder nonPersistentAttrs(@Nullable List<String> nonPersistentAttrs) {
            this.nonPersistentAttrs = nonPersistentAttrs;
            return this;
        }
        public Builder nonPersistentAttrs(String... nonPersistentAttrs) {
            return nonPersistentAttrs(List.of(nonPersistentAttrs));
        }
        @CustomType.Setter
        public Builder passwordComplexityOptions(@Nullable ConnectionOptionsPasswordComplexityOptions passwordComplexityOptions) {
            this.passwordComplexityOptions = passwordComplexityOptions;
            return this;
        }
        @CustomType.Setter
        public Builder passwordDictionary(@Nullable ConnectionOptionsPasswordDictionary passwordDictionary) {
            this.passwordDictionary = passwordDictionary;
            return this;
        }
        @CustomType.Setter
        public Builder passwordHistories(@Nullable List<ConnectionOptionsPasswordHistory> passwordHistories) {
            this.passwordHistories = passwordHistories;
            return this;
        }
        public Builder passwordHistories(ConnectionOptionsPasswordHistory... passwordHistories) {
            return passwordHistories(List.of(passwordHistories));
        }
        @CustomType.Setter
        public Builder passwordNoPersonalInfo(@Nullable ConnectionOptionsPasswordNoPersonalInfo passwordNoPersonalInfo) {
            this.passwordNoPersonalInfo = passwordNoPersonalInfo;
            return this;
        }
        @CustomType.Setter
        public Builder passwordPolicy(@Nullable String passwordPolicy) {
            this.passwordPolicy = passwordPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder pingFederateBaseUrl(@Nullable String pingFederateBaseUrl) {
            this.pingFederateBaseUrl = pingFederateBaseUrl;
            return this;
        }
        @CustomType.Setter
        public Builder pkceEnabled(@Nullable Boolean pkceEnabled) {
            this.pkceEnabled = pkceEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder protocolBinding(@Nullable String protocolBinding) {
            this.protocolBinding = protocolBinding;
            return this;
        }
        @CustomType.Setter
        public Builder provider(@Nullable String provider) {
            this.provider = provider;
            return this;
        }
        @CustomType.Setter
        public Builder requestTemplate(@Nullable String requestTemplate) {
            this.requestTemplate = requestTemplate;
            return this;
        }
        @CustomType.Setter
        public Builder requiresUsername(@Nullable Boolean requiresUsername) {
            this.requiresUsername = requiresUsername;
            return this;
        }
        @CustomType.Setter
        public Builder scopes(@Nullable List<String> scopes) {
            this.scopes = scopes;
            return this;
        }
        public Builder scopes(String... scopes) {
            return scopes(List.of(scopes));
        }
        @CustomType.Setter
        public Builder scripts(@Nullable Map<String,String> scripts) {
            this.scripts = scripts;
            return this;
        }
        @CustomType.Setter
        public Builder setUserRootAttributes(@Nullable String setUserRootAttributes) {
            this.setUserRootAttributes = setUserRootAttributes;
            return this;
        }
        @CustomType.Setter
        public Builder shouldTrustEmailVerifiedConnection(@Nullable String shouldTrustEmailVerifiedConnection) {
            this.shouldTrustEmailVerifiedConnection = shouldTrustEmailVerifiedConnection;
            return this;
        }
        @CustomType.Setter
        public Builder signInEndpoint(@Nullable String signInEndpoint) {
            this.signInEndpoint = signInEndpoint;
            return this;
        }
        @CustomType.Setter
        public Builder signOutEndpoint(@Nullable String signOutEndpoint) {
            this.signOutEndpoint = signOutEndpoint;
            return this;
        }
        @CustomType.Setter
        public Builder signSamlRequest(@Nullable Boolean signSamlRequest) {
            this.signSamlRequest = signSamlRequest;
            return this;
        }
        @CustomType.Setter
        public Builder signatureAlgorithm(@Nullable String signatureAlgorithm) {
            this.signatureAlgorithm = signatureAlgorithm;
            return this;
        }
        @CustomType.Setter
        public Builder signingCert(@Nullable String signingCert) {
            this.signingCert = signingCert;
            return this;
        }
        @CustomType.Setter
        public Builder signingKey(@Nullable ConnectionOptionsSigningKey signingKey) {
            this.signingKey = signingKey;
            return this;
        }
        @CustomType.Setter
        public Builder strategyVersion(@Nullable Integer strategyVersion) {
            this.strategyVersion = strategyVersion;
            return this;
        }
        @CustomType.Setter
        public Builder subject(@Nullable String subject) {
            this.subject = subject;
            return this;
        }
        @CustomType.Setter
        public Builder syntax(@Nullable String syntax) {
            this.syntax = syntax;
            return this;
        }
        @CustomType.Setter
        public Builder teamId(@Nullable String teamId) {
            this.teamId = teamId;
            return this;
        }
        @CustomType.Setter
        public Builder template(@Nullable String template) {
            this.template = template;
            return this;
        }
        @CustomType.Setter
        public Builder tenantDomain(@Nullable String tenantDomain) {
            this.tenantDomain = tenantDomain;
            return this;
        }
        @CustomType.Setter
        public Builder tokenEndpoint(@Nullable String tokenEndpoint) {
            this.tokenEndpoint = tokenEndpoint;
            return this;
        }
        @CustomType.Setter
        public Builder totp(@Nullable ConnectionOptionsTotp totp) {
            this.totp = totp;
            return this;
        }
        @CustomType.Setter
        public Builder twilioSid(@Nullable String twilioSid) {
            this.twilioSid = twilioSid;
            return this;
        }
        @CustomType.Setter
        public Builder twilioToken(@Nullable String twilioToken) {
            this.twilioToken = twilioToken;
            return this;
        }
        @CustomType.Setter
        public Builder type(@Nullable String type) {
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder upstreamParams(@Nullable String upstreamParams) {
            this.upstreamParams = upstreamParams;
            return this;
        }
        @CustomType.Setter
        public Builder useCertAuth(@Nullable Boolean useCertAuth) {
            this.useCertAuth = useCertAuth;
            return this;
        }
        @CustomType.Setter
        public Builder useKerberos(@Nullable Boolean useKerberos) {
            this.useKerberos = useKerberos;
            return this;
        }
        @CustomType.Setter
        public Builder useWsfed(@Nullable Boolean useWsfed) {
            this.useWsfed = useWsfed;
            return this;
        }
        @CustomType.Setter
        public Builder userIdAttribute(@Nullable String userIdAttribute) {
            this.userIdAttribute = userIdAttribute;
            return this;
        }
        @CustomType.Setter
        public Builder userinfoEndpoint(@Nullable String userinfoEndpoint) {
            this.userinfoEndpoint = userinfoEndpoint;
            return this;
        }
        @CustomType.Setter
        public Builder validation(@Nullable ConnectionOptionsValidation validation) {
            this.validation = validation;
            return this;
        }
        @CustomType.Setter
        public Builder waadCommonEndpoint(@Nullable Boolean waadCommonEndpoint) {
            this.waadCommonEndpoint = waadCommonEndpoint;
            return this;
        }
        @CustomType.Setter
        public Builder waadProtocol(@Nullable String waadProtocol) {
            this.waadProtocol = waadProtocol;
            return this;
        }
        public ConnectionOptions build() {
            final var o = new ConnectionOptions();
            o.adfsServer = adfsServer;
            o.allowedAudiences = allowedAudiences;
            o.apiEnableUsers = apiEnableUsers;
            o.appId = appId;
            o.authParams = authParams;
            o.authorizationEndpoint = authorizationEndpoint;
            o.bruteForceProtection = bruteForceProtection;
            o.clientId = clientId;
            o.clientSecret = clientSecret;
            o.communityBaseUrl = communityBaseUrl;
            o.configuration = configuration;
            o.customScripts = customScripts;
            o.debug = debug;
            o.digestAlgorithm = digestAlgorithm;
            o.disableCache = disableCache;
            o.disableSelfServiceChangePassword = disableSelfServiceChangePassword;
            o.disableSignOut = disableSignOut;
            o.disableSignup = disableSignup;
            o.discoveryUrl = discoveryUrl;
            o.domain = domain;
            o.domainAliases = domainAliases;
            o.enableScriptContext = enableScriptContext;
            o.enabledDatabaseCustomization = enabledDatabaseCustomization;
            o.entityId = entityId;
            o.fedMetadataXml = fedMetadataXml;
            o.fieldsMap = fieldsMap;
            o.forwardRequestInfo = forwardRequestInfo;
            o.from = from;
            o.gatewayAuthentication = gatewayAuthentication;
            o.gatewayUrl = gatewayUrl;
            o.iconUrl = iconUrl;
            o.identityApi = identityApi;
            o.idpInitiated = idpInitiated;
            o.importMode = importMode;
            o.ips = ips;
            o.issuer = issuer;
            o.jwksUri = jwksUri;
            o.keyId = keyId;
            o.maxGroupsToRetrieve = maxGroupsToRetrieve;
            o.messagingServiceSid = messagingServiceSid;
            o.metadataUrl = metadataUrl;
            o.metadataXml = metadataXml;
            o.mfa = mfa;
            o.name = name;
            o.nonPersistentAttrs = nonPersistentAttrs;
            o.passwordComplexityOptions = passwordComplexityOptions;
            o.passwordDictionary = passwordDictionary;
            o.passwordHistories = passwordHistories;
            o.passwordNoPersonalInfo = passwordNoPersonalInfo;
            o.passwordPolicy = passwordPolicy;
            o.pingFederateBaseUrl = pingFederateBaseUrl;
            o.pkceEnabled = pkceEnabled;
            o.protocolBinding = protocolBinding;
            o.provider = provider;
            o.requestTemplate = requestTemplate;
            o.requiresUsername = requiresUsername;
            o.scopes = scopes;
            o.scripts = scripts;
            o.setUserRootAttributes = setUserRootAttributes;
            o.shouldTrustEmailVerifiedConnection = shouldTrustEmailVerifiedConnection;
            o.signInEndpoint = signInEndpoint;
            o.signOutEndpoint = signOutEndpoint;
            o.signSamlRequest = signSamlRequest;
            o.signatureAlgorithm = signatureAlgorithm;
            o.signingCert = signingCert;
            o.signingKey = signingKey;
            o.strategyVersion = strategyVersion;
            o.subject = subject;
            o.syntax = syntax;
            o.teamId = teamId;
            o.template = template;
            o.tenantDomain = tenantDomain;
            o.tokenEndpoint = tokenEndpoint;
            o.totp = totp;
            o.twilioSid = twilioSid;
            o.twilioToken = twilioToken;
            o.type = type;
            o.upstreamParams = upstreamParams;
            o.useCertAuth = useCertAuth;
            o.useKerberos = useKerberos;
            o.useWsfed = useWsfed;
            o.userIdAttribute = userIdAttribute;
            o.userinfoEndpoint = userinfoEndpoint;
            o.validation = validation;
            o.waadCommonEndpoint = waadCommonEndpoint;
            o.waadProtocol = waadProtocol;
            return o;
        }
    }
}
