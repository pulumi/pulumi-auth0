// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.auth0.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ClientSessionTransfer {
    /**
     * @return Indicates whether the application is allowed to use a refresh token when using a session*transfer*token session.
     * 
     */
    private @Nullable Boolean allowRefreshToken;
    private @Nullable List<String> allowedAuthenticationMethods;
    /**
     * @return Indicates whether the application(Native app) can use the Token Exchange endpoint to create a session*transfer*token
     * 
     */
    private @Nullable Boolean canCreateSessionTransferToken;
    /**
     * @return Configures the level of device binding enforced when a session*transfer*token is consumed. Can be one of `ip`, `asn` or `none`.
     * 
     */
    private @Nullable String enforceDeviceBinding;

    private ClientSessionTransfer() {}
    /**
     * @return Indicates whether the application is allowed to use a refresh token when using a session*transfer*token session.
     * 
     */
    public Optional<Boolean> allowRefreshToken() {
        return Optional.ofNullable(this.allowRefreshToken);
    }
    public List<String> allowedAuthenticationMethods() {
        return this.allowedAuthenticationMethods == null ? List.of() : this.allowedAuthenticationMethods;
    }
    /**
     * @return Indicates whether the application(Native app) can use the Token Exchange endpoint to create a session*transfer*token
     * 
     */
    public Optional<Boolean> canCreateSessionTransferToken() {
        return Optional.ofNullable(this.canCreateSessionTransferToken);
    }
    /**
     * @return Configures the level of device binding enforced when a session*transfer*token is consumed. Can be one of `ip`, `asn` or `none`.
     * 
     */
    public Optional<String> enforceDeviceBinding() {
        return Optional.ofNullable(this.enforceDeviceBinding);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ClientSessionTransfer defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean allowRefreshToken;
        private @Nullable List<String> allowedAuthenticationMethods;
        private @Nullable Boolean canCreateSessionTransferToken;
        private @Nullable String enforceDeviceBinding;
        public Builder() {}
        public Builder(ClientSessionTransfer defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowRefreshToken = defaults.allowRefreshToken;
    	      this.allowedAuthenticationMethods = defaults.allowedAuthenticationMethods;
    	      this.canCreateSessionTransferToken = defaults.canCreateSessionTransferToken;
    	      this.enforceDeviceBinding = defaults.enforceDeviceBinding;
        }

        @CustomType.Setter
        public Builder allowRefreshToken(@Nullable Boolean allowRefreshToken) {

            this.allowRefreshToken = allowRefreshToken;
            return this;
        }
        @CustomType.Setter
        public Builder allowedAuthenticationMethods(@Nullable List<String> allowedAuthenticationMethods) {

            this.allowedAuthenticationMethods = allowedAuthenticationMethods;
            return this;
        }
        public Builder allowedAuthenticationMethods(String... allowedAuthenticationMethods) {
            return allowedAuthenticationMethods(List.of(allowedAuthenticationMethods));
        }
        @CustomType.Setter
        public Builder canCreateSessionTransferToken(@Nullable Boolean canCreateSessionTransferToken) {

            this.canCreateSessionTransferToken = canCreateSessionTransferToken;
            return this;
        }
        @CustomType.Setter
        public Builder enforceDeviceBinding(@Nullable String enforceDeviceBinding) {

            this.enforceDeviceBinding = enforceDeviceBinding;
            return this;
        }
        public ClientSessionTransfer build() {
            final var _resultValue = new ClientSessionTransfer();
            _resultValue.allowRefreshToken = allowRefreshToken;
            _resultValue.allowedAuthenticationMethods = allowedAuthenticationMethods;
            _resultValue.canCreateSessionTransferToken = canCreateSessionTransferToken;
            _resultValue.enforceDeviceBinding = enforceDeviceBinding;
            return _resultValue;
        }
    }
}
