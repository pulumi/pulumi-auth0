// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.auth0;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ResourceServerScopeArgs extends com.pulumi.resources.ResourceArgs {

    public static final ResourceServerScopeArgs Empty = new ResourceServerScopeArgs();

    /**
     * Description of the scope (permission).
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the scope (permission).
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Identifier of the resource server that the scope (permission) is associated with.
     * 
     */
    @Import(name="resourceServerIdentifier", required=true)
    private Output<String> resourceServerIdentifier;

    /**
     * @return Identifier of the resource server that the scope (permission) is associated with.
     * 
     */
    public Output<String> resourceServerIdentifier() {
        return this.resourceServerIdentifier;
    }

    /**
     * Name of the scope (permission).
     * 
     */
    @Import(name="scope", required=true)
    private Output<String> scope;

    /**
     * @return Name of the scope (permission).
     * 
     */
    public Output<String> scope() {
        return this.scope;
    }

    private ResourceServerScopeArgs() {}

    private ResourceServerScopeArgs(ResourceServerScopeArgs $) {
        this.description = $.description;
        this.resourceServerIdentifier = $.resourceServerIdentifier;
        this.scope = $.scope;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ResourceServerScopeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ResourceServerScopeArgs $;

        public Builder() {
            $ = new ResourceServerScopeArgs();
        }

        public Builder(ResourceServerScopeArgs defaults) {
            $ = new ResourceServerScopeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description Description of the scope (permission).
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the scope (permission).
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param resourceServerIdentifier Identifier of the resource server that the scope (permission) is associated with.
         * 
         * @return builder
         * 
         */
        public Builder resourceServerIdentifier(Output<String> resourceServerIdentifier) {
            $.resourceServerIdentifier = resourceServerIdentifier;
            return this;
        }

        /**
         * @param resourceServerIdentifier Identifier of the resource server that the scope (permission) is associated with.
         * 
         * @return builder
         * 
         */
        public Builder resourceServerIdentifier(String resourceServerIdentifier) {
            return resourceServerIdentifier(Output.of(resourceServerIdentifier));
        }

        /**
         * @param scope Name of the scope (permission).
         * 
         * @return builder
         * 
         */
        public Builder scope(Output<String> scope) {
            $.scope = scope;
            return this;
        }

        /**
         * @param scope Name of the scope (permission).
         * 
         * @return builder
         * 
         */
        public Builder scope(String scope) {
            return scope(Output.of(scope));
        }

        public ResourceServerScopeArgs build() {
            $.resourceServerIdentifier = Objects.requireNonNull($.resourceServerIdentifier, "expected parameter 'resourceServerIdentifier' to be non-null");
            $.scope = Objects.requireNonNull($.scope, "expected parameter 'scope' to be non-null");
            return $;
        }
    }

}
