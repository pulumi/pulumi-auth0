// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.auth0.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetNetworkAclRuleNotMatch {
    /**
     * @return ASNs. Must contain between 1 and 10 unique items.
     * 
     */
    private List<Integer> asns;
    /**
     * @return Geo Country Codes. Must contain between 1 and 10 unique items.
     * 
     */
    private List<String> geoCountryCodes;
    /**
     * @return Geo Subdivision Codes. Must contain between 1 and 10 unique items.
     * 
     */
    private List<String> geoSubdivisionCodes;
    /**
     * @return IPv4 CIDRs. Must contain between 1 and 10 unique items. Can be IPv4 addresses or CIDR blocks.
     * 
     */
    private List<String> ipv4Cidrs;
    /**
     * @return IPv6 CIDRs. Must contain between 1 and 10 unique items. Can be IPv6 addresses or CIDR blocks.
     * 
     */
    private List<String> ipv6Cidrs;
    /**
     * @return JA3 Fingerprints. Must contain between 1 and 10 unique items.
     * 
     */
    private List<String> ja3Fingerprints;
    /**
     * @return JA4 Fingerprints. Must contain between 1 and 10 unique items.
     * 
     */
    private List<String> ja4Fingerprints;
    /**
     * @return User Agents. Must contain between 1 and 10 unique items.
     * 
     */
    private List<String> userAgents;

    private GetNetworkAclRuleNotMatch() {}
    /**
     * @return ASNs. Must contain between 1 and 10 unique items.
     * 
     */
    public List<Integer> asns() {
        return this.asns;
    }
    /**
     * @return Geo Country Codes. Must contain between 1 and 10 unique items.
     * 
     */
    public List<String> geoCountryCodes() {
        return this.geoCountryCodes;
    }
    /**
     * @return Geo Subdivision Codes. Must contain between 1 and 10 unique items.
     * 
     */
    public List<String> geoSubdivisionCodes() {
        return this.geoSubdivisionCodes;
    }
    /**
     * @return IPv4 CIDRs. Must contain between 1 and 10 unique items. Can be IPv4 addresses or CIDR blocks.
     * 
     */
    public List<String> ipv4Cidrs() {
        return this.ipv4Cidrs;
    }
    /**
     * @return IPv6 CIDRs. Must contain between 1 and 10 unique items. Can be IPv6 addresses or CIDR blocks.
     * 
     */
    public List<String> ipv6Cidrs() {
        return this.ipv6Cidrs;
    }
    /**
     * @return JA3 Fingerprints. Must contain between 1 and 10 unique items.
     * 
     */
    public List<String> ja3Fingerprints() {
        return this.ja3Fingerprints;
    }
    /**
     * @return JA4 Fingerprints. Must contain between 1 and 10 unique items.
     * 
     */
    public List<String> ja4Fingerprints() {
        return this.ja4Fingerprints;
    }
    /**
     * @return User Agents. Must contain between 1 and 10 unique items.
     * 
     */
    public List<String> userAgents() {
        return this.userAgents;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNetworkAclRuleNotMatch defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<Integer> asns;
        private List<String> geoCountryCodes;
        private List<String> geoSubdivisionCodes;
        private List<String> ipv4Cidrs;
        private List<String> ipv6Cidrs;
        private List<String> ja3Fingerprints;
        private List<String> ja4Fingerprints;
        private List<String> userAgents;
        public Builder() {}
        public Builder(GetNetworkAclRuleNotMatch defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.asns = defaults.asns;
    	      this.geoCountryCodes = defaults.geoCountryCodes;
    	      this.geoSubdivisionCodes = defaults.geoSubdivisionCodes;
    	      this.ipv4Cidrs = defaults.ipv4Cidrs;
    	      this.ipv6Cidrs = defaults.ipv6Cidrs;
    	      this.ja3Fingerprints = defaults.ja3Fingerprints;
    	      this.ja4Fingerprints = defaults.ja4Fingerprints;
    	      this.userAgents = defaults.userAgents;
        }

        @CustomType.Setter
        public Builder asns(List<Integer> asns) {
            if (asns == null) {
              throw new MissingRequiredPropertyException("GetNetworkAclRuleNotMatch", "asns");
            }
            this.asns = asns;
            return this;
        }
        public Builder asns(Integer... asns) {
            return asns(List.of(asns));
        }
        @CustomType.Setter
        public Builder geoCountryCodes(List<String> geoCountryCodes) {
            if (geoCountryCodes == null) {
              throw new MissingRequiredPropertyException("GetNetworkAclRuleNotMatch", "geoCountryCodes");
            }
            this.geoCountryCodes = geoCountryCodes;
            return this;
        }
        public Builder geoCountryCodes(String... geoCountryCodes) {
            return geoCountryCodes(List.of(geoCountryCodes));
        }
        @CustomType.Setter
        public Builder geoSubdivisionCodes(List<String> geoSubdivisionCodes) {
            if (geoSubdivisionCodes == null) {
              throw new MissingRequiredPropertyException("GetNetworkAclRuleNotMatch", "geoSubdivisionCodes");
            }
            this.geoSubdivisionCodes = geoSubdivisionCodes;
            return this;
        }
        public Builder geoSubdivisionCodes(String... geoSubdivisionCodes) {
            return geoSubdivisionCodes(List.of(geoSubdivisionCodes));
        }
        @CustomType.Setter
        public Builder ipv4Cidrs(List<String> ipv4Cidrs) {
            if (ipv4Cidrs == null) {
              throw new MissingRequiredPropertyException("GetNetworkAclRuleNotMatch", "ipv4Cidrs");
            }
            this.ipv4Cidrs = ipv4Cidrs;
            return this;
        }
        public Builder ipv4Cidrs(String... ipv4Cidrs) {
            return ipv4Cidrs(List.of(ipv4Cidrs));
        }
        @CustomType.Setter
        public Builder ipv6Cidrs(List<String> ipv6Cidrs) {
            if (ipv6Cidrs == null) {
              throw new MissingRequiredPropertyException("GetNetworkAclRuleNotMatch", "ipv6Cidrs");
            }
            this.ipv6Cidrs = ipv6Cidrs;
            return this;
        }
        public Builder ipv6Cidrs(String... ipv6Cidrs) {
            return ipv6Cidrs(List.of(ipv6Cidrs));
        }
        @CustomType.Setter
        public Builder ja3Fingerprints(List<String> ja3Fingerprints) {
            if (ja3Fingerprints == null) {
              throw new MissingRequiredPropertyException("GetNetworkAclRuleNotMatch", "ja3Fingerprints");
            }
            this.ja3Fingerprints = ja3Fingerprints;
            return this;
        }
        public Builder ja3Fingerprints(String... ja3Fingerprints) {
            return ja3Fingerprints(List.of(ja3Fingerprints));
        }
        @CustomType.Setter
        public Builder ja4Fingerprints(List<String> ja4Fingerprints) {
            if (ja4Fingerprints == null) {
              throw new MissingRequiredPropertyException("GetNetworkAclRuleNotMatch", "ja4Fingerprints");
            }
            this.ja4Fingerprints = ja4Fingerprints;
            return this;
        }
        public Builder ja4Fingerprints(String... ja4Fingerprints) {
            return ja4Fingerprints(List.of(ja4Fingerprints));
        }
        @CustomType.Setter
        public Builder userAgents(List<String> userAgents) {
            if (userAgents == null) {
              throw new MissingRequiredPropertyException("GetNetworkAclRuleNotMatch", "userAgents");
            }
            this.userAgents = userAgents;
            return this;
        }
        public Builder userAgents(String... userAgents) {
            return userAgents(List.of(userAgents));
        }
        public GetNetworkAclRuleNotMatch build() {
            final var _resultValue = new GetNetworkAclRuleNotMatch();
            _resultValue.asns = asns;
            _resultValue.geoCountryCodes = geoCountryCodes;
            _resultValue.geoSubdivisionCodes = geoSubdivisionCodes;
            _resultValue.ipv4Cidrs = ipv4Cidrs;
            _resultValue.ipv6Cidrs = ipv6Cidrs;
            _resultValue.ja3Fingerprints = ja3Fingerprints;
            _resultValue.ja4Fingerprints = ja4Fingerprints;
            _resultValue.userAgents = userAgents;
            return _resultValue;
        }
    }
}
