// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.auth0.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class EmailProviderCredentials {
    /**
     * @return AWS Access Key ID. Used only for AWS.
     * 
     */
    private @Nullable String accessKeyId;
    /**
     * @return API Key for your email service. Will always be encrypted in our database.
     * 
     */
    private @Nullable String apiKey;
    /**
     * @return Azure Communication Services Connection String.
     * 
     */
    private @Nullable String azureCsConnectionString;
    /**
     * @return Domain name.
     * 
     */
    private @Nullable String domain;
    /**
     * @return Microsoft 365 Client ID.
     * 
     */
    private @Nullable String ms365ClientId;
    /**
     * @return Microsoft 365 Client Secret.
     * 
     */
    private @Nullable String ms365ClientSecret;
    /**
     * @return Microsoft 365 Tenant ID.
     * 
     */
    private @Nullable String ms365TenantId;
    /**
     * @return Default region. Used only for AWS, Mailgun, and SparkPost.
     * 
     */
    private @Nullable String region;
    /**
     * @return AWS Secret Key. Will always be encrypted in our database. Used only for AWS.
     * 
     */
    private @Nullable String secretAccessKey;
    /**
     * @return Hostname or IP address of your SMTP server. Used only for SMTP.
     * 
     */
    private @Nullable String smtpHost;
    /**
     * @return SMTP password. Used only for SMTP.
     * 
     */
    private @Nullable String smtpPass;
    /**
     * @return Port used by your SMTP server. Please avoid using port 25 if possible because many providers have limitations on this port. Used only for SMTP.
     * 
     */
    private @Nullable Integer smtpPort;
    /**
     * @return SMTP username. Used only for SMTP.
     * 
     */
    private @Nullable String smtpUser;

    private EmailProviderCredentials() {}
    /**
     * @return AWS Access Key ID. Used only for AWS.
     * 
     */
    public Optional<String> accessKeyId() {
        return Optional.ofNullable(this.accessKeyId);
    }
    /**
     * @return API Key for your email service. Will always be encrypted in our database.
     * 
     */
    public Optional<String> apiKey() {
        return Optional.ofNullable(this.apiKey);
    }
    /**
     * @return Azure Communication Services Connection String.
     * 
     */
    public Optional<String> azureCsConnectionString() {
        return Optional.ofNullable(this.azureCsConnectionString);
    }
    /**
     * @return Domain name.
     * 
     */
    public Optional<String> domain() {
        return Optional.ofNullable(this.domain);
    }
    /**
     * @return Microsoft 365 Client ID.
     * 
     */
    public Optional<String> ms365ClientId() {
        return Optional.ofNullable(this.ms365ClientId);
    }
    /**
     * @return Microsoft 365 Client Secret.
     * 
     */
    public Optional<String> ms365ClientSecret() {
        return Optional.ofNullable(this.ms365ClientSecret);
    }
    /**
     * @return Microsoft 365 Tenant ID.
     * 
     */
    public Optional<String> ms365TenantId() {
        return Optional.ofNullable(this.ms365TenantId);
    }
    /**
     * @return Default region. Used only for AWS, Mailgun, and SparkPost.
     * 
     */
    public Optional<String> region() {
        return Optional.ofNullable(this.region);
    }
    /**
     * @return AWS Secret Key. Will always be encrypted in our database. Used only for AWS.
     * 
     */
    public Optional<String> secretAccessKey() {
        return Optional.ofNullable(this.secretAccessKey);
    }
    /**
     * @return Hostname or IP address of your SMTP server. Used only for SMTP.
     * 
     */
    public Optional<String> smtpHost() {
        return Optional.ofNullable(this.smtpHost);
    }
    /**
     * @return SMTP password. Used only for SMTP.
     * 
     */
    public Optional<String> smtpPass() {
        return Optional.ofNullable(this.smtpPass);
    }
    /**
     * @return Port used by your SMTP server. Please avoid using port 25 if possible because many providers have limitations on this port. Used only for SMTP.
     * 
     */
    public Optional<Integer> smtpPort() {
        return Optional.ofNullable(this.smtpPort);
    }
    /**
     * @return SMTP username. Used only for SMTP.
     * 
     */
    public Optional<String> smtpUser() {
        return Optional.ofNullable(this.smtpUser);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EmailProviderCredentials defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String accessKeyId;
        private @Nullable String apiKey;
        private @Nullable String azureCsConnectionString;
        private @Nullable String domain;
        private @Nullable String ms365ClientId;
        private @Nullable String ms365ClientSecret;
        private @Nullable String ms365TenantId;
        private @Nullable String region;
        private @Nullable String secretAccessKey;
        private @Nullable String smtpHost;
        private @Nullable String smtpPass;
        private @Nullable Integer smtpPort;
        private @Nullable String smtpUser;
        public Builder() {}
        public Builder(EmailProviderCredentials defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessKeyId = defaults.accessKeyId;
    	      this.apiKey = defaults.apiKey;
    	      this.azureCsConnectionString = defaults.azureCsConnectionString;
    	      this.domain = defaults.domain;
    	      this.ms365ClientId = defaults.ms365ClientId;
    	      this.ms365ClientSecret = defaults.ms365ClientSecret;
    	      this.ms365TenantId = defaults.ms365TenantId;
    	      this.region = defaults.region;
    	      this.secretAccessKey = defaults.secretAccessKey;
    	      this.smtpHost = defaults.smtpHost;
    	      this.smtpPass = defaults.smtpPass;
    	      this.smtpPort = defaults.smtpPort;
    	      this.smtpUser = defaults.smtpUser;
        }

        @CustomType.Setter
        public Builder accessKeyId(@Nullable String accessKeyId) {

            this.accessKeyId = accessKeyId;
            return this;
        }
        @CustomType.Setter
        public Builder apiKey(@Nullable String apiKey) {

            this.apiKey = apiKey;
            return this;
        }
        @CustomType.Setter
        public Builder azureCsConnectionString(@Nullable String azureCsConnectionString) {

            this.azureCsConnectionString = azureCsConnectionString;
            return this;
        }
        @CustomType.Setter
        public Builder domain(@Nullable String domain) {

            this.domain = domain;
            return this;
        }
        @CustomType.Setter
        public Builder ms365ClientId(@Nullable String ms365ClientId) {

            this.ms365ClientId = ms365ClientId;
            return this;
        }
        @CustomType.Setter
        public Builder ms365ClientSecret(@Nullable String ms365ClientSecret) {

            this.ms365ClientSecret = ms365ClientSecret;
            return this;
        }
        @CustomType.Setter
        public Builder ms365TenantId(@Nullable String ms365TenantId) {

            this.ms365TenantId = ms365TenantId;
            return this;
        }
        @CustomType.Setter
        public Builder region(@Nullable String region) {

            this.region = region;
            return this;
        }
        @CustomType.Setter
        public Builder secretAccessKey(@Nullable String secretAccessKey) {

            this.secretAccessKey = secretAccessKey;
            return this;
        }
        @CustomType.Setter
        public Builder smtpHost(@Nullable String smtpHost) {

            this.smtpHost = smtpHost;
            return this;
        }
        @CustomType.Setter
        public Builder smtpPass(@Nullable String smtpPass) {

            this.smtpPass = smtpPass;
            return this;
        }
        @CustomType.Setter
        public Builder smtpPort(@Nullable Integer smtpPort) {

            this.smtpPort = smtpPort;
            return this;
        }
        @CustomType.Setter
        public Builder smtpUser(@Nullable String smtpUser) {

            this.smtpUser = smtpUser;
            return this;
        }
        public EmailProviderCredentials build() {
            final var _resultValue = new EmailProviderCredentials();
            _resultValue.accessKeyId = accessKeyId;
            _resultValue.apiKey = apiKey;
            _resultValue.azureCsConnectionString = azureCsConnectionString;
            _resultValue.domain = domain;
            _resultValue.ms365ClientId = ms365ClientId;
            _resultValue.ms365ClientSecret = ms365ClientSecret;
            _resultValue.ms365TenantId = ms365TenantId;
            _resultValue.region = region;
            _resultValue.secretAccessKey = secretAccessKey;
            _resultValue.smtpHost = smtpHost;
            _resultValue.smtpPass = smtpPass;
            _resultValue.smtpPort = smtpPort;
            _resultValue.smtpUser = smtpUser;
            return _resultValue;
        }
    }
}
