// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.auth0.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class ClientRefreshTokenPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final ClientRefreshTokenPolicyArgs Empty = new ClientRefreshTokenPolicyArgs();

    /**
     * The identifier of the resource server to which the Multi Resource Refresh Token Policy applies
     * 
     */
    @Import(name="audience", required=true)
    private Output<String> audience;

    /**
     * @return The identifier of the resource server to which the Multi Resource Refresh Token Policy applies
     * 
     */
    public Output<String> audience() {
        return this.audience;
    }

    /**
     * The resource server permissions granted under the Multi Resource Refresh Token Policy, defining the context in which an access token can be used
     * 
     */
    @Import(name="scopes", required=true)
    private Output<List<String>> scopes;

    /**
     * @return The resource server permissions granted under the Multi Resource Refresh Token Policy, defining the context in which an access token can be used
     * 
     */
    public Output<List<String>> scopes() {
        return this.scopes;
    }

    private ClientRefreshTokenPolicyArgs() {}

    private ClientRefreshTokenPolicyArgs(ClientRefreshTokenPolicyArgs $) {
        this.audience = $.audience;
        this.scopes = $.scopes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClientRefreshTokenPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClientRefreshTokenPolicyArgs $;

        public Builder() {
            $ = new ClientRefreshTokenPolicyArgs();
        }

        public Builder(ClientRefreshTokenPolicyArgs defaults) {
            $ = new ClientRefreshTokenPolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param audience The identifier of the resource server to which the Multi Resource Refresh Token Policy applies
         * 
         * @return builder
         * 
         */
        public Builder audience(Output<String> audience) {
            $.audience = audience;
            return this;
        }

        /**
         * @param audience The identifier of the resource server to which the Multi Resource Refresh Token Policy applies
         * 
         * @return builder
         * 
         */
        public Builder audience(String audience) {
            return audience(Output.of(audience));
        }

        /**
         * @param scopes The resource server permissions granted under the Multi Resource Refresh Token Policy, defining the context in which an access token can be used
         * 
         * @return builder
         * 
         */
        public Builder scopes(Output<List<String>> scopes) {
            $.scopes = scopes;
            return this;
        }

        /**
         * @param scopes The resource server permissions granted under the Multi Resource Refresh Token Policy, defining the context in which an access token can be used
         * 
         * @return builder
         * 
         */
        public Builder scopes(List<String> scopes) {
            return scopes(Output.of(scopes));
        }

        /**
         * @param scopes The resource server permissions granted under the Multi Resource Refresh Token Policy, defining the context in which an access token can be used
         * 
         * @return builder
         * 
         */
        public Builder scopes(String... scopes) {
            return scopes(List.of(scopes));
        }

        public ClientRefreshTokenPolicyArgs build() {
            if ($.audience == null) {
                throw new MissingRequiredPropertyException("ClientRefreshTokenPolicyArgs", "audience");
            }
            if ($.scopes == null) {
                throw new MissingRequiredPropertyException("ClientRefreshTokenPolicyArgs", "scopes");
            }
            return $;
        }
    }

}
