// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.auth0.outputs;

import com.pulumi.auth0.outputs.GetConnectionOption;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetConnectionResult {
    /**
     * @return The ID of the connection. If not provided, `name` must be set.
     * 
     */
    private @Nullable String connectionId;
    /**
     * @return Name used in login screen.
     * 
     */
    private String displayName;
    /**
     * @return IDs of the clients for which the connection is enabled.
     * 
     */
    private List<String> enabledClients;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Indicates whether the connection is domain level.
     * 
     */
    private Boolean isDomainConnection;
    /**
     * @return Metadata associated with the connection, in the form of a map of string values (max 255 chars).
     * 
     */
    private Map<String,String> metadata;
    /**
     * @return The name of the connection. If not provided, `connection_id` must be set.
     * 
     */
    private @Nullable String name;
    /**
     * @return Configuration settings for connection options.
     * 
     */
    private List<GetConnectionOption> options;
    /**
     * @return Defines the realms for which the connection will be used (e.g., email domains). If not specified, the connection name is added as the realm.
     * 
     */
    private List<String> realms;
    /**
     * @return Display connection as a button. Only available on enterprise connections.
     * 
     */
    private Boolean showAsButton;
    /**
     * @return Type of the connection, which indicates the identity provider.
     * 
     */
    private String strategy;

    private GetConnectionResult() {}
    /**
     * @return The ID of the connection. If not provided, `name` must be set.
     * 
     */
    public Optional<String> connectionId() {
        return Optional.ofNullable(this.connectionId);
    }
    /**
     * @return Name used in login screen.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return IDs of the clients for which the connection is enabled.
     * 
     */
    public List<String> enabledClients() {
        return this.enabledClients;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Indicates whether the connection is domain level.
     * 
     */
    public Boolean isDomainConnection() {
        return this.isDomainConnection;
    }
    /**
     * @return Metadata associated with the connection, in the form of a map of string values (max 255 chars).
     * 
     */
    public Map<String,String> metadata() {
        return this.metadata;
    }
    /**
     * @return The name of the connection. If not provided, `connection_id` must be set.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return Configuration settings for connection options.
     * 
     */
    public List<GetConnectionOption> options() {
        return this.options;
    }
    /**
     * @return Defines the realms for which the connection will be used (e.g., email domains). If not specified, the connection name is added as the realm.
     * 
     */
    public List<String> realms() {
        return this.realms;
    }
    /**
     * @return Display connection as a button. Only available on enterprise connections.
     * 
     */
    public Boolean showAsButton() {
        return this.showAsButton;
    }
    /**
     * @return Type of the connection, which indicates the identity provider.
     * 
     */
    public String strategy() {
        return this.strategy;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetConnectionResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String connectionId;
        private String displayName;
        private List<String> enabledClients;
        private String id;
        private Boolean isDomainConnection;
        private Map<String,String> metadata;
        private @Nullable String name;
        private List<GetConnectionOption> options;
        private List<String> realms;
        private Boolean showAsButton;
        private String strategy;
        public Builder() {}
        public Builder(GetConnectionResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.connectionId = defaults.connectionId;
    	      this.displayName = defaults.displayName;
    	      this.enabledClients = defaults.enabledClients;
    	      this.id = defaults.id;
    	      this.isDomainConnection = defaults.isDomainConnection;
    	      this.metadata = defaults.metadata;
    	      this.name = defaults.name;
    	      this.options = defaults.options;
    	      this.realms = defaults.realms;
    	      this.showAsButton = defaults.showAsButton;
    	      this.strategy = defaults.strategy;
        }

        @CustomType.Setter
        public Builder connectionId(@Nullable String connectionId) {
            this.connectionId = connectionId;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        @CustomType.Setter
        public Builder enabledClients(List<String> enabledClients) {
            this.enabledClients = Objects.requireNonNull(enabledClients);
            return this;
        }
        public Builder enabledClients(String... enabledClients) {
            return enabledClients(List.of(enabledClients));
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder isDomainConnection(Boolean isDomainConnection) {
            this.isDomainConnection = Objects.requireNonNull(isDomainConnection);
            return this;
        }
        @CustomType.Setter
        public Builder metadata(Map<String,String> metadata) {
            this.metadata = Objects.requireNonNull(metadata);
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder options(List<GetConnectionOption> options) {
            this.options = Objects.requireNonNull(options);
            return this;
        }
        public Builder options(GetConnectionOption... options) {
            return options(List.of(options));
        }
        @CustomType.Setter
        public Builder realms(List<String> realms) {
            this.realms = Objects.requireNonNull(realms);
            return this;
        }
        public Builder realms(String... realms) {
            return realms(List.of(realms));
        }
        @CustomType.Setter
        public Builder showAsButton(Boolean showAsButton) {
            this.showAsButton = Objects.requireNonNull(showAsButton);
            return this;
        }
        @CustomType.Setter
        public Builder strategy(String strategy) {
            this.strategy = Objects.requireNonNull(strategy);
            return this;
        }
        public GetConnectionResult build() {
            final var o = new GetConnectionResult();
            o.connectionId = connectionId;
            o.displayName = displayName;
            o.enabledClients = enabledClients;
            o.id = id;
            o.isDomainConnection = isDomainConnection;
            o.metadata = metadata;
            o.name = name;
            o.options = options;
            o.realms = realms;
            o.showAsButton = showAsButton;
            o.strategy = strategy;
            return o;
        }
    }
}
