// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.auth0.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OrganizationConnectionsEnabledConnectionArgs extends com.pulumi.resources.ResourceArgs {

    public static final OrganizationConnectionsEnabledConnectionArgs Empty = new OrganizationConnectionsEnabledConnectionArgs();

    /**
     * When `true`, all users that log in with this connection will be automatically granted membership in the organization. When `false`, users must be granted membership in the organization before logging in with this connection.
     * 
     */
    @Import(name="assignMembershipOnLogin")
    private @Nullable Output<Boolean> assignMembershipOnLogin;

    /**
     * @return When `true`, all users that log in with this connection will be automatically granted membership in the organization. When `false`, users must be granted membership in the organization before logging in with this connection.
     * 
     */
    public Optional<Output<Boolean>> assignMembershipOnLogin() {
        return Optional.ofNullable(this.assignMembershipOnLogin);
    }

    /**
     * The ID of the connection to enable for the organization.
     * 
     */
    @Import(name="connectionId", required=true)
    private Output<String> connectionId;

    /**
     * @return The ID of the connection to enable for the organization.
     * 
     */
    public Output<String> connectionId() {
        return this.connectionId;
    }

    /**
     * Determines whether organization sign-up should be enabled for this organization connection. Only applicable for database connections. Note: `is_signup_enabled` can only be `true` if `assign_membership_on_login` is `true`.
     * 
     */
    @Import(name="isSignupEnabled")
    private @Nullable Output<Boolean> isSignupEnabled;

    /**
     * @return Determines whether organization sign-up should be enabled for this organization connection. Only applicable for database connections. Note: `is_signup_enabled` can only be `true` if `assign_membership_on_login` is `true`.
     * 
     */
    public Optional<Output<Boolean>> isSignupEnabled() {
        return Optional.ofNullable(this.isSignupEnabled);
    }

    /**
     * Determines whether a connection should be displayed on this organization’s login prompt. Only applicable for enterprise connections.
     * 
     */
    @Import(name="showAsButton")
    private @Nullable Output<Boolean> showAsButton;

    /**
     * @return Determines whether a connection should be displayed on this organization’s login prompt. Only applicable for enterprise connections.
     * 
     */
    public Optional<Output<Boolean>> showAsButton() {
        return Optional.ofNullable(this.showAsButton);
    }

    private OrganizationConnectionsEnabledConnectionArgs() {}

    private OrganizationConnectionsEnabledConnectionArgs(OrganizationConnectionsEnabledConnectionArgs $) {
        this.assignMembershipOnLogin = $.assignMembershipOnLogin;
        this.connectionId = $.connectionId;
        this.isSignupEnabled = $.isSignupEnabled;
        this.showAsButton = $.showAsButton;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OrganizationConnectionsEnabledConnectionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OrganizationConnectionsEnabledConnectionArgs $;

        public Builder() {
            $ = new OrganizationConnectionsEnabledConnectionArgs();
        }

        public Builder(OrganizationConnectionsEnabledConnectionArgs defaults) {
            $ = new OrganizationConnectionsEnabledConnectionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param assignMembershipOnLogin When `true`, all users that log in with this connection will be automatically granted membership in the organization. When `false`, users must be granted membership in the organization before logging in with this connection.
         * 
         * @return builder
         * 
         */
        public Builder assignMembershipOnLogin(@Nullable Output<Boolean> assignMembershipOnLogin) {
            $.assignMembershipOnLogin = assignMembershipOnLogin;
            return this;
        }

        /**
         * @param assignMembershipOnLogin When `true`, all users that log in with this connection will be automatically granted membership in the organization. When `false`, users must be granted membership in the organization before logging in with this connection.
         * 
         * @return builder
         * 
         */
        public Builder assignMembershipOnLogin(Boolean assignMembershipOnLogin) {
            return assignMembershipOnLogin(Output.of(assignMembershipOnLogin));
        }

        /**
         * @param connectionId The ID of the connection to enable for the organization.
         * 
         * @return builder
         * 
         */
        public Builder connectionId(Output<String> connectionId) {
            $.connectionId = connectionId;
            return this;
        }

        /**
         * @param connectionId The ID of the connection to enable for the organization.
         * 
         * @return builder
         * 
         */
        public Builder connectionId(String connectionId) {
            return connectionId(Output.of(connectionId));
        }

        /**
         * @param isSignupEnabled Determines whether organization sign-up should be enabled for this organization connection. Only applicable for database connections. Note: `is_signup_enabled` can only be `true` if `assign_membership_on_login` is `true`.
         * 
         * @return builder
         * 
         */
        public Builder isSignupEnabled(@Nullable Output<Boolean> isSignupEnabled) {
            $.isSignupEnabled = isSignupEnabled;
            return this;
        }

        /**
         * @param isSignupEnabled Determines whether organization sign-up should be enabled for this organization connection. Only applicable for database connections. Note: `is_signup_enabled` can only be `true` if `assign_membership_on_login` is `true`.
         * 
         * @return builder
         * 
         */
        public Builder isSignupEnabled(Boolean isSignupEnabled) {
            return isSignupEnabled(Output.of(isSignupEnabled));
        }

        /**
         * @param showAsButton Determines whether a connection should be displayed on this organization’s login prompt. Only applicable for enterprise connections.
         * 
         * @return builder
         * 
         */
        public Builder showAsButton(@Nullable Output<Boolean> showAsButton) {
            $.showAsButton = showAsButton;
            return this;
        }

        /**
         * @param showAsButton Determines whether a connection should be displayed on this organization’s login prompt. Only applicable for enterprise connections.
         * 
         * @return builder
         * 
         */
        public Builder showAsButton(Boolean showAsButton) {
            return showAsButton(Output.of(showAsButton));
        }

        public OrganizationConnectionsEnabledConnectionArgs build() {
            if ($.connectionId == null) {
                throw new MissingRequiredPropertyException("OrganizationConnectionsEnabledConnectionArgs", "connectionId");
            }
            return $;
        }
    }

}
