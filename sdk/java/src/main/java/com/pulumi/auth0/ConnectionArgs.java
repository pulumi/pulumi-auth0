// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.auth0;

import com.pulumi.auth0.inputs.ConnectionOptionsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConnectionArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConnectionArgs Empty = new ConnectionArgs();

    /**
     * Name used in login screen.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return Name used in login screen.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * Indicates whether the connection is domain level.
     * 
     */
    @Import(name="isDomainConnection")
    private @Nullable Output<Boolean> isDomainConnection;

    /**
     * @return Indicates whether the connection is domain level.
     * 
     */
    public Optional<Output<Boolean>> isDomainConnection() {
        return Optional.ofNullable(this.isDomainConnection);
    }

    /**
     * Metadata associated with the connection, in the form of a map of string values (max 255 chars).
     * 
     */
    @Import(name="metadata")
    private @Nullable Output<Map<String,String>> metadata;

    /**
     * @return Metadata associated with the connection, in the form of a map of string values (max 255 chars).
     * 
     */
    public Optional<Output<Map<String,String>>> metadata() {
        return Optional.ofNullable(this.metadata);
    }

    /**
     * The public name of the email or SMS Connection. In most cases this is the same name as the connection name.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The public name of the email or SMS Connection. In most cases this is the same name as the connection name.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Configuration settings for connection options.
     * 
     */
    @Import(name="options")
    private @Nullable Output<ConnectionOptionsArgs> options;

    /**
     * @return Configuration settings for connection options.
     * 
     */
    public Optional<Output<ConnectionOptionsArgs>> options() {
        return Optional.ofNullable(this.options);
    }

    /**
     * Defines the realms for which the connection will be used (e.g., email domains). If not specified, the connection name is added as the realm.
     * 
     */
    @Import(name="realms")
    private @Nullable Output<List<String>> realms;

    /**
     * @return Defines the realms for which the connection will be used (e.g., email domains). If not specified, the connection name is added as the realm.
     * 
     */
    public Optional<Output<List<String>>> realms() {
        return Optional.ofNullable(this.realms);
    }

    /**
     * Display connection as a button. Only available on enterprise connections.
     * 
     */
    @Import(name="showAsButton")
    private @Nullable Output<Boolean> showAsButton;

    /**
     * @return Display connection as a button. Only available on enterprise connections.
     * 
     */
    public Optional<Output<Boolean>> showAsButton() {
        return Optional.ofNullable(this.showAsButton);
    }

    /**
     * Type of the connection, which indicates the identity provider.
     * 
     */
    @Import(name="strategy", required=true)
    private Output<String> strategy;

    /**
     * @return Type of the connection, which indicates the identity provider.
     * 
     */
    public Output<String> strategy() {
        return this.strategy;
    }

    private ConnectionArgs() {}

    private ConnectionArgs(ConnectionArgs $) {
        this.displayName = $.displayName;
        this.isDomainConnection = $.isDomainConnection;
        this.metadata = $.metadata;
        this.name = $.name;
        this.options = $.options;
        this.realms = $.realms;
        this.showAsButton = $.showAsButton;
        this.strategy = $.strategy;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectionArgs $;

        public Builder() {
            $ = new ConnectionArgs();
        }

        public Builder(ConnectionArgs defaults) {
            $ = new ConnectionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param displayName Name used in login screen.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName Name used in login screen.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param isDomainConnection Indicates whether the connection is domain level.
         * 
         * @return builder
         * 
         */
        public Builder isDomainConnection(@Nullable Output<Boolean> isDomainConnection) {
            $.isDomainConnection = isDomainConnection;
            return this;
        }

        /**
         * @param isDomainConnection Indicates whether the connection is domain level.
         * 
         * @return builder
         * 
         */
        public Builder isDomainConnection(Boolean isDomainConnection) {
            return isDomainConnection(Output.of(isDomainConnection));
        }

        /**
         * @param metadata Metadata associated with the connection, in the form of a map of string values (max 255 chars).
         * 
         * @return builder
         * 
         */
        public Builder metadata(@Nullable Output<Map<String,String>> metadata) {
            $.metadata = metadata;
            return this;
        }

        /**
         * @param metadata Metadata associated with the connection, in the form of a map of string values (max 255 chars).
         * 
         * @return builder
         * 
         */
        public Builder metadata(Map<String,String> metadata) {
            return metadata(Output.of(metadata));
        }

        /**
         * @param name The public name of the email or SMS Connection. In most cases this is the same name as the connection name.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The public name of the email or SMS Connection. In most cases this is the same name as the connection name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param options Configuration settings for connection options.
         * 
         * @return builder
         * 
         */
        public Builder options(@Nullable Output<ConnectionOptionsArgs> options) {
            $.options = options;
            return this;
        }

        /**
         * @param options Configuration settings for connection options.
         * 
         * @return builder
         * 
         */
        public Builder options(ConnectionOptionsArgs options) {
            return options(Output.of(options));
        }

        /**
         * @param realms Defines the realms for which the connection will be used (e.g., email domains). If not specified, the connection name is added as the realm.
         * 
         * @return builder
         * 
         */
        public Builder realms(@Nullable Output<List<String>> realms) {
            $.realms = realms;
            return this;
        }

        /**
         * @param realms Defines the realms for which the connection will be used (e.g., email domains). If not specified, the connection name is added as the realm.
         * 
         * @return builder
         * 
         */
        public Builder realms(List<String> realms) {
            return realms(Output.of(realms));
        }

        /**
         * @param realms Defines the realms for which the connection will be used (e.g., email domains). If not specified, the connection name is added as the realm.
         * 
         * @return builder
         * 
         */
        public Builder realms(String... realms) {
            return realms(List.of(realms));
        }

        /**
         * @param showAsButton Display connection as a button. Only available on enterprise connections.
         * 
         * @return builder
         * 
         */
        public Builder showAsButton(@Nullable Output<Boolean> showAsButton) {
            $.showAsButton = showAsButton;
            return this;
        }

        /**
         * @param showAsButton Display connection as a button. Only available on enterprise connections.
         * 
         * @return builder
         * 
         */
        public Builder showAsButton(Boolean showAsButton) {
            return showAsButton(Output.of(showAsButton));
        }

        /**
         * @param strategy Type of the connection, which indicates the identity provider.
         * 
         * @return builder
         * 
         */
        public Builder strategy(Output<String> strategy) {
            $.strategy = strategy;
            return this;
        }

        /**
         * @param strategy Type of the connection, which indicates the identity provider.
         * 
         * @return builder
         * 
         */
        public Builder strategy(String strategy) {
            return strategy(Output.of(strategy));
        }

        public ConnectionArgs build() {
            $.strategy = Objects.requireNonNull($.strategy, "expected parameter 'strategy' to be non-null");
            return $;
        }
    }

}
