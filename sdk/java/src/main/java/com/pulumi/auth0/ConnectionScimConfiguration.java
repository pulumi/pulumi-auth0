// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.auth0;

import com.pulumi.auth0.ConnectionScimConfigurationArgs;
import com.pulumi.auth0.Utilities;
import com.pulumi.auth0.inputs.ConnectionScimConfigurationState;
import com.pulumi.auth0.outputs.ConnectionScimConfigurationMapping;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * With this resource, you can configure [SCIM(System for Cross-domain Identity Management)](https://simplecloud.info/) support for `SAML` and `OpenID Connect` Enterprise connections.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.auth0.Connection;
 * import com.pulumi.auth0.ConnectionArgs;
 * import com.pulumi.auth0.inputs.ConnectionOptionsArgs;
 * import com.pulumi.auth0.ConnectionScimConfiguration;
 * import com.pulumi.auth0.ConnectionScimConfigurationArgs;
 * import com.pulumi.auth0.inputs.ConnectionScimConfigurationMappingArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var myEnterpriseConnection = new Connection("myEnterpriseConnection", ConnectionArgs.builder()
 *             .name("my-enterprise-connection")
 *             .displayName("My Enterprise Connection")
 *             .strategy("okta")
 *             .options(ConnectionOptionsArgs.builder()
 *                 .clientId("1234567")
 *                 .clientSecret("1234567")
 *                 .issuer("https://example.okta.com")
 *                 .jwksUri("https://example.okta.com/oauth2/v1/keys")
 *                 .tokenEndpoint("https://example.okta.com/oauth2/v1/token")
 *                 .authorizationEndpoint("https://example.okta.com/oauth2/v1/authorize")
 *                 .build())
 *             .build());
 * 
 *         var myEnterpriseConnection2 = new Connection("myEnterpriseConnection2", ConnectionArgs.builder()
 *             .name("my-enterprise-connection-2")
 *             .displayName("My Enterprise Connection 2")
 *             .strategy("okta")
 *             .options(ConnectionOptionsArgs.builder()
 *                 .clientId("1234567")
 *                 .clientSecret("1234567")
 *                 .issuer("https://example.okta.com")
 *                 .jwksUri("https://example.okta.com/oauth2/v1/keys")
 *                 .tokenEndpoint("https://example.okta.com/oauth2/v1/token")
 *                 .authorizationEndpoint("https://example.okta.com/oauth2/v1/authorize")
 *                 .build())
 *             .build());
 * 
 *         // A resource for configuring an Auth0 Connection SCIM Configuration, using default values.
 *         // Only one can be specified for a connection.
 *         var myConnScimConfigurationDefault = new ConnectionScimConfiguration("myConnScimConfigurationDefault", ConnectionScimConfigurationArgs.builder()
 *             .connectionId(myEnterpriseConnection.id())
 *             .build());
 * 
 *         // A resource for configuring an Auth0 Connection SCIM Configuration, specifying `user_id_attribute` and `mapping`.
 *         // Only one can be specified for a connection.
 *         var myConnScimConfiguration = new ConnectionScimConfiguration("myConnScimConfiguration", ConnectionScimConfigurationArgs.builder()
 *             .connectionId(myEnterpriseConnection2.id())
 *             .userIdAttribute("attribute1")
 *             .mappings(            
 *                 ConnectionScimConfigurationMappingArgs.builder()
 *                     .auth0("auth0_attribute1")
 *                     .scim("sacim_attribute1")
 *                     .build(),
 *                 ConnectionScimConfigurationMappingArgs.builder()
 *                     .auth0("auth0_attribute2")
 *                     .scim("sacim_attribute2")
 *                     .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * This resource can be imported by specifying the connection ID &lt;connectionID&gt;
 * 
 * # 
 * 
 * Example:
 * 
 * ```sh
 * $ pulumi import auth0:index/connectionScimConfiguration:ConnectionScimConfiguration my_conn_scim_conf &#34;con_XXXXX&#34;
 * ```
 * 
 */
@ResourceType(type="auth0:index/connectionScimConfiguration:ConnectionScimConfiguration")
public class ConnectionScimConfiguration extends com.pulumi.resources.CustomResource {
    /**
     * ID of the connection for this SCIM configuration.
     * 
     */
    @Export(name="connectionId", refs={String.class}, tree="[0]")
    private Output<String> connectionId;

    /**
     * @return ID of the connection for this SCIM configuration.
     * 
     */
    public Output<String> connectionId() {
        return this.connectionId;
    }
    /**
     * Name of the connection for this SCIM configuration.
     * 
     */
    @Export(name="connectionName", refs={String.class}, tree="[0]")
    private Output<String> connectionName;

    /**
     * @return Name of the connection for this SCIM configuration.
     * 
     */
    public Output<String> connectionName() {
        return this.connectionName;
    }
    /**
     * Mapping between Auth0 attributes and SCIM attributes. If `user_id_attribute` is set, `mapping` must be set as well.
     * 
     */
    @Export(name="mappings", refs={List.class,ConnectionScimConfigurationMapping.class}, tree="[0,1]")
    private Output<List<ConnectionScimConfigurationMapping>> mappings;

    /**
     * @return Mapping between Auth0 attributes and SCIM attributes. If `user_id_attribute` is set, `mapping` must be set as well.
     * 
     */
    public Output<List<ConnectionScimConfigurationMapping>> mappings() {
        return this.mappings;
    }
    /**
     * Schema of the connection for this SCIM configuration.
     * 
     */
    @Export(name="strategy", refs={String.class}, tree="[0]")
    private Output<String> strategy;

    /**
     * @return Schema of the connection for this SCIM configuration.
     * 
     */
    public Output<String> strategy() {
        return this.strategy;
    }
    /**
     * Name of the tenant for this SCIM configuration.
     * 
     */
    @Export(name="tenantName", refs={String.class}, tree="[0]")
    private Output<String> tenantName;

    /**
     * @return Name of the tenant for this SCIM configuration.
     * 
     */
    public Output<String> tenantName() {
        return this.tenantName;
    }
    /**
     * User ID attribute for generation unique of user ids. If `user_id_attribute` is set, `mapping` must be set as well. Defaults to `userName` for SAML connections and `externalId` for OIDC connections.
     * 
     */
    @Export(name="userIdAttribute", refs={String.class}, tree="[0]")
    private Output<String> userIdAttribute;

    /**
     * @return User ID attribute for generation unique of user ids. If `user_id_attribute` is set, `mapping` must be set as well. Defaults to `userName` for SAML connections and `externalId` for OIDC connections.
     * 
     */
    public Output<String> userIdAttribute() {
        return this.userIdAttribute;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ConnectionScimConfiguration(String name) {
        this(name, ConnectionScimConfigurationArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ConnectionScimConfiguration(String name, ConnectionScimConfigurationArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ConnectionScimConfiguration(String name, ConnectionScimConfigurationArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("auth0:index/connectionScimConfiguration:ConnectionScimConfiguration", name, args == null ? ConnectionScimConfigurationArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private ConnectionScimConfiguration(String name, Output<String> id, @Nullable ConnectionScimConfigurationState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("auth0:index/connectionScimConfiguration:ConnectionScimConfiguration", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ConnectionScimConfiguration get(String name, Output<String> id, @Nullable ConnectionScimConfigurationState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ConnectionScimConfiguration(name, id, state, options);
    }
}
