// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.auth0.outputs;

import com.pulumi.auth0.outputs.ClientAddonsSamlpLogout;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ClientAddonsSamlp {
    /**
     * @return Audience of the SAML Assertion. Default will be the Issuer on SAMLRequest.
     * 
     */
    private @Nullable String audience;
    /**
     * @return Class reference of the authentication context.
     * 
     */
    private @Nullable String authnContextClassRef;
    /**
     * @return Protocol binding used for SAML logout responses.
     * 
     */
    private @Nullable String binding;
    /**
     * @return Indicates whether a UPN claim should be created. Defaults to `true`.
     * 
     */
    private @Nullable Boolean createUpnClaim;
    /**
     * @return Destination of the SAML Response. If not specified, it will be `AssertionConsumerUrl` of SAMLRequest or callback URL if there was no SAMLRequest.
     * 
     */
    private @Nullable String destination;
    /**
     * @return Algorithm used to calculate the digest of the SAML Assertion or response. Options include `sha1` and `sha256`. Defaults to `sha1`.
     * 
     */
    private @Nullable String digestAlgorithm;
    /**
     * @return Indicates whether or not we should infer the NameFormat based on the attribute name. If set to `false`, the attribute NameFormat is not set in the assertion. Defaults to `true`.
     * 
     */
    private @Nullable Boolean includeAttributeNameFormat;
    /**
     * @return Issuer of the SAML Assertion.
     * 
     */
    private @Nullable String issuer;
    /**
     * @return AWS token lifetime in seconds.
     * 
     */
    private @Nullable Integer lifetimeInSeconds;
    /**
     * @return Configuration settings for logout.
     * 
     */
    private @Nullable ClientAddonsSamlpLogout logout;
    /**
     * @return Indicates whether or not to add additional identity information in the token, such as the provider used and the `access_token`, if available. Defaults to `true`.
     * 
     */
    private @Nullable Boolean mapIdentities;
    /**
     * @return Indicates whether to add a prefix of `http://schema.auth0.com` to any claims that are not mapped to the common profile when passed through in the output assertion. Defaults to `false`.
     * 
     */
    private @Nullable Boolean mapUnknownClaimsAsIs;
    /**
     * @return Mappings between the Auth0 user profile property name (`name`) and the output attributes on the SAML attribute in the assertion (`value`).
     * 
     */
    private @Nullable Map<String,Object> mappings;
    /**
     * @return Format of the name identifier. Defaults to `urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified`.
     * 
     */
    private @Nullable String nameIdentifierFormat;
    /**
     * @return Attributes that can be used for Subject/NameID. Auth0 will try each of the attributes of this array in order and use the first value it finds.
     * 
     */
    private @Nullable List<String> nameIdentifierProbes;
    /**
     * @return Indicates whether or not to passthrough claims that are not mapped to the common profile in the output assertion. Defaults to `true`.
     * 
     */
    private @Nullable Boolean passthroughClaimsWithNoMapping;
    /**
     * @return Recipient of the SAML Assertion (SubjectConfirmationData). Default is `AssertionConsumerUrl` on SAMLRequest or callback URL if no SAMLRequest was sent.
     * 
     */
    private @Nullable String recipient;
    /**
     * @return Indicates whether or not the SAML Response should be signed instead of the SAML Assertion.
     * 
     */
    private @Nullable Boolean signResponse;
    /**
     * @return Algorithm used to sign the SAML Assertion or response. Options include `rsa-sha1` and `rsa-sha256`. Defaults to `rsa-sha1`.
     * 
     */
    private @Nullable String signatureAlgorithm;
    /**
     * @return Optionally indicates the public key certificate used to validate SAML requests. If set, SAML requests will be required to be signed. A sample value would be `-----BEGIN PUBLIC KEY-----\nMIGf...bpP/t3\n+JGNGIRMj1hF1rnb6QIDAQAB\n-----END PUBLIC KEY-----\n`.
     * 
     */
    private @Nullable String signingCert;
    /**
     * @return Indicates whether or not we should infer the `xs:type` of the element. Types include `xs:string`, `xs:boolean`, `xs:double`, and `xs:anyType`. When set to `false`, all `xs:type` are `xs:anyType`. Defaults to `true`.
     * 
     */
    private @Nullable Boolean typedAttributes;

    private ClientAddonsSamlp() {}
    /**
     * @return Audience of the SAML Assertion. Default will be the Issuer on SAMLRequest.
     * 
     */
    public Optional<String> audience() {
        return Optional.ofNullable(this.audience);
    }
    /**
     * @return Class reference of the authentication context.
     * 
     */
    public Optional<String> authnContextClassRef() {
        return Optional.ofNullable(this.authnContextClassRef);
    }
    /**
     * @return Protocol binding used for SAML logout responses.
     * 
     */
    public Optional<String> binding() {
        return Optional.ofNullable(this.binding);
    }
    /**
     * @return Indicates whether a UPN claim should be created. Defaults to `true`.
     * 
     */
    public Optional<Boolean> createUpnClaim() {
        return Optional.ofNullable(this.createUpnClaim);
    }
    /**
     * @return Destination of the SAML Response. If not specified, it will be `AssertionConsumerUrl` of SAMLRequest or callback URL if there was no SAMLRequest.
     * 
     */
    public Optional<String> destination() {
        return Optional.ofNullable(this.destination);
    }
    /**
     * @return Algorithm used to calculate the digest of the SAML Assertion or response. Options include `sha1` and `sha256`. Defaults to `sha1`.
     * 
     */
    public Optional<String> digestAlgorithm() {
        return Optional.ofNullable(this.digestAlgorithm);
    }
    /**
     * @return Indicates whether or not we should infer the NameFormat based on the attribute name. If set to `false`, the attribute NameFormat is not set in the assertion. Defaults to `true`.
     * 
     */
    public Optional<Boolean> includeAttributeNameFormat() {
        return Optional.ofNullable(this.includeAttributeNameFormat);
    }
    /**
     * @return Issuer of the SAML Assertion.
     * 
     */
    public Optional<String> issuer() {
        return Optional.ofNullable(this.issuer);
    }
    /**
     * @return AWS token lifetime in seconds.
     * 
     */
    public Optional<Integer> lifetimeInSeconds() {
        return Optional.ofNullable(this.lifetimeInSeconds);
    }
    /**
     * @return Configuration settings for logout.
     * 
     */
    public Optional<ClientAddonsSamlpLogout> logout() {
        return Optional.ofNullable(this.logout);
    }
    /**
     * @return Indicates whether or not to add additional identity information in the token, such as the provider used and the `access_token`, if available. Defaults to `true`.
     * 
     */
    public Optional<Boolean> mapIdentities() {
        return Optional.ofNullable(this.mapIdentities);
    }
    /**
     * @return Indicates whether to add a prefix of `http://schema.auth0.com` to any claims that are not mapped to the common profile when passed through in the output assertion. Defaults to `false`.
     * 
     */
    public Optional<Boolean> mapUnknownClaimsAsIs() {
        return Optional.ofNullable(this.mapUnknownClaimsAsIs);
    }
    /**
     * @return Mappings between the Auth0 user profile property name (`name`) and the output attributes on the SAML attribute in the assertion (`value`).
     * 
     */
    public Map<String,Object> mappings() {
        return this.mappings == null ? Map.of() : this.mappings;
    }
    /**
     * @return Format of the name identifier. Defaults to `urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified`.
     * 
     */
    public Optional<String> nameIdentifierFormat() {
        return Optional.ofNullable(this.nameIdentifierFormat);
    }
    /**
     * @return Attributes that can be used for Subject/NameID. Auth0 will try each of the attributes of this array in order and use the first value it finds.
     * 
     */
    public List<String> nameIdentifierProbes() {
        return this.nameIdentifierProbes == null ? List.of() : this.nameIdentifierProbes;
    }
    /**
     * @return Indicates whether or not to passthrough claims that are not mapped to the common profile in the output assertion. Defaults to `true`.
     * 
     */
    public Optional<Boolean> passthroughClaimsWithNoMapping() {
        return Optional.ofNullable(this.passthroughClaimsWithNoMapping);
    }
    /**
     * @return Recipient of the SAML Assertion (SubjectConfirmationData). Default is `AssertionConsumerUrl` on SAMLRequest or callback URL if no SAMLRequest was sent.
     * 
     */
    public Optional<String> recipient() {
        return Optional.ofNullable(this.recipient);
    }
    /**
     * @return Indicates whether or not the SAML Response should be signed instead of the SAML Assertion.
     * 
     */
    public Optional<Boolean> signResponse() {
        return Optional.ofNullable(this.signResponse);
    }
    /**
     * @return Algorithm used to sign the SAML Assertion or response. Options include `rsa-sha1` and `rsa-sha256`. Defaults to `rsa-sha1`.
     * 
     */
    public Optional<String> signatureAlgorithm() {
        return Optional.ofNullable(this.signatureAlgorithm);
    }
    /**
     * @return Optionally indicates the public key certificate used to validate SAML requests. If set, SAML requests will be required to be signed. A sample value would be `-----BEGIN PUBLIC KEY-----\nMIGf...bpP/t3\n+JGNGIRMj1hF1rnb6QIDAQAB\n-----END PUBLIC KEY-----\n`.
     * 
     */
    public Optional<String> signingCert() {
        return Optional.ofNullable(this.signingCert);
    }
    /**
     * @return Indicates whether or not we should infer the `xs:type` of the element. Types include `xs:string`, `xs:boolean`, `xs:double`, and `xs:anyType`. When set to `false`, all `xs:type` are `xs:anyType`. Defaults to `true`.
     * 
     */
    public Optional<Boolean> typedAttributes() {
        return Optional.ofNullable(this.typedAttributes);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ClientAddonsSamlp defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String audience;
        private @Nullable String authnContextClassRef;
        private @Nullable String binding;
        private @Nullable Boolean createUpnClaim;
        private @Nullable String destination;
        private @Nullable String digestAlgorithm;
        private @Nullable Boolean includeAttributeNameFormat;
        private @Nullable String issuer;
        private @Nullable Integer lifetimeInSeconds;
        private @Nullable ClientAddonsSamlpLogout logout;
        private @Nullable Boolean mapIdentities;
        private @Nullable Boolean mapUnknownClaimsAsIs;
        private @Nullable Map<String,Object> mappings;
        private @Nullable String nameIdentifierFormat;
        private @Nullable List<String> nameIdentifierProbes;
        private @Nullable Boolean passthroughClaimsWithNoMapping;
        private @Nullable String recipient;
        private @Nullable Boolean signResponse;
        private @Nullable String signatureAlgorithm;
        private @Nullable String signingCert;
        private @Nullable Boolean typedAttributes;
        public Builder() {}
        public Builder(ClientAddonsSamlp defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.audience = defaults.audience;
    	      this.authnContextClassRef = defaults.authnContextClassRef;
    	      this.binding = defaults.binding;
    	      this.createUpnClaim = defaults.createUpnClaim;
    	      this.destination = defaults.destination;
    	      this.digestAlgorithm = defaults.digestAlgorithm;
    	      this.includeAttributeNameFormat = defaults.includeAttributeNameFormat;
    	      this.issuer = defaults.issuer;
    	      this.lifetimeInSeconds = defaults.lifetimeInSeconds;
    	      this.logout = defaults.logout;
    	      this.mapIdentities = defaults.mapIdentities;
    	      this.mapUnknownClaimsAsIs = defaults.mapUnknownClaimsAsIs;
    	      this.mappings = defaults.mappings;
    	      this.nameIdentifierFormat = defaults.nameIdentifierFormat;
    	      this.nameIdentifierProbes = defaults.nameIdentifierProbes;
    	      this.passthroughClaimsWithNoMapping = defaults.passthroughClaimsWithNoMapping;
    	      this.recipient = defaults.recipient;
    	      this.signResponse = defaults.signResponse;
    	      this.signatureAlgorithm = defaults.signatureAlgorithm;
    	      this.signingCert = defaults.signingCert;
    	      this.typedAttributes = defaults.typedAttributes;
        }

        @CustomType.Setter
        public Builder audience(@Nullable String audience) {
            this.audience = audience;
            return this;
        }
        @CustomType.Setter
        public Builder authnContextClassRef(@Nullable String authnContextClassRef) {
            this.authnContextClassRef = authnContextClassRef;
            return this;
        }
        @CustomType.Setter
        public Builder binding(@Nullable String binding) {
            this.binding = binding;
            return this;
        }
        @CustomType.Setter
        public Builder createUpnClaim(@Nullable Boolean createUpnClaim) {
            this.createUpnClaim = createUpnClaim;
            return this;
        }
        @CustomType.Setter
        public Builder destination(@Nullable String destination) {
            this.destination = destination;
            return this;
        }
        @CustomType.Setter
        public Builder digestAlgorithm(@Nullable String digestAlgorithm) {
            this.digestAlgorithm = digestAlgorithm;
            return this;
        }
        @CustomType.Setter
        public Builder includeAttributeNameFormat(@Nullable Boolean includeAttributeNameFormat) {
            this.includeAttributeNameFormat = includeAttributeNameFormat;
            return this;
        }
        @CustomType.Setter
        public Builder issuer(@Nullable String issuer) {
            this.issuer = issuer;
            return this;
        }
        @CustomType.Setter
        public Builder lifetimeInSeconds(@Nullable Integer lifetimeInSeconds) {
            this.lifetimeInSeconds = lifetimeInSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder logout(@Nullable ClientAddonsSamlpLogout logout) {
            this.logout = logout;
            return this;
        }
        @CustomType.Setter
        public Builder mapIdentities(@Nullable Boolean mapIdentities) {
            this.mapIdentities = mapIdentities;
            return this;
        }
        @CustomType.Setter
        public Builder mapUnknownClaimsAsIs(@Nullable Boolean mapUnknownClaimsAsIs) {
            this.mapUnknownClaimsAsIs = mapUnknownClaimsAsIs;
            return this;
        }
        @CustomType.Setter
        public Builder mappings(@Nullable Map<String,Object> mappings) {
            this.mappings = mappings;
            return this;
        }
        @CustomType.Setter
        public Builder nameIdentifierFormat(@Nullable String nameIdentifierFormat) {
            this.nameIdentifierFormat = nameIdentifierFormat;
            return this;
        }
        @CustomType.Setter
        public Builder nameIdentifierProbes(@Nullable List<String> nameIdentifierProbes) {
            this.nameIdentifierProbes = nameIdentifierProbes;
            return this;
        }
        public Builder nameIdentifierProbes(String... nameIdentifierProbes) {
            return nameIdentifierProbes(List.of(nameIdentifierProbes));
        }
        @CustomType.Setter
        public Builder passthroughClaimsWithNoMapping(@Nullable Boolean passthroughClaimsWithNoMapping) {
            this.passthroughClaimsWithNoMapping = passthroughClaimsWithNoMapping;
            return this;
        }
        @CustomType.Setter
        public Builder recipient(@Nullable String recipient) {
            this.recipient = recipient;
            return this;
        }
        @CustomType.Setter
        public Builder signResponse(@Nullable Boolean signResponse) {
            this.signResponse = signResponse;
            return this;
        }
        @CustomType.Setter
        public Builder signatureAlgorithm(@Nullable String signatureAlgorithm) {
            this.signatureAlgorithm = signatureAlgorithm;
            return this;
        }
        @CustomType.Setter
        public Builder signingCert(@Nullable String signingCert) {
            this.signingCert = signingCert;
            return this;
        }
        @CustomType.Setter
        public Builder typedAttributes(@Nullable Boolean typedAttributes) {
            this.typedAttributes = typedAttributes;
            return this;
        }
        public ClientAddonsSamlp build() {
            final var _resultValue = new ClientAddonsSamlp();
            _resultValue.audience = audience;
            _resultValue.authnContextClassRef = authnContextClassRef;
            _resultValue.binding = binding;
            _resultValue.createUpnClaim = createUpnClaim;
            _resultValue.destination = destination;
            _resultValue.digestAlgorithm = digestAlgorithm;
            _resultValue.includeAttributeNameFormat = includeAttributeNameFormat;
            _resultValue.issuer = issuer;
            _resultValue.lifetimeInSeconds = lifetimeInSeconds;
            _resultValue.logout = logout;
            _resultValue.mapIdentities = mapIdentities;
            _resultValue.mapUnknownClaimsAsIs = mapUnknownClaimsAsIs;
            _resultValue.mappings = mappings;
            _resultValue.nameIdentifierFormat = nameIdentifierFormat;
            _resultValue.nameIdentifierProbes = nameIdentifierProbes;
            _resultValue.passthroughClaimsWithNoMapping = passthroughClaimsWithNoMapping;
            _resultValue.recipient = recipient;
            _resultValue.signResponse = signResponse;
            _resultValue.signatureAlgorithm = signatureAlgorithm;
            _resultValue.signingCert = signingCert;
            _resultValue.typedAttributes = typedAttributes;
            return _resultValue;
        }
    }
}
