// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.auth0.outputs;

import com.pulumi.auth0.outputs.GetConnectionScimConfigurationDefaultMapping;
import com.pulumi.auth0.outputs.GetConnectionScimConfigurationMapping;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetConnectionScimConfigurationResult {
    /**
     * @return ID of the connection for this SCIM configuration.
     * 
     */
    private String connectionId;
    /**
     * @return Name of the connection for this SCIM configuration.
     * 
     */
    private String connectionName;
    /**
     * @return Default mapping between Auth0 attributes and SCIM attributes for this connection type.
     * 
     */
    private List<GetConnectionScimConfigurationDefaultMapping> defaultMappings;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Mapping between Auth0 attributes and SCIM attributes.
     * 
     */
    private List<GetConnectionScimConfigurationMapping> mappings;
    /**
     * @return Schema of the connection for this SCIM configuration.
     * 
     */
    private String strategy;
    /**
     * @return Name of the tenant for this SCIM configuration.
     * 
     */
    private String tenantName;
    /**
     * @return User ID attribute for generation unique of user ids.
     * 
     */
    private String userIdAttribute;

    private GetConnectionScimConfigurationResult() {}
    /**
     * @return ID of the connection for this SCIM configuration.
     * 
     */
    public String connectionId() {
        return this.connectionId;
    }
    /**
     * @return Name of the connection for this SCIM configuration.
     * 
     */
    public String connectionName() {
        return this.connectionName;
    }
    /**
     * @return Default mapping between Auth0 attributes and SCIM attributes for this connection type.
     * 
     */
    public List<GetConnectionScimConfigurationDefaultMapping> defaultMappings() {
        return this.defaultMappings;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Mapping between Auth0 attributes and SCIM attributes.
     * 
     */
    public List<GetConnectionScimConfigurationMapping> mappings() {
        return this.mappings;
    }
    /**
     * @return Schema of the connection for this SCIM configuration.
     * 
     */
    public String strategy() {
        return this.strategy;
    }
    /**
     * @return Name of the tenant for this SCIM configuration.
     * 
     */
    public String tenantName() {
        return this.tenantName;
    }
    /**
     * @return User ID attribute for generation unique of user ids.
     * 
     */
    public String userIdAttribute() {
        return this.userIdAttribute;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetConnectionScimConfigurationResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String connectionId;
        private String connectionName;
        private List<GetConnectionScimConfigurationDefaultMapping> defaultMappings;
        private String id;
        private List<GetConnectionScimConfigurationMapping> mappings;
        private String strategy;
        private String tenantName;
        private String userIdAttribute;
        public Builder() {}
        public Builder(GetConnectionScimConfigurationResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.connectionId = defaults.connectionId;
    	      this.connectionName = defaults.connectionName;
    	      this.defaultMappings = defaults.defaultMappings;
    	      this.id = defaults.id;
    	      this.mappings = defaults.mappings;
    	      this.strategy = defaults.strategy;
    	      this.tenantName = defaults.tenantName;
    	      this.userIdAttribute = defaults.userIdAttribute;
        }

        @CustomType.Setter
        public Builder connectionId(String connectionId) {
            if (connectionId == null) {
              throw new MissingRequiredPropertyException("GetConnectionScimConfigurationResult", "connectionId");
            }
            this.connectionId = connectionId;
            return this;
        }
        @CustomType.Setter
        public Builder connectionName(String connectionName) {
            if (connectionName == null) {
              throw new MissingRequiredPropertyException("GetConnectionScimConfigurationResult", "connectionName");
            }
            this.connectionName = connectionName;
            return this;
        }
        @CustomType.Setter
        public Builder defaultMappings(List<GetConnectionScimConfigurationDefaultMapping> defaultMappings) {
            if (defaultMappings == null) {
              throw new MissingRequiredPropertyException("GetConnectionScimConfigurationResult", "defaultMappings");
            }
            this.defaultMappings = defaultMappings;
            return this;
        }
        public Builder defaultMappings(GetConnectionScimConfigurationDefaultMapping... defaultMappings) {
            return defaultMappings(List.of(defaultMappings));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetConnectionScimConfigurationResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder mappings(List<GetConnectionScimConfigurationMapping> mappings) {
            if (mappings == null) {
              throw new MissingRequiredPropertyException("GetConnectionScimConfigurationResult", "mappings");
            }
            this.mappings = mappings;
            return this;
        }
        public Builder mappings(GetConnectionScimConfigurationMapping... mappings) {
            return mappings(List.of(mappings));
        }
        @CustomType.Setter
        public Builder strategy(String strategy) {
            if (strategy == null) {
              throw new MissingRequiredPropertyException("GetConnectionScimConfigurationResult", "strategy");
            }
            this.strategy = strategy;
            return this;
        }
        @CustomType.Setter
        public Builder tenantName(String tenantName) {
            if (tenantName == null) {
              throw new MissingRequiredPropertyException("GetConnectionScimConfigurationResult", "tenantName");
            }
            this.tenantName = tenantName;
            return this;
        }
        @CustomType.Setter
        public Builder userIdAttribute(String userIdAttribute) {
            if (userIdAttribute == null) {
              throw new MissingRequiredPropertyException("GetConnectionScimConfigurationResult", "userIdAttribute");
            }
            this.userIdAttribute = userIdAttribute;
            return this;
        }
        public GetConnectionScimConfigurationResult build() {
            final var _resultValue = new GetConnectionScimConfigurationResult();
            _resultValue.connectionId = connectionId;
            _resultValue.connectionName = connectionName;
            _resultValue.defaultMappings = defaultMappings;
            _resultValue.id = id;
            _resultValue.mappings = mappings;
            _resultValue.strategy = strategy;
            _resultValue.tenantName = tenantName;
            _resultValue.userIdAttribute = userIdAttribute;
            return _resultValue;
        }
    }
}
