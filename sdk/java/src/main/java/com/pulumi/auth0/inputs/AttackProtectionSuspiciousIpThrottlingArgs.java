// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.auth0.inputs;

import com.pulumi.auth0.inputs.AttackProtectionSuspiciousIpThrottlingPreLoginArgs;
import com.pulumi.auth0.inputs.AttackProtectionSuspiciousIpThrottlingPreUserRegistrationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AttackProtectionSuspiciousIpThrottlingArgs extends com.pulumi.resources.ResourceArgs {

    public static final AttackProtectionSuspiciousIpThrottlingArgs Empty = new AttackProtectionSuspiciousIpThrottlingArgs();

    /**
     * List of trusted IP addresses that will not have attack protection enforced against them. This field allows you to specify multiple IP addresses, or ranges. You can use IPv4 or IPv6 addresses and CIDR notation.
     * 
     */
    @Import(name="allowlists")
    private @Nullable Output<List<String>> allowlists;

    /**
     * @return List of trusted IP addresses that will not have attack protection enforced against them. This field allows you to specify multiple IP addresses, or ranges. You can use IPv4 or IPv6 addresses and CIDR notation.
     * 
     */
    public Optional<Output<List<String>>> allowlists() {
        return Optional.ofNullable(this.allowlists);
    }

    /**
     * Whether suspicious IP throttling attack protections are active.
     * 
     */
    @Import(name="enabled", required=true)
    private Output<Boolean> enabled;

    /**
     * @return Whether suspicious IP throttling attack protections are active.
     * 
     */
    public Output<Boolean> enabled() {
        return this.enabled;
    }

    /**
     * Configuration options that apply before every login attempt. Only available on public tenants.
     * 
     */
    @Import(name="preLogin")
    private @Nullable Output<AttackProtectionSuspiciousIpThrottlingPreLoginArgs> preLogin;

    /**
     * @return Configuration options that apply before every login attempt. Only available on public tenants.
     * 
     */
    public Optional<Output<AttackProtectionSuspiciousIpThrottlingPreLoginArgs>> preLogin() {
        return Optional.ofNullable(this.preLogin);
    }

    /**
     * Configuration options that apply before every user registration attempt. Only available on public tenants.
     * 
     */
    @Import(name="preUserRegistration")
    private @Nullable Output<AttackProtectionSuspiciousIpThrottlingPreUserRegistrationArgs> preUserRegistration;

    /**
     * @return Configuration options that apply before every user registration attempt. Only available on public tenants.
     * 
     */
    public Optional<Output<AttackProtectionSuspiciousIpThrottlingPreUserRegistrationArgs>> preUserRegistration() {
        return Optional.ofNullable(this.preUserRegistration);
    }

    /**
     * Action to take when a suspicious IP throttling threshold is violated. Possible values: `block` (throttle traffic from an IP address when there is a high number of login attempts targeting too many different accounts), `admin_notification` (send an email notification when traffic is throttled on one or more IP addresses due to high-velocity traffic).
     * 
     */
    @Import(name="shields")
    private @Nullable Output<List<String>> shields;

    /**
     * @return Action to take when a suspicious IP throttling threshold is violated. Possible values: `block` (throttle traffic from an IP address when there is a high number of login attempts targeting too many different accounts), `admin_notification` (send an email notification when traffic is throttled on one or more IP addresses due to high-velocity traffic).
     * 
     */
    public Optional<Output<List<String>>> shields() {
        return Optional.ofNullable(this.shields);
    }

    private AttackProtectionSuspiciousIpThrottlingArgs() {}

    private AttackProtectionSuspiciousIpThrottlingArgs(AttackProtectionSuspiciousIpThrottlingArgs $) {
        this.allowlists = $.allowlists;
        this.enabled = $.enabled;
        this.preLogin = $.preLogin;
        this.preUserRegistration = $.preUserRegistration;
        this.shields = $.shields;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AttackProtectionSuspiciousIpThrottlingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AttackProtectionSuspiciousIpThrottlingArgs $;

        public Builder() {
            $ = new AttackProtectionSuspiciousIpThrottlingArgs();
        }

        public Builder(AttackProtectionSuspiciousIpThrottlingArgs defaults) {
            $ = new AttackProtectionSuspiciousIpThrottlingArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowlists List of trusted IP addresses that will not have attack protection enforced against them. This field allows you to specify multiple IP addresses, or ranges. You can use IPv4 or IPv6 addresses and CIDR notation.
         * 
         * @return builder
         * 
         */
        public Builder allowlists(@Nullable Output<List<String>> allowlists) {
            $.allowlists = allowlists;
            return this;
        }

        /**
         * @param allowlists List of trusted IP addresses that will not have attack protection enforced against them. This field allows you to specify multiple IP addresses, or ranges. You can use IPv4 or IPv6 addresses and CIDR notation.
         * 
         * @return builder
         * 
         */
        public Builder allowlists(List<String> allowlists) {
            return allowlists(Output.of(allowlists));
        }

        /**
         * @param allowlists List of trusted IP addresses that will not have attack protection enforced against them. This field allows you to specify multiple IP addresses, or ranges. You can use IPv4 or IPv6 addresses and CIDR notation.
         * 
         * @return builder
         * 
         */
        public Builder allowlists(String... allowlists) {
            return allowlists(List.of(allowlists));
        }

        /**
         * @param enabled Whether suspicious IP throttling attack protections are active.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Whether suspicious IP throttling attack protections are active.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param preLogin Configuration options that apply before every login attempt. Only available on public tenants.
         * 
         * @return builder
         * 
         */
        public Builder preLogin(@Nullable Output<AttackProtectionSuspiciousIpThrottlingPreLoginArgs> preLogin) {
            $.preLogin = preLogin;
            return this;
        }

        /**
         * @param preLogin Configuration options that apply before every login attempt. Only available on public tenants.
         * 
         * @return builder
         * 
         */
        public Builder preLogin(AttackProtectionSuspiciousIpThrottlingPreLoginArgs preLogin) {
            return preLogin(Output.of(preLogin));
        }

        /**
         * @param preUserRegistration Configuration options that apply before every user registration attempt. Only available on public tenants.
         * 
         * @return builder
         * 
         */
        public Builder preUserRegistration(@Nullable Output<AttackProtectionSuspiciousIpThrottlingPreUserRegistrationArgs> preUserRegistration) {
            $.preUserRegistration = preUserRegistration;
            return this;
        }

        /**
         * @param preUserRegistration Configuration options that apply before every user registration attempt. Only available on public tenants.
         * 
         * @return builder
         * 
         */
        public Builder preUserRegistration(AttackProtectionSuspiciousIpThrottlingPreUserRegistrationArgs preUserRegistration) {
            return preUserRegistration(Output.of(preUserRegistration));
        }

        /**
         * @param shields Action to take when a suspicious IP throttling threshold is violated. Possible values: `block` (throttle traffic from an IP address when there is a high number of login attempts targeting too many different accounts), `admin_notification` (send an email notification when traffic is throttled on one or more IP addresses due to high-velocity traffic).
         * 
         * @return builder
         * 
         */
        public Builder shields(@Nullable Output<List<String>> shields) {
            $.shields = shields;
            return this;
        }

        /**
         * @param shields Action to take when a suspicious IP throttling threshold is violated. Possible values: `block` (throttle traffic from an IP address when there is a high number of login attempts targeting too many different accounts), `admin_notification` (send an email notification when traffic is throttled on one or more IP addresses due to high-velocity traffic).
         * 
         * @return builder
         * 
         */
        public Builder shields(List<String> shields) {
            return shields(Output.of(shields));
        }

        /**
         * @param shields Action to take when a suspicious IP throttling threshold is violated. Possible values: `block` (throttle traffic from an IP address when there is a high number of login attempts targeting too many different accounts), `admin_notification` (send an email notification when traffic is throttled on one or more IP addresses due to high-velocity traffic).
         * 
         * @return builder
         * 
         */
        public Builder shields(String... shields) {
            return shields(List.of(shields));
        }

        public AttackProtectionSuspiciousIpThrottlingArgs build() {
            $.enabled = Objects.requireNonNull($.enabled, "expected parameter 'enabled' to be non-null");
            return $;
        }
    }

}
