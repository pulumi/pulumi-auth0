// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.auth0.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetConnectionKeysKey {
    /**
     * @return The signing key algorithm.
     * 
     */
    private String algorithm;
    /**
     * @return The public certificate of the signing key.
     * 
     */
    private String cert;
    private String connectionId;
    /**
     * @return True if the key is the current key.
     * 
     */
    private Boolean current;
    /**
     * @return The date and time when the key became the current key.
     * 
     */
    private String currentSince;
    /**
     * @return The certificate fingerprint.
     * 
     */
    private String fingerprint;
    /**
     * @return The signing key use, whether for encryption or signing.
     * 
     */
    private String keyUse;
    /**
     * @return The key ID of the signing key.
     * 
     */
    private String kid;
    /**
     * @return True if the key is the next key.
     * 
     */
    private Boolean next;
    /**
     * @return The public certificate of the signing key in PKCS7 format.
     * 
     */
    private String pkcs;
    /**
     * @return True if the key is the previous key.
     * 
     */
    private Boolean previous;
    /**
     * @return The subject distinguished name (DN) of the certificate.
     * 
     */
    private String subjectDn;
    /**
     * @return The certificate thumbprint.
     * 
     */
    private String thumbprint;
    /**
     * @return This is an arbitrary map, which when edited shall perform rotation of keys for the corresponding connection. It can host keys like version, timestamp of last rotation etc.The field has no association with API
     * 
     */
    private Map<String,String> triggers;

    private GetConnectionKeysKey() {}
    /**
     * @return The signing key algorithm.
     * 
     */
    public String algorithm() {
        return this.algorithm;
    }
    /**
     * @return The public certificate of the signing key.
     * 
     */
    public String cert() {
        return this.cert;
    }
    public String connectionId() {
        return this.connectionId;
    }
    /**
     * @return True if the key is the current key.
     * 
     */
    public Boolean current() {
        return this.current;
    }
    /**
     * @return The date and time when the key became the current key.
     * 
     */
    public String currentSince() {
        return this.currentSince;
    }
    /**
     * @return The certificate fingerprint.
     * 
     */
    public String fingerprint() {
        return this.fingerprint;
    }
    /**
     * @return The signing key use, whether for encryption or signing.
     * 
     */
    public String keyUse() {
        return this.keyUse;
    }
    /**
     * @return The key ID of the signing key.
     * 
     */
    public String kid() {
        return this.kid;
    }
    /**
     * @return True if the key is the next key.
     * 
     */
    public Boolean next() {
        return this.next;
    }
    /**
     * @return The public certificate of the signing key in PKCS7 format.
     * 
     */
    public String pkcs() {
        return this.pkcs;
    }
    /**
     * @return True if the key is the previous key.
     * 
     */
    public Boolean previous() {
        return this.previous;
    }
    /**
     * @return The subject distinguished name (DN) of the certificate.
     * 
     */
    public String subjectDn() {
        return this.subjectDn;
    }
    /**
     * @return The certificate thumbprint.
     * 
     */
    public String thumbprint() {
        return this.thumbprint;
    }
    /**
     * @return This is an arbitrary map, which when edited shall perform rotation of keys for the corresponding connection. It can host keys like version, timestamp of last rotation etc.The field has no association with API
     * 
     */
    public Map<String,String> triggers() {
        return this.triggers;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetConnectionKeysKey defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String algorithm;
        private String cert;
        private String connectionId;
        private Boolean current;
        private String currentSince;
        private String fingerprint;
        private String keyUse;
        private String kid;
        private Boolean next;
        private String pkcs;
        private Boolean previous;
        private String subjectDn;
        private String thumbprint;
        private Map<String,String> triggers;
        public Builder() {}
        public Builder(GetConnectionKeysKey defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.algorithm = defaults.algorithm;
    	      this.cert = defaults.cert;
    	      this.connectionId = defaults.connectionId;
    	      this.current = defaults.current;
    	      this.currentSince = defaults.currentSince;
    	      this.fingerprint = defaults.fingerprint;
    	      this.keyUse = defaults.keyUse;
    	      this.kid = defaults.kid;
    	      this.next = defaults.next;
    	      this.pkcs = defaults.pkcs;
    	      this.previous = defaults.previous;
    	      this.subjectDn = defaults.subjectDn;
    	      this.thumbprint = defaults.thumbprint;
    	      this.triggers = defaults.triggers;
        }

        @CustomType.Setter
        public Builder algorithm(String algorithm) {
            if (algorithm == null) {
              throw new MissingRequiredPropertyException("GetConnectionKeysKey", "algorithm");
            }
            this.algorithm = algorithm;
            return this;
        }
        @CustomType.Setter
        public Builder cert(String cert) {
            if (cert == null) {
              throw new MissingRequiredPropertyException("GetConnectionKeysKey", "cert");
            }
            this.cert = cert;
            return this;
        }
        @CustomType.Setter
        public Builder connectionId(String connectionId) {
            if (connectionId == null) {
              throw new MissingRequiredPropertyException("GetConnectionKeysKey", "connectionId");
            }
            this.connectionId = connectionId;
            return this;
        }
        @CustomType.Setter
        public Builder current(Boolean current) {
            if (current == null) {
              throw new MissingRequiredPropertyException("GetConnectionKeysKey", "current");
            }
            this.current = current;
            return this;
        }
        @CustomType.Setter
        public Builder currentSince(String currentSince) {
            if (currentSince == null) {
              throw new MissingRequiredPropertyException("GetConnectionKeysKey", "currentSince");
            }
            this.currentSince = currentSince;
            return this;
        }
        @CustomType.Setter
        public Builder fingerprint(String fingerprint) {
            if (fingerprint == null) {
              throw new MissingRequiredPropertyException("GetConnectionKeysKey", "fingerprint");
            }
            this.fingerprint = fingerprint;
            return this;
        }
        @CustomType.Setter
        public Builder keyUse(String keyUse) {
            if (keyUse == null) {
              throw new MissingRequiredPropertyException("GetConnectionKeysKey", "keyUse");
            }
            this.keyUse = keyUse;
            return this;
        }
        @CustomType.Setter
        public Builder kid(String kid) {
            if (kid == null) {
              throw new MissingRequiredPropertyException("GetConnectionKeysKey", "kid");
            }
            this.kid = kid;
            return this;
        }
        @CustomType.Setter
        public Builder next(Boolean next) {
            if (next == null) {
              throw new MissingRequiredPropertyException("GetConnectionKeysKey", "next");
            }
            this.next = next;
            return this;
        }
        @CustomType.Setter
        public Builder pkcs(String pkcs) {
            if (pkcs == null) {
              throw new MissingRequiredPropertyException("GetConnectionKeysKey", "pkcs");
            }
            this.pkcs = pkcs;
            return this;
        }
        @CustomType.Setter
        public Builder previous(Boolean previous) {
            if (previous == null) {
              throw new MissingRequiredPropertyException("GetConnectionKeysKey", "previous");
            }
            this.previous = previous;
            return this;
        }
        @CustomType.Setter
        public Builder subjectDn(String subjectDn) {
            if (subjectDn == null) {
              throw new MissingRequiredPropertyException("GetConnectionKeysKey", "subjectDn");
            }
            this.subjectDn = subjectDn;
            return this;
        }
        @CustomType.Setter
        public Builder thumbprint(String thumbprint) {
            if (thumbprint == null) {
              throw new MissingRequiredPropertyException("GetConnectionKeysKey", "thumbprint");
            }
            this.thumbprint = thumbprint;
            return this;
        }
        @CustomType.Setter
        public Builder triggers(Map<String,String> triggers) {
            if (triggers == null) {
              throw new MissingRequiredPropertyException("GetConnectionKeysKey", "triggers");
            }
            this.triggers = triggers;
            return this;
        }
        public GetConnectionKeysKey build() {
            final var _resultValue = new GetConnectionKeysKey();
            _resultValue.algorithm = algorithm;
            _resultValue.cert = cert;
            _resultValue.connectionId = connectionId;
            _resultValue.current = current;
            _resultValue.currentSince = currentSince;
            _resultValue.fingerprint = fingerprint;
            _resultValue.keyUse = keyUse;
            _resultValue.kid = kid;
            _resultValue.next = next;
            _resultValue.pkcs = pkcs;
            _resultValue.previous = previous;
            _resultValue.subjectDn = subjectDn;
            _resultValue.thumbprint = thumbprint;
            _resultValue.triggers = triggers;
            return _resultValue;
        }
    }
}
