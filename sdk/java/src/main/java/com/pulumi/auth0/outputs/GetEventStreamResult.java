// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.auth0.outputs;

import com.pulumi.auth0.outputs.GetEventStreamEventbridgeConfiguration;
import com.pulumi.auth0.outputs.GetEventStreamWebhookConfiguration;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetEventStreamResult {
    /**
     * @return The ISO 8601 timestamp when the stream was created.
     * 
     */
    private String createdAt;
    /**
     * @return The type of event stream destination (either &#39;eventbridge&#39; or &#39;webhook&#39;).
     * 
     */
    private String destinationType;
    /**
     * @return Configuration for the EventBridge destination. This block is only applicable when `destination_type` is set to `eventbridge`. EventBridge configurations **cannot** be updated after creation. Any change to this block will force the resource to be recreated.
     * 
     */
    private List<GetEventStreamEventbridgeConfiguration> eventbridgeConfigurations;
    /**
     * @return The ID of the Event Stream.
     * 
     */
    private String id;
    /**
     * @return The name of the event stream.
     * 
     */
    private String name;
    /**
     * @return The current status of the event stream.
     * 
     */
    private String status;
    /**
     * @return List of event types this stream is subscribed to.
     * 
     */
    private List<String> subscriptions;
    /**
     * @return The ISO 8601 timestamp when the stream was last updated.
     * 
     */
    private String updatedAt;
    /**
     * @return Configuration for the Webhook destination. This block is only applicable when `destination_type` is set to `webhook`. Webhook configurations **can** be updated after creation, including the endpoint and authorization fields.
     * 
     */
    private List<GetEventStreamWebhookConfiguration> webhookConfigurations;

    private GetEventStreamResult() {}
    /**
     * @return The ISO 8601 timestamp when the stream was created.
     * 
     */
    public String createdAt() {
        return this.createdAt;
    }
    /**
     * @return The type of event stream destination (either &#39;eventbridge&#39; or &#39;webhook&#39;).
     * 
     */
    public String destinationType() {
        return this.destinationType;
    }
    /**
     * @return Configuration for the EventBridge destination. This block is only applicable when `destination_type` is set to `eventbridge`. EventBridge configurations **cannot** be updated after creation. Any change to this block will force the resource to be recreated.
     * 
     */
    public List<GetEventStreamEventbridgeConfiguration> eventbridgeConfigurations() {
        return this.eventbridgeConfigurations;
    }
    /**
     * @return The ID of the Event Stream.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The name of the event stream.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The current status of the event stream.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return List of event types this stream is subscribed to.
     * 
     */
    public List<String> subscriptions() {
        return this.subscriptions;
    }
    /**
     * @return The ISO 8601 timestamp when the stream was last updated.
     * 
     */
    public String updatedAt() {
        return this.updatedAt;
    }
    /**
     * @return Configuration for the Webhook destination. This block is only applicable when `destination_type` is set to `webhook`. Webhook configurations **can** be updated after creation, including the endpoint and authorization fields.
     * 
     */
    public List<GetEventStreamWebhookConfiguration> webhookConfigurations() {
        return this.webhookConfigurations;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetEventStreamResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String createdAt;
        private String destinationType;
        private List<GetEventStreamEventbridgeConfiguration> eventbridgeConfigurations;
        private String id;
        private String name;
        private String status;
        private List<String> subscriptions;
        private String updatedAt;
        private List<GetEventStreamWebhookConfiguration> webhookConfigurations;
        public Builder() {}
        public Builder(GetEventStreamResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createdAt = defaults.createdAt;
    	      this.destinationType = defaults.destinationType;
    	      this.eventbridgeConfigurations = defaults.eventbridgeConfigurations;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.status = defaults.status;
    	      this.subscriptions = defaults.subscriptions;
    	      this.updatedAt = defaults.updatedAt;
    	      this.webhookConfigurations = defaults.webhookConfigurations;
        }

        @CustomType.Setter
        public Builder createdAt(String createdAt) {
            if (createdAt == null) {
              throw new MissingRequiredPropertyException("GetEventStreamResult", "createdAt");
            }
            this.createdAt = createdAt;
            return this;
        }
        @CustomType.Setter
        public Builder destinationType(String destinationType) {
            if (destinationType == null) {
              throw new MissingRequiredPropertyException("GetEventStreamResult", "destinationType");
            }
            this.destinationType = destinationType;
            return this;
        }
        @CustomType.Setter
        public Builder eventbridgeConfigurations(List<GetEventStreamEventbridgeConfiguration> eventbridgeConfigurations) {
            if (eventbridgeConfigurations == null) {
              throw new MissingRequiredPropertyException("GetEventStreamResult", "eventbridgeConfigurations");
            }
            this.eventbridgeConfigurations = eventbridgeConfigurations;
            return this;
        }
        public Builder eventbridgeConfigurations(GetEventStreamEventbridgeConfiguration... eventbridgeConfigurations) {
            return eventbridgeConfigurations(List.of(eventbridgeConfigurations));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetEventStreamResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetEventStreamResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetEventStreamResult", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder subscriptions(List<String> subscriptions) {
            if (subscriptions == null) {
              throw new MissingRequiredPropertyException("GetEventStreamResult", "subscriptions");
            }
            this.subscriptions = subscriptions;
            return this;
        }
        public Builder subscriptions(String... subscriptions) {
            return subscriptions(List.of(subscriptions));
        }
        @CustomType.Setter
        public Builder updatedAt(String updatedAt) {
            if (updatedAt == null) {
              throw new MissingRequiredPropertyException("GetEventStreamResult", "updatedAt");
            }
            this.updatedAt = updatedAt;
            return this;
        }
        @CustomType.Setter
        public Builder webhookConfigurations(List<GetEventStreamWebhookConfiguration> webhookConfigurations) {
            if (webhookConfigurations == null) {
              throw new MissingRequiredPropertyException("GetEventStreamResult", "webhookConfigurations");
            }
            this.webhookConfigurations = webhookConfigurations;
            return this;
        }
        public Builder webhookConfigurations(GetEventStreamWebhookConfiguration... webhookConfigurations) {
            return webhookConfigurations(List.of(webhookConfigurations));
        }
        public GetEventStreamResult build() {
            final var _resultValue = new GetEventStreamResult();
            _resultValue.createdAt = createdAt;
            _resultValue.destinationType = destinationType;
            _resultValue.eventbridgeConfigurations = eventbridgeConfigurations;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.status = status;
            _resultValue.subscriptions = subscriptions;
            _resultValue.updatedAt = updatedAt;
            _resultValue.webhookConfigurations = webhookConfigurations;
            return _resultValue;
        }
    }
}
