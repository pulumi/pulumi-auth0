// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.auth0.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AttackProtectionBreachedPasswordDetectionPreUserRegistrationArgs extends com.pulumi.resources.ResourceArgs {

    public static final AttackProtectionBreachedPasswordDetectionPreUserRegistrationArgs Empty = new AttackProtectionBreachedPasswordDetectionPreUserRegistrationArgs();

    /**
     * Action to take when a breached password is detected during a signup. Possible values: `block` (block compromised credentials for new accounts), `admin_notification` (send an email notification with a summary of compromised credentials in new accounts).
     * 
     */
    @Import(name="shields")
    private @Nullable Output<List<String>> shields;

    /**
     * @return Action to take when a breached password is detected during a signup. Possible values: `block` (block compromised credentials for new accounts), `admin_notification` (send an email notification with a summary of compromised credentials in new accounts).
     * 
     */
    public Optional<Output<List<String>>> shields() {
        return Optional.ofNullable(this.shields);
    }

    private AttackProtectionBreachedPasswordDetectionPreUserRegistrationArgs() {}

    private AttackProtectionBreachedPasswordDetectionPreUserRegistrationArgs(AttackProtectionBreachedPasswordDetectionPreUserRegistrationArgs $) {
        this.shields = $.shields;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AttackProtectionBreachedPasswordDetectionPreUserRegistrationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AttackProtectionBreachedPasswordDetectionPreUserRegistrationArgs $;

        public Builder() {
            $ = new AttackProtectionBreachedPasswordDetectionPreUserRegistrationArgs();
        }

        public Builder(AttackProtectionBreachedPasswordDetectionPreUserRegistrationArgs defaults) {
            $ = new AttackProtectionBreachedPasswordDetectionPreUserRegistrationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param shields Action to take when a breached password is detected during a signup. Possible values: `block` (block compromised credentials for new accounts), `admin_notification` (send an email notification with a summary of compromised credentials in new accounts).
         * 
         * @return builder
         * 
         */
        public Builder shields(@Nullable Output<List<String>> shields) {
            $.shields = shields;
            return this;
        }

        /**
         * @param shields Action to take when a breached password is detected during a signup. Possible values: `block` (block compromised credentials for new accounts), `admin_notification` (send an email notification with a summary of compromised credentials in new accounts).
         * 
         * @return builder
         * 
         */
        public Builder shields(List<String> shields) {
            return shields(Output.of(shields));
        }

        /**
         * @param shields Action to take when a breached password is detected during a signup. Possible values: `block` (block compromised credentials for new accounts), `admin_notification` (send an email notification with a summary of compromised credentials in new accounts).
         * 
         * @return builder
         * 
         */
        public Builder shields(String... shields) {
            return shields(List.of(shields));
        }

        public AttackProtectionBreachedPasswordDetectionPreUserRegistrationArgs build() {
            return $;
        }
    }

}
