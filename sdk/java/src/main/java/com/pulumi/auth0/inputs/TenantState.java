// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.auth0.inputs;

import com.pulumi.auth0.inputs.TenantFlagsArgs;
import com.pulumi.auth0.inputs.TenantSessionCookieArgs;
import com.pulumi.auth0.inputs.TenantSessionsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TenantState extends com.pulumi.resources.ResourceArgs {

    public static final TenantState Empty = new TenantState();

    /**
     * Whether to accept an organization name instead of an ID on auth endpoints.
     * 
     */
    @Import(name="allowOrganizationNameInAuthenticationApi")
    private @Nullable Output<Boolean> allowOrganizationNameInAuthenticationApi;

    /**
     * @return Whether to accept an organization name instead of an ID on auth endpoints.
     * 
     */
    public Optional<Output<Boolean>> allowOrganizationNameInAuthenticationApi() {
        return Optional.ofNullable(this.allowOrganizationNameInAuthenticationApi);
    }

    /**
     * URLs that Auth0 may redirect to after logout.
     * 
     */
    @Import(name="allowedLogoutUrls")
    private @Nullable Output<List<String>> allowedLogoutUrls;

    /**
     * @return URLs that Auth0 may redirect to after logout.
     * 
     */
    public Optional<Output<List<String>>> allowedLogoutUrls() {
        return Optional.ofNullable(this.allowedLogoutUrls);
    }

    /**
     * Whether to enable flexible factors for MFA in the PostLogin action.
     * 
     */
    @Import(name="customizeMfaInPostloginAction")
    private @Nullable Output<Boolean> customizeMfaInPostloginAction;

    /**
     * @return Whether to enable flexible factors for MFA in the PostLogin action.
     * 
     */
    public Optional<Output<Boolean>> customizeMfaInPostloginAction() {
        return Optional.ofNullable(this.customizeMfaInPostloginAction);
    }

    /**
     * API Audience to use by default for API Authorization flows. This setting is equivalent to appending the audience to every authorization request made to the tenant for every application.
     * 
     */
    @Import(name="defaultAudience")
    private @Nullable Output<String> defaultAudience;

    /**
     * @return API Audience to use by default for API Authorization flows. This setting is equivalent to appending the audience to every authorization request made to the tenant for every application.
     * 
     */
    public Optional<Output<String>> defaultAudience() {
        return Optional.ofNullable(this.defaultAudience);
    }

    /**
     * Name of the connection to be used for Password Grant exchanges. Options include `auth0-adldap`, `ad`, `auth0`, `email`, `sms`, `waad`, and `adfs`.
     * 
     */
    @Import(name="defaultDirectory")
    private @Nullable Output<String> defaultDirectory;

    /**
     * @return Name of the connection to be used for Password Grant exchanges. Options include `auth0-adldap`, `ad`, `auth0`, `email`, `sms`, `waad`, and `adfs`.
     * 
     */
    public Optional<Output<String>> defaultDirectory() {
        return Optional.ofNullable(this.defaultDirectory);
    }

    /**
     * The default absolute redirection URI. Must be HTTPS or an empty string.
     * 
     */
    @Import(name="defaultRedirectionUri")
    private @Nullable Output<String> defaultRedirectionUri;

    /**
     * @return The default absolute redirection URI. Must be HTTPS or an empty string.
     * 
     */
    public Optional<Output<String>> defaultRedirectionUri() {
        return Optional.ofNullable(this.defaultRedirectionUri);
    }

    /**
     * Supported locales for the user interface. The first locale in the list will be used to set the default locale.
     * 
     */
    @Import(name="enabledLocales")
    private @Nullable Output<List<String>> enabledLocales;

    /**
     * @return Supported locales for the user interface. The first locale in the list will be used to set the default locale.
     * 
     */
    public Optional<Output<List<String>>> enabledLocales() {
        return Optional.ofNullable(this.enabledLocales);
    }

    /**
     * Configuration settings for tenant flags.
     * 
     */
    @Import(name="flags")
    private @Nullable Output<TenantFlagsArgs> flags;

    /**
     * @return Configuration settings for tenant flags.
     * 
     */
    public Optional<Output<TenantFlagsArgs>> flags() {
        return Optional.ofNullable(this.flags);
    }

    /**
     * Friendly name for the tenant.
     * 
     */
    @Import(name="friendlyName")
    private @Nullable Output<String> friendlyName;

    /**
     * @return Friendly name for the tenant.
     * 
     */
    public Optional<Output<String>> friendlyName() {
        return Optional.ofNullable(this.friendlyName);
    }

    /**
     * Number of hours during which a session can be inactive before the user must log in again.
     * 
     */
    @Import(name="idleSessionLifetime")
    private @Nullable Output<Double> idleSessionLifetime;

    /**
     * @return Number of hours during which a session can be inactive before the user must log in again.
     * 
     */
    public Optional<Output<Double>> idleSessionLifetime() {
        return Optional.ofNullable(this.idleSessionLifetime);
    }

    /**
     * URL of logo to be shown for the tenant. Recommended size is 150px x 150px. If no URL is provided, the Auth0 logo will be used.
     * 
     */
    @Import(name="pictureUrl")
    private @Nullable Output<String> pictureUrl;

    /**
     * @return URL of logo to be shown for the tenant. Recommended size is 150px x 150px. If no URL is provided, the Auth0 logo will be used.
     * 
     */
    public Optional<Output<String>> pictureUrl() {
        return Optional.ofNullable(this.pictureUrl);
    }

    /**
     * Selected sandbox version for the extensibility environment, which allows you to use custom scripts to extend parts of Auth0&#39;s functionality.
     * 
     */
    @Import(name="sandboxVersion")
    private @Nullable Output<String> sandboxVersion;

    /**
     * @return Selected sandbox version for the extensibility environment, which allows you to use custom scripts to extend parts of Auth0&#39;s functionality.
     * 
     */
    public Optional<Output<String>> sandboxVersion() {
        return Optional.ofNullable(this.sandboxVersion);
    }

    /**
     * Alters behavior of tenant&#39;s session cookie. Contains a single `mode` property.
     * 
     */
    @Import(name="sessionCookie")
    private @Nullable Output<TenantSessionCookieArgs> sessionCookie;

    /**
     * @return Alters behavior of tenant&#39;s session cookie. Contains a single `mode` property.
     * 
     */
    public Optional<Output<TenantSessionCookieArgs>> sessionCookie() {
        return Optional.ofNullable(this.sessionCookie);
    }

    /**
     * Number of hours during which a session will stay valid.
     * 
     */
    @Import(name="sessionLifetime")
    private @Nullable Output<Double> sessionLifetime;

    /**
     * @return Number of hours during which a session will stay valid.
     * 
     */
    public Optional<Output<Double>> sessionLifetime() {
        return Optional.ofNullable(this.sessionLifetime);
    }

    /**
     * Sessions related settings for the tenant.
     * 
     */
    @Import(name="sessions")
    private @Nullable Output<TenantSessionsArgs> sessions;

    /**
     * @return Sessions related settings for the tenant.
     * 
     */
    public Optional<Output<TenantSessionsArgs>> sessions() {
        return Optional.ofNullable(this.sessions);
    }

    /**
     * Support email address for authenticating users.
     * 
     */
    @Import(name="supportEmail")
    private @Nullable Output<String> supportEmail;

    /**
     * @return Support email address for authenticating users.
     * 
     */
    public Optional<Output<String>> supportEmail() {
        return Optional.ofNullable(this.supportEmail);
    }

    /**
     * Support URL for authenticating users.
     * 
     */
    @Import(name="supportUrl")
    private @Nullable Output<String> supportUrl;

    /**
     * @return Support URL for authenticating users.
     * 
     */
    public Optional<Output<String>> supportUrl() {
        return Optional.ofNullable(this.supportUrl);
    }

    private TenantState() {}

    private TenantState(TenantState $) {
        this.allowOrganizationNameInAuthenticationApi = $.allowOrganizationNameInAuthenticationApi;
        this.allowedLogoutUrls = $.allowedLogoutUrls;
        this.customizeMfaInPostloginAction = $.customizeMfaInPostloginAction;
        this.defaultAudience = $.defaultAudience;
        this.defaultDirectory = $.defaultDirectory;
        this.defaultRedirectionUri = $.defaultRedirectionUri;
        this.enabledLocales = $.enabledLocales;
        this.flags = $.flags;
        this.friendlyName = $.friendlyName;
        this.idleSessionLifetime = $.idleSessionLifetime;
        this.pictureUrl = $.pictureUrl;
        this.sandboxVersion = $.sandboxVersion;
        this.sessionCookie = $.sessionCookie;
        this.sessionLifetime = $.sessionLifetime;
        this.sessions = $.sessions;
        this.supportEmail = $.supportEmail;
        this.supportUrl = $.supportUrl;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TenantState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TenantState $;

        public Builder() {
            $ = new TenantState();
        }

        public Builder(TenantState defaults) {
            $ = new TenantState(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowOrganizationNameInAuthenticationApi Whether to accept an organization name instead of an ID on auth endpoints.
         * 
         * @return builder
         * 
         */
        public Builder allowOrganizationNameInAuthenticationApi(@Nullable Output<Boolean> allowOrganizationNameInAuthenticationApi) {
            $.allowOrganizationNameInAuthenticationApi = allowOrganizationNameInAuthenticationApi;
            return this;
        }

        /**
         * @param allowOrganizationNameInAuthenticationApi Whether to accept an organization name instead of an ID on auth endpoints.
         * 
         * @return builder
         * 
         */
        public Builder allowOrganizationNameInAuthenticationApi(Boolean allowOrganizationNameInAuthenticationApi) {
            return allowOrganizationNameInAuthenticationApi(Output.of(allowOrganizationNameInAuthenticationApi));
        }

        /**
         * @param allowedLogoutUrls URLs that Auth0 may redirect to after logout.
         * 
         * @return builder
         * 
         */
        public Builder allowedLogoutUrls(@Nullable Output<List<String>> allowedLogoutUrls) {
            $.allowedLogoutUrls = allowedLogoutUrls;
            return this;
        }

        /**
         * @param allowedLogoutUrls URLs that Auth0 may redirect to after logout.
         * 
         * @return builder
         * 
         */
        public Builder allowedLogoutUrls(List<String> allowedLogoutUrls) {
            return allowedLogoutUrls(Output.of(allowedLogoutUrls));
        }

        /**
         * @param allowedLogoutUrls URLs that Auth0 may redirect to after logout.
         * 
         * @return builder
         * 
         */
        public Builder allowedLogoutUrls(String... allowedLogoutUrls) {
            return allowedLogoutUrls(List.of(allowedLogoutUrls));
        }

        /**
         * @param customizeMfaInPostloginAction Whether to enable flexible factors for MFA in the PostLogin action.
         * 
         * @return builder
         * 
         */
        public Builder customizeMfaInPostloginAction(@Nullable Output<Boolean> customizeMfaInPostloginAction) {
            $.customizeMfaInPostloginAction = customizeMfaInPostloginAction;
            return this;
        }

        /**
         * @param customizeMfaInPostloginAction Whether to enable flexible factors for MFA in the PostLogin action.
         * 
         * @return builder
         * 
         */
        public Builder customizeMfaInPostloginAction(Boolean customizeMfaInPostloginAction) {
            return customizeMfaInPostloginAction(Output.of(customizeMfaInPostloginAction));
        }

        /**
         * @param defaultAudience API Audience to use by default for API Authorization flows. This setting is equivalent to appending the audience to every authorization request made to the tenant for every application.
         * 
         * @return builder
         * 
         */
        public Builder defaultAudience(@Nullable Output<String> defaultAudience) {
            $.defaultAudience = defaultAudience;
            return this;
        }

        /**
         * @param defaultAudience API Audience to use by default for API Authorization flows. This setting is equivalent to appending the audience to every authorization request made to the tenant for every application.
         * 
         * @return builder
         * 
         */
        public Builder defaultAudience(String defaultAudience) {
            return defaultAudience(Output.of(defaultAudience));
        }

        /**
         * @param defaultDirectory Name of the connection to be used for Password Grant exchanges. Options include `auth0-adldap`, `ad`, `auth0`, `email`, `sms`, `waad`, and `adfs`.
         * 
         * @return builder
         * 
         */
        public Builder defaultDirectory(@Nullable Output<String> defaultDirectory) {
            $.defaultDirectory = defaultDirectory;
            return this;
        }

        /**
         * @param defaultDirectory Name of the connection to be used for Password Grant exchanges. Options include `auth0-adldap`, `ad`, `auth0`, `email`, `sms`, `waad`, and `adfs`.
         * 
         * @return builder
         * 
         */
        public Builder defaultDirectory(String defaultDirectory) {
            return defaultDirectory(Output.of(defaultDirectory));
        }

        /**
         * @param defaultRedirectionUri The default absolute redirection URI. Must be HTTPS or an empty string.
         * 
         * @return builder
         * 
         */
        public Builder defaultRedirectionUri(@Nullable Output<String> defaultRedirectionUri) {
            $.defaultRedirectionUri = defaultRedirectionUri;
            return this;
        }

        /**
         * @param defaultRedirectionUri The default absolute redirection URI. Must be HTTPS or an empty string.
         * 
         * @return builder
         * 
         */
        public Builder defaultRedirectionUri(String defaultRedirectionUri) {
            return defaultRedirectionUri(Output.of(defaultRedirectionUri));
        }

        /**
         * @param enabledLocales Supported locales for the user interface. The first locale in the list will be used to set the default locale.
         * 
         * @return builder
         * 
         */
        public Builder enabledLocales(@Nullable Output<List<String>> enabledLocales) {
            $.enabledLocales = enabledLocales;
            return this;
        }

        /**
         * @param enabledLocales Supported locales for the user interface. The first locale in the list will be used to set the default locale.
         * 
         * @return builder
         * 
         */
        public Builder enabledLocales(List<String> enabledLocales) {
            return enabledLocales(Output.of(enabledLocales));
        }

        /**
         * @param enabledLocales Supported locales for the user interface. The first locale in the list will be used to set the default locale.
         * 
         * @return builder
         * 
         */
        public Builder enabledLocales(String... enabledLocales) {
            return enabledLocales(List.of(enabledLocales));
        }

        /**
         * @param flags Configuration settings for tenant flags.
         * 
         * @return builder
         * 
         */
        public Builder flags(@Nullable Output<TenantFlagsArgs> flags) {
            $.flags = flags;
            return this;
        }

        /**
         * @param flags Configuration settings for tenant flags.
         * 
         * @return builder
         * 
         */
        public Builder flags(TenantFlagsArgs flags) {
            return flags(Output.of(flags));
        }

        /**
         * @param friendlyName Friendly name for the tenant.
         * 
         * @return builder
         * 
         */
        public Builder friendlyName(@Nullable Output<String> friendlyName) {
            $.friendlyName = friendlyName;
            return this;
        }

        /**
         * @param friendlyName Friendly name for the tenant.
         * 
         * @return builder
         * 
         */
        public Builder friendlyName(String friendlyName) {
            return friendlyName(Output.of(friendlyName));
        }

        /**
         * @param idleSessionLifetime Number of hours during which a session can be inactive before the user must log in again.
         * 
         * @return builder
         * 
         */
        public Builder idleSessionLifetime(@Nullable Output<Double> idleSessionLifetime) {
            $.idleSessionLifetime = idleSessionLifetime;
            return this;
        }

        /**
         * @param idleSessionLifetime Number of hours during which a session can be inactive before the user must log in again.
         * 
         * @return builder
         * 
         */
        public Builder idleSessionLifetime(Double idleSessionLifetime) {
            return idleSessionLifetime(Output.of(idleSessionLifetime));
        }

        /**
         * @param pictureUrl URL of logo to be shown for the tenant. Recommended size is 150px x 150px. If no URL is provided, the Auth0 logo will be used.
         * 
         * @return builder
         * 
         */
        public Builder pictureUrl(@Nullable Output<String> pictureUrl) {
            $.pictureUrl = pictureUrl;
            return this;
        }

        /**
         * @param pictureUrl URL of logo to be shown for the tenant. Recommended size is 150px x 150px. If no URL is provided, the Auth0 logo will be used.
         * 
         * @return builder
         * 
         */
        public Builder pictureUrl(String pictureUrl) {
            return pictureUrl(Output.of(pictureUrl));
        }

        /**
         * @param sandboxVersion Selected sandbox version for the extensibility environment, which allows you to use custom scripts to extend parts of Auth0&#39;s functionality.
         * 
         * @return builder
         * 
         */
        public Builder sandboxVersion(@Nullable Output<String> sandboxVersion) {
            $.sandboxVersion = sandboxVersion;
            return this;
        }

        /**
         * @param sandboxVersion Selected sandbox version for the extensibility environment, which allows you to use custom scripts to extend parts of Auth0&#39;s functionality.
         * 
         * @return builder
         * 
         */
        public Builder sandboxVersion(String sandboxVersion) {
            return sandboxVersion(Output.of(sandboxVersion));
        }

        /**
         * @param sessionCookie Alters behavior of tenant&#39;s session cookie. Contains a single `mode` property.
         * 
         * @return builder
         * 
         */
        public Builder sessionCookie(@Nullable Output<TenantSessionCookieArgs> sessionCookie) {
            $.sessionCookie = sessionCookie;
            return this;
        }

        /**
         * @param sessionCookie Alters behavior of tenant&#39;s session cookie. Contains a single `mode` property.
         * 
         * @return builder
         * 
         */
        public Builder sessionCookie(TenantSessionCookieArgs sessionCookie) {
            return sessionCookie(Output.of(sessionCookie));
        }

        /**
         * @param sessionLifetime Number of hours during which a session will stay valid.
         * 
         * @return builder
         * 
         */
        public Builder sessionLifetime(@Nullable Output<Double> sessionLifetime) {
            $.sessionLifetime = sessionLifetime;
            return this;
        }

        /**
         * @param sessionLifetime Number of hours during which a session will stay valid.
         * 
         * @return builder
         * 
         */
        public Builder sessionLifetime(Double sessionLifetime) {
            return sessionLifetime(Output.of(sessionLifetime));
        }

        /**
         * @param sessions Sessions related settings for the tenant.
         * 
         * @return builder
         * 
         */
        public Builder sessions(@Nullable Output<TenantSessionsArgs> sessions) {
            $.sessions = sessions;
            return this;
        }

        /**
         * @param sessions Sessions related settings for the tenant.
         * 
         * @return builder
         * 
         */
        public Builder sessions(TenantSessionsArgs sessions) {
            return sessions(Output.of(sessions));
        }

        /**
         * @param supportEmail Support email address for authenticating users.
         * 
         * @return builder
         * 
         */
        public Builder supportEmail(@Nullable Output<String> supportEmail) {
            $.supportEmail = supportEmail;
            return this;
        }

        /**
         * @param supportEmail Support email address for authenticating users.
         * 
         * @return builder
         * 
         */
        public Builder supportEmail(String supportEmail) {
            return supportEmail(Output.of(supportEmail));
        }

        /**
         * @param supportUrl Support URL for authenticating users.
         * 
         * @return builder
         * 
         */
        public Builder supportUrl(@Nullable Output<String> supportUrl) {
            $.supportUrl = supportUrl;
            return this;
        }

        /**
         * @param supportUrl Support URL for authenticating users.
         * 
         * @return builder
         * 
         */
        public Builder supportUrl(String supportUrl) {
            return supportUrl(Output.of(supportUrl));
        }

        public TenantState build() {
            return $;
        }
    }

}
