// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.auth0.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ClientRefreshToken {
    /**
     * @return Options include `expiring`, `non-expiring`. Whether a refresh token will expire based on an absolute lifetime, after which the token can no longer be used. If rotation is `rotating`, this must be set to `expiring`.
     * 
     */
    private String expirationType;
    /**
     * @return The time in seconds after which inactive refresh tokens will expire.
     * 
     */
    private @Nullable Integer idleTokenLifetime;
    /**
     * @return Whether inactive refresh tokens should remain valid indefinitely.
     * 
     */
    private @Nullable Boolean infiniteIdleTokenLifetime;
    /**
     * @return Whether refresh tokens should remain valid indefinitely. If false, `token_lifetime` should also be set.
     * 
     */
    private @Nullable Boolean infiniteTokenLifetime;
    /**
     * @return The amount of time in seconds in which a refresh token may be reused without triggering reuse detection.
     * 
     */
    private @Nullable Integer leeway;
    /**
     * @return Options include `rotating`, `non-rotating`. When `rotating`, exchanging a refresh token will cause a new refresh token to be issued and the existing token will be invalidated. This allows for automatic detection of token reuse if the token is leaked.
     * 
     */
    private String rotationType;
    /**
     * @return The absolute lifetime of a refresh token in seconds.
     * 
     */
    private @Nullable Integer tokenLifetime;

    private ClientRefreshToken() {}
    /**
     * @return Options include `expiring`, `non-expiring`. Whether a refresh token will expire based on an absolute lifetime, after which the token can no longer be used. If rotation is `rotating`, this must be set to `expiring`.
     * 
     */
    public String expirationType() {
        return this.expirationType;
    }
    /**
     * @return The time in seconds after which inactive refresh tokens will expire.
     * 
     */
    public Optional<Integer> idleTokenLifetime() {
        return Optional.ofNullable(this.idleTokenLifetime);
    }
    /**
     * @return Whether inactive refresh tokens should remain valid indefinitely.
     * 
     */
    public Optional<Boolean> infiniteIdleTokenLifetime() {
        return Optional.ofNullable(this.infiniteIdleTokenLifetime);
    }
    /**
     * @return Whether refresh tokens should remain valid indefinitely. If false, `token_lifetime` should also be set.
     * 
     */
    public Optional<Boolean> infiniteTokenLifetime() {
        return Optional.ofNullable(this.infiniteTokenLifetime);
    }
    /**
     * @return The amount of time in seconds in which a refresh token may be reused without triggering reuse detection.
     * 
     */
    public Optional<Integer> leeway() {
        return Optional.ofNullable(this.leeway);
    }
    /**
     * @return Options include `rotating`, `non-rotating`. When `rotating`, exchanging a refresh token will cause a new refresh token to be issued and the existing token will be invalidated. This allows for automatic detection of token reuse if the token is leaked.
     * 
     */
    public String rotationType() {
        return this.rotationType;
    }
    /**
     * @return The absolute lifetime of a refresh token in seconds.
     * 
     */
    public Optional<Integer> tokenLifetime() {
        return Optional.ofNullable(this.tokenLifetime);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ClientRefreshToken defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String expirationType;
        private @Nullable Integer idleTokenLifetime;
        private @Nullable Boolean infiniteIdleTokenLifetime;
        private @Nullable Boolean infiniteTokenLifetime;
        private @Nullable Integer leeway;
        private String rotationType;
        private @Nullable Integer tokenLifetime;
        public Builder() {}
        public Builder(ClientRefreshToken defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.expirationType = defaults.expirationType;
    	      this.idleTokenLifetime = defaults.idleTokenLifetime;
    	      this.infiniteIdleTokenLifetime = defaults.infiniteIdleTokenLifetime;
    	      this.infiniteTokenLifetime = defaults.infiniteTokenLifetime;
    	      this.leeway = defaults.leeway;
    	      this.rotationType = defaults.rotationType;
    	      this.tokenLifetime = defaults.tokenLifetime;
        }

        @CustomType.Setter
        public Builder expirationType(String expirationType) {
            this.expirationType = Objects.requireNonNull(expirationType);
            return this;
        }
        @CustomType.Setter
        public Builder idleTokenLifetime(@Nullable Integer idleTokenLifetime) {
            this.idleTokenLifetime = idleTokenLifetime;
            return this;
        }
        @CustomType.Setter
        public Builder infiniteIdleTokenLifetime(@Nullable Boolean infiniteIdleTokenLifetime) {
            this.infiniteIdleTokenLifetime = infiniteIdleTokenLifetime;
            return this;
        }
        @CustomType.Setter
        public Builder infiniteTokenLifetime(@Nullable Boolean infiniteTokenLifetime) {
            this.infiniteTokenLifetime = infiniteTokenLifetime;
            return this;
        }
        @CustomType.Setter
        public Builder leeway(@Nullable Integer leeway) {
            this.leeway = leeway;
            return this;
        }
        @CustomType.Setter
        public Builder rotationType(String rotationType) {
            this.rotationType = Objects.requireNonNull(rotationType);
            return this;
        }
        @CustomType.Setter
        public Builder tokenLifetime(@Nullable Integer tokenLifetime) {
            this.tokenLifetime = tokenLifetime;
            return this;
        }
        public ClientRefreshToken build() {
            final var _resultValue = new ClientRefreshToken();
            _resultValue.expirationType = expirationType;
            _resultValue.idleTokenLifetime = idleTokenLifetime;
            _resultValue.infiniteIdleTokenLifetime = infiniteIdleTokenLifetime;
            _resultValue.infiniteTokenLifetime = infiniteTokenLifetime;
            _resultValue.leeway = leeway;
            _resultValue.rotationType = rotationType;
            _resultValue.tokenLifetime = tokenLifetime;
            return _resultValue;
        }
    }
}
