// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.auth0.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CustomDomainCertificateArgs extends com.pulumi.resources.ResourceArgs {

    public static final CustomDomainCertificateArgs Empty = new CustomDomainCertificateArgs();

    /**
     * Name of the certificate authority that issued the certificate.
     * 
     */
    @Import(name="certificateAuthority")
    private @Nullable Output<String> certificateAuthority;

    /**
     * @return Name of the certificate authority that issued the certificate.
     * 
     */
    public Optional<Output<String>> certificateAuthority() {
        return Optional.ofNullable(this.certificateAuthority);
    }

    /**
     * Contains the error message if the provisioning process fails.
     * 
     */
    @Import(name="errorMsg")
    private @Nullable Output<String> errorMsg;

    /**
     * @return Contains the error message if the provisioning process fails.
     * 
     */
    public Optional<Output<String>> errorMsg() {
        return Optional.ofNullable(this.errorMsg);
    }

    /**
     * Specifies the date by which the certificate should be renewed.
     * 
     */
    @Import(name="renewsBefore")
    private @Nullable Output<String> renewsBefore;

    /**
     * @return Specifies the date by which the certificate should be renewed.
     * 
     */
    public Optional<Output<String>> renewsBefore() {
        return Optional.ofNullable(this.renewsBefore);
    }

    /**
     * Indicates the current state of the certificate provisioning process.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Indicates the current state of the certificate provisioning process.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    private CustomDomainCertificateArgs() {}

    private CustomDomainCertificateArgs(CustomDomainCertificateArgs $) {
        this.certificateAuthority = $.certificateAuthority;
        this.errorMsg = $.errorMsg;
        this.renewsBefore = $.renewsBefore;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CustomDomainCertificateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CustomDomainCertificateArgs $;

        public Builder() {
            $ = new CustomDomainCertificateArgs();
        }

        public Builder(CustomDomainCertificateArgs defaults) {
            $ = new CustomDomainCertificateArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param certificateAuthority Name of the certificate authority that issued the certificate.
         * 
         * @return builder
         * 
         */
        public Builder certificateAuthority(@Nullable Output<String> certificateAuthority) {
            $.certificateAuthority = certificateAuthority;
            return this;
        }

        /**
         * @param certificateAuthority Name of the certificate authority that issued the certificate.
         * 
         * @return builder
         * 
         */
        public Builder certificateAuthority(String certificateAuthority) {
            return certificateAuthority(Output.of(certificateAuthority));
        }

        /**
         * @param errorMsg Contains the error message if the provisioning process fails.
         * 
         * @return builder
         * 
         */
        public Builder errorMsg(@Nullable Output<String> errorMsg) {
            $.errorMsg = errorMsg;
            return this;
        }

        /**
         * @param errorMsg Contains the error message if the provisioning process fails.
         * 
         * @return builder
         * 
         */
        public Builder errorMsg(String errorMsg) {
            return errorMsg(Output.of(errorMsg));
        }

        /**
         * @param renewsBefore Specifies the date by which the certificate should be renewed.
         * 
         * @return builder
         * 
         */
        public Builder renewsBefore(@Nullable Output<String> renewsBefore) {
            $.renewsBefore = renewsBefore;
            return this;
        }

        /**
         * @param renewsBefore Specifies the date by which the certificate should be renewed.
         * 
         * @return builder
         * 
         */
        public Builder renewsBefore(String renewsBefore) {
            return renewsBefore(Output.of(renewsBefore));
        }

        /**
         * @param status Indicates the current state of the certificate provisioning process.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Indicates the current state of the certificate provisioning process.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public CustomDomainCertificateArgs build() {
            return $;
        }
    }

}
