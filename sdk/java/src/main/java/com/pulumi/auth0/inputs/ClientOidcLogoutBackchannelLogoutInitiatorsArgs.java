// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.auth0.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ClientOidcLogoutBackchannelLogoutInitiatorsArgs extends com.pulumi.resources.ResourceArgs {

    public static final ClientOidcLogoutBackchannelLogoutInitiatorsArgs Empty = new ClientOidcLogoutBackchannelLogoutInitiatorsArgs();

    /**
     * Determines the configuration method for enabling initiators. `custom` enables only the initiators listed in the backchannel*logout*selected_initiators set, `all` enables all current and future initiators.
     * 
     */
    @Import(name="mode", required=true)
    private Output<String> mode;

    /**
     * @return Determines the configuration method for enabling initiators. `custom` enables only the initiators listed in the backchannel*logout*selected_initiators set, `all` enables all current and future initiators.
     * 
     */
    public Output<String> mode() {
        return this.mode;
    }

    /**
     * Contains the list of initiators to be enabled for the given client.
     * 
     */
    @Import(name="selectedInitiators")
    private @Nullable Output<List<String>> selectedInitiators;

    /**
     * @return Contains the list of initiators to be enabled for the given client.
     * 
     */
    public Optional<Output<List<String>>> selectedInitiators() {
        return Optional.ofNullable(this.selectedInitiators);
    }

    private ClientOidcLogoutBackchannelLogoutInitiatorsArgs() {}

    private ClientOidcLogoutBackchannelLogoutInitiatorsArgs(ClientOidcLogoutBackchannelLogoutInitiatorsArgs $) {
        this.mode = $.mode;
        this.selectedInitiators = $.selectedInitiators;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClientOidcLogoutBackchannelLogoutInitiatorsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClientOidcLogoutBackchannelLogoutInitiatorsArgs $;

        public Builder() {
            $ = new ClientOidcLogoutBackchannelLogoutInitiatorsArgs();
        }

        public Builder(ClientOidcLogoutBackchannelLogoutInitiatorsArgs defaults) {
            $ = new ClientOidcLogoutBackchannelLogoutInitiatorsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param mode Determines the configuration method for enabling initiators. `custom` enables only the initiators listed in the backchannel*logout*selected_initiators set, `all` enables all current and future initiators.
         * 
         * @return builder
         * 
         */
        public Builder mode(Output<String> mode) {
            $.mode = mode;
            return this;
        }

        /**
         * @param mode Determines the configuration method for enabling initiators. `custom` enables only the initiators listed in the backchannel*logout*selected_initiators set, `all` enables all current and future initiators.
         * 
         * @return builder
         * 
         */
        public Builder mode(String mode) {
            return mode(Output.of(mode));
        }

        /**
         * @param selectedInitiators Contains the list of initiators to be enabled for the given client.
         * 
         * @return builder
         * 
         */
        public Builder selectedInitiators(@Nullable Output<List<String>> selectedInitiators) {
            $.selectedInitiators = selectedInitiators;
            return this;
        }

        /**
         * @param selectedInitiators Contains the list of initiators to be enabled for the given client.
         * 
         * @return builder
         * 
         */
        public Builder selectedInitiators(List<String> selectedInitiators) {
            return selectedInitiators(Output.of(selectedInitiators));
        }

        /**
         * @param selectedInitiators Contains the list of initiators to be enabled for the given client.
         * 
         * @return builder
         * 
         */
        public Builder selectedInitiators(String... selectedInitiators) {
            return selectedInitiators(List.of(selectedInitiators));
        }

        public ClientOidcLogoutBackchannelLogoutInitiatorsArgs build() {
            if ($.mode == null) {
                throw new MissingRequiredPropertyException("ClientOidcLogoutBackchannelLogoutInitiatorsArgs", "mode");
            }
            return $;
        }
    }

}
