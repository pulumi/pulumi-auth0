// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.auth0.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LogStreamPiiConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final LogStreamPiiConfigArgs Empty = new LogStreamPiiConfigArgs();

    /**
     * The algorithm to use for PII handling. Currently, only `xxhash` is supported.
     * 
     */
    @Import(name="algorithm")
    private @Nullable Output<String> algorithm;

    /**
     * @return The algorithm to use for PII handling. Currently, only `xxhash` is supported.
     * 
     */
    public Optional<Output<String>> algorithm() {
        return Optional.ofNullable(this.algorithm);
    }

    @Import(name="logFields", required=true)
    private Output<List<String>> logFields;

    public Output<List<String>> logFields() {
        return this.logFields;
    }

    /**
     * The method to use for PII handling. Options are `hash` or `mask`.
     * 
     */
    @Import(name="method")
    private @Nullable Output<String> method;

    /**
     * @return The method to use for PII handling. Options are `hash` or `mask`.
     * 
     */
    public Optional<Output<String>> method() {
        return Optional.ofNullable(this.method);
    }

    private LogStreamPiiConfigArgs() {}

    private LogStreamPiiConfigArgs(LogStreamPiiConfigArgs $) {
        this.algorithm = $.algorithm;
        this.logFields = $.logFields;
        this.method = $.method;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LogStreamPiiConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LogStreamPiiConfigArgs $;

        public Builder() {
            $ = new LogStreamPiiConfigArgs();
        }

        public Builder(LogStreamPiiConfigArgs defaults) {
            $ = new LogStreamPiiConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param algorithm The algorithm to use for PII handling. Currently, only `xxhash` is supported.
         * 
         * @return builder
         * 
         */
        public Builder algorithm(@Nullable Output<String> algorithm) {
            $.algorithm = algorithm;
            return this;
        }

        /**
         * @param algorithm The algorithm to use for PII handling. Currently, only `xxhash` is supported.
         * 
         * @return builder
         * 
         */
        public Builder algorithm(String algorithm) {
            return algorithm(Output.of(algorithm));
        }

        public Builder logFields(Output<List<String>> logFields) {
            $.logFields = logFields;
            return this;
        }

        public Builder logFields(List<String> logFields) {
            return logFields(Output.of(logFields));
        }

        public Builder logFields(String... logFields) {
            return logFields(List.of(logFields));
        }

        /**
         * @param method The method to use for PII handling. Options are `hash` or `mask`.
         * 
         * @return builder
         * 
         */
        public Builder method(@Nullable Output<String> method) {
            $.method = method;
            return this;
        }

        /**
         * @param method The method to use for PII handling. Options are `hash` or `mask`.
         * 
         * @return builder
         * 
         */
        public Builder method(String method) {
            return method(Output.of(method));
        }

        public LogStreamPiiConfigArgs build() {
            if ($.logFields == null) {
                throw new MissingRequiredPropertyException("LogStreamPiiConfigArgs", "logFields");
            }
            return $;
        }
    }

}
