// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.auth0.outputs;

import com.pulumi.auth0.outputs.GetUserPermission;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetUserResult {
    /**
     * @return Custom fields that store info about the user that impact the user&#39;s core functionality, such as how an application functions or what the user can access. Examples include support plans and IDs for external accounts.
     * 
     */
    private String appMetadata;
    /**
     * @return Indicates whether the user is blocked or not.
     * 
     */
    private Boolean blocked;
    /**
     * @return Name of the connection from which the user information was sourced.
     * 
     */
    private String connectionName;
    /**
     * @return Email address of the user.
     * 
     */
    private String email;
    /**
     * @return Indicates whether the email address has been verified.
     * 
     */
    private Boolean emailVerified;
    /**
     * @return Family name of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled &#39;Sync user profile attributes at each login&#39;. For more information, see: [Configure Identity Provider Connection for User Profile Updates](https://auth0.com/docs/manage-users/user-accounts/user-profiles/configure-connection-sync-with-auth0).
     * 
     */
    private String familyName;
    /**
     * @return Given name of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled &#39;Sync user profile attributes at each login&#39;. For more information, see: [Configure Identity Provider Connection for User Profile Updates](https://auth0.com/docs/manage-users/user-accounts/user-profiles/configure-connection-sync-with-auth0).
     * 
     */
    private String givenName;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Name of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled &#39;Sync user profile attributes at each login&#39;. For more information, see: [Configure Identity Provider Connection for User Profile Updates](https://auth0.com/docs/manage-users/user-accounts/user-profiles/configure-connection-sync-with-auth0).
     * 
     */
    private String name;
    /**
     * @return Preferred nickname or alias of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled &#39;Sync user profile attributes at each login&#39;. For more information, see: [Configure Identity Provider Connection for User Profile Updates](https://auth0.com/docs/manage-users/user-accounts/user-profiles/configure-connection-sync-with-auth0).
     * 
     */
    private String nickname;
    /**
     * @return Initial password for this user. Required for non-passwordless connections (SMS and email).
     * 
     */
    private String password;
    /**
     * @return List of API permissions granted to the user.
     * 
     */
    private List<GetUserPermission> permissions;
    /**
     * @return Phone number for the user; follows the E.164 recommendation. Used for SMS connections.
     * 
     */
    private String phoneNumber;
    /**
     * @return Indicates whether the phone number has been verified.
     * 
     */
    private Boolean phoneVerified;
    /**
     * @return Picture of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled &#39;Sync user profile attributes at each login&#39;. For more information, see: [Configure Identity Provider Connection for User Profile Updates](https://auth0.com/docs/manage-users/user-accounts/user-profiles/configure-connection-sync-with-auth0).
     * 
     */
    private String picture;
    /**
     * @return Set of IDs of roles assigned to the user.
     * 
     */
    private List<String> roles;
    /**
     * @return ID of the user.
     * 
     */
    private String userId;
    /**
     * @return Custom fields that store info about the user that does not impact a user&#39;s core functionality. Examples include work address, home address, and user preferences.
     * 
     */
    private String userMetadata;
    /**
     * @return Username of the user. Only valid if the connection requires a username.
     * 
     */
    private String username;
    /**
     * @return Indicates whether the user will receive a verification email after creation. Overrides behavior of `email_verified` parameter.
     * 
     */
    private Boolean verifyEmail;

    private GetUserResult() {}
    /**
     * @return Custom fields that store info about the user that impact the user&#39;s core functionality, such as how an application functions or what the user can access. Examples include support plans and IDs for external accounts.
     * 
     */
    public String appMetadata() {
        return this.appMetadata;
    }
    /**
     * @return Indicates whether the user is blocked or not.
     * 
     */
    public Boolean blocked() {
        return this.blocked;
    }
    /**
     * @return Name of the connection from which the user information was sourced.
     * 
     */
    public String connectionName() {
        return this.connectionName;
    }
    /**
     * @return Email address of the user.
     * 
     */
    public String email() {
        return this.email;
    }
    /**
     * @return Indicates whether the email address has been verified.
     * 
     */
    public Boolean emailVerified() {
        return this.emailVerified;
    }
    /**
     * @return Family name of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled &#39;Sync user profile attributes at each login&#39;. For more information, see: [Configure Identity Provider Connection for User Profile Updates](https://auth0.com/docs/manage-users/user-accounts/user-profiles/configure-connection-sync-with-auth0).
     * 
     */
    public String familyName() {
        return this.familyName;
    }
    /**
     * @return Given name of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled &#39;Sync user profile attributes at each login&#39;. For more information, see: [Configure Identity Provider Connection for User Profile Updates](https://auth0.com/docs/manage-users/user-accounts/user-profiles/configure-connection-sync-with-auth0).
     * 
     */
    public String givenName() {
        return this.givenName;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Name of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled &#39;Sync user profile attributes at each login&#39;. For more information, see: [Configure Identity Provider Connection for User Profile Updates](https://auth0.com/docs/manage-users/user-accounts/user-profiles/configure-connection-sync-with-auth0).
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Preferred nickname or alias of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled &#39;Sync user profile attributes at each login&#39;. For more information, see: [Configure Identity Provider Connection for User Profile Updates](https://auth0.com/docs/manage-users/user-accounts/user-profiles/configure-connection-sync-with-auth0).
     * 
     */
    public String nickname() {
        return this.nickname;
    }
    /**
     * @return Initial password for this user. Required for non-passwordless connections (SMS and email).
     * 
     */
    public String password() {
        return this.password;
    }
    /**
     * @return List of API permissions granted to the user.
     * 
     */
    public List<GetUserPermission> permissions() {
        return this.permissions;
    }
    /**
     * @return Phone number for the user; follows the E.164 recommendation. Used for SMS connections.
     * 
     */
    public String phoneNumber() {
        return this.phoneNumber;
    }
    /**
     * @return Indicates whether the phone number has been verified.
     * 
     */
    public Boolean phoneVerified() {
        return this.phoneVerified;
    }
    /**
     * @return Picture of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled &#39;Sync user profile attributes at each login&#39;. For more information, see: [Configure Identity Provider Connection for User Profile Updates](https://auth0.com/docs/manage-users/user-accounts/user-profiles/configure-connection-sync-with-auth0).
     * 
     */
    public String picture() {
        return this.picture;
    }
    /**
     * @return Set of IDs of roles assigned to the user.
     * 
     */
    public List<String> roles() {
        return this.roles;
    }
    /**
     * @return ID of the user.
     * 
     */
    public String userId() {
        return this.userId;
    }
    /**
     * @return Custom fields that store info about the user that does not impact a user&#39;s core functionality. Examples include work address, home address, and user preferences.
     * 
     */
    public String userMetadata() {
        return this.userMetadata;
    }
    /**
     * @return Username of the user. Only valid if the connection requires a username.
     * 
     */
    public String username() {
        return this.username;
    }
    /**
     * @return Indicates whether the user will receive a verification email after creation. Overrides behavior of `email_verified` parameter.
     * 
     */
    public Boolean verifyEmail() {
        return this.verifyEmail;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetUserResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String appMetadata;
        private Boolean blocked;
        private String connectionName;
        private String email;
        private Boolean emailVerified;
        private String familyName;
        private String givenName;
        private String id;
        private String name;
        private String nickname;
        private String password;
        private List<GetUserPermission> permissions;
        private String phoneNumber;
        private Boolean phoneVerified;
        private String picture;
        private List<String> roles;
        private String userId;
        private String userMetadata;
        private String username;
        private Boolean verifyEmail;
        public Builder() {}
        public Builder(GetUserResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.appMetadata = defaults.appMetadata;
    	      this.blocked = defaults.blocked;
    	      this.connectionName = defaults.connectionName;
    	      this.email = defaults.email;
    	      this.emailVerified = defaults.emailVerified;
    	      this.familyName = defaults.familyName;
    	      this.givenName = defaults.givenName;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.nickname = defaults.nickname;
    	      this.password = defaults.password;
    	      this.permissions = defaults.permissions;
    	      this.phoneNumber = defaults.phoneNumber;
    	      this.phoneVerified = defaults.phoneVerified;
    	      this.picture = defaults.picture;
    	      this.roles = defaults.roles;
    	      this.userId = defaults.userId;
    	      this.userMetadata = defaults.userMetadata;
    	      this.username = defaults.username;
    	      this.verifyEmail = defaults.verifyEmail;
        }

        @CustomType.Setter
        public Builder appMetadata(String appMetadata) {
            if (appMetadata == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "appMetadata");
            }
            this.appMetadata = appMetadata;
            return this;
        }
        @CustomType.Setter
        public Builder blocked(Boolean blocked) {
            if (blocked == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "blocked");
            }
            this.blocked = blocked;
            return this;
        }
        @CustomType.Setter
        public Builder connectionName(String connectionName) {
            if (connectionName == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "connectionName");
            }
            this.connectionName = connectionName;
            return this;
        }
        @CustomType.Setter
        public Builder email(String email) {
            if (email == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "email");
            }
            this.email = email;
            return this;
        }
        @CustomType.Setter
        public Builder emailVerified(Boolean emailVerified) {
            if (emailVerified == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "emailVerified");
            }
            this.emailVerified = emailVerified;
            return this;
        }
        @CustomType.Setter
        public Builder familyName(String familyName) {
            if (familyName == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "familyName");
            }
            this.familyName = familyName;
            return this;
        }
        @CustomType.Setter
        public Builder givenName(String givenName) {
            if (givenName == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "givenName");
            }
            this.givenName = givenName;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder nickname(String nickname) {
            if (nickname == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "nickname");
            }
            this.nickname = nickname;
            return this;
        }
        @CustomType.Setter
        public Builder password(String password) {
            if (password == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "password");
            }
            this.password = password;
            return this;
        }
        @CustomType.Setter
        public Builder permissions(List<GetUserPermission> permissions) {
            if (permissions == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "permissions");
            }
            this.permissions = permissions;
            return this;
        }
        public Builder permissions(GetUserPermission... permissions) {
            return permissions(List.of(permissions));
        }
        @CustomType.Setter
        public Builder phoneNumber(String phoneNumber) {
            if (phoneNumber == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "phoneNumber");
            }
            this.phoneNumber = phoneNumber;
            return this;
        }
        @CustomType.Setter
        public Builder phoneVerified(Boolean phoneVerified) {
            if (phoneVerified == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "phoneVerified");
            }
            this.phoneVerified = phoneVerified;
            return this;
        }
        @CustomType.Setter
        public Builder picture(String picture) {
            if (picture == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "picture");
            }
            this.picture = picture;
            return this;
        }
        @CustomType.Setter
        public Builder roles(List<String> roles) {
            if (roles == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "roles");
            }
            this.roles = roles;
            return this;
        }
        public Builder roles(String... roles) {
            return roles(List.of(roles));
        }
        @CustomType.Setter
        public Builder userId(String userId) {
            if (userId == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "userId");
            }
            this.userId = userId;
            return this;
        }
        @CustomType.Setter
        public Builder userMetadata(String userMetadata) {
            if (userMetadata == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "userMetadata");
            }
            this.userMetadata = userMetadata;
            return this;
        }
        @CustomType.Setter
        public Builder username(String username) {
            if (username == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "username");
            }
            this.username = username;
            return this;
        }
        @CustomType.Setter
        public Builder verifyEmail(Boolean verifyEmail) {
            if (verifyEmail == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "verifyEmail");
            }
            this.verifyEmail = verifyEmail;
            return this;
        }
        public GetUserResult build() {
            final var _resultValue = new GetUserResult();
            _resultValue.appMetadata = appMetadata;
            _resultValue.blocked = blocked;
            _resultValue.connectionName = connectionName;
            _resultValue.email = email;
            _resultValue.emailVerified = emailVerified;
            _resultValue.familyName = familyName;
            _resultValue.givenName = givenName;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.nickname = nickname;
            _resultValue.password = password;
            _resultValue.permissions = permissions;
            _resultValue.phoneNumber = phoneNumber;
            _resultValue.phoneVerified = phoneVerified;
            _resultValue.picture = picture;
            _resultValue.roles = roles;
            _resultValue.userId = userId;
            _resultValue.userMetadata = userMetadata;
            _resultValue.username = username;
            _resultValue.verifyEmail = verifyEmail;
            return _resultValue;
        }
    }
}
