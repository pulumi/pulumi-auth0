// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.auth0;

import com.pulumi.auth0.inputs.PromptScreenPartialInsertionPointsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PromptScreenPartialArgs extends com.pulumi.resources.ResourceArgs {

    public static final PromptScreenPartialArgs Empty = new PromptScreenPartialArgs();

    /**
     * The insertion points for the partials.
     * 
     */
    @Import(name="insertionPoints")
    private @Nullable Output<PromptScreenPartialInsertionPointsArgs> insertionPoints;

    /**
     * @return The insertion points for the partials.
     * 
     */
    public Optional<Output<PromptScreenPartialInsertionPointsArgs>> insertionPoints() {
        return Optional.ofNullable(this.insertionPoints);
    }

    /**
     * The prompt that you are adding partials for. Options are: `login-id`, `login`, `login-password`, `signup`, `signup-id`, `signup-password`, `login-passwordless`, `customized-consent`.
     * 
     */
    @Import(name="promptType", required=true)
    private Output<String> promptType;

    /**
     * @return The prompt that you are adding partials for. Options are: `login-id`, `login`, `login-password`, `signup`, `signup-id`, `signup-password`, `login-passwordless`, `customized-consent`.
     * 
     */
    public Output<String> promptType() {
        return this.promptType;
    }

    /**
     * The name of the screen associated with the partials
     * 
     */
    @Import(name="screenName", required=true)
    private Output<String> screenName;

    /**
     * @return The name of the screen associated with the partials
     * 
     */
    public Output<String> screenName() {
        return this.screenName;
    }

    private PromptScreenPartialArgs() {}

    private PromptScreenPartialArgs(PromptScreenPartialArgs $) {
        this.insertionPoints = $.insertionPoints;
        this.promptType = $.promptType;
        this.screenName = $.screenName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PromptScreenPartialArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PromptScreenPartialArgs $;

        public Builder() {
            $ = new PromptScreenPartialArgs();
        }

        public Builder(PromptScreenPartialArgs defaults) {
            $ = new PromptScreenPartialArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param insertionPoints The insertion points for the partials.
         * 
         * @return builder
         * 
         */
        public Builder insertionPoints(@Nullable Output<PromptScreenPartialInsertionPointsArgs> insertionPoints) {
            $.insertionPoints = insertionPoints;
            return this;
        }

        /**
         * @param insertionPoints The insertion points for the partials.
         * 
         * @return builder
         * 
         */
        public Builder insertionPoints(PromptScreenPartialInsertionPointsArgs insertionPoints) {
            return insertionPoints(Output.of(insertionPoints));
        }

        /**
         * @param promptType The prompt that you are adding partials for. Options are: `login-id`, `login`, `login-password`, `signup`, `signup-id`, `signup-password`, `login-passwordless`, `customized-consent`.
         * 
         * @return builder
         * 
         */
        public Builder promptType(Output<String> promptType) {
            $.promptType = promptType;
            return this;
        }

        /**
         * @param promptType The prompt that you are adding partials for. Options are: `login-id`, `login`, `login-password`, `signup`, `signup-id`, `signup-password`, `login-passwordless`, `customized-consent`.
         * 
         * @return builder
         * 
         */
        public Builder promptType(String promptType) {
            return promptType(Output.of(promptType));
        }

        /**
         * @param screenName The name of the screen associated with the partials
         * 
         * @return builder
         * 
         */
        public Builder screenName(Output<String> screenName) {
            $.screenName = screenName;
            return this;
        }

        /**
         * @param screenName The name of the screen associated with the partials
         * 
         * @return builder
         * 
         */
        public Builder screenName(String screenName) {
            return screenName(Output.of(screenName));
        }

        public PromptScreenPartialArgs build() {
            if ($.promptType == null) {
                throw new MissingRequiredPropertyException("PromptScreenPartialArgs", "promptType");
            }
            if ($.screenName == null) {
                throw new MissingRequiredPropertyException("PromptScreenPartialArgs", "screenName");
            }
            return $;
        }
    }

}
