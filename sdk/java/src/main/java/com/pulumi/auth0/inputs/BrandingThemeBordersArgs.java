// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.auth0.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BrandingThemeBordersArgs extends com.pulumi.resources.ResourceArgs {

    public static final BrandingThemeBordersArgs Empty = new BrandingThemeBordersArgs();

    /**
     * Button border radius. Value needs to be between `1` and `10`. Defaults to `3.0`.
     * 
     */
    @Import(name="buttonBorderRadius")
    private @Nullable Output<Double> buttonBorderRadius;

    /**
     * @return Button border radius. Value needs to be between `1` and `10`. Defaults to `3.0`.
     * 
     */
    public Optional<Output<Double>> buttonBorderRadius() {
        return Optional.ofNullable(this.buttonBorderRadius);
    }

    /**
     * Button border weight. Value needs to be between `0` and `10`. Defaults to `1.0`.
     * 
     */
    @Import(name="buttonBorderWeight")
    private @Nullable Output<Double> buttonBorderWeight;

    /**
     * @return Button border weight. Value needs to be between `0` and `10`. Defaults to `1.0`.
     * 
     */
    public Optional<Output<Double>> buttonBorderWeight() {
        return Optional.ofNullable(this.buttonBorderWeight);
    }

    /**
     * Buttons style. Available options: `pill`, `rounded`, `sharp`. Defaults to `rounded`.
     * 
     */
    @Import(name="buttonsStyle")
    private @Nullable Output<String> buttonsStyle;

    /**
     * @return Buttons style. Available options: `pill`, `rounded`, `sharp`. Defaults to `rounded`.
     * 
     */
    public Optional<Output<String>> buttonsStyle() {
        return Optional.ofNullable(this.buttonsStyle);
    }

    /**
     * Input border radius. Value needs to be between `0` and `10`. Defaults to `3.0`.
     * 
     */
    @Import(name="inputBorderRadius")
    private @Nullable Output<Double> inputBorderRadius;

    /**
     * @return Input border radius. Value needs to be between `0` and `10`. Defaults to `3.0`.
     * 
     */
    public Optional<Output<Double>> inputBorderRadius() {
        return Optional.ofNullable(this.inputBorderRadius);
    }

    /**
     * Input border weight. Value needs to be between `0` and `3`. Defaults to `1.0`.
     * 
     */
    @Import(name="inputBorderWeight")
    private @Nullable Output<Double> inputBorderWeight;

    /**
     * @return Input border weight. Value needs to be between `0` and `3`. Defaults to `1.0`.
     * 
     */
    public Optional<Output<Double>> inputBorderWeight() {
        return Optional.ofNullable(this.inputBorderWeight);
    }

    /**
     * Inputs style. Available options: `pill`, `rounded`, `sharp`. Defaults to `rounded`.
     * 
     */
    @Import(name="inputsStyle")
    private @Nullable Output<String> inputsStyle;

    /**
     * @return Inputs style. Available options: `pill`, `rounded`, `sharp`. Defaults to `rounded`.
     * 
     */
    public Optional<Output<String>> inputsStyle() {
        return Optional.ofNullable(this.inputsStyle);
    }

    /**
     * Show widget shadow. Defaults to `true`.
     * 
     */
    @Import(name="showWidgetShadow")
    private @Nullable Output<Boolean> showWidgetShadow;

    /**
     * @return Show widget shadow. Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> showWidgetShadow() {
        return Optional.ofNullable(this.showWidgetShadow);
    }

    /**
     * Widget border weight. Value needs to be between `0` and `10`. Defaults to `0.0`.
     * 
     */
    @Import(name="widgetBorderWeight")
    private @Nullable Output<Double> widgetBorderWeight;

    /**
     * @return Widget border weight. Value needs to be between `0` and `10`. Defaults to `0.0`.
     * 
     */
    public Optional<Output<Double>> widgetBorderWeight() {
        return Optional.ofNullable(this.widgetBorderWeight);
    }

    /**
     * Widget corner radius. Value needs to be between `0` and `50`. Defaults to `5.0`.
     * 
     */
    @Import(name="widgetCornerRadius")
    private @Nullable Output<Double> widgetCornerRadius;

    /**
     * @return Widget corner radius. Value needs to be between `0` and `50`. Defaults to `5.0`.
     * 
     */
    public Optional<Output<Double>> widgetCornerRadius() {
        return Optional.ofNullable(this.widgetCornerRadius);
    }

    private BrandingThemeBordersArgs() {}

    private BrandingThemeBordersArgs(BrandingThemeBordersArgs $) {
        this.buttonBorderRadius = $.buttonBorderRadius;
        this.buttonBorderWeight = $.buttonBorderWeight;
        this.buttonsStyle = $.buttonsStyle;
        this.inputBorderRadius = $.inputBorderRadius;
        this.inputBorderWeight = $.inputBorderWeight;
        this.inputsStyle = $.inputsStyle;
        this.showWidgetShadow = $.showWidgetShadow;
        this.widgetBorderWeight = $.widgetBorderWeight;
        this.widgetCornerRadius = $.widgetCornerRadius;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BrandingThemeBordersArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BrandingThemeBordersArgs $;

        public Builder() {
            $ = new BrandingThemeBordersArgs();
        }

        public Builder(BrandingThemeBordersArgs defaults) {
            $ = new BrandingThemeBordersArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param buttonBorderRadius Button border radius. Value needs to be between `1` and `10`. Defaults to `3.0`.
         * 
         * @return builder
         * 
         */
        public Builder buttonBorderRadius(@Nullable Output<Double> buttonBorderRadius) {
            $.buttonBorderRadius = buttonBorderRadius;
            return this;
        }

        /**
         * @param buttonBorderRadius Button border radius. Value needs to be between `1` and `10`. Defaults to `3.0`.
         * 
         * @return builder
         * 
         */
        public Builder buttonBorderRadius(Double buttonBorderRadius) {
            return buttonBorderRadius(Output.of(buttonBorderRadius));
        }

        /**
         * @param buttonBorderWeight Button border weight. Value needs to be between `0` and `10`. Defaults to `1.0`.
         * 
         * @return builder
         * 
         */
        public Builder buttonBorderWeight(@Nullable Output<Double> buttonBorderWeight) {
            $.buttonBorderWeight = buttonBorderWeight;
            return this;
        }

        /**
         * @param buttonBorderWeight Button border weight. Value needs to be between `0` and `10`. Defaults to `1.0`.
         * 
         * @return builder
         * 
         */
        public Builder buttonBorderWeight(Double buttonBorderWeight) {
            return buttonBorderWeight(Output.of(buttonBorderWeight));
        }

        /**
         * @param buttonsStyle Buttons style. Available options: `pill`, `rounded`, `sharp`. Defaults to `rounded`.
         * 
         * @return builder
         * 
         */
        public Builder buttonsStyle(@Nullable Output<String> buttonsStyle) {
            $.buttonsStyle = buttonsStyle;
            return this;
        }

        /**
         * @param buttonsStyle Buttons style. Available options: `pill`, `rounded`, `sharp`. Defaults to `rounded`.
         * 
         * @return builder
         * 
         */
        public Builder buttonsStyle(String buttonsStyle) {
            return buttonsStyle(Output.of(buttonsStyle));
        }

        /**
         * @param inputBorderRadius Input border radius. Value needs to be between `0` and `10`. Defaults to `3.0`.
         * 
         * @return builder
         * 
         */
        public Builder inputBorderRadius(@Nullable Output<Double> inputBorderRadius) {
            $.inputBorderRadius = inputBorderRadius;
            return this;
        }

        /**
         * @param inputBorderRadius Input border radius. Value needs to be between `0` and `10`. Defaults to `3.0`.
         * 
         * @return builder
         * 
         */
        public Builder inputBorderRadius(Double inputBorderRadius) {
            return inputBorderRadius(Output.of(inputBorderRadius));
        }

        /**
         * @param inputBorderWeight Input border weight. Value needs to be between `0` and `3`. Defaults to `1.0`.
         * 
         * @return builder
         * 
         */
        public Builder inputBorderWeight(@Nullable Output<Double> inputBorderWeight) {
            $.inputBorderWeight = inputBorderWeight;
            return this;
        }

        /**
         * @param inputBorderWeight Input border weight. Value needs to be between `0` and `3`. Defaults to `1.0`.
         * 
         * @return builder
         * 
         */
        public Builder inputBorderWeight(Double inputBorderWeight) {
            return inputBorderWeight(Output.of(inputBorderWeight));
        }

        /**
         * @param inputsStyle Inputs style. Available options: `pill`, `rounded`, `sharp`. Defaults to `rounded`.
         * 
         * @return builder
         * 
         */
        public Builder inputsStyle(@Nullable Output<String> inputsStyle) {
            $.inputsStyle = inputsStyle;
            return this;
        }

        /**
         * @param inputsStyle Inputs style. Available options: `pill`, `rounded`, `sharp`. Defaults to `rounded`.
         * 
         * @return builder
         * 
         */
        public Builder inputsStyle(String inputsStyle) {
            return inputsStyle(Output.of(inputsStyle));
        }

        /**
         * @param showWidgetShadow Show widget shadow. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder showWidgetShadow(@Nullable Output<Boolean> showWidgetShadow) {
            $.showWidgetShadow = showWidgetShadow;
            return this;
        }

        /**
         * @param showWidgetShadow Show widget shadow. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder showWidgetShadow(Boolean showWidgetShadow) {
            return showWidgetShadow(Output.of(showWidgetShadow));
        }

        /**
         * @param widgetBorderWeight Widget border weight. Value needs to be between `0` and `10`. Defaults to `0.0`.
         * 
         * @return builder
         * 
         */
        public Builder widgetBorderWeight(@Nullable Output<Double> widgetBorderWeight) {
            $.widgetBorderWeight = widgetBorderWeight;
            return this;
        }

        /**
         * @param widgetBorderWeight Widget border weight. Value needs to be between `0` and `10`. Defaults to `0.0`.
         * 
         * @return builder
         * 
         */
        public Builder widgetBorderWeight(Double widgetBorderWeight) {
            return widgetBorderWeight(Output.of(widgetBorderWeight));
        }

        /**
         * @param widgetCornerRadius Widget corner radius. Value needs to be between `0` and `50`. Defaults to `5.0`.
         * 
         * @return builder
         * 
         */
        public Builder widgetCornerRadius(@Nullable Output<Double> widgetCornerRadius) {
            $.widgetCornerRadius = widgetCornerRadius;
            return this;
        }

        /**
         * @param widgetCornerRadius Widget corner radius. Value needs to be between `0` and `50`. Defaults to `5.0`.
         * 
         * @return builder
         * 
         */
        public Builder widgetCornerRadius(Double widgetCornerRadius) {
            return widgetCornerRadius(Output.of(widgetCornerRadius));
        }

        public BrandingThemeBordersArgs build() {
            return $;
        }
    }

}
