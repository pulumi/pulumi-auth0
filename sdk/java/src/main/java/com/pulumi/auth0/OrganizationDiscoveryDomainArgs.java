// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.auth0;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class OrganizationDiscoveryDomainArgs extends com.pulumi.resources.ResourceArgs {

    public static final OrganizationDiscoveryDomainArgs Empty = new OrganizationDiscoveryDomainArgs();

    /**
     * The domain name for organization discovery.
     * 
     */
    @Import(name="domain", required=true)
    private Output<String> domain;

    /**
     * @return The domain name for organization discovery.
     * 
     */
    public Output<String> domain() {
        return this.domain;
    }

    /**
     * The ID of the organization.
     * 
     */
    @Import(name="organizationId", required=true)
    private Output<String> organizationId;

    /**
     * @return The ID of the organization.
     * 
     */
    public Output<String> organizationId() {
        return this.organizationId;
    }

    /**
     * Verification status. Must be either &#39;pending&#39; or &#39;verified&#39;.
     * 
     */
    @Import(name="status", required=true)
    private Output<String> status;

    /**
     * @return Verification status. Must be either &#39;pending&#39; or &#39;verified&#39;.
     * 
     */
    public Output<String> status() {
        return this.status;
    }

    private OrganizationDiscoveryDomainArgs() {}

    private OrganizationDiscoveryDomainArgs(OrganizationDiscoveryDomainArgs $) {
        this.domain = $.domain;
        this.organizationId = $.organizationId;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OrganizationDiscoveryDomainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OrganizationDiscoveryDomainArgs $;

        public Builder() {
            $ = new OrganizationDiscoveryDomainArgs();
        }

        public Builder(OrganizationDiscoveryDomainArgs defaults) {
            $ = new OrganizationDiscoveryDomainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param domain The domain name for organization discovery.
         * 
         * @return builder
         * 
         */
        public Builder domain(Output<String> domain) {
            $.domain = domain;
            return this;
        }

        /**
         * @param domain The domain name for organization discovery.
         * 
         * @return builder
         * 
         */
        public Builder domain(String domain) {
            return domain(Output.of(domain));
        }

        /**
         * @param organizationId The ID of the organization.
         * 
         * @return builder
         * 
         */
        public Builder organizationId(Output<String> organizationId) {
            $.organizationId = organizationId;
            return this;
        }

        /**
         * @param organizationId The ID of the organization.
         * 
         * @return builder
         * 
         */
        public Builder organizationId(String organizationId) {
            return organizationId(Output.of(organizationId));
        }

        /**
         * @param status Verification status. Must be either &#39;pending&#39; or &#39;verified&#39;.
         * 
         * @return builder
         * 
         */
        public Builder status(Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Verification status. Must be either &#39;pending&#39; or &#39;verified&#39;.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public OrganizationDiscoveryDomainArgs build() {
            if ($.domain == null) {
                throw new MissingRequiredPropertyException("OrganizationDiscoveryDomainArgs", "domain");
            }
            if ($.organizationId == null) {
                throw new MissingRequiredPropertyException("OrganizationDiscoveryDomainArgs", "organizationId");
            }
            if ($.status == null) {
                throw new MissingRequiredPropertyException("OrganizationDiscoveryDomainArgs", "status");
            }
            return $;
        }
    }

}
