// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.auth0.outputs;

import com.pulumi.auth0.outputs.AttackProtectionSuspiciousIpThrottlingPreLogin;
import com.pulumi.auth0.outputs.AttackProtectionSuspiciousIpThrottlingPreUserRegistration;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class AttackProtectionSuspiciousIpThrottling {
    /**
     * @return List of trusted IP addresses that will not have attack protection enforced against them. This field allows you to specify multiple IP addresses, or ranges. You can use IPv4 or IPv6 addresses and CIDR notation.
     * 
     */
    private @Nullable List<String> allowlists;
    /**
     * @return Whether suspicious IP throttling attack protections are active.
     * 
     */
    private Boolean enabled;
    /**
     * @return Configuration options that apply before every login attempt. Only available on public tenants.
     * 
     */
    private @Nullable AttackProtectionSuspiciousIpThrottlingPreLogin preLogin;
    /**
     * @return Configuration options that apply before every user registration attempt. Only available on public tenants.
     * 
     */
    private @Nullable AttackProtectionSuspiciousIpThrottlingPreUserRegistration preUserRegistration;
    /**
     * @return Action to take when a suspicious IP throttling threshold is violated. Possible values: `block` (throttle traffic from an IP address when there is a high number of login attempts targeting too many different accounts), `admin_notification` (send an email notification when traffic is throttled on one or more IP addresses due to high-velocity traffic).
     * 
     */
    private @Nullable List<String> shields;

    private AttackProtectionSuspiciousIpThrottling() {}
    /**
     * @return List of trusted IP addresses that will not have attack protection enforced against them. This field allows you to specify multiple IP addresses, or ranges. You can use IPv4 or IPv6 addresses and CIDR notation.
     * 
     */
    public List<String> allowlists() {
        return this.allowlists == null ? List.of() : this.allowlists;
    }
    /**
     * @return Whether suspicious IP throttling attack protections are active.
     * 
     */
    public Boolean enabled() {
        return this.enabled;
    }
    /**
     * @return Configuration options that apply before every login attempt. Only available on public tenants.
     * 
     */
    public Optional<AttackProtectionSuspiciousIpThrottlingPreLogin> preLogin() {
        return Optional.ofNullable(this.preLogin);
    }
    /**
     * @return Configuration options that apply before every user registration attempt. Only available on public tenants.
     * 
     */
    public Optional<AttackProtectionSuspiciousIpThrottlingPreUserRegistration> preUserRegistration() {
        return Optional.ofNullable(this.preUserRegistration);
    }
    /**
     * @return Action to take when a suspicious IP throttling threshold is violated. Possible values: `block` (throttle traffic from an IP address when there is a high number of login attempts targeting too many different accounts), `admin_notification` (send an email notification when traffic is throttled on one or more IP addresses due to high-velocity traffic).
     * 
     */
    public List<String> shields() {
        return this.shields == null ? List.of() : this.shields;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AttackProtectionSuspiciousIpThrottling defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> allowlists;
        private Boolean enabled;
        private @Nullable AttackProtectionSuspiciousIpThrottlingPreLogin preLogin;
        private @Nullable AttackProtectionSuspiciousIpThrottlingPreUserRegistration preUserRegistration;
        private @Nullable List<String> shields;
        public Builder() {}
        public Builder(AttackProtectionSuspiciousIpThrottling defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowlists = defaults.allowlists;
    	      this.enabled = defaults.enabled;
    	      this.preLogin = defaults.preLogin;
    	      this.preUserRegistration = defaults.preUserRegistration;
    	      this.shields = defaults.shields;
        }

        @CustomType.Setter
        public Builder allowlists(@Nullable List<String> allowlists) {
            this.allowlists = allowlists;
            return this;
        }
        public Builder allowlists(String... allowlists) {
            return allowlists(List.of(allowlists));
        }
        @CustomType.Setter
        public Builder enabled(Boolean enabled) {
            this.enabled = Objects.requireNonNull(enabled);
            return this;
        }
        @CustomType.Setter
        public Builder preLogin(@Nullable AttackProtectionSuspiciousIpThrottlingPreLogin preLogin) {
            this.preLogin = preLogin;
            return this;
        }
        @CustomType.Setter
        public Builder preUserRegistration(@Nullable AttackProtectionSuspiciousIpThrottlingPreUserRegistration preUserRegistration) {
            this.preUserRegistration = preUserRegistration;
            return this;
        }
        @CustomType.Setter
        public Builder shields(@Nullable List<String> shields) {
            this.shields = shields;
            return this;
        }
        public Builder shields(String... shields) {
            return shields(List.of(shields));
        }
        public AttackProtectionSuspiciousIpThrottling build() {
            final var o = new AttackProtectionSuspiciousIpThrottling();
            o.allowlists = allowlists;
            o.enabled = enabled;
            o.preLogin = preLogin;
            o.preUserRegistration = preUserRegistration;
            o.shields = shields;
            return o;
        }
    }
}
