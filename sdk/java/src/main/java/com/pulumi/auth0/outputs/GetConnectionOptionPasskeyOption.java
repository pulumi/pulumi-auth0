// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.auth0.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetConnectionOptionPasskeyOption {
    /**
     * @return Controls the UI used to challenge the user for their passkey
     * 
     */
    private String challengeUi;
    /**
     * @return Enables or disables enrollment prompt for local passkey when user authenticates using a cross-device passkey for the connection
     * 
     */
    private Boolean localEnrollmentEnabled;
    /**
     * @return Enables or disables progressive enrollment of passkeys for the connection
     * 
     */
    private Boolean progressiveEnrollmentEnabled;

    private GetConnectionOptionPasskeyOption() {}
    /**
     * @return Controls the UI used to challenge the user for their passkey
     * 
     */
    public String challengeUi() {
        return this.challengeUi;
    }
    /**
     * @return Enables or disables enrollment prompt for local passkey when user authenticates using a cross-device passkey for the connection
     * 
     */
    public Boolean localEnrollmentEnabled() {
        return this.localEnrollmentEnabled;
    }
    /**
     * @return Enables or disables progressive enrollment of passkeys for the connection
     * 
     */
    public Boolean progressiveEnrollmentEnabled() {
        return this.progressiveEnrollmentEnabled;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetConnectionOptionPasskeyOption defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String challengeUi;
        private Boolean localEnrollmentEnabled;
        private Boolean progressiveEnrollmentEnabled;
        public Builder() {}
        public Builder(GetConnectionOptionPasskeyOption defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.challengeUi = defaults.challengeUi;
    	      this.localEnrollmentEnabled = defaults.localEnrollmentEnabled;
    	      this.progressiveEnrollmentEnabled = defaults.progressiveEnrollmentEnabled;
        }

        @CustomType.Setter
        public Builder challengeUi(String challengeUi) {
            if (challengeUi == null) {
              throw new MissingRequiredPropertyException("GetConnectionOptionPasskeyOption", "challengeUi");
            }
            this.challengeUi = challengeUi;
            return this;
        }
        @CustomType.Setter
        public Builder localEnrollmentEnabled(Boolean localEnrollmentEnabled) {
            if (localEnrollmentEnabled == null) {
              throw new MissingRequiredPropertyException("GetConnectionOptionPasskeyOption", "localEnrollmentEnabled");
            }
            this.localEnrollmentEnabled = localEnrollmentEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder progressiveEnrollmentEnabled(Boolean progressiveEnrollmentEnabled) {
            if (progressiveEnrollmentEnabled == null) {
              throw new MissingRequiredPropertyException("GetConnectionOptionPasskeyOption", "progressiveEnrollmentEnabled");
            }
            this.progressiveEnrollmentEnabled = progressiveEnrollmentEnabled;
            return this;
        }
        public GetConnectionOptionPasskeyOption build() {
            final var _resultValue = new GetConnectionOptionPasskeyOption();
            _resultValue.challengeUi = challengeUi;
            _resultValue.localEnrollmentEnabled = localEnrollmentEnabled;
            _resultValue.progressiveEnrollmentEnabled = progressiveEnrollmentEnabled;
            return _resultValue;
        }
    }
}
