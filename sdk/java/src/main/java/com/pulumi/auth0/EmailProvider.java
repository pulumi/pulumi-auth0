// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.auth0;

import com.pulumi.auth0.EmailProviderArgs;
import com.pulumi.auth0.Utilities;
import com.pulumi.auth0.inputs.EmailProviderState;
import com.pulumi.auth0.outputs.EmailProviderCredentials;
import com.pulumi.auth0.outputs.EmailProviderSettings;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * With Auth0, you can have standard welcome, password reset, and account verification email-based workflows built right into Auth0. This resource allows you to configure email providers, so you can route all emails that are part of Auth0&#39;s authentication workflows through the supported high-volume email service of your choice.
 * 
 * !&gt; This resource manages to create a max of 1 email provider for a tenant.
 * To avoid potential issues, it is recommended not to try creating multiple email providers on the same tenant.
 * 
 * !&gt; If you are using the `auth0.EmailProvider` resource to create a `custom` email provider, you must ensure an action is created first with `custom-email-provider` as the supportedTriggers
 * 
 * ## Example Usage
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.auth0.EmailProvider;
 * import com.pulumi.auth0.EmailProviderArgs;
 * import com.pulumi.auth0.inputs.EmailProviderCredentialsArgs;
 * import com.pulumi.auth0.Action;
 * import com.pulumi.auth0.ActionArgs;
 * import com.pulumi.auth0.inputs.ActionSupportedTriggersArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         // This is an example on how to set up the email provider with Amazon SES.
 *         var amazonSesEmailProvider = new EmailProvider("amazonSesEmailProvider", EmailProviderArgs.builder()
 *             .name("ses")
 *             .enabled(true)
 *             .defaultFromAddress("accounts}{@literal @}{@code example.com")
 *             .credentials(EmailProviderCredentialsArgs.builder()
 *                 .accessKeyId("AKIAXXXXXXXXXXXXXXXX")
 *                 .secretAccessKey("7e8c2148xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")
 *                 .region("us-east-1")
 *                 .build())
 *             .build());
 * 
 *         // This is an example on how to set up the email provider with SMTP.
 *         var smtpEmailProvider = new EmailProvider("smtpEmailProvider", EmailProviderArgs.builder()
 *             .name("smtp")
 *             .enabled(true)
 *             .defaultFromAddress("accounts}{@literal @}{@code example.com")
 *             .credentials(EmailProviderCredentialsArgs.builder()
 *                 .smtpHost("your.smtp.host.com")
 *                 .smtpPort(583)
 *                 .smtpUser("SMTP Username")
 *                 .smtpPass("SMTP Password")
 *                 .build())
 *             .build());
 * 
 *         // This is an example on how to set up the email provider with Sendgrid.
 *         var sendgridEmailProvider = new EmailProvider("sendgridEmailProvider", EmailProviderArgs.builder()
 *             .name("sendgrid")
 *             .enabled(true)
 *             .defaultFromAddress("accounts}{@literal @}{@code example.com")
 *             .credentials(EmailProviderCredentialsArgs.builder()
 *                 .apiKey("secretAPIKey")
 *                 .build())
 *             .build());
 * 
 *         // This is an example on how to set up the email provider with Azure CS.
 *         var azureCsEmailProvider = new EmailProvider("azureCsEmailProvider", EmailProviderArgs.builder()
 *             .name("azure_cs")
 *             .enabled(true)
 *             .defaultFromAddress("accounts}{@literal @}{@code example.com")
 *             .credentials(EmailProviderCredentialsArgs.builder()
 *                 .azureCsConnectionString("azure_cs_connection_string")
 *                 .build())
 *             .build());
 * 
 *         // This is an example on how to set up the email provider with MS365.
 *         var ms365EmailProvider = new EmailProvider("ms365EmailProvider", EmailProviderArgs.builder()
 *             .name("ms365")
 *             .enabled(true)
 *             .defaultFromAddress("accounts}{@literal @}{@code example.com")
 *             .credentials(EmailProviderCredentialsArgs.builder()
 *                 .ms365TenantId("ms365_tenant_id")
 *                 .ms365ClientId("ms365_client_id")
 *                 .ms365ClientSecret("ms365_client_secret")
 *                 .build())
 *             .build());
 * 
 *         // Below is an example of how to set up a custom email provider.
 *         // The action with custom-email-provider as supported_triggers is a prerequisite.
 *         var customEmailProviderAction = new Action("customEmailProviderAction", ActionArgs.builder()
 *             .name("custom-email-provider-action")
 *             .runtime("node18")
 *             .deploy(true)
 *             .code("""
 * /**
 *  * Handler to be executed while sending an email notification.
 *  *
 *  * }{@literal @}{@code param }{{@code Event}}{@code  event - Details about the user and the context in which they are logging in.
 *  * }{@literal @}{@code param }{{@code CustomEmailProviderAPI}}{@code  api - Methods and utilities to help change the behavior of sending a email notification.
 *  *}&#47;{@code
 *  exports.onExecuteCustomEmailProvider = async (event, api) => }{{@code
 *   // Code goes here
 *   console.log(event);
 *   return;
 *  }}{@code ;
 *             """)
 *             .supportedTriggers(ActionSupportedTriggersArgs.builder()
 *                 .id("custom-email-provider")
 *                 .version("v1")
 *                 .build())
 *             .build());
 * 
 *         var customEmailProvider = new EmailProvider("customEmailProvider", EmailProviderArgs.builder()
 *             .name("custom")
 *             .enabled(true)
 *             .defaultFromAddress("accounts}{@literal @}{@code example.com")
 *             .credentials(EmailProviderCredentialsArgs.builder()
 *                 .build())
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(customEmailProviderAction)
 *                 .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * 
 * ## Import
 * 
 * As this is not a resource identifiable by an ID within the Auth0 Management API,
 * 
 * email can be imported using a random string.
 * 
 * We recommend [Version 4 UUID](https://www.uuidgenerator.net/version4)
 * 
 * Example:
 * 
 * ```sh
 * $ pulumi import auth0:index/emailProvider:EmailProvider my_email_provider &#34;b4213dc2-2eed-42c3-9516-c6131a9ce0b0&#34;
 * ```
 * 
 */
@ResourceType(type="auth0:index/emailProvider:EmailProvider")
public class EmailProvider extends com.pulumi.resources.CustomResource {
    /**
     * Configuration settings for the credentials for the email provider.
     * 
     */
    @Export(name="credentials", refs={EmailProviderCredentials.class}, tree="[0]")
    private Output<EmailProviderCredentials> credentials;

    /**
     * @return Configuration settings for the credentials for the email provider.
     * 
     */
    public Output<EmailProviderCredentials> credentials() {
        return this.credentials;
    }
    /**
     * Email address to use as the sender when no other &#34;from&#34; address is specified.
     * 
     */
    @Export(name="defaultFromAddress", refs={String.class}, tree="[0]")
    private Output<String> defaultFromAddress;

    /**
     * @return Email address to use as the sender when no other &#34;from&#34; address is specified.
     * 
     */
    public Output<String> defaultFromAddress() {
        return this.defaultFromAddress;
    }
    /**
     * Indicates whether the email provider is enabled.
     * 
     */
    @Export(name="enabled", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enabled;

    /**
     * @return Indicates whether the email provider is enabled.
     * 
     */
    public Output<Optional<Boolean>> enabled() {
        return Codegen.optional(this.enabled);
    }
    /**
     * Name of the email provider. Options include `azureCs`, `custom`, `mailgun`, `mandrill`, `ms365`, `sendgrid`, `ses`, `smtp` and `sparkpost`.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of the email provider. Options include `azureCs`, `custom`, `mailgun`, `mandrill`, `ms365`, `sendgrid`, `ses`, `smtp` and `sparkpost`.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Specific email provider settings.
     * 
     */
    @Export(name="settings", refs={EmailProviderSettings.class}, tree="[0]")
    private Output<EmailProviderSettings> settings;

    /**
     * @return Specific email provider settings.
     * 
     */
    public Output<EmailProviderSettings> settings() {
        return this.settings;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public EmailProvider(java.lang.String name) {
        this(name, EmailProviderArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public EmailProvider(java.lang.String name, EmailProviderArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public EmailProvider(java.lang.String name, EmailProviderArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("auth0:index/emailProvider:EmailProvider", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private EmailProvider(java.lang.String name, Output<java.lang.String> id, @Nullable EmailProviderState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("auth0:index/emailProvider:EmailProvider", name, state, makeResourceOptions(options, id), false);
    }

    private static EmailProviderArgs makeArgs(EmailProviderArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? EmailProviderArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static EmailProvider get(java.lang.String name, Output<java.lang.String> id, @Nullable EmailProviderState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new EmailProvider(name, id, state, options);
    }
}
