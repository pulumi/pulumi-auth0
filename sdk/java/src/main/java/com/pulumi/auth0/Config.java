// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.auth0;

import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.Optional;

public final class Config {

    private static final com.pulumi.Config config = com.pulumi.Config.of("auth0");
/**
 * Your Auth0 [management api access token](https://auth0.com/docs/security/tokens/access-tokens/management-api-access-tokens). It can also be sourced from the `AUTH0_API_TOKEN` environment variable. It can be used instead of `client_id` + `client_secret`. If both are specified, `api_token` will be used over `client_id` + `client_secret` fields.
 * 
 */
    public Optional<String> apiToken() {
        return Codegen.stringProp("apiToken").config(config).get();
    }
/**
 * Your Auth0 audience when using a custom domain. It can also be sourced from the `AUTH0_AUDIENCE` environment variable.
 * 
 */
    public Optional<String> audience() {
        return Codegen.stringProp("audience").config(config).get();
    }
/**
 * While toggled on, the API token gets fetched from the keyring for the given domain
 * 
 */
    public Optional<Boolean> cliLogin() {
        return Codegen.booleanProp("cliLogin").config(config).get();
    }
/**
 * The private key used to sign the client assertion JWT. It can also be sourced from the `AUTH0_CLIENT_ASSERTION_PRIVATE_KEY` environment variable.
 * 
 */
    public Optional<String> clientAssertionPrivateKey() {
        return Codegen.stringProp("clientAssertionPrivateKey").config(config).get();
    }
/**
 * The algorithm used to sign the client assertion JWT. It can also be sourced from the `AUTH0_CLIENT_ASSERTION_SIGNING_ALG` environment variable.
 * 
 */
    public Optional<String> clientAssertionSigningAlg() {
        return Codegen.stringProp("clientAssertionSigningAlg").config(config).get();
    }
/**
 * Your Auth0 client ID. It can also be sourced from the `AUTH0_CLIENT_ID` environment variable.
 * 
 */
    public Optional<String> clientId() {
        return Codegen.stringProp("clientId").config(config).get();
    }
/**
 * Your Auth0 client secret. It can also be sourced from the `AUTH0_CLIENT_SECRET` environment variable.
 * 
 */
    public Optional<String> clientSecret() {
        return Codegen.stringProp("clientSecret").config(config).get();
    }
/**
 * When specified, this header is added to requests targeting a set of pre-defined whitelisted URLs Global setting overrides all resource specific `custom_domain_header` value
 * 
 */
    public Optional<String> customDomainHeader() {
        return Codegen.stringProp("customDomainHeader").config(config).get();
    }
/**
 * Enables HTTP request and response logging when TF_LOG=DEBUG is set. It can also be sourced from the `AUTH0_DEBUG` environment variable.
 * 
 */
    public Optional<Boolean> debug() {
        return Codegen.booleanProp("debug").config(config).env("AUTH0_DEBUG").get();
    }
/**
 * Your Auth0 domain name. It can also be sourced from the `AUTH0_DOMAIN` environment variable.
 * 
 */
    public Optional<String> domain() {
        return Codegen.stringProp("domain").config(config).get();
    }
    public Optional<Boolean> dynamicCredentials() {
        return Codegen.booleanProp("dynamicCredentials").config(config).get();
    }
}
