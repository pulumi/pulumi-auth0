// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.auth0.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetOutboundIpsChangelog {
    /**
     * @return Type of change (add or remove).
     * 
     */
    private String action;
    /**
     * @return Date of the change (YYYY-MM-DD format).
     * 
     */
    private String date;
    /**
     * @return List of IPv4 CIDR blocks affected by this change.
     * 
     */
    private List<String> ipv4Cidrs;
    /**
     * @return Region affected by the change.
     * 
     */
    private String region;

    private GetOutboundIpsChangelog() {}
    /**
     * @return Type of change (add or remove).
     * 
     */
    public String action() {
        return this.action;
    }
    /**
     * @return Date of the change (YYYY-MM-DD format).
     * 
     */
    public String date() {
        return this.date;
    }
    /**
     * @return List of IPv4 CIDR blocks affected by this change.
     * 
     */
    public List<String> ipv4Cidrs() {
        return this.ipv4Cidrs;
    }
    /**
     * @return Region affected by the change.
     * 
     */
    public String region() {
        return this.region;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetOutboundIpsChangelog defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String action;
        private String date;
        private List<String> ipv4Cidrs;
        private String region;
        public Builder() {}
        public Builder(GetOutboundIpsChangelog defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.action = defaults.action;
    	      this.date = defaults.date;
    	      this.ipv4Cidrs = defaults.ipv4Cidrs;
    	      this.region = defaults.region;
        }

        @CustomType.Setter
        public Builder action(String action) {
            if (action == null) {
              throw new MissingRequiredPropertyException("GetOutboundIpsChangelog", "action");
            }
            this.action = action;
            return this;
        }
        @CustomType.Setter
        public Builder date(String date) {
            if (date == null) {
              throw new MissingRequiredPropertyException("GetOutboundIpsChangelog", "date");
            }
            this.date = date;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4Cidrs(List<String> ipv4Cidrs) {
            if (ipv4Cidrs == null) {
              throw new MissingRequiredPropertyException("GetOutboundIpsChangelog", "ipv4Cidrs");
            }
            this.ipv4Cidrs = ipv4Cidrs;
            return this;
        }
        public Builder ipv4Cidrs(String... ipv4Cidrs) {
            return ipv4Cidrs(List.of(ipv4Cidrs));
        }
        @CustomType.Setter
        public Builder region(String region) {
            if (region == null) {
              throw new MissingRequiredPropertyException("GetOutboundIpsChangelog", "region");
            }
            this.region = region;
            return this;
        }
        public GetOutboundIpsChangelog build() {
            final var _resultValue = new GetOutboundIpsChangelog();
            _resultValue.action = action;
            _resultValue.date = date;
            _resultValue.ipv4Cidrs = ipv4Cidrs;
            _resultValue.region = region;
            return _resultValue;
        }
    }
}
