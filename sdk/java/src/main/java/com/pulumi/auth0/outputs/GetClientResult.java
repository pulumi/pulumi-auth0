// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.auth0.outputs;

import com.pulumi.auth0.outputs.GetClientAddon;
import com.pulumi.auth0.outputs.GetClientClientAuthenticationMethod;
import com.pulumi.auth0.outputs.GetClientDefaultOrganization;
import com.pulumi.auth0.outputs.GetClientJwtConfiguration;
import com.pulumi.auth0.outputs.GetClientMobile;
import com.pulumi.auth0.outputs.GetClientNativeSocialLogin;
import com.pulumi.auth0.outputs.GetClientOidcLogout;
import com.pulumi.auth0.outputs.GetClientRefreshToken;
import com.pulumi.auth0.outputs.GetClientSessionTransfer;
import com.pulumi.auth0.outputs.GetClientSignedRequestObject;
import com.pulumi.auth0.outputs.GetClientTokenExchange;
import com.pulumi.auth0.outputs.GetClientTokenQuota;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetClientResult {
    /**
     * @return Addons enabled for this client and their associated configurations.
     * 
     */
    private List<GetClientAddon> addons;
    /**
     * @return List of applications ID&#39;s that will be allowed to make delegation request. By default, all applications will be allowed.
     * 
     */
    private List<String> allowedClients;
    /**
     * @return URLs that Auth0 may redirect to after logout.
     * 
     */
    private List<String> allowedLogoutUrls;
    /**
     * @return URLs that represent valid origins for cross-origin resource sharing. By default, all your callback URLs will be allowed.
     * 
     */
    private List<String> allowedOrigins;
    /**
     * @return Type of application the client represents. Possible values are: `native`, `spa`, `regularWeb`, `nonInteractive`, `resourceServer`,`ssoIntegration`. Specific SSO integrations types accepted as well are: `rms`, `box`, `cloudbees`, `concur`, `dropbox`, `mscrm`, `echosign`, `egnyte`, `newrelic`, `office365`, `salesforce`, `sentry`, `sharepoint`, `slack`, `springcm`, `zendesk`, `zoom`.
     * 
     */
    private String appType;
    /**
     * @return URLs that Auth0 may call back to after a user authenticates for the client. Make sure to specify the protocol (https://) otherwise the callback may fail in some cases. With the exception of custom URI schemes for native clients, all callbacks should use protocol https://.
     * 
     */
    private List<String> callbacks;
    /**
     * @return List of audiences/realms for SAML protocol. Used by the wsfed addon.
     * 
     */
    private List<String> clientAliases;
    /**
     * @return Defines client authentication methods.
     * 
     */
    private List<GetClientClientAuthenticationMethod> clientAuthenticationMethods;
    /**
     * @return The ID of the client. If not provided, `name` must be set.
     * 
     */
    private @Nullable String clientId;
    /**
     * @return Metadata associated with the client, in the form of an object with string values (max 255 chars). Maximum of 10 metadata properties allowed. Field names (max 255 chars) are alphanumeric and may only include the following special characters: `:,-+=_*?&#34;/\()&lt;&gt;{@literal @} [Tab] [Space]`.
     * 
     */
    private Map<String,String> clientMetadata;
    private String clientSecret;
    /**
     * @return Defines the compliance level for this client, which may restrict it&#39;s capabilities. Can be one of `none`, `fapi1AdvPkjPar`, `fapi1AdvMtlsPar`.
     * 
     */
    private String complianceLevel;
    /**
     * @return Whether this client can be used to make cross-origin authentication requests (`true`) or it is not allowed to make such requests (`false`).
     * 
     */
    private Boolean crossOriginAuth;
    /**
     * @return URL of the location in your site where the cross-origin verification takes place for the cross-origin auth flow when performing authentication in your own domain instead of Auth0 Universal Login page.
     * 
     */
    private String crossOriginLoc;
    /**
     * @return The content (HTML, CSS, JS) of the custom login page.
     * 
     */
    private String customLoginPage;
    /**
     * @return Indicates whether a custom login page is to be used.
     * 
     */
    private Boolean customLoginPageOn;
    /**
     * @return Configure and associate an organization with the Client
     * 
     */
    private List<GetClientDefaultOrganization> defaultOrganizations;
    /**
     * @return Description of the purpose of the client.
     * 
     */
    private String description;
    /**
     * @return Encryption used for WS-Fed responses with this client.
     * 
     */
    private Map<String,String> encryptionKey;
    /**
     * @return HTML form template to be used for WS-Federation.
     * 
     */
    private String formTemplate;
    /**
     * @return Types of grants that this client is authorized to use.
     * 
     */
    private List<String> grantTypes;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Initiate login URI. Must be HTTPS or an empty string.
     * 
     */
    private String initiateLoginUri;
    /**
     * @return Indicates whether this client is a first-party client.Defaults to true from the API
     * 
     */
    private Boolean isFirstParty;
    /**
     * @return Indicates whether the token endpoint IP header is trusted. Requires the authentication method to be set to `clientSecretPost` or `clientSecretBasic`. Setting this property when creating the resource, will default the authentication method to `clientSecretPost`. To change the authentication method to `clientSecretBasic` use the `auth0.ClientCredentials` resource.
     * 
     */
    private Boolean isTokenEndpointIpHeaderTrusted;
    /**
     * @return Configuration settings for the JWTs issued for this client.
     * 
     */
    private List<GetClientJwtConfiguration> jwtConfigurations;
    /**
     * @return URL of the logo for the client. Recommended size is 150px x 150px. If none is set, the default badge for the application type will be shown.
     * 
     */
    private String logoUri;
    /**
     * @return Additional configuration for native mobile apps.
     * 
     */
    private List<GetClientMobile> mobiles;
    /**
     * @return The name of the client. If not provided, `clientId` must be set.
     * 
     */
    private @Nullable String name;
    /**
     * @return Configuration settings to toggle native social login for mobile native applications. Once this is set it must stay set, with both resources set to `false` in order to change the `appType`.
     * 
     */
    private List<GetClientNativeSocialLogin> nativeSocialLogins;
    /**
     * @return Set of URLs that are valid to call back from Auth0 for OIDC backchannel logout. Currently only one URL is allowed.
     * 
     */
    private List<String> oidcBackchannelLogoutUrls;
    /**
     * @return Indicates whether this client will conform to strict OIDC specifications.
     * 
     */
    private Boolean oidcConformant;
    /**
     * @return Configure OIDC logout for the Client
     * 
     */
    private List<GetClientOidcLogout> oidcLogouts;
    /**
     * @return Defines how to proceed during an authentication transaction when `organizationUsage = &#34;require&#34;`. Can be `noPrompt` (default), `preLoginPrompt` or  `postLoginPrompt`.
     * 
     */
    private String organizationRequireBehavior;
    /**
     * @return Defines how to proceed during an authentication transaction with regards to an organization. Can be `deny` (default), `allow` or `require`.
     * 
     */
    private String organizationUsage;
    /**
     * @return Configuration settings for the refresh tokens issued for this client.
     * 
     */
    private List<GetClientRefreshToken> refreshTokens;
    /**
     * @return Makes the use of Proof-of-Possession mandatory for this client.
     * 
     */
    private Boolean requireProofOfPossession;
    /**
     * @return Makes the use of Pushed Authorization Requests mandatory for this client. This feature currently needs to be enabled on the tenant in order to make use of it.
     * 
     */
    private Boolean requirePushedAuthorizationRequests;
    /**
     * @return The identifier of a resource server that client is associated withThis property can be sent only when app*type=resource*server.This property can not be changed, once the client is created.
     * 
     */
    private String resourceServerIdentifier;
    private List<GetClientSessionTransfer> sessionTransfers;
    /**
     * @return Configuration for JWT-secured Authorization Requests(JAR).
     * 
     */
    private List<GetClientSignedRequestObject> signedRequestObjects;
    /**
     * @return List containing a map of the public cert of the signing key and the public cert of the signing key in PKCS7.
     * 
     */
    private List<Map<String,String>> signingKeys;
    /**
     * @return Indicates whether to skip the confirmation prompt when using non-verifiable callback URIs.
     * 
     */
    private Boolean skipNonVerifiableCallbackUriConfirmationPrompt;
    /**
     * @return Applies only to SSO clients and determines whether Auth0 will handle Single Sign-On (true) or whether the identity provider will (false).
     * 
     */
    private Boolean sso;
    /**
     * @return Indicates whether or not SSO is disabled.
     * 
     */
    private Boolean ssoDisabled;
    /**
     * @return The authentication method for the token endpoint. Results include `none` (public client without a client secret), `clientSecretPost` (client uses HTTP POST parameters), `clientSecretBasic` (client uses HTTP Basic), Managing a client&#39;s authentication method can be done via the `auth0.ClientCredentials` resource.
     * 
     */
    private String tokenEndpointAuthMethod;
    /**
     * @return Allows configuration for token exchange
     * 
     */
    private List<GetClientTokenExchange> tokenExchanges;
    /**
     * @return The token quota configuration.
     * 
     */
    private List<GetClientTokenQuota> tokenQuotas;
    /**
     * @return URLs that represent valid web origins for use with web message response mode.
     * 
     */
    private List<String> webOrigins;

    private GetClientResult() {}
    /**
     * @return Addons enabled for this client and their associated configurations.
     * 
     */
    public List<GetClientAddon> addons() {
        return this.addons;
    }
    /**
     * @return List of applications ID&#39;s that will be allowed to make delegation request. By default, all applications will be allowed.
     * 
     */
    public List<String> allowedClients() {
        return this.allowedClients;
    }
    /**
     * @return URLs that Auth0 may redirect to after logout.
     * 
     */
    public List<String> allowedLogoutUrls() {
        return this.allowedLogoutUrls;
    }
    /**
     * @return URLs that represent valid origins for cross-origin resource sharing. By default, all your callback URLs will be allowed.
     * 
     */
    public List<String> allowedOrigins() {
        return this.allowedOrigins;
    }
    /**
     * @return Type of application the client represents. Possible values are: `native`, `spa`, `regularWeb`, `nonInteractive`, `resourceServer`,`ssoIntegration`. Specific SSO integrations types accepted as well are: `rms`, `box`, `cloudbees`, `concur`, `dropbox`, `mscrm`, `echosign`, `egnyte`, `newrelic`, `office365`, `salesforce`, `sentry`, `sharepoint`, `slack`, `springcm`, `zendesk`, `zoom`.
     * 
     */
    public String appType() {
        return this.appType;
    }
    /**
     * @return URLs that Auth0 may call back to after a user authenticates for the client. Make sure to specify the protocol (https://) otherwise the callback may fail in some cases. With the exception of custom URI schemes for native clients, all callbacks should use protocol https://.
     * 
     */
    public List<String> callbacks() {
        return this.callbacks;
    }
    /**
     * @return List of audiences/realms for SAML protocol. Used by the wsfed addon.
     * 
     */
    public List<String> clientAliases() {
        return this.clientAliases;
    }
    /**
     * @return Defines client authentication methods.
     * 
     */
    public List<GetClientClientAuthenticationMethod> clientAuthenticationMethods() {
        return this.clientAuthenticationMethods;
    }
    /**
     * @return The ID of the client. If not provided, `name` must be set.
     * 
     */
    public Optional<String> clientId() {
        return Optional.ofNullable(this.clientId);
    }
    /**
     * @return Metadata associated with the client, in the form of an object with string values (max 255 chars). Maximum of 10 metadata properties allowed. Field names (max 255 chars) are alphanumeric and may only include the following special characters: `:,-+=_*?&#34;/\()&lt;&gt;{@literal @} [Tab] [Space]`.
     * 
     */
    public Map<String,String> clientMetadata() {
        return this.clientMetadata;
    }
    public String clientSecret() {
        return this.clientSecret;
    }
    /**
     * @return Defines the compliance level for this client, which may restrict it&#39;s capabilities. Can be one of `none`, `fapi1AdvPkjPar`, `fapi1AdvMtlsPar`.
     * 
     */
    public String complianceLevel() {
        return this.complianceLevel;
    }
    /**
     * @return Whether this client can be used to make cross-origin authentication requests (`true`) or it is not allowed to make such requests (`false`).
     * 
     */
    public Boolean crossOriginAuth() {
        return this.crossOriginAuth;
    }
    /**
     * @return URL of the location in your site where the cross-origin verification takes place for the cross-origin auth flow when performing authentication in your own domain instead of Auth0 Universal Login page.
     * 
     */
    public String crossOriginLoc() {
        return this.crossOriginLoc;
    }
    /**
     * @return The content (HTML, CSS, JS) of the custom login page.
     * 
     */
    public String customLoginPage() {
        return this.customLoginPage;
    }
    /**
     * @return Indicates whether a custom login page is to be used.
     * 
     */
    public Boolean customLoginPageOn() {
        return this.customLoginPageOn;
    }
    /**
     * @return Configure and associate an organization with the Client
     * 
     */
    public List<GetClientDefaultOrganization> defaultOrganizations() {
        return this.defaultOrganizations;
    }
    /**
     * @return Description of the purpose of the client.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Encryption used for WS-Fed responses with this client.
     * 
     */
    public Map<String,String> encryptionKey() {
        return this.encryptionKey;
    }
    /**
     * @return HTML form template to be used for WS-Federation.
     * 
     */
    public String formTemplate() {
        return this.formTemplate;
    }
    /**
     * @return Types of grants that this client is authorized to use.
     * 
     */
    public List<String> grantTypes() {
        return this.grantTypes;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Initiate login URI. Must be HTTPS or an empty string.
     * 
     */
    public String initiateLoginUri() {
        return this.initiateLoginUri;
    }
    /**
     * @return Indicates whether this client is a first-party client.Defaults to true from the API
     * 
     */
    public Boolean isFirstParty() {
        return this.isFirstParty;
    }
    /**
     * @return Indicates whether the token endpoint IP header is trusted. Requires the authentication method to be set to `clientSecretPost` or `clientSecretBasic`. Setting this property when creating the resource, will default the authentication method to `clientSecretPost`. To change the authentication method to `clientSecretBasic` use the `auth0.ClientCredentials` resource.
     * 
     */
    public Boolean isTokenEndpointIpHeaderTrusted() {
        return this.isTokenEndpointIpHeaderTrusted;
    }
    /**
     * @return Configuration settings for the JWTs issued for this client.
     * 
     */
    public List<GetClientJwtConfiguration> jwtConfigurations() {
        return this.jwtConfigurations;
    }
    /**
     * @return URL of the logo for the client. Recommended size is 150px x 150px. If none is set, the default badge for the application type will be shown.
     * 
     */
    public String logoUri() {
        return this.logoUri;
    }
    /**
     * @return Additional configuration for native mobile apps.
     * 
     */
    public List<GetClientMobile> mobiles() {
        return this.mobiles;
    }
    /**
     * @return The name of the client. If not provided, `clientId` must be set.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return Configuration settings to toggle native social login for mobile native applications. Once this is set it must stay set, with both resources set to `false` in order to change the `appType`.
     * 
     */
    public List<GetClientNativeSocialLogin> nativeSocialLogins() {
        return this.nativeSocialLogins;
    }
    /**
     * @return Set of URLs that are valid to call back from Auth0 for OIDC backchannel logout. Currently only one URL is allowed.
     * 
     */
    public List<String> oidcBackchannelLogoutUrls() {
        return this.oidcBackchannelLogoutUrls;
    }
    /**
     * @return Indicates whether this client will conform to strict OIDC specifications.
     * 
     */
    public Boolean oidcConformant() {
        return this.oidcConformant;
    }
    /**
     * @return Configure OIDC logout for the Client
     * 
     */
    public List<GetClientOidcLogout> oidcLogouts() {
        return this.oidcLogouts;
    }
    /**
     * @return Defines how to proceed during an authentication transaction when `organizationUsage = &#34;require&#34;`. Can be `noPrompt` (default), `preLoginPrompt` or  `postLoginPrompt`.
     * 
     */
    public String organizationRequireBehavior() {
        return this.organizationRequireBehavior;
    }
    /**
     * @return Defines how to proceed during an authentication transaction with regards to an organization. Can be `deny` (default), `allow` or `require`.
     * 
     */
    public String organizationUsage() {
        return this.organizationUsage;
    }
    /**
     * @return Configuration settings for the refresh tokens issued for this client.
     * 
     */
    public List<GetClientRefreshToken> refreshTokens() {
        return this.refreshTokens;
    }
    /**
     * @return Makes the use of Proof-of-Possession mandatory for this client.
     * 
     */
    public Boolean requireProofOfPossession() {
        return this.requireProofOfPossession;
    }
    /**
     * @return Makes the use of Pushed Authorization Requests mandatory for this client. This feature currently needs to be enabled on the tenant in order to make use of it.
     * 
     */
    public Boolean requirePushedAuthorizationRequests() {
        return this.requirePushedAuthorizationRequests;
    }
    /**
     * @return The identifier of a resource server that client is associated withThis property can be sent only when app*type=resource*server.This property can not be changed, once the client is created.
     * 
     */
    public String resourceServerIdentifier() {
        return this.resourceServerIdentifier;
    }
    public List<GetClientSessionTransfer> sessionTransfers() {
        return this.sessionTransfers;
    }
    /**
     * @return Configuration for JWT-secured Authorization Requests(JAR).
     * 
     */
    public List<GetClientSignedRequestObject> signedRequestObjects() {
        return this.signedRequestObjects;
    }
    /**
     * @return List containing a map of the public cert of the signing key and the public cert of the signing key in PKCS7.
     * 
     */
    public List<Map<String,String>> signingKeys() {
        return this.signingKeys;
    }
    /**
     * @return Indicates whether to skip the confirmation prompt when using non-verifiable callback URIs.
     * 
     */
    public Boolean skipNonVerifiableCallbackUriConfirmationPrompt() {
        return this.skipNonVerifiableCallbackUriConfirmationPrompt;
    }
    /**
     * @return Applies only to SSO clients and determines whether Auth0 will handle Single Sign-On (true) or whether the identity provider will (false).
     * 
     */
    public Boolean sso() {
        return this.sso;
    }
    /**
     * @return Indicates whether or not SSO is disabled.
     * 
     */
    public Boolean ssoDisabled() {
        return this.ssoDisabled;
    }
    /**
     * @return The authentication method for the token endpoint. Results include `none` (public client without a client secret), `clientSecretPost` (client uses HTTP POST parameters), `clientSecretBasic` (client uses HTTP Basic), Managing a client&#39;s authentication method can be done via the `auth0.ClientCredentials` resource.
     * 
     */
    public String tokenEndpointAuthMethod() {
        return this.tokenEndpointAuthMethod;
    }
    /**
     * @return Allows configuration for token exchange
     * 
     */
    public List<GetClientTokenExchange> tokenExchanges() {
        return this.tokenExchanges;
    }
    /**
     * @return The token quota configuration.
     * 
     */
    public List<GetClientTokenQuota> tokenQuotas() {
        return this.tokenQuotas;
    }
    /**
     * @return URLs that represent valid web origins for use with web message response mode.
     * 
     */
    public List<String> webOrigins() {
        return this.webOrigins;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetClientResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetClientAddon> addons;
        private List<String> allowedClients;
        private List<String> allowedLogoutUrls;
        private List<String> allowedOrigins;
        private String appType;
        private List<String> callbacks;
        private List<String> clientAliases;
        private List<GetClientClientAuthenticationMethod> clientAuthenticationMethods;
        private @Nullable String clientId;
        private Map<String,String> clientMetadata;
        private String clientSecret;
        private String complianceLevel;
        private Boolean crossOriginAuth;
        private String crossOriginLoc;
        private String customLoginPage;
        private Boolean customLoginPageOn;
        private List<GetClientDefaultOrganization> defaultOrganizations;
        private String description;
        private Map<String,String> encryptionKey;
        private String formTemplate;
        private List<String> grantTypes;
        private String id;
        private String initiateLoginUri;
        private Boolean isFirstParty;
        private Boolean isTokenEndpointIpHeaderTrusted;
        private List<GetClientJwtConfiguration> jwtConfigurations;
        private String logoUri;
        private List<GetClientMobile> mobiles;
        private @Nullable String name;
        private List<GetClientNativeSocialLogin> nativeSocialLogins;
        private List<String> oidcBackchannelLogoutUrls;
        private Boolean oidcConformant;
        private List<GetClientOidcLogout> oidcLogouts;
        private String organizationRequireBehavior;
        private String organizationUsage;
        private List<GetClientRefreshToken> refreshTokens;
        private Boolean requireProofOfPossession;
        private Boolean requirePushedAuthorizationRequests;
        private String resourceServerIdentifier;
        private List<GetClientSessionTransfer> sessionTransfers;
        private List<GetClientSignedRequestObject> signedRequestObjects;
        private List<Map<String,String>> signingKeys;
        private Boolean skipNonVerifiableCallbackUriConfirmationPrompt;
        private Boolean sso;
        private Boolean ssoDisabled;
        private String tokenEndpointAuthMethod;
        private List<GetClientTokenExchange> tokenExchanges;
        private List<GetClientTokenQuota> tokenQuotas;
        private List<String> webOrigins;
        public Builder() {}
        public Builder(GetClientResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.addons = defaults.addons;
    	      this.allowedClients = defaults.allowedClients;
    	      this.allowedLogoutUrls = defaults.allowedLogoutUrls;
    	      this.allowedOrigins = defaults.allowedOrigins;
    	      this.appType = defaults.appType;
    	      this.callbacks = defaults.callbacks;
    	      this.clientAliases = defaults.clientAliases;
    	      this.clientAuthenticationMethods = defaults.clientAuthenticationMethods;
    	      this.clientId = defaults.clientId;
    	      this.clientMetadata = defaults.clientMetadata;
    	      this.clientSecret = defaults.clientSecret;
    	      this.complianceLevel = defaults.complianceLevel;
    	      this.crossOriginAuth = defaults.crossOriginAuth;
    	      this.crossOriginLoc = defaults.crossOriginLoc;
    	      this.customLoginPage = defaults.customLoginPage;
    	      this.customLoginPageOn = defaults.customLoginPageOn;
    	      this.defaultOrganizations = defaults.defaultOrganizations;
    	      this.description = defaults.description;
    	      this.encryptionKey = defaults.encryptionKey;
    	      this.formTemplate = defaults.formTemplate;
    	      this.grantTypes = defaults.grantTypes;
    	      this.id = defaults.id;
    	      this.initiateLoginUri = defaults.initiateLoginUri;
    	      this.isFirstParty = defaults.isFirstParty;
    	      this.isTokenEndpointIpHeaderTrusted = defaults.isTokenEndpointIpHeaderTrusted;
    	      this.jwtConfigurations = defaults.jwtConfigurations;
    	      this.logoUri = defaults.logoUri;
    	      this.mobiles = defaults.mobiles;
    	      this.name = defaults.name;
    	      this.nativeSocialLogins = defaults.nativeSocialLogins;
    	      this.oidcBackchannelLogoutUrls = defaults.oidcBackchannelLogoutUrls;
    	      this.oidcConformant = defaults.oidcConformant;
    	      this.oidcLogouts = defaults.oidcLogouts;
    	      this.organizationRequireBehavior = defaults.organizationRequireBehavior;
    	      this.organizationUsage = defaults.organizationUsage;
    	      this.refreshTokens = defaults.refreshTokens;
    	      this.requireProofOfPossession = defaults.requireProofOfPossession;
    	      this.requirePushedAuthorizationRequests = defaults.requirePushedAuthorizationRequests;
    	      this.resourceServerIdentifier = defaults.resourceServerIdentifier;
    	      this.sessionTransfers = defaults.sessionTransfers;
    	      this.signedRequestObjects = defaults.signedRequestObjects;
    	      this.signingKeys = defaults.signingKeys;
    	      this.skipNonVerifiableCallbackUriConfirmationPrompt = defaults.skipNonVerifiableCallbackUriConfirmationPrompt;
    	      this.sso = defaults.sso;
    	      this.ssoDisabled = defaults.ssoDisabled;
    	      this.tokenEndpointAuthMethod = defaults.tokenEndpointAuthMethod;
    	      this.tokenExchanges = defaults.tokenExchanges;
    	      this.tokenQuotas = defaults.tokenQuotas;
    	      this.webOrigins = defaults.webOrigins;
        }

        @CustomType.Setter
        public Builder addons(List<GetClientAddon> addons) {
            if (addons == null) {
              throw new MissingRequiredPropertyException("GetClientResult", "addons");
            }
            this.addons = addons;
            return this;
        }
        public Builder addons(GetClientAddon... addons) {
            return addons(List.of(addons));
        }
        @CustomType.Setter
        public Builder allowedClients(List<String> allowedClients) {
            if (allowedClients == null) {
              throw new MissingRequiredPropertyException("GetClientResult", "allowedClients");
            }
            this.allowedClients = allowedClients;
            return this;
        }
        public Builder allowedClients(String... allowedClients) {
            return allowedClients(List.of(allowedClients));
        }
        @CustomType.Setter
        public Builder allowedLogoutUrls(List<String> allowedLogoutUrls) {
            if (allowedLogoutUrls == null) {
              throw new MissingRequiredPropertyException("GetClientResult", "allowedLogoutUrls");
            }
            this.allowedLogoutUrls = allowedLogoutUrls;
            return this;
        }
        public Builder allowedLogoutUrls(String... allowedLogoutUrls) {
            return allowedLogoutUrls(List.of(allowedLogoutUrls));
        }
        @CustomType.Setter
        public Builder allowedOrigins(List<String> allowedOrigins) {
            if (allowedOrigins == null) {
              throw new MissingRequiredPropertyException("GetClientResult", "allowedOrigins");
            }
            this.allowedOrigins = allowedOrigins;
            return this;
        }
        public Builder allowedOrigins(String... allowedOrigins) {
            return allowedOrigins(List.of(allowedOrigins));
        }
        @CustomType.Setter
        public Builder appType(String appType) {
            if (appType == null) {
              throw new MissingRequiredPropertyException("GetClientResult", "appType");
            }
            this.appType = appType;
            return this;
        }
        @CustomType.Setter
        public Builder callbacks(List<String> callbacks) {
            if (callbacks == null) {
              throw new MissingRequiredPropertyException("GetClientResult", "callbacks");
            }
            this.callbacks = callbacks;
            return this;
        }
        public Builder callbacks(String... callbacks) {
            return callbacks(List.of(callbacks));
        }
        @CustomType.Setter
        public Builder clientAliases(List<String> clientAliases) {
            if (clientAliases == null) {
              throw new MissingRequiredPropertyException("GetClientResult", "clientAliases");
            }
            this.clientAliases = clientAliases;
            return this;
        }
        public Builder clientAliases(String... clientAliases) {
            return clientAliases(List.of(clientAliases));
        }
        @CustomType.Setter
        public Builder clientAuthenticationMethods(List<GetClientClientAuthenticationMethod> clientAuthenticationMethods) {
            if (clientAuthenticationMethods == null) {
              throw new MissingRequiredPropertyException("GetClientResult", "clientAuthenticationMethods");
            }
            this.clientAuthenticationMethods = clientAuthenticationMethods;
            return this;
        }
        public Builder clientAuthenticationMethods(GetClientClientAuthenticationMethod... clientAuthenticationMethods) {
            return clientAuthenticationMethods(List.of(clientAuthenticationMethods));
        }
        @CustomType.Setter
        public Builder clientId(@Nullable String clientId) {

            this.clientId = clientId;
            return this;
        }
        @CustomType.Setter
        public Builder clientMetadata(Map<String,String> clientMetadata) {
            if (clientMetadata == null) {
              throw new MissingRequiredPropertyException("GetClientResult", "clientMetadata");
            }
            this.clientMetadata = clientMetadata;
            return this;
        }
        @CustomType.Setter
        public Builder clientSecret(String clientSecret) {
            if (clientSecret == null) {
              throw new MissingRequiredPropertyException("GetClientResult", "clientSecret");
            }
            this.clientSecret = clientSecret;
            return this;
        }
        @CustomType.Setter
        public Builder complianceLevel(String complianceLevel) {
            if (complianceLevel == null) {
              throw new MissingRequiredPropertyException("GetClientResult", "complianceLevel");
            }
            this.complianceLevel = complianceLevel;
            return this;
        }
        @CustomType.Setter
        public Builder crossOriginAuth(Boolean crossOriginAuth) {
            if (crossOriginAuth == null) {
              throw new MissingRequiredPropertyException("GetClientResult", "crossOriginAuth");
            }
            this.crossOriginAuth = crossOriginAuth;
            return this;
        }
        @CustomType.Setter
        public Builder crossOriginLoc(String crossOriginLoc) {
            if (crossOriginLoc == null) {
              throw new MissingRequiredPropertyException("GetClientResult", "crossOriginLoc");
            }
            this.crossOriginLoc = crossOriginLoc;
            return this;
        }
        @CustomType.Setter
        public Builder customLoginPage(String customLoginPage) {
            if (customLoginPage == null) {
              throw new MissingRequiredPropertyException("GetClientResult", "customLoginPage");
            }
            this.customLoginPage = customLoginPage;
            return this;
        }
        @CustomType.Setter
        public Builder customLoginPageOn(Boolean customLoginPageOn) {
            if (customLoginPageOn == null) {
              throw new MissingRequiredPropertyException("GetClientResult", "customLoginPageOn");
            }
            this.customLoginPageOn = customLoginPageOn;
            return this;
        }
        @CustomType.Setter
        public Builder defaultOrganizations(List<GetClientDefaultOrganization> defaultOrganizations) {
            if (defaultOrganizations == null) {
              throw new MissingRequiredPropertyException("GetClientResult", "defaultOrganizations");
            }
            this.defaultOrganizations = defaultOrganizations;
            return this;
        }
        public Builder defaultOrganizations(GetClientDefaultOrganization... defaultOrganizations) {
            return defaultOrganizations(List.of(defaultOrganizations));
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetClientResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder encryptionKey(Map<String,String> encryptionKey) {
            if (encryptionKey == null) {
              throw new MissingRequiredPropertyException("GetClientResult", "encryptionKey");
            }
            this.encryptionKey = encryptionKey;
            return this;
        }
        @CustomType.Setter
        public Builder formTemplate(String formTemplate) {
            if (formTemplate == null) {
              throw new MissingRequiredPropertyException("GetClientResult", "formTemplate");
            }
            this.formTemplate = formTemplate;
            return this;
        }
        @CustomType.Setter
        public Builder grantTypes(List<String> grantTypes) {
            if (grantTypes == null) {
              throw new MissingRequiredPropertyException("GetClientResult", "grantTypes");
            }
            this.grantTypes = grantTypes;
            return this;
        }
        public Builder grantTypes(String... grantTypes) {
            return grantTypes(List.of(grantTypes));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetClientResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder initiateLoginUri(String initiateLoginUri) {
            if (initiateLoginUri == null) {
              throw new MissingRequiredPropertyException("GetClientResult", "initiateLoginUri");
            }
            this.initiateLoginUri = initiateLoginUri;
            return this;
        }
        @CustomType.Setter
        public Builder isFirstParty(Boolean isFirstParty) {
            if (isFirstParty == null) {
              throw new MissingRequiredPropertyException("GetClientResult", "isFirstParty");
            }
            this.isFirstParty = isFirstParty;
            return this;
        }
        @CustomType.Setter
        public Builder isTokenEndpointIpHeaderTrusted(Boolean isTokenEndpointIpHeaderTrusted) {
            if (isTokenEndpointIpHeaderTrusted == null) {
              throw new MissingRequiredPropertyException("GetClientResult", "isTokenEndpointIpHeaderTrusted");
            }
            this.isTokenEndpointIpHeaderTrusted = isTokenEndpointIpHeaderTrusted;
            return this;
        }
        @CustomType.Setter
        public Builder jwtConfigurations(List<GetClientJwtConfiguration> jwtConfigurations) {
            if (jwtConfigurations == null) {
              throw new MissingRequiredPropertyException("GetClientResult", "jwtConfigurations");
            }
            this.jwtConfigurations = jwtConfigurations;
            return this;
        }
        public Builder jwtConfigurations(GetClientJwtConfiguration... jwtConfigurations) {
            return jwtConfigurations(List.of(jwtConfigurations));
        }
        @CustomType.Setter
        public Builder logoUri(String logoUri) {
            if (logoUri == null) {
              throw new MissingRequiredPropertyException("GetClientResult", "logoUri");
            }
            this.logoUri = logoUri;
            return this;
        }
        @CustomType.Setter
        public Builder mobiles(List<GetClientMobile> mobiles) {
            if (mobiles == null) {
              throw new MissingRequiredPropertyException("GetClientResult", "mobiles");
            }
            this.mobiles = mobiles;
            return this;
        }
        public Builder mobiles(GetClientMobile... mobiles) {
            return mobiles(List.of(mobiles));
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder nativeSocialLogins(List<GetClientNativeSocialLogin> nativeSocialLogins) {
            if (nativeSocialLogins == null) {
              throw new MissingRequiredPropertyException("GetClientResult", "nativeSocialLogins");
            }
            this.nativeSocialLogins = nativeSocialLogins;
            return this;
        }
        public Builder nativeSocialLogins(GetClientNativeSocialLogin... nativeSocialLogins) {
            return nativeSocialLogins(List.of(nativeSocialLogins));
        }
        @CustomType.Setter
        public Builder oidcBackchannelLogoutUrls(List<String> oidcBackchannelLogoutUrls) {
            if (oidcBackchannelLogoutUrls == null) {
              throw new MissingRequiredPropertyException("GetClientResult", "oidcBackchannelLogoutUrls");
            }
            this.oidcBackchannelLogoutUrls = oidcBackchannelLogoutUrls;
            return this;
        }
        public Builder oidcBackchannelLogoutUrls(String... oidcBackchannelLogoutUrls) {
            return oidcBackchannelLogoutUrls(List.of(oidcBackchannelLogoutUrls));
        }
        @CustomType.Setter
        public Builder oidcConformant(Boolean oidcConformant) {
            if (oidcConformant == null) {
              throw new MissingRequiredPropertyException("GetClientResult", "oidcConformant");
            }
            this.oidcConformant = oidcConformant;
            return this;
        }
        @CustomType.Setter
        public Builder oidcLogouts(List<GetClientOidcLogout> oidcLogouts) {
            if (oidcLogouts == null) {
              throw new MissingRequiredPropertyException("GetClientResult", "oidcLogouts");
            }
            this.oidcLogouts = oidcLogouts;
            return this;
        }
        public Builder oidcLogouts(GetClientOidcLogout... oidcLogouts) {
            return oidcLogouts(List.of(oidcLogouts));
        }
        @CustomType.Setter
        public Builder organizationRequireBehavior(String organizationRequireBehavior) {
            if (organizationRequireBehavior == null) {
              throw new MissingRequiredPropertyException("GetClientResult", "organizationRequireBehavior");
            }
            this.organizationRequireBehavior = organizationRequireBehavior;
            return this;
        }
        @CustomType.Setter
        public Builder organizationUsage(String organizationUsage) {
            if (organizationUsage == null) {
              throw new MissingRequiredPropertyException("GetClientResult", "organizationUsage");
            }
            this.organizationUsage = organizationUsage;
            return this;
        }
        @CustomType.Setter
        public Builder refreshTokens(List<GetClientRefreshToken> refreshTokens) {
            if (refreshTokens == null) {
              throw new MissingRequiredPropertyException("GetClientResult", "refreshTokens");
            }
            this.refreshTokens = refreshTokens;
            return this;
        }
        public Builder refreshTokens(GetClientRefreshToken... refreshTokens) {
            return refreshTokens(List.of(refreshTokens));
        }
        @CustomType.Setter
        public Builder requireProofOfPossession(Boolean requireProofOfPossession) {
            if (requireProofOfPossession == null) {
              throw new MissingRequiredPropertyException("GetClientResult", "requireProofOfPossession");
            }
            this.requireProofOfPossession = requireProofOfPossession;
            return this;
        }
        @CustomType.Setter
        public Builder requirePushedAuthorizationRequests(Boolean requirePushedAuthorizationRequests) {
            if (requirePushedAuthorizationRequests == null) {
              throw new MissingRequiredPropertyException("GetClientResult", "requirePushedAuthorizationRequests");
            }
            this.requirePushedAuthorizationRequests = requirePushedAuthorizationRequests;
            return this;
        }
        @CustomType.Setter
        public Builder resourceServerIdentifier(String resourceServerIdentifier) {
            if (resourceServerIdentifier == null) {
              throw new MissingRequiredPropertyException("GetClientResult", "resourceServerIdentifier");
            }
            this.resourceServerIdentifier = resourceServerIdentifier;
            return this;
        }
        @CustomType.Setter
        public Builder sessionTransfers(List<GetClientSessionTransfer> sessionTransfers) {
            if (sessionTransfers == null) {
              throw new MissingRequiredPropertyException("GetClientResult", "sessionTransfers");
            }
            this.sessionTransfers = sessionTransfers;
            return this;
        }
        public Builder sessionTransfers(GetClientSessionTransfer... sessionTransfers) {
            return sessionTransfers(List.of(sessionTransfers));
        }
        @CustomType.Setter
        public Builder signedRequestObjects(List<GetClientSignedRequestObject> signedRequestObjects) {
            if (signedRequestObjects == null) {
              throw new MissingRequiredPropertyException("GetClientResult", "signedRequestObjects");
            }
            this.signedRequestObjects = signedRequestObjects;
            return this;
        }
        public Builder signedRequestObjects(GetClientSignedRequestObject... signedRequestObjects) {
            return signedRequestObjects(List.of(signedRequestObjects));
        }
        @CustomType.Setter
        public Builder signingKeys(List<Map<String,String>> signingKeys) {
            if (signingKeys == null) {
              throw new MissingRequiredPropertyException("GetClientResult", "signingKeys");
            }
            this.signingKeys = signingKeys;
            return this;
        }
        @CustomType.Setter
        public Builder skipNonVerifiableCallbackUriConfirmationPrompt(Boolean skipNonVerifiableCallbackUriConfirmationPrompt) {
            if (skipNonVerifiableCallbackUriConfirmationPrompt == null) {
              throw new MissingRequiredPropertyException("GetClientResult", "skipNonVerifiableCallbackUriConfirmationPrompt");
            }
            this.skipNonVerifiableCallbackUriConfirmationPrompt = skipNonVerifiableCallbackUriConfirmationPrompt;
            return this;
        }
        @CustomType.Setter
        public Builder sso(Boolean sso) {
            if (sso == null) {
              throw new MissingRequiredPropertyException("GetClientResult", "sso");
            }
            this.sso = sso;
            return this;
        }
        @CustomType.Setter
        public Builder ssoDisabled(Boolean ssoDisabled) {
            if (ssoDisabled == null) {
              throw new MissingRequiredPropertyException("GetClientResult", "ssoDisabled");
            }
            this.ssoDisabled = ssoDisabled;
            return this;
        }
        @CustomType.Setter
        public Builder tokenEndpointAuthMethod(String tokenEndpointAuthMethod) {
            if (tokenEndpointAuthMethod == null) {
              throw new MissingRequiredPropertyException("GetClientResult", "tokenEndpointAuthMethod");
            }
            this.tokenEndpointAuthMethod = tokenEndpointAuthMethod;
            return this;
        }
        @CustomType.Setter
        public Builder tokenExchanges(List<GetClientTokenExchange> tokenExchanges) {
            if (tokenExchanges == null) {
              throw new MissingRequiredPropertyException("GetClientResult", "tokenExchanges");
            }
            this.tokenExchanges = tokenExchanges;
            return this;
        }
        public Builder tokenExchanges(GetClientTokenExchange... tokenExchanges) {
            return tokenExchanges(List.of(tokenExchanges));
        }
        @CustomType.Setter
        public Builder tokenQuotas(List<GetClientTokenQuota> tokenQuotas) {
            if (tokenQuotas == null) {
              throw new MissingRequiredPropertyException("GetClientResult", "tokenQuotas");
            }
            this.tokenQuotas = tokenQuotas;
            return this;
        }
        public Builder tokenQuotas(GetClientTokenQuota... tokenQuotas) {
            return tokenQuotas(List.of(tokenQuotas));
        }
        @CustomType.Setter
        public Builder webOrigins(List<String> webOrigins) {
            if (webOrigins == null) {
              throw new MissingRequiredPropertyException("GetClientResult", "webOrigins");
            }
            this.webOrigins = webOrigins;
            return this;
        }
        public Builder webOrigins(String... webOrigins) {
            return webOrigins(List.of(webOrigins));
        }
        public GetClientResult build() {
            final var _resultValue = new GetClientResult();
            _resultValue.addons = addons;
            _resultValue.allowedClients = allowedClients;
            _resultValue.allowedLogoutUrls = allowedLogoutUrls;
            _resultValue.allowedOrigins = allowedOrigins;
            _resultValue.appType = appType;
            _resultValue.callbacks = callbacks;
            _resultValue.clientAliases = clientAliases;
            _resultValue.clientAuthenticationMethods = clientAuthenticationMethods;
            _resultValue.clientId = clientId;
            _resultValue.clientMetadata = clientMetadata;
            _resultValue.clientSecret = clientSecret;
            _resultValue.complianceLevel = complianceLevel;
            _resultValue.crossOriginAuth = crossOriginAuth;
            _resultValue.crossOriginLoc = crossOriginLoc;
            _resultValue.customLoginPage = customLoginPage;
            _resultValue.customLoginPageOn = customLoginPageOn;
            _resultValue.defaultOrganizations = defaultOrganizations;
            _resultValue.description = description;
            _resultValue.encryptionKey = encryptionKey;
            _resultValue.formTemplate = formTemplate;
            _resultValue.grantTypes = grantTypes;
            _resultValue.id = id;
            _resultValue.initiateLoginUri = initiateLoginUri;
            _resultValue.isFirstParty = isFirstParty;
            _resultValue.isTokenEndpointIpHeaderTrusted = isTokenEndpointIpHeaderTrusted;
            _resultValue.jwtConfigurations = jwtConfigurations;
            _resultValue.logoUri = logoUri;
            _resultValue.mobiles = mobiles;
            _resultValue.name = name;
            _resultValue.nativeSocialLogins = nativeSocialLogins;
            _resultValue.oidcBackchannelLogoutUrls = oidcBackchannelLogoutUrls;
            _resultValue.oidcConformant = oidcConformant;
            _resultValue.oidcLogouts = oidcLogouts;
            _resultValue.organizationRequireBehavior = organizationRequireBehavior;
            _resultValue.organizationUsage = organizationUsage;
            _resultValue.refreshTokens = refreshTokens;
            _resultValue.requireProofOfPossession = requireProofOfPossession;
            _resultValue.requirePushedAuthorizationRequests = requirePushedAuthorizationRequests;
            _resultValue.resourceServerIdentifier = resourceServerIdentifier;
            _resultValue.sessionTransfers = sessionTransfers;
            _resultValue.signedRequestObjects = signedRequestObjects;
            _resultValue.signingKeys = signingKeys;
            _resultValue.skipNonVerifiableCallbackUriConfirmationPrompt = skipNonVerifiableCallbackUriConfirmationPrompt;
            _resultValue.sso = sso;
            _resultValue.ssoDisabled = ssoDisabled;
            _resultValue.tokenEndpointAuthMethod = tokenEndpointAuthMethod;
            _resultValue.tokenExchanges = tokenExchanges;
            _resultValue.tokenQuotas = tokenQuotas;
            _resultValue.webOrigins = webOrigins;
            return _resultValue;
        }
    }
}
