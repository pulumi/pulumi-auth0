// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.auth0.outputs;

import com.pulumi.auth0.outputs.GetClientAddon;
import com.pulumi.auth0.outputs.GetClientJwtConfiguration;
import com.pulumi.auth0.outputs.GetClientMobile;
import com.pulumi.auth0.outputs.GetClientNativeSocialLogin;
import com.pulumi.auth0.outputs.GetClientRefreshToken;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetClientResult {
    /**
     * @return Addons enabled for this client and their associated configurations.
     * 
     */
    private List<GetClientAddon> addons;
    /**
     * @return List of applications ID&#39;s that will be allowed to make delegation request. By default, all applications will be allowed.
     * 
     */
    private List<String> allowedClients;
    /**
     * @return URLs that Auth0 may redirect to after logout.
     * 
     */
    private List<String> allowedLogoutUrls;
    /**
     * @return URLs that represent valid origins for cross-origin resource sharing. By default, all your callback URLs will be allowed.
     * 
     */
    private List<String> allowedOrigins;
    /**
     * @return Type of application the client represents. Possible values are: `native`, `spa`, `regular_web`, `non_interactive`, `sso_integration`. Specific SSO integrations types accepted as well are: `rms`, `box`, `cloudbees`, `concur`, `dropbox`, `mscrm`, `echosign`, `egnyte`, `newrelic`, `office365`, `salesforce`, `sentry`, `sharepoint`, `slack`, `springcm`, `zendesk`, `zoom`.
     * 
     */
    private String appType;
    /**
     * @return URLs that Auth0 may call back to after a user authenticates for the client. Make sure to specify the protocol (https://) otherwise the callback may fail in some cases. With the exception of custom URI schemes for native clients, all callbacks should use protocol https://.
     * 
     */
    private List<String> callbacks;
    /**
     * @return List of audiences/realms for SAML protocol. Used by the wsfed addon.
     * 
     */
    private List<String> clientAliases;
    /**
     * @return The ID of the client. If not provided, `name` must be set.
     * 
     */
    private @Nullable String clientId;
    /**
     * @return Metadata associated with the client, in the form of an object with string values (max 255 chars). Maximum of 10 metadata properties allowed. Field names (max 255 chars) are alphanumeric and may only include the following special characters: `:,-+=_*?&#34;/\()&lt;&gt;@ [Tab] [Space]`.
     * 
     */
    private Map<String,Object> clientMetadata;
    private String clientSecret;
    /**
     * @return Whether this client can be used to make cross-origin authentication requests (`true`) or it is not allowed to make such requests (`false`). Requires the `coa_toggle_enabled` feature flag to be enabled on the tenant by the support team.
     * 
     */
    private Boolean crossOriginAuth;
    /**
     * @return URL of the location in your site where the cross-origin verification takes place for the cross-origin auth flow when performing authentication in your own domain instead of Auth0 Universal Login page.
     * 
     */
    private String crossOriginLoc;
    /**
     * @return The content (HTML, CSS, JS) of the custom login page.
     * 
     */
    private String customLoginPage;
    /**
     * @return Indicates whether a custom login page is to be used.
     * 
     */
    private Boolean customLoginPageOn;
    /**
     * @return Description of the purpose of the client.
     * 
     */
    private String description;
    /**
     * @return Encryption used for WS-Fed responses with this client.
     * 
     */
    private Map<String,String> encryptionKey;
    /**
     * @return HTML form template to be used for WS-Federation.
     * 
     */
    private String formTemplate;
    /**
     * @return Types of grants that this client is authorized to use.
     * 
     */
    private List<String> grantTypes;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Initiate login URI. Must be HTTPS or an empty string.
     * 
     */
    private String initiateLoginUri;
    /**
     * @return Indicates whether this client is a first-party client.
     * 
     */
    private Boolean isFirstParty;
    /**
     * @return Indicates whether the token endpoint IP header is trusted.
     * 
     */
    private Boolean isTokenEndpointIpHeaderTrusted;
    /**
     * @return Configuration settings for the JWTs issued for this client.
     * 
     */
    private List<GetClientJwtConfiguration> jwtConfigurations;
    /**
     * @return URL of the logo for the client. Recommended size is 150px x 150px. If none is set, the default badge for the application type will be shown.
     * 
     */
    private String logoUri;
    /**
     * @return Additional configuration for native mobile apps.
     * 
     */
    private List<GetClientMobile> mobiles;
    /**
     * @return The name of the client. If not provided, `client_id` must be set.
     * 
     */
    private @Nullable String name;
    /**
     * @return Configuration settings to toggle native social login for mobile native applications. Once this is set it must stay set, with both resources set to `false` in order to change the `app_type`.
     * 
     */
    private List<GetClientNativeSocialLogin> nativeSocialLogins;
    /**
     * @return Set of URLs that are valid to call back from Auth0 for OIDC backchannel logout. Currently only one URL is allowed.
     * 
     */
    private List<String> oidcBackchannelLogoutUrls;
    /**
     * @return Indicates whether this client will conform to strict OIDC specifications.
     * 
     */
    private Boolean oidcConformant;
    /**
     * @return Defines how to proceed during an authentication transaction when `organization_usage = &#34;require&#34;`. Can be `no_prompt` (default) or `pre_login_prompt`.
     * 
     */
    private String organizationRequireBehavior;
    /**
     * @return Defines how to proceed during an authentication transaction with regards to an organization. Can be `deny` (default), `allow` or `require`.
     * 
     */
    private String organizationUsage;
    /**
     * @return Configuration settings for the refresh tokens issued for this client.
     * 
     */
    private List<GetClientRefreshToken> refreshTokens;
    /**
     * @return List containing a map of the public cert of the signing key and the public cert of the signing key in PKCS7.
     * 
     */
    private List<Map<String,Object>> signingKeys;
    /**
     * @return Applies only to SSO clients and determines whether Auth0 will handle Single Sign-On (true) or whether the identity provider will (false).
     * 
     */
    private Boolean sso;
    /**
     * @return Indicates whether or not SSO is disabled.
     * 
     */
    private Boolean ssoDisabled;
    /**
     * @return Defines the requested authentication method for the token endpoint. Options include `none` (public client without a client secret), `client_secret_post` (client uses HTTP POST parameters), `client_secret_basic` (client uses HTTP Basic).
     * 
     */
    private String tokenEndpointAuthMethod;
    /**
     * @return URLs that represent valid web origins for use with web message response mode.
     * 
     */
    private List<String> webOrigins;

    private GetClientResult() {}
    /**
     * @return Addons enabled for this client and their associated configurations.
     * 
     */
    public List<GetClientAddon> addons() {
        return this.addons;
    }
    /**
     * @return List of applications ID&#39;s that will be allowed to make delegation request. By default, all applications will be allowed.
     * 
     */
    public List<String> allowedClients() {
        return this.allowedClients;
    }
    /**
     * @return URLs that Auth0 may redirect to after logout.
     * 
     */
    public List<String> allowedLogoutUrls() {
        return this.allowedLogoutUrls;
    }
    /**
     * @return URLs that represent valid origins for cross-origin resource sharing. By default, all your callback URLs will be allowed.
     * 
     */
    public List<String> allowedOrigins() {
        return this.allowedOrigins;
    }
    /**
     * @return Type of application the client represents. Possible values are: `native`, `spa`, `regular_web`, `non_interactive`, `sso_integration`. Specific SSO integrations types accepted as well are: `rms`, `box`, `cloudbees`, `concur`, `dropbox`, `mscrm`, `echosign`, `egnyte`, `newrelic`, `office365`, `salesforce`, `sentry`, `sharepoint`, `slack`, `springcm`, `zendesk`, `zoom`.
     * 
     */
    public String appType() {
        return this.appType;
    }
    /**
     * @return URLs that Auth0 may call back to after a user authenticates for the client. Make sure to specify the protocol (https://) otherwise the callback may fail in some cases. With the exception of custom URI schemes for native clients, all callbacks should use protocol https://.
     * 
     */
    public List<String> callbacks() {
        return this.callbacks;
    }
    /**
     * @return List of audiences/realms for SAML protocol. Used by the wsfed addon.
     * 
     */
    public List<String> clientAliases() {
        return this.clientAliases;
    }
    /**
     * @return The ID of the client. If not provided, `name` must be set.
     * 
     */
    public Optional<String> clientId() {
        return Optional.ofNullable(this.clientId);
    }
    /**
     * @return Metadata associated with the client, in the form of an object with string values (max 255 chars). Maximum of 10 metadata properties allowed. Field names (max 255 chars) are alphanumeric and may only include the following special characters: `:,-+=_*?&#34;/\()&lt;&gt;@ [Tab] [Space]`.
     * 
     */
    public Map<String,Object> clientMetadata() {
        return this.clientMetadata;
    }
    public String clientSecret() {
        return this.clientSecret;
    }
    /**
     * @return Whether this client can be used to make cross-origin authentication requests (`true`) or it is not allowed to make such requests (`false`). Requires the `coa_toggle_enabled` feature flag to be enabled on the tenant by the support team.
     * 
     */
    public Boolean crossOriginAuth() {
        return this.crossOriginAuth;
    }
    /**
     * @return URL of the location in your site where the cross-origin verification takes place for the cross-origin auth flow when performing authentication in your own domain instead of Auth0 Universal Login page.
     * 
     */
    public String crossOriginLoc() {
        return this.crossOriginLoc;
    }
    /**
     * @return The content (HTML, CSS, JS) of the custom login page.
     * 
     */
    public String customLoginPage() {
        return this.customLoginPage;
    }
    /**
     * @return Indicates whether a custom login page is to be used.
     * 
     */
    public Boolean customLoginPageOn() {
        return this.customLoginPageOn;
    }
    /**
     * @return Description of the purpose of the client.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Encryption used for WS-Fed responses with this client.
     * 
     */
    public Map<String,String> encryptionKey() {
        return this.encryptionKey;
    }
    /**
     * @return HTML form template to be used for WS-Federation.
     * 
     */
    public String formTemplate() {
        return this.formTemplate;
    }
    /**
     * @return Types of grants that this client is authorized to use.
     * 
     */
    public List<String> grantTypes() {
        return this.grantTypes;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Initiate login URI. Must be HTTPS or an empty string.
     * 
     */
    public String initiateLoginUri() {
        return this.initiateLoginUri;
    }
    /**
     * @return Indicates whether this client is a first-party client.
     * 
     */
    public Boolean isFirstParty() {
        return this.isFirstParty;
    }
    /**
     * @return Indicates whether the token endpoint IP header is trusted.
     * 
     */
    public Boolean isTokenEndpointIpHeaderTrusted() {
        return this.isTokenEndpointIpHeaderTrusted;
    }
    /**
     * @return Configuration settings for the JWTs issued for this client.
     * 
     */
    public List<GetClientJwtConfiguration> jwtConfigurations() {
        return this.jwtConfigurations;
    }
    /**
     * @return URL of the logo for the client. Recommended size is 150px x 150px. If none is set, the default badge for the application type will be shown.
     * 
     */
    public String logoUri() {
        return this.logoUri;
    }
    /**
     * @return Additional configuration for native mobile apps.
     * 
     */
    public List<GetClientMobile> mobiles() {
        return this.mobiles;
    }
    /**
     * @return The name of the client. If not provided, `client_id` must be set.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return Configuration settings to toggle native social login for mobile native applications. Once this is set it must stay set, with both resources set to `false` in order to change the `app_type`.
     * 
     */
    public List<GetClientNativeSocialLogin> nativeSocialLogins() {
        return this.nativeSocialLogins;
    }
    /**
     * @return Set of URLs that are valid to call back from Auth0 for OIDC backchannel logout. Currently only one URL is allowed.
     * 
     */
    public List<String> oidcBackchannelLogoutUrls() {
        return this.oidcBackchannelLogoutUrls;
    }
    /**
     * @return Indicates whether this client will conform to strict OIDC specifications.
     * 
     */
    public Boolean oidcConformant() {
        return this.oidcConformant;
    }
    /**
     * @return Defines how to proceed during an authentication transaction when `organization_usage = &#34;require&#34;`. Can be `no_prompt` (default) or `pre_login_prompt`.
     * 
     */
    public String organizationRequireBehavior() {
        return this.organizationRequireBehavior;
    }
    /**
     * @return Defines how to proceed during an authentication transaction with regards to an organization. Can be `deny` (default), `allow` or `require`.
     * 
     */
    public String organizationUsage() {
        return this.organizationUsage;
    }
    /**
     * @return Configuration settings for the refresh tokens issued for this client.
     * 
     */
    public List<GetClientRefreshToken> refreshTokens() {
        return this.refreshTokens;
    }
    /**
     * @return List containing a map of the public cert of the signing key and the public cert of the signing key in PKCS7.
     * 
     */
    public List<Map<String,Object>> signingKeys() {
        return this.signingKeys;
    }
    /**
     * @return Applies only to SSO clients and determines whether Auth0 will handle Single Sign-On (true) or whether the identity provider will (false).
     * 
     */
    public Boolean sso() {
        return this.sso;
    }
    /**
     * @return Indicates whether or not SSO is disabled.
     * 
     */
    public Boolean ssoDisabled() {
        return this.ssoDisabled;
    }
    /**
     * @return Defines the requested authentication method for the token endpoint. Options include `none` (public client without a client secret), `client_secret_post` (client uses HTTP POST parameters), `client_secret_basic` (client uses HTTP Basic).
     * 
     */
    public String tokenEndpointAuthMethod() {
        return this.tokenEndpointAuthMethod;
    }
    /**
     * @return URLs that represent valid web origins for use with web message response mode.
     * 
     */
    public List<String> webOrigins() {
        return this.webOrigins;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetClientResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetClientAddon> addons;
        private List<String> allowedClients;
        private List<String> allowedLogoutUrls;
        private List<String> allowedOrigins;
        private String appType;
        private List<String> callbacks;
        private List<String> clientAliases;
        private @Nullable String clientId;
        private Map<String,Object> clientMetadata;
        private String clientSecret;
        private Boolean crossOriginAuth;
        private String crossOriginLoc;
        private String customLoginPage;
        private Boolean customLoginPageOn;
        private String description;
        private Map<String,String> encryptionKey;
        private String formTemplate;
        private List<String> grantTypes;
        private String id;
        private String initiateLoginUri;
        private Boolean isFirstParty;
        private Boolean isTokenEndpointIpHeaderTrusted;
        private List<GetClientJwtConfiguration> jwtConfigurations;
        private String logoUri;
        private List<GetClientMobile> mobiles;
        private @Nullable String name;
        private List<GetClientNativeSocialLogin> nativeSocialLogins;
        private List<String> oidcBackchannelLogoutUrls;
        private Boolean oidcConformant;
        private String organizationRequireBehavior;
        private String organizationUsage;
        private List<GetClientRefreshToken> refreshTokens;
        private List<Map<String,Object>> signingKeys;
        private Boolean sso;
        private Boolean ssoDisabled;
        private String tokenEndpointAuthMethod;
        private List<String> webOrigins;
        public Builder() {}
        public Builder(GetClientResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.addons = defaults.addons;
    	      this.allowedClients = defaults.allowedClients;
    	      this.allowedLogoutUrls = defaults.allowedLogoutUrls;
    	      this.allowedOrigins = defaults.allowedOrigins;
    	      this.appType = defaults.appType;
    	      this.callbacks = defaults.callbacks;
    	      this.clientAliases = defaults.clientAliases;
    	      this.clientId = defaults.clientId;
    	      this.clientMetadata = defaults.clientMetadata;
    	      this.clientSecret = defaults.clientSecret;
    	      this.crossOriginAuth = defaults.crossOriginAuth;
    	      this.crossOriginLoc = defaults.crossOriginLoc;
    	      this.customLoginPage = defaults.customLoginPage;
    	      this.customLoginPageOn = defaults.customLoginPageOn;
    	      this.description = defaults.description;
    	      this.encryptionKey = defaults.encryptionKey;
    	      this.formTemplate = defaults.formTemplate;
    	      this.grantTypes = defaults.grantTypes;
    	      this.id = defaults.id;
    	      this.initiateLoginUri = defaults.initiateLoginUri;
    	      this.isFirstParty = defaults.isFirstParty;
    	      this.isTokenEndpointIpHeaderTrusted = defaults.isTokenEndpointIpHeaderTrusted;
    	      this.jwtConfigurations = defaults.jwtConfigurations;
    	      this.logoUri = defaults.logoUri;
    	      this.mobiles = defaults.mobiles;
    	      this.name = defaults.name;
    	      this.nativeSocialLogins = defaults.nativeSocialLogins;
    	      this.oidcBackchannelLogoutUrls = defaults.oidcBackchannelLogoutUrls;
    	      this.oidcConformant = defaults.oidcConformant;
    	      this.organizationRequireBehavior = defaults.organizationRequireBehavior;
    	      this.organizationUsage = defaults.organizationUsage;
    	      this.refreshTokens = defaults.refreshTokens;
    	      this.signingKeys = defaults.signingKeys;
    	      this.sso = defaults.sso;
    	      this.ssoDisabled = defaults.ssoDisabled;
    	      this.tokenEndpointAuthMethod = defaults.tokenEndpointAuthMethod;
    	      this.webOrigins = defaults.webOrigins;
        }

        @CustomType.Setter
        public Builder addons(List<GetClientAddon> addons) {
            this.addons = Objects.requireNonNull(addons);
            return this;
        }
        public Builder addons(GetClientAddon... addons) {
            return addons(List.of(addons));
        }
        @CustomType.Setter
        public Builder allowedClients(List<String> allowedClients) {
            this.allowedClients = Objects.requireNonNull(allowedClients);
            return this;
        }
        public Builder allowedClients(String... allowedClients) {
            return allowedClients(List.of(allowedClients));
        }
        @CustomType.Setter
        public Builder allowedLogoutUrls(List<String> allowedLogoutUrls) {
            this.allowedLogoutUrls = Objects.requireNonNull(allowedLogoutUrls);
            return this;
        }
        public Builder allowedLogoutUrls(String... allowedLogoutUrls) {
            return allowedLogoutUrls(List.of(allowedLogoutUrls));
        }
        @CustomType.Setter
        public Builder allowedOrigins(List<String> allowedOrigins) {
            this.allowedOrigins = Objects.requireNonNull(allowedOrigins);
            return this;
        }
        public Builder allowedOrigins(String... allowedOrigins) {
            return allowedOrigins(List.of(allowedOrigins));
        }
        @CustomType.Setter
        public Builder appType(String appType) {
            this.appType = Objects.requireNonNull(appType);
            return this;
        }
        @CustomType.Setter
        public Builder callbacks(List<String> callbacks) {
            this.callbacks = Objects.requireNonNull(callbacks);
            return this;
        }
        public Builder callbacks(String... callbacks) {
            return callbacks(List.of(callbacks));
        }
        @CustomType.Setter
        public Builder clientAliases(List<String> clientAliases) {
            this.clientAliases = Objects.requireNonNull(clientAliases);
            return this;
        }
        public Builder clientAliases(String... clientAliases) {
            return clientAliases(List.of(clientAliases));
        }
        @CustomType.Setter
        public Builder clientId(@Nullable String clientId) {
            this.clientId = clientId;
            return this;
        }
        @CustomType.Setter
        public Builder clientMetadata(Map<String,Object> clientMetadata) {
            this.clientMetadata = Objects.requireNonNull(clientMetadata);
            return this;
        }
        @CustomType.Setter
        public Builder clientSecret(String clientSecret) {
            this.clientSecret = Objects.requireNonNull(clientSecret);
            return this;
        }
        @CustomType.Setter
        public Builder crossOriginAuth(Boolean crossOriginAuth) {
            this.crossOriginAuth = Objects.requireNonNull(crossOriginAuth);
            return this;
        }
        @CustomType.Setter
        public Builder crossOriginLoc(String crossOriginLoc) {
            this.crossOriginLoc = Objects.requireNonNull(crossOriginLoc);
            return this;
        }
        @CustomType.Setter
        public Builder customLoginPage(String customLoginPage) {
            this.customLoginPage = Objects.requireNonNull(customLoginPage);
            return this;
        }
        @CustomType.Setter
        public Builder customLoginPageOn(Boolean customLoginPageOn) {
            this.customLoginPageOn = Objects.requireNonNull(customLoginPageOn);
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder encryptionKey(Map<String,String> encryptionKey) {
            this.encryptionKey = Objects.requireNonNull(encryptionKey);
            return this;
        }
        @CustomType.Setter
        public Builder formTemplate(String formTemplate) {
            this.formTemplate = Objects.requireNonNull(formTemplate);
            return this;
        }
        @CustomType.Setter
        public Builder grantTypes(List<String> grantTypes) {
            this.grantTypes = Objects.requireNonNull(grantTypes);
            return this;
        }
        public Builder grantTypes(String... grantTypes) {
            return grantTypes(List.of(grantTypes));
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder initiateLoginUri(String initiateLoginUri) {
            this.initiateLoginUri = Objects.requireNonNull(initiateLoginUri);
            return this;
        }
        @CustomType.Setter
        public Builder isFirstParty(Boolean isFirstParty) {
            this.isFirstParty = Objects.requireNonNull(isFirstParty);
            return this;
        }
        @CustomType.Setter
        public Builder isTokenEndpointIpHeaderTrusted(Boolean isTokenEndpointIpHeaderTrusted) {
            this.isTokenEndpointIpHeaderTrusted = Objects.requireNonNull(isTokenEndpointIpHeaderTrusted);
            return this;
        }
        @CustomType.Setter
        public Builder jwtConfigurations(List<GetClientJwtConfiguration> jwtConfigurations) {
            this.jwtConfigurations = Objects.requireNonNull(jwtConfigurations);
            return this;
        }
        public Builder jwtConfigurations(GetClientJwtConfiguration... jwtConfigurations) {
            return jwtConfigurations(List.of(jwtConfigurations));
        }
        @CustomType.Setter
        public Builder logoUri(String logoUri) {
            this.logoUri = Objects.requireNonNull(logoUri);
            return this;
        }
        @CustomType.Setter
        public Builder mobiles(List<GetClientMobile> mobiles) {
            this.mobiles = Objects.requireNonNull(mobiles);
            return this;
        }
        public Builder mobiles(GetClientMobile... mobiles) {
            return mobiles(List.of(mobiles));
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder nativeSocialLogins(List<GetClientNativeSocialLogin> nativeSocialLogins) {
            this.nativeSocialLogins = Objects.requireNonNull(nativeSocialLogins);
            return this;
        }
        public Builder nativeSocialLogins(GetClientNativeSocialLogin... nativeSocialLogins) {
            return nativeSocialLogins(List.of(nativeSocialLogins));
        }
        @CustomType.Setter
        public Builder oidcBackchannelLogoutUrls(List<String> oidcBackchannelLogoutUrls) {
            this.oidcBackchannelLogoutUrls = Objects.requireNonNull(oidcBackchannelLogoutUrls);
            return this;
        }
        public Builder oidcBackchannelLogoutUrls(String... oidcBackchannelLogoutUrls) {
            return oidcBackchannelLogoutUrls(List.of(oidcBackchannelLogoutUrls));
        }
        @CustomType.Setter
        public Builder oidcConformant(Boolean oidcConformant) {
            this.oidcConformant = Objects.requireNonNull(oidcConformant);
            return this;
        }
        @CustomType.Setter
        public Builder organizationRequireBehavior(String organizationRequireBehavior) {
            this.organizationRequireBehavior = Objects.requireNonNull(organizationRequireBehavior);
            return this;
        }
        @CustomType.Setter
        public Builder organizationUsage(String organizationUsage) {
            this.organizationUsage = Objects.requireNonNull(organizationUsage);
            return this;
        }
        @CustomType.Setter
        public Builder refreshTokens(List<GetClientRefreshToken> refreshTokens) {
            this.refreshTokens = Objects.requireNonNull(refreshTokens);
            return this;
        }
        public Builder refreshTokens(GetClientRefreshToken... refreshTokens) {
            return refreshTokens(List.of(refreshTokens));
        }
        @CustomType.Setter
        public Builder signingKeys(List<Map<String,Object>> signingKeys) {
            this.signingKeys = Objects.requireNonNull(signingKeys);
            return this;
        }
        @CustomType.Setter
        public Builder sso(Boolean sso) {
            this.sso = Objects.requireNonNull(sso);
            return this;
        }
        @CustomType.Setter
        public Builder ssoDisabled(Boolean ssoDisabled) {
            this.ssoDisabled = Objects.requireNonNull(ssoDisabled);
            return this;
        }
        @CustomType.Setter
        public Builder tokenEndpointAuthMethod(String tokenEndpointAuthMethod) {
            this.tokenEndpointAuthMethod = Objects.requireNonNull(tokenEndpointAuthMethod);
            return this;
        }
        @CustomType.Setter
        public Builder webOrigins(List<String> webOrigins) {
            this.webOrigins = Objects.requireNonNull(webOrigins);
            return this;
        }
        public Builder webOrigins(String... webOrigins) {
            return webOrigins(List.of(webOrigins));
        }
        public GetClientResult build() {
            final var o = new GetClientResult();
            o.addons = addons;
            o.allowedClients = allowedClients;
            o.allowedLogoutUrls = allowedLogoutUrls;
            o.allowedOrigins = allowedOrigins;
            o.appType = appType;
            o.callbacks = callbacks;
            o.clientAliases = clientAliases;
            o.clientId = clientId;
            o.clientMetadata = clientMetadata;
            o.clientSecret = clientSecret;
            o.crossOriginAuth = crossOriginAuth;
            o.crossOriginLoc = crossOriginLoc;
            o.customLoginPage = customLoginPage;
            o.customLoginPageOn = customLoginPageOn;
            o.description = description;
            o.encryptionKey = encryptionKey;
            o.formTemplate = formTemplate;
            o.grantTypes = grantTypes;
            o.id = id;
            o.initiateLoginUri = initiateLoginUri;
            o.isFirstParty = isFirstParty;
            o.isTokenEndpointIpHeaderTrusted = isTokenEndpointIpHeaderTrusted;
            o.jwtConfigurations = jwtConfigurations;
            o.logoUri = logoUri;
            o.mobiles = mobiles;
            o.name = name;
            o.nativeSocialLogins = nativeSocialLogins;
            o.oidcBackchannelLogoutUrls = oidcBackchannelLogoutUrls;
            o.oidcConformant = oidcConformant;
            o.organizationRequireBehavior = organizationRequireBehavior;
            o.organizationUsage = organizationUsage;
            o.refreshTokens = refreshTokens;
            o.signingKeys = signingKeys;
            o.sso = sso;
            o.ssoDisabled = ssoDisabled;
            o.tokenEndpointAuthMethod = tokenEndpointAuthMethod;
            o.webOrigins = webOrigins;
            return o;
        }
    }
}
