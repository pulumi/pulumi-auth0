// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.auth0.inputs;

import com.pulumi.auth0.inputs.EncryptionKeyManagerCustomerProvidedRootKeyArgs;
import com.pulumi.auth0.inputs.EncryptionKeyManagerEncryptionKeyArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EncryptionKeyManagerState extends com.pulumi.resources.ResourceArgs {

    public static final EncryptionKeyManagerState Empty = new EncryptionKeyManagerState();

    /**
     * This attribute is used for provisioning the customer provided root key. To initiate the provisioning process, create a new empty `customer_provided_root_key` block. After applying this, the `public_wrapping_key` can be retreived from the resource, and the new root key should be generated by the customer and wrapped with the wrapping key, then base64-encoded and added as the `wrapped_key` attribute.
     * 
     */
    @Import(name="customerProvidedRootKey")
    private @Nullable Output<EncryptionKeyManagerCustomerProvidedRootKeyArgs> customerProvidedRootKey;

    /**
     * @return This attribute is used for provisioning the customer provided root key. To initiate the provisioning process, create a new empty `customer_provided_root_key` block. After applying this, the `public_wrapping_key` can be retreived from the resource, and the new root key should be generated by the customer and wrapped with the wrapping key, then base64-encoded and added as the `wrapped_key` attribute.
     * 
     */
    public Optional<Output<EncryptionKeyManagerCustomerProvidedRootKeyArgs>> customerProvidedRootKey() {
        return Optional.ofNullable(this.customerProvidedRootKey);
    }

    /**
     * All encryption keys.
     * 
     */
    @Import(name="encryptionKeys")
    private @Nullable Output<List<EncryptionKeyManagerEncryptionKeyArgs>> encryptionKeys;

    /**
     * @return All encryption keys.
     * 
     */
    public Optional<Output<List<EncryptionKeyManagerEncryptionKeyArgs>>> encryptionKeys() {
        return Optional.ofNullable(this.encryptionKeys);
    }

    /**
     * If this value is changed, the encryption keys will be rotated. A UUID is recommended for the `key_rotation_id`.
     * 
     */
    @Import(name="keyRotationId")
    private @Nullable Output<String> keyRotationId;

    /**
     * @return If this value is changed, the encryption keys will be rotated. A UUID is recommended for the `key_rotation_id`.
     * 
     */
    public Optional<Output<String>> keyRotationId() {
        return Optional.ofNullable(this.keyRotationId);
    }

    private EncryptionKeyManagerState() {}

    private EncryptionKeyManagerState(EncryptionKeyManagerState $) {
        this.customerProvidedRootKey = $.customerProvidedRootKey;
        this.encryptionKeys = $.encryptionKeys;
        this.keyRotationId = $.keyRotationId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EncryptionKeyManagerState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EncryptionKeyManagerState $;

        public Builder() {
            $ = new EncryptionKeyManagerState();
        }

        public Builder(EncryptionKeyManagerState defaults) {
            $ = new EncryptionKeyManagerState(Objects.requireNonNull(defaults));
        }

        /**
         * @param customerProvidedRootKey This attribute is used for provisioning the customer provided root key. To initiate the provisioning process, create a new empty `customer_provided_root_key` block. After applying this, the `public_wrapping_key` can be retreived from the resource, and the new root key should be generated by the customer and wrapped with the wrapping key, then base64-encoded and added as the `wrapped_key` attribute.
         * 
         * @return builder
         * 
         */
        public Builder customerProvidedRootKey(@Nullable Output<EncryptionKeyManagerCustomerProvidedRootKeyArgs> customerProvidedRootKey) {
            $.customerProvidedRootKey = customerProvidedRootKey;
            return this;
        }

        /**
         * @param customerProvidedRootKey This attribute is used for provisioning the customer provided root key. To initiate the provisioning process, create a new empty `customer_provided_root_key` block. After applying this, the `public_wrapping_key` can be retreived from the resource, and the new root key should be generated by the customer and wrapped with the wrapping key, then base64-encoded and added as the `wrapped_key` attribute.
         * 
         * @return builder
         * 
         */
        public Builder customerProvidedRootKey(EncryptionKeyManagerCustomerProvidedRootKeyArgs customerProvidedRootKey) {
            return customerProvidedRootKey(Output.of(customerProvidedRootKey));
        }

        /**
         * @param encryptionKeys All encryption keys.
         * 
         * @return builder
         * 
         */
        public Builder encryptionKeys(@Nullable Output<List<EncryptionKeyManagerEncryptionKeyArgs>> encryptionKeys) {
            $.encryptionKeys = encryptionKeys;
            return this;
        }

        /**
         * @param encryptionKeys All encryption keys.
         * 
         * @return builder
         * 
         */
        public Builder encryptionKeys(List<EncryptionKeyManagerEncryptionKeyArgs> encryptionKeys) {
            return encryptionKeys(Output.of(encryptionKeys));
        }

        /**
         * @param encryptionKeys All encryption keys.
         * 
         * @return builder
         * 
         */
        public Builder encryptionKeys(EncryptionKeyManagerEncryptionKeyArgs... encryptionKeys) {
            return encryptionKeys(List.of(encryptionKeys));
        }

        /**
         * @param keyRotationId If this value is changed, the encryption keys will be rotated. A UUID is recommended for the `key_rotation_id`.
         * 
         * @return builder
         * 
         */
        public Builder keyRotationId(@Nullable Output<String> keyRotationId) {
            $.keyRotationId = keyRotationId;
            return this;
        }

        /**
         * @param keyRotationId If this value is changed, the encryption keys will be rotated. A UUID is recommended for the `key_rotation_id`.
         * 
         * @return builder
         * 
         */
        public Builder keyRotationId(String keyRotationId) {
            return keyRotationId(Output.of(keyRotationId));
        }

        public EncryptionKeyManagerState build() {
            return $;
        }
    }

}
