// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.auth0.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AttackProtectionBruteForceProtectionArgs extends com.pulumi.resources.ResourceArgs {

    public static final AttackProtectionBruteForceProtectionArgs Empty = new AttackProtectionBruteForceProtectionArgs();

    /**
     * List of trusted IP addresses that will not have attack protection enforced against them. This field allows you to specify multiple IP addresses, or ranges. You can use IPv4 or IPv6 addresses and CIDR notation.
     * 
     */
    @Import(name="allowlists")
    private @Nullable Output<List<String>> allowlists;

    /**
     * @return List of trusted IP addresses that will not have attack protection enforced against them. This field allows you to specify multiple IP addresses, or ranges. You can use IPv4 or IPv6 addresses and CIDR notation.
     * 
     */
    public Optional<Output<List<String>>> allowlists() {
        return Optional.ofNullable(this.allowlists);
    }

    /**
     * Whether brute force attack protections are active.
     * 
     */
    @Import(name="enabled", required=true)
    private Output<Boolean> enabled;

    /**
     * @return Whether brute force attack protections are active.
     * 
     */
    public Output<Boolean> enabled() {
        return this.enabled;
    }

    /**
     * Maximum number of consecutive failed login attempts from a single user before blocking is triggered. Only available on public tenants.
     * 
     */
    @Import(name="maxAttempts")
    private @Nullable Output<Integer> maxAttempts;

    /**
     * @return Maximum number of consecutive failed login attempts from a single user before blocking is triggered. Only available on public tenants.
     * 
     */
    public Optional<Output<Integer>> maxAttempts() {
        return Optional.ofNullable(this.maxAttempts);
    }

    /**
     * Determines whether the IP address is used when counting failed attempts. Possible values: `count_per_identifier_and_ip` (lockout an account from a given IP Address) or `count_per_identifier` (lockout an account regardless of IP Address).
     * 
     */
    @Import(name="mode")
    private @Nullable Output<String> mode;

    /**
     * @return Determines whether the IP address is used when counting failed attempts. Possible values: `count_per_identifier_and_ip` (lockout an account from a given IP Address) or `count_per_identifier` (lockout an account regardless of IP Address).
     * 
     */
    public Optional<Output<String>> mode() {
        return Optional.ofNullable(this.mode);
    }

    /**
     * Action to take when a brute force protection threshold is violated. Possible values: `block` (block login attempts for a flagged user account), `user_notification` (send an email to user when their account has been blocked).
     * 
     */
    @Import(name="shields")
    private @Nullable Output<List<String>> shields;

    /**
     * @return Action to take when a brute force protection threshold is violated. Possible values: `block` (block login attempts for a flagged user account), `user_notification` (send an email to user when their account has been blocked).
     * 
     */
    public Optional<Output<List<String>>> shields() {
        return Optional.ofNullable(this.shields);
    }

    private AttackProtectionBruteForceProtectionArgs() {}

    private AttackProtectionBruteForceProtectionArgs(AttackProtectionBruteForceProtectionArgs $) {
        this.allowlists = $.allowlists;
        this.enabled = $.enabled;
        this.maxAttempts = $.maxAttempts;
        this.mode = $.mode;
        this.shields = $.shields;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AttackProtectionBruteForceProtectionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AttackProtectionBruteForceProtectionArgs $;

        public Builder() {
            $ = new AttackProtectionBruteForceProtectionArgs();
        }

        public Builder(AttackProtectionBruteForceProtectionArgs defaults) {
            $ = new AttackProtectionBruteForceProtectionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowlists List of trusted IP addresses that will not have attack protection enforced against them. This field allows you to specify multiple IP addresses, or ranges. You can use IPv4 or IPv6 addresses and CIDR notation.
         * 
         * @return builder
         * 
         */
        public Builder allowlists(@Nullable Output<List<String>> allowlists) {
            $.allowlists = allowlists;
            return this;
        }

        /**
         * @param allowlists List of trusted IP addresses that will not have attack protection enforced against them. This field allows you to specify multiple IP addresses, or ranges. You can use IPv4 or IPv6 addresses and CIDR notation.
         * 
         * @return builder
         * 
         */
        public Builder allowlists(List<String> allowlists) {
            return allowlists(Output.of(allowlists));
        }

        /**
         * @param allowlists List of trusted IP addresses that will not have attack protection enforced against them. This field allows you to specify multiple IP addresses, or ranges. You can use IPv4 or IPv6 addresses and CIDR notation.
         * 
         * @return builder
         * 
         */
        public Builder allowlists(String... allowlists) {
            return allowlists(List.of(allowlists));
        }

        /**
         * @param enabled Whether brute force attack protections are active.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Whether brute force attack protections are active.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param maxAttempts Maximum number of consecutive failed login attempts from a single user before blocking is triggered. Only available on public tenants.
         * 
         * @return builder
         * 
         */
        public Builder maxAttempts(@Nullable Output<Integer> maxAttempts) {
            $.maxAttempts = maxAttempts;
            return this;
        }

        /**
         * @param maxAttempts Maximum number of consecutive failed login attempts from a single user before blocking is triggered. Only available on public tenants.
         * 
         * @return builder
         * 
         */
        public Builder maxAttempts(Integer maxAttempts) {
            return maxAttempts(Output.of(maxAttempts));
        }

        /**
         * @param mode Determines whether the IP address is used when counting failed attempts. Possible values: `count_per_identifier_and_ip` (lockout an account from a given IP Address) or `count_per_identifier` (lockout an account regardless of IP Address).
         * 
         * @return builder
         * 
         */
        public Builder mode(@Nullable Output<String> mode) {
            $.mode = mode;
            return this;
        }

        /**
         * @param mode Determines whether the IP address is used when counting failed attempts. Possible values: `count_per_identifier_and_ip` (lockout an account from a given IP Address) or `count_per_identifier` (lockout an account regardless of IP Address).
         * 
         * @return builder
         * 
         */
        public Builder mode(String mode) {
            return mode(Output.of(mode));
        }

        /**
         * @param shields Action to take when a brute force protection threshold is violated. Possible values: `block` (block login attempts for a flagged user account), `user_notification` (send an email to user when their account has been blocked).
         * 
         * @return builder
         * 
         */
        public Builder shields(@Nullable Output<List<String>> shields) {
            $.shields = shields;
            return this;
        }

        /**
         * @param shields Action to take when a brute force protection threshold is violated. Possible values: `block` (block login attempts for a flagged user account), `user_notification` (send an email to user when their account has been blocked).
         * 
         * @return builder
         * 
         */
        public Builder shields(List<String> shields) {
            return shields(Output.of(shields));
        }

        /**
         * @param shields Action to take when a brute force protection threshold is violated. Possible values: `block` (block login attempts for a flagged user account), `user_notification` (send an email to user when their account has been blocked).
         * 
         * @return builder
         * 
         */
        public Builder shields(String... shields) {
            return shields(List.of(shields));
        }

        public AttackProtectionBruteForceProtectionArgs build() {
            $.enabled = Objects.requireNonNull($.enabled, "expected parameter 'enabled' to be non-null");
            return $;
        }
    }

}
