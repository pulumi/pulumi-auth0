// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.auth0;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ClientGrantArgs extends com.pulumi.resources.ResourceArgs {

    public static final ClientGrantArgs Empty = new ClientGrantArgs();

    /**
     * If enabled, any organization can be used with this grant. If disabled (default), the grant must be explicitly assigned to the desired organizations.
     * 
     */
    @Import(name="allowAnyOrganization")
    private @Nullable Output<Boolean> allowAnyOrganization;

    /**
     * @return If enabled, any organization can be used with this grant. If disabled (default), the grant must be explicitly assigned to the desired organizations.
     * 
     */
    public Optional<Output<Boolean>> allowAnyOrganization() {
        return Optional.ofNullable(this.allowAnyOrganization);
    }

    /**
     * Audience or API Identifier for this grant.
     * 
     */
    @Import(name="audience", required=true)
    private Output<String> audience;

    /**
     * @return Audience or API Identifier for this grant.
     * 
     */
    public Output<String> audience() {
        return this.audience;
    }

    /**
     * ID of the client for this grant.
     * 
     */
    @Import(name="clientId", required=true)
    private Output<String> clientId;

    /**
     * @return ID of the client for this grant.
     * 
     */
    public Output<String> clientId() {
        return this.clientId;
    }

    /**
     * Defines whether organizations can be used with client credentials exchanges for this grant. (defaults to deny when not defined)
     * 
     */
    @Import(name="organizationUsage")
    private @Nullable Output<String> organizationUsage;

    /**
     * @return Defines whether organizations can be used with client credentials exchanges for this grant. (defaults to deny when not defined)
     * 
     */
    public Optional<Output<String>> organizationUsage() {
        return Optional.ofNullable(this.organizationUsage);
    }

    /**
     * Permissions (scopes) included in this grant.
     * 
     */
    @Import(name="scopes", required=true)
    private Output<List<String>> scopes;

    /**
     * @return Permissions (scopes) included in this grant.
     * 
     */
    public Output<List<String>> scopes() {
        return this.scopes;
    }

    private ClientGrantArgs() {}

    private ClientGrantArgs(ClientGrantArgs $) {
        this.allowAnyOrganization = $.allowAnyOrganization;
        this.audience = $.audience;
        this.clientId = $.clientId;
        this.organizationUsage = $.organizationUsage;
        this.scopes = $.scopes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClientGrantArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClientGrantArgs $;

        public Builder() {
            $ = new ClientGrantArgs();
        }

        public Builder(ClientGrantArgs defaults) {
            $ = new ClientGrantArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowAnyOrganization If enabled, any organization can be used with this grant. If disabled (default), the grant must be explicitly assigned to the desired organizations.
         * 
         * @return builder
         * 
         */
        public Builder allowAnyOrganization(@Nullable Output<Boolean> allowAnyOrganization) {
            $.allowAnyOrganization = allowAnyOrganization;
            return this;
        }

        /**
         * @param allowAnyOrganization If enabled, any organization can be used with this grant. If disabled (default), the grant must be explicitly assigned to the desired organizations.
         * 
         * @return builder
         * 
         */
        public Builder allowAnyOrganization(Boolean allowAnyOrganization) {
            return allowAnyOrganization(Output.of(allowAnyOrganization));
        }

        /**
         * @param audience Audience or API Identifier for this grant.
         * 
         * @return builder
         * 
         */
        public Builder audience(Output<String> audience) {
            $.audience = audience;
            return this;
        }

        /**
         * @param audience Audience or API Identifier for this grant.
         * 
         * @return builder
         * 
         */
        public Builder audience(String audience) {
            return audience(Output.of(audience));
        }

        /**
         * @param clientId ID of the client for this grant.
         * 
         * @return builder
         * 
         */
        public Builder clientId(Output<String> clientId) {
            $.clientId = clientId;
            return this;
        }

        /**
         * @param clientId ID of the client for this grant.
         * 
         * @return builder
         * 
         */
        public Builder clientId(String clientId) {
            return clientId(Output.of(clientId));
        }

        /**
         * @param organizationUsage Defines whether organizations can be used with client credentials exchanges for this grant. (defaults to deny when not defined)
         * 
         * @return builder
         * 
         */
        public Builder organizationUsage(@Nullable Output<String> organizationUsage) {
            $.organizationUsage = organizationUsage;
            return this;
        }

        /**
         * @param organizationUsage Defines whether organizations can be used with client credentials exchanges for this grant. (defaults to deny when not defined)
         * 
         * @return builder
         * 
         */
        public Builder organizationUsage(String organizationUsage) {
            return organizationUsage(Output.of(organizationUsage));
        }

        /**
         * @param scopes Permissions (scopes) included in this grant.
         * 
         * @return builder
         * 
         */
        public Builder scopes(Output<List<String>> scopes) {
            $.scopes = scopes;
            return this;
        }

        /**
         * @param scopes Permissions (scopes) included in this grant.
         * 
         * @return builder
         * 
         */
        public Builder scopes(List<String> scopes) {
            return scopes(Output.of(scopes));
        }

        /**
         * @param scopes Permissions (scopes) included in this grant.
         * 
         * @return builder
         * 
         */
        public Builder scopes(String... scopes) {
            return scopes(List.of(scopes));
        }

        public ClientGrantArgs build() {
            if ($.audience == null) {
                throw new MissingRequiredPropertyException("ClientGrantArgs", "audience");
            }
            if ($.clientId == null) {
                throw new MissingRequiredPropertyException("ClientGrantArgs", "clientId");
            }
            if ($.scopes == null) {
                throw new MissingRequiredPropertyException("ClientGrantArgs", "scopes");
            }
            return $;
        }
    }

}
